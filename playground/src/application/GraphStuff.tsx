import { dotPoints, verticalLineBarPoints } from "@thingco/graphviz";
import { Graph, useGraph } from "@thingco/graphviz-web";
import React from "react";

// prettier-ignore
const dummyCoordinates = {
    "roadSpeeds
    "pointSpeeds": [ 2, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 3, 3, 4, 6, 10, 13, 13, 12, 8, 6, 6, 8, 8, 8, 8, 9, 8, 11, 5, 5, 5, 10, 13, 14, 15, 16, 21, 22, 24, 32, 34, 36, 40, 42, 42, 42, 41, 40, 40, 40, 40, 40, 40, 40, 40, 39, 39, 39, 38, 38, 38, 37, 37, 34, 29, 27, 24, 22, 22, 22, 22, 23, 29, 32, 34, 35, 38, 40, 40, 41, 41, 42, 42, 42, 40, 40, 38, 36, 35, 35, 35, 36, 37, 39, 41, 42, 43, 43, 43, 42, 43, 43, 43, 43, 43, 44, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 46, 46, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 47, 46, 44, 42, 38, 35, 34, 34, 34, 35, 34, 34, 34, 34, 36, 37, 40, 43, 46, 47, 49, 51, 52, 52, 52, 51, 52, 52, 52, 52, 53, 53, 53, 51, 49, 48, 47, 45, 43, 39, 34, 30, 24, 19, 14, 10, 6, 2, 1, 1, 2, 6, 12, 16, 21, 26, 28, 30, 31, 31, 36, 39, 43, 47, 49, 51, 52, 52, 52, 51, 49, 47, 44, 41, 37, 33, 30, 30, 32, 34, 36, 36, 38, 39, 40, 42, 42, 42, 41, 39, 37, 35, 35, 34, 34, 35, 35, 35, 35, 38, 42, 45, 47, 49, 51, 54, 55, 56, 57, 58, 58, 58, 57, 58, 58, 58, 58, 58, 61, 62, 64, 65, 66, 67, 68, 68, 67, 67, 67, 67, 67, 67, 67, 67, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 67, 67, 67, 67, 68, 68, 68, 68, 68, 69, 69, 70, 70, 72, 73, 74, 75, 76, 76, 75, 75, 75, 75, 71, 70, 70, 70, 68, 68, 67, 67, 68, 68, 67, 67, 66, 66, 66, 66, 66, 68, 70, 72, 73, 73, 75, 76, 77, 79, 80, 80, 80, 79, 80, 80, 80, 80, 80, 81, 81, 81, 82, 82, 83, 86, 87, 87, 88, 89, 90, 91, 91, 91, 92, 93, 93, 93, 92, 93, 93, 93, 93, 93, 93, 93, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 93, 93, 93, 94, 94, 94, 94, 94, 94, 94, 94, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 94, 93, 91, 89, 88, 86, 84, 84, 83, 82, 82, 84, 83, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 83, 83, 83, 86, 87, 87, 88, 88, 87, 87, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 87, 87, 87, 86, 84, 83, 82, 82, 82, 83, 82, 82, 82, 82, 82, 85, 85, 85, 84, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 86, 86, 86, 87, 87, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 87, 86, 86, 85, 85, 85, 85, 85, 85, 85, 85, 86, 86, 87, 87, 88, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 90, 90, 90, 90, 90, 91, 91, 91, 91, 92, 93, 94, 94, 95, 95, 95, 96, 96, 97, 97, 97, 98, 98, 98, 98, 98, 98, 99, 100, 100, 100, 100, 100, 100, 100, 100, 100, 101, 101, 101, 100, 100, 100, 100, 100, 100, 100, 99, 99, 98, 98, 98, 97, 97, 97, 97, 97, 96, 96, 95, 95, 95, 95, 95, 95, 95, 95, 95, 94, 92, 90, 88, 86, 85, 83, 82, 80, 79, 78, 77, 77, 76, 75, 74, 73, 72, 70, 68, 68, 67, 66, 66, 65, 64, 62, 61, 60, 58, 57, 55, 53, 50, 49, 46, 41, 35, 29, 23, 23, 23, 27, 30, 29, 29, 27, 27, 23, 20, 16, 9, 8, 5, 2, 1, 1, 2, 4, 7, 12, 13, 17, 21, 23, 25, 27, 28, 29, 30, 31, 32, 32, 34, 35, 36, 38, 39, 39, 39, 37, 36, 36, 33, 33, 35, 37, 40, 41, 41, 43, 45, 46, 48, 49, 55, 57, 59, 62, 63, 66, 68, 72, 75, 80, 85, 86, 88, 90, 92, 94, 97, 100, 103, 104, 105, 105, 105, 104, 105, 105, 105, 105, 105, 105, 102, 100, 100, 99, 98, 97, 97, 96, 95, 94, 94, 94, 95, 95, 95, 95, 95, 95, 94, 94, 94, 94, 91, 91, 90, 88, 87, 87, 86, 86, 87, 87, 87, 87, 86, 86, 86, 86, 87, 87, 89, 91, 91, 92, 92, 91, 91, 92, 92, 92, 94, 93, 95, 94, 94, 95, 95, 96, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 98, 98, 98, 98, 98, 98, 98, 98, 99, 99, 99, 99, 99, 99, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 98, 96, 94, 93, 91, 89, 85, 81, 75, 74, 68, 66, 57, 52, 48, 44, 42, 42, 43, 44, 44, 44, 44, 43, 43, 42, 38, 36, 36, 36, 38, 38, 38, 41, 41, 42, 43, 43, 44, 42, 43, 43, 44, 44, 44, 44, 45, 45, 45, 46, 46, 47, 47, 48, 48, 48, 46, 44, 43, 41, 39, 37, 35, 33, 33, 34, 35, 37, 37, 37, 40, 40, 41, 40, 42, 44, 44, 44, 45, 44, 44, 44, 45, 45, 45, 42, 41, 40, 37, 33, 32, 30, 28, 28, 27, 27, 28, 32, 34, 37, 39, 41, 42, 43, 44, 45, 45, 45, 44, 45, 45, 45, 46, 46, 46, 46, 47, 47, 47, 47, 47, 47, 44, 42, 41, 38, 35, 31, 31, 31, 32, 34, 35, 35, 35, 35, 35, 37, 36, 39, 40, 40, 43, 44, 45, 46, 47, 48, 49, 50, 50, 48, 49, 50, 50, 50, 50, 50, 50, 47, 46, 44, 42, 39, 37, 35, 33, 28, 28, 31, 34, 34, 34, 34, 34, 34, 35, 35, 36, 38, 40, 42, 44, 44, 43, 42, 42, 43, 43, 41, 37, 33, 30, 26, 25, 25, 26, 31, 35, 38, 41, 43, 44, 45, 46, 47, 48, 49, 50, 50, 50, 48, 48, 48, 48, 48, 48, 48, 46, 44, 41, 39, 36, 32, 32, 32, 35, 37, 37, 36, 35, 32, 30, 30, 29, 29, 25, 19, 14, 14, 18, 22, 22, 20, 18, 15, 13, 12, 11, 11, 11, 12, 13, 13, 16, 16, 15, 15, 15, 12, 12, 11, 11, 10, 10, 7, 6, 5, 5, 8, 10, 10, 7, 5, 2, 0, 0, 1, 2, 2, 2, 2, 3, 3, 2, 2, 1, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 11, 12, 17, 17, 16, 15, 14, 12, 11, 9, 9, 9, 11, 14, 17, 17, 17, 15, 12, 9, 7, 7, 7, 11, 11, 13, 16, 20, 24, 25, 25, 24, 22, 17, 13, 10, 10, 11, 14, 14, 13, 13, 11, 8, 8, 10, 13, 15, 18, 22, 25, 27, 29, 29, 32, 33, 35, 36, 38, 39, 40, 40, 41, 42, 42, 43, 43, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 46, 47, 47, 47, 46, 46, 46, 45, 41, 36, 29, 21, 14, 8, 7, 7, 12, 17, 19, 21, 22, 25, 27, 30, 31, 33, 35, 39, 42, 45, 47, 49, 49, 49, 49, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 52, 53, 53, 53, 52, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 52, 52, 52, 52, 52, 55, 55, 55, 54, 54, 53, 50, 46, 42, 39, 36, 30, 25, 27, 27, 32, 39, 43, 44, 46, 47, 51, 56, 57, 59, 60, 60, 61, 61, 60, 60, 60, 59, 56, 55, 53, 52, 52, 53, 55, 55, 55, 55, 57, 58, 58, 58, 57, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 57, 55, 53, 53, 47, 40, 34, 32, 32, 34, 35, 37, 36, 35, 35, 35, 37, 38, 37, 37, 37, 37, 37, 40, 42, 44, 44, 45, 46, 47, 50, 50, 50, 50, 50, 50, 50, 50, 48, 43, 38, 30, 25, 25, 26, 30, 33, 35, 38, 41, 43, 44, 44, 45, 45, 44, 44, 44, 44, 44, 45, 45, 45, 45, 44, 44, 42, 39, 32, 28, 23, 20, 20, 23, 25, 30, 33, 35, 36, 36, 34, 32, 30, 27, 22, 16, 9, 8, 8, 10, 12, 15, 16, 18],
};

interface CoordinateIndex {
	index: number;
	setIndex: (i: number) => void;
}

const CoordinateIndexContext = React.createContext<CoordinateIndex | null>(null);

export const CoordinateIndexProvider = ({
	children,
}: {
	children: React.ReactNode;
}): JSX.Element => {
	const [index, setIndex] = React.useState<number>(0);

	return (
		<CoordinateIndexContext.Provider value={{ index, setIndex }}>
			{children}
		</CoordinateIndexContext.Provider>
	);
};

function useCoordinateIndex(): CoordinateIndex {
	const val = React.useContext(CoordinateIndexContext);

	if (!val) throw new Error("Nee context here mayte");

	return val;
}

const style: React.CSSProperties = {
	fill: "none",
	stroke: "black",
	strokeLinecap: "round",
	strokeWidth: 1,
};

const SpeedGraphLineBars = ({
	roadSpeeds,
	pointSpeeds,
}: {
	roadSpeeds: number[];
	pointSpeeds: number[];
}): JSX.Element => {
	const graph = useGraph();
	const lineColours = pointSpeeds.map((speed, i) => (speed <= roadSpeeds[i] ? "green" : "red"));

	const lines = verticalLineBarPoints(graph).map(({ x1, x2, y1, y2 }, i) => (
		<line
			stroke={lineColours[i]}
			key={`${x1}${x2}${y1}${y2}${i}`}
			x1={x1}
			x2={x2}
			y1={y1}
			y2={y2}
		/>
	));

	return <g style={style}>{lines}</g>;
};

export const Speedgraph = (): JSX.Element => {
	const { index, setIndex } = useCoordinateIndex();

	return (
		<Graph
			yAxisValues={dummyCoordinates.pointSpeeds}
			yAxisMin={0}
			yAxisMax={Math.max(
				Math.max(...dummyCoordinates.pointSpeeds),
				Math.max(...dummyCoordinates.roadSpeeds)
			)}
			yAxisSize={400}
			yAxisStep={20}
			xAxisScale={4}
		>
			<Graph.CanvasWithScrubber height="200px" currentDataPointIndex={index}>
				<Graph.XAxis showSteps={false} />
				<Graph.YAxis />
				<Graph.YAxisGridLines style={{ opacity: 0.25 }} />
				<SpeedGraphLineBars
					pointSpeeds={dummyCoordinates.pointSpeeds}
					roadSpeeds={dummyCoordinates.roadSpeeds}
				/>
				<Graph.ScrubberHorizontal
					currentDataPointIndex={index}
					setCurrentDataPointIndex={setIndex}
					startPosition="left"
					thumbStyle={{
						stroke: "black",
						strokeWidth: 4,
					}}
				/>
			</Graph.CanvasWithScrubber>
		</Graph>
	);
};

const ScoreProgressDots = ({
	r,
	style = {},
}: {
	r: number;
	style?: React.CSSProperties;
}): JSX.Element => {
	const graph = useGraph();
	const [selectedIdx, setSelectedIdx] = React.useState<number | null>(null);

	const dots = dotPoints(graph).map(({ x, y }, i) => (
		<circle
			key={i}
			cx={x}
			cy={y}
			r={r}
			style={{
				pointerEvents: "all",
				strokeWidth: Math.floor(r / 2),
				stroke: selectedIdx === i ? "black" : "none",
				fill: selectedIdx === i ? "white" : "black",
			}}
			onClick={() => {
				setSelectedIdx(selectedIdx === i ? null : i);
			}}
		/>
	));
	return <g style={style}>{dots}</g>;
};

const ScoreProgress = (): JSX.Element => (
	<Graph
		yAxisValues={[72, 97, 97, 77, 86]}
		yAxisMax={100}
		yAxisSize={300}
		yAxisStep={10}
		xAxisSize={200}
	>
		<Graph.Canvas style={{ pointerEvents: "none" }}>
			<Graph.YAxisGridLines style={{ opacity: 0.75 }} />
			<Graph.YAxisAnnotations />
			<Graph.XAxisAnnotations />
			<Graph.DataLine style={{ strokeWidth: 2 }} />
			<ScoreProgressDots r={6} />
		</Graph.Canvas>
	</Graph>
);

export const GraphStuff = (): JSX.Element => (
	<section style={{ backgroundColor: "white", padding: "1rem" }}>
		<h1>Graph stuff!</h1>
		<CoordinateIndexProvider>
			<Speedgraph />
		</CoordinateIndexProvider>
		<figure style={{ width: 200, height: 400 }}>
			<ScoreProgress />
		</figure>
	</section>
);
