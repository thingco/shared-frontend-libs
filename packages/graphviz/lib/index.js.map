{"version":3,"file":"index.js","sources":["../src/create-graph.ts","../src/projections/svg.ts"],"sourcesContent":["export type GraphConstructor = Partial<GraphData>;\n\nexport interface GraphData {\n\t/** The array of data to be plotted on the y axis. */\n\tyAxisValues: number[];\n\t/**\n\t * The defined length of the y axis, as in a literal [unitless, but is pixels]\n\t * value for length.\n\t */\n\tyAxisSize: number;\n\t/**\n\t * The MINIMUM value to be used on the y axis. By default, this will be zero, but it is\n\t * necessary to keep it configurable to allow for data that includes negative values.\n\t */\n\tyAxisMin: number;\n\t/**\n\t * The MAXIMUM value to be used on the y axis. By default this will be the maximum of the\n\t * y axis values, but it is necessary to keep it configurable to allow for spacing at\n\t * extremities of this graph axis.\n\t */\n\tyAxisMax: number;\n\t/**\n\t * The scaling factor for the y axis. Used to project coordinates onto the rendered graph.\n\t */\n\tyAxisScale: number;\n\t/**\n\t * The step used to generate positions for annotations and grid lines on the y axis.\n\t */\n\tyAxisStep: number;\n\t/**\n\t * The array of data to be plotted on the x axis. For a horizontal series graph, this\n\t * will be just the indices of the yAxisValues data.\n\t */\n\txAxisValues: number[];\n\t/**\n\t * The defined length of the x axis, as in a literal [unitless, but is pixels]\n\t * value for length.\n\t */\n\txAxisSize: number;\n\t/**\n\t * The MINIMUM value to be used on the x axis. By default, this will be zero, but it is\n\t * necessary to keep it configurable to allow for data that includes negative values.\n\t */\n\txAxisMin: number;\n\t/**\n\t * The MAXIMUM value to be used on the x axis. By default this will be the maximum of the\n\t * x axis values, but it is necessary to keep it configurable to allow for spacing at\n\t * extremities of this graph axis.\n\t */\n\txAxisMax: number;\n\t/**\n\t * The scaling factor for the x axis. Used to project coordinates onto the rendered graph.\n\t */\n\txAxisScale: number;\n\t/**\n\t * The step used to generate positions for annotations and grid lines on the x axis.\n\t */\n\txAxisStep: number;\n}\n\nexport function createGraph({\n\txAxisMax,\n\txAxisMin = 0,\n\txAxisSize,\n\txAxisScale,\n\txAxisStep = 1,\n\txAxisValues,\n\tyAxisMax,\n\tyAxisMin = 0,\n\tyAxisSize,\n\tyAxisScale,\n\tyAxisStep = 1,\n\tyAxisValues,\n}: GraphConstructor): GraphData {\n\t/**\n\t * If neither the x and y axis values are provided, cannot create the graph:\n\t */\n\tif (!xAxisValues && !yAxisValues) {\n\t\tthrow new Error(\n\t\t\t\"ONE OR BOTH x- or y-axis value arrays MUST be provided to create the graph.\"\n\t\t);\n\t}\n\n\t/**\n\t * If only one of the x/y axis values are provided, the other axis can be assumed\n\t * to be the length of the other (_ie_ the values are plotted on a range/in series):\n\t */\n\tif (yAxisValues && !xAxisValues) {\n\t\txAxisValues = Array.from(\n\t\t\t{ length: yAxisValues.length },\n\t\t\t(_, i) => i + xAxisMin\n\t\t);\n\t} else if (xAxisValues && !yAxisValues) {\n\t\tyAxisValues = Array.from(\n\t\t\t{ length: xAxisValues.length },\n\t\t\t(_, i) => i + yAxisMin\n\t\t);\n\t}\n\t// Once both of the arrays of values are populated, can infer the max values if not present:\n\txAxisMax = xAxisMax ?? Math.max(...(xAxisValues as number[]));\n\tyAxisMax = yAxisMax ?? Math.max(...(yAxisValues as number[]));\n\n\t/**\n\t * If the x-axis size is *not* provided, then the scale *must* be\n\t * provided, otherwise the size of the axis cannot be calculated:\n\t */\n\tif ((!xAxisSize && !xAxisScale) || (xAxisSize && xAxisScale)) {\n\t\tthrow new Error(\n\t\t\t\"EITHER the x-axis size OR the x-axis scale must be provided up-front or this graph axis cannot be plotted.\"\n\t\t);\n\t} else if (xAxisSize && !xAxisScale) {\n\t\txAxisScale = calculateScale(xAxisSize, xAxisMin, xAxisMax);\n\t} else if (!xAxisSize && xAxisScale) {\n\t\txAxisSize = calculateSize(xAxisScale, xAxisMin, xAxisMax);\n\t}\n\n\t/**\n\t * If the y-axis size is *not* provided, then the scale *must* be\n\t * provided, otherwise the size of the axis cannot be calculated:\n\t */\n\tif ((!yAxisSize && !yAxisScale) || (yAxisSize && yAxisScale)) {\n\t\tthrow new Error(\n\t\t\t\"EITHER the y-axis size OR the y-axis scale must be provided up-front or this graph axis cannot be plotted.\"\n\t\t);\n\t} else if (yAxisSize && !yAxisScale) {\n\t\tyAxisScale = calculateScale(yAxisSize, yAxisMin, yAxisMax);\n\t} else if (!yAxisSize && yAxisScale) {\n\t\tyAxisSize = calculateSize(yAxisScale, yAxisMin, yAxisMax);\n\t}\n\n\t// NOTE REGARDING TYPECASTING: All branches have been covered to populate values,\n\t// they cannot be undefined at this point, compiler is being overstrict:\n\tconst graphData = {\n\t\txAxisMax,\n\t\txAxisMin,\n\t\txAxisScale: xAxisScale as number,\n\t\txAxisSize: xAxisSize as number,\n\t\txAxisStep,\n\t\txAxisValues: xAxisValues as number[],\n\t\tyAxisMax,\n\t\tyAxisMin,\n\t\tyAxisScale: yAxisScale as number,\n\t\tyAxisSize: yAxisSize as number,\n\t\tyAxisStep,\n\t\tyAxisValues: yAxisValues as number[],\n\t};\n\tconsole.log(graphData);\n\treturn graphData;\n}\n\n/**\n * Examples:\n *\n * size 100 min 0 max 10 scale 10\n * size 100 min -50 max 50 scale 10\n * size 100 min -25 max 75 scale 10\n * size 100 min -100 max 0 scale 10\n *\n * @param {number} axisSize\n * @param {number} axisMin\n * @param {number} axisMax\n * @returns {number}\n */\nexport function calculateScale(\n\taxisSize: number,\n\taxisMin: number,\n\taxisMax: number\n): number {\n\treturn axisSize / (axisMax - axisMin);\n}\n\n/**\n * Examples:\n *\n * scale 10 min 0 max 10 size 100\n * scale 10 min -50 max 50 size 100\n * scale 10 min -25 max 75 size 100\n * scale 10 min -100 max 0 size 100\n *\n * @param {number} axisScale\n * @param {number} axisMin\n * @param {number} axisMax\n * @returns {number}\n */\nexport function calculateSize(\n\taxisScale: number,\n\taxisMin: number,\n\taxisMax: number\n): number {\n\treturn (axisMax - axisMin) * axisScale;\n}\n\n/**\n * Generate an array of x axis coordinates for stepped points along that axis. Used to place annotations.\n *\n * @param {GraphData} graphData\n * @param {number} graphData.xAxisMin\n * @param {number} graphData.xAxisMax\n * @param {number} graphData.xAxisStep\n * @returns {number[]}\n */\nexport function steppedXAxisValues({\n\txAxisMin,\n\txAxisMax,\n\txAxisStep,\n}: GraphData): number[] {\n\tconst vals = [];\n\n\t// TODO currently ignoring graphs that only have data with negative values that should be plotted\n\t// starting on a value < 0.\n\tif (xAxisMin > 0) {\n\t\tfor (let v = xAxisMin; v <= xAxisMax; v += xAxisStep) vals.push(v);\n\t\treturn vals;\n\t} else {\n\t\tvals.push(0);\n\t\tfor (let v = 0 - xAxisStep; v >= xAxisMin; v -= xAxisStep) vals.unshift(v);\n\t\tfor (let v = 0 + xAxisStep; v <= xAxisMax; v += xAxisStep) vals.push(v);\n\t\treturn vals;\n\t}\n}\n\n/**\n * Generate an array of y axis coordinates for stepped points along that axis. Used to place annotations.\n *\n * @param {GraphData} graphData\n * @param {number} graphData.yAxisMin\n * @param {number} graphData.yAxisMax\n * @param {number} graphData.yAxisStep\n * @returns {number[]}\n */\nexport function steppedYAxisValues({\n\tyAxisMin,\n\tyAxisMax,\n\tyAxisStep,\n}: GraphData): number[] {\n\tconst vals = [];\n\n\t// TODO currently ignoring graphs that only have data with negative values that should be plotted\n\t// starting on a value < 0.\n\tif (yAxisMin > 0) {\n\t\tfor (let v = yAxisMin; v <= yAxisMax; v += yAxisStep) vals.push(v);\n\t\treturn vals;\n\t} else {\n\t\tvals.push(0);\n\t\tfor (let v = 0 - yAxisStep; v >= yAxisMin; v -= yAxisStep) vals.unshift(v);\n\t\tfor (let v = 0 + yAxisStep; v <= yAxisMax; v += yAxisStep) vals.push(v);\n\t\treturn vals;\n\t}\n}\n","import { GraphData, steppedXAxisValues, steppedYAxisValues } from \"../create-graph\";\n\nexport interface LineCoordinate {\n\tx1: number;\n\tx2: number;\n\ty1: number;\n\ty2: number;\n}\nexport interface PointCoordinate {\n\tx: number;\n\ty: number;\n}\n\nexport type VerticalAlignment = \"top\" | \"zero\" | \"bottom\";\nexport type HorizontalAlignment = \"left\" | \"zero\" | \"right\";\n\n/**\n * Examples:\n * coord at 5, size 100, min 0, max 10, scale 10 = 50\n * coord at 5, size 100, min -5, max 5, scale 10 = 100\n * coord at 5, size 100, min -2.5, max 7.5, scale 10 = 75\n * coord at -5, size 100, min -10, max 0, scale 10 = 50\n *\n * If the axis min value is greater than zero, then floor it to zero\n * in the calculation: the graph is plotted on the SVG from a zero\n * point regardless of what the data is.\n *\n * coord at 0, size 100, min 1, max 10, scale 11.1 = 0\n *\n * REVIEW if there are only negative values, there may be an issue here, TEST.\n *\n * @param {GraphData} graphData\n * @param {number} graphData.xAxisMin\n * @param {number} graphData.xAxisScale\n * @param {number} axisCoord\n * @returns {number}\n */\nexport function projectXCoordToSVG(\n\t{ xAxisMin, xAxisScale }: GraphData,\n\taxisCoord: number\n): number {\n\treturn (axisCoord - xAxisMin) * xAxisScale;\n}\n\nexport const px = projectXCoordToSVG;\n\n/**\n * As `projectXCoordToSVG`, except that the resulting coordinate is inverted based on the y axis\n * size. This is because SVG coordinates are plotted from the top left, not the bottom left.\n * Leaving the coordinates as-is would cause the graph to be flipped vertically.\n *\n * Examples:\n * coord at 5, size 100, min 0, max 10, scale 10 = 100 - 50 = 50\n * coord at 5, size 100, min -5, max 5, scale 10 = 100 - 100 = 0\n * coord at 5, size 100, min -2.5, max 7.5, scale 10 = 100 - 75 = 25\n * coord at -5, size 100, min -10, max 0, scale 10 = 100 - 50 = 50\n *\n * @param {GraphData} graphData\n * @param {number} graphData.yAxisMin\n * @param {number} graphData.yAxisScale\n * @param {number} graphData.yAxisSize\n * @param {number} axisCoord\n * @returns {number}\n */\nexport function projectYCoordToSVG(\n\t{ yAxisMin, yAxisScale, yAxisSize }: GraphData,\n\taxisCoord: number\n): number {\n\treturn yAxisSize - (axisCoord - yAxisMin) * yAxisScale;\n}\n\nexport const py = projectYCoordToSVG;\n\nexport function verticalLineFullHeight(\n\tgraph: GraphData,\n\txPosition: number\n): LineCoordinate {\n\treturn {\n\t\tx1: px(graph, xPosition),\n\t\tx2: px(graph, xPosition),\n\t\ty1: 0,\n\t\ty2: graph.yAxisSize,\n\t};\n}\n\nexport function horizontalLineFullWidth(\n\tgraph: GraphData,\n\tyPosition: number\n): LineCoordinate {\n\treturn {\n\t\tx1: 0,\n\t\tx2: graph.xAxisSize,\n\t\ty1: py(graph, yPosition),\n\t\ty2: py(graph, yPosition),\n\t};\n}\n\nexport function yAxis(graph: GraphData): LineCoordinate {\n\tconst xPlacement = graph.xAxisMin > 0 ? graph.xAxisMin : 0;\n\n\treturn verticalLineFullHeight(graph, xPlacement);\n}\n\nexport function yAxisAnnotations(graph: GraphData): PointCoordinate[] {\n\tconst xPlacement = graph.xAxisMin > 0 ? graph.xAxisMin : 0;\n\n\treturn steppedYAxisValues(graph).map((v) => ({\n\t\tx: px(graph, xPlacement),\n\t\ty: py(graph, v),\n\t}));\n}\n\nexport function horizontalGridLines(graph: GraphData): LineCoordinate[] {\n\treturn steppedYAxisValues(graph).map((v) =>\n\t\thorizontalLineFullWidth(graph, v)\n\t);\n}\n\nexport function yAxisSteps(graph: GraphData): LineCoordinate[] {\n\treturn steppedYAxisValues(graph).map((v) => ({\n\t\tx1: px(graph, 0),\n\t\tx2: px(graph, 0) - 2,\n\t\ty1: py(graph, v),\n\t\ty2: py(graph, v),\n\t}));\n}\n\nexport function xAxis(graph: GraphData, position = \"bottom\"): LineCoordinate {\n\treturn horizontalLineFullWidth(\n\t\tgraph,\n\t\tposition === \"top\" ? graph.yAxisMax : 0\n\t);\n}\n\nexport function xAxisSteps(\n\tgraph: GraphData,\n\tposition: VerticalAlignment\n): LineCoordinate[] {\n\treturn steppedXAxisValues(graph).map((v) => ({\n\t\tx1: px(graph, v),\n\t\tx2: px(graph, v),\n\t\ty1: position === \"top\" ? py(graph, graph.yAxisMax) : py(graph, 0),\n\t\ty2: position === \"top\" ? py(graph, graph.yAxisMax) - 2 : py(graph, 0) + 2,\n\t}));\n}\n\nexport function xAxisAnnotations(\n\tgraph: GraphData,\n\tposition = \"bottom\"\n): PointCoordinate[] {\n\treturn steppedXAxisValues(graph).map((v) => ({\n\t\tx: px(graph, v),\n\t\ty: py(graph, position === \"top\" ? graph.yAxisMax : 0),\n\t}));\n}\n\nexport function verticalGridlines(graph: GraphData): LineCoordinate[] {\n\treturn steppedXAxisValues(graph).map((v) => verticalLineFullHeight(graph, v));\n}\n\nexport function dotPoints(graph: GraphData): PointCoordinate[] {\n\treturn graph.yAxisValues.map((v, i) => ({\n\t\tx: px(graph, graph.xAxisValues[i]),\n\t\ty: py(graph, v),\n\t}));\n}\n\nexport function linePoints(graph: GraphData): string {\n\treturn graph.yAxisValues\n\t\t.map((v, i) => `${px(graph, graph.xAxisValues[i])},${py(graph, v)}`)\n\t\t.join(\" \");\n}\n\nexport function horizontalLineBarPoints(graph: GraphData): LineCoordinate[] {\n\treturn graph.xAxisValues.map((v, i) => ({\n\t\tx1: px(graph, 0),\n\t\tx2: px(graph, v),\n\t\ty1: py(graph, graph.yAxisValues[i]),\n\t\ty2: py(graph, graph.yAxisValues[i]),\n\t}));\n}\n\nexport function verticalLineBarPoints(graph: GraphData): LineCoordinate[] {\n\treturn graph.yAxisValues.map((v, i) => ({\n\t\tx1: px(graph, graph.xAxisValues[i]),\n\t\tx2: px(graph, graph.xAxisValues[i]),\n\t\ty1: py(graph, 0),\n\t\ty2: py(graph, v),\n\t}));\n}\n"],"names":["createGraph","xAxisMax","xAxisMin","xAxisSize","xAxisScale","xAxisStep","xAxisValues","yAxisMax","yAxisMin","yAxisSize","yAxisScale","yAxisStep","yAxisValues","Error","Array","from","length","_","i","Math","max","calculateScale","calculateSize","graphData","console","log","axisSize","axisMin","axisMax","axisScale","steppedXAxisValues","vals","v","push","unshift","steppedYAxisValues","projectXCoordToSVG","axisCoord","px","projectYCoordToSVG","py","verticalLineFullHeight","graph","xPosition","x1","x2","y1","y2","horizontalLineFullWidth","yPosition","yAxis","yAxisAnnotations","xPlacement","map","x","y","horizontalGridLines","yAxisSteps","xAxis","position","xAxisSteps","xAxisAnnotations","verticalGridlines","dotPoints","linePoints","join","horizontalLineBarPoints","verticalLineBarPoints"],"mappings":"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"}