{"version":3,"file":"index.js","sources":["../src/create-graph.ts","../src/projections/svg.ts"],"sourcesContent":["export type GraphConstructor = Partial<GraphData>;\n\nexport interface GraphData {\n\t/** The array of data to be plotted on the y axis. */\n\tyAxisValues: number[];\n\t/**\n\t * The defined length of the y axis, as in a literal [unitless, but is pixels]\n\t * value for length.\n\t */\n\tyAxisSize: number;\n\t/**\n\t * The MINIMUM value to be used on the y axis. By default, this will be zero, but it is\n\t * necessary to keep it configurable to allow for data that includes negative values.\n\t */\n\tyAxisMin: number;\n\t/**\n\t * The MAXIMUM value to be used on the y axis. By default this will be the maximum of the\n\t * y axis values, but it is necessary to keep it configurable to allow for spacing at\n\t * extremities of this graph axis.\n\t */\n\tyAxisMax: number;\n\t/**\n\t * The scaling factor for the y axis. Used to project coordinates onto the rendered graph.\n\t */\n\tyAxisScale: number;\n\t/**\n\t * The step used to generate positions for annotations and grid lines on the y axis.\n\t */\n\tyAxisStep: number;\n\t/**\n\t * The array of data to be plotted on the x axis. For a horizontal series graph, this\n\t * will be just the indices of the yAxisValues data.\n\t */\n\txAxisValues: number[];\n\t/**\n\t * The defined length of the x axis, as in a literal [unitless, but is pixels]\n\t * value for length.\n\t */\n\txAxisSize: number;\n\t/**\n\t * The MINIMUM value to be used on the x axis. By default, this will be zero, but it is\n\t * necessary to keep it configurable to allow for data that includes negative values.\n\t */\n\txAxisMin: number;\n\t/**\n\t * The MAXIMUM value to be used on the x axis. By default this will be the maximum of the\n\t * x axis values, but it is necessary to keep it configurable to allow for spacing at\n\t * extremities of this graph axis.\n\t */\n\txAxisMax: number;\n\t/**\n\t * The scaling factor for the x axis. Used to project coordinates onto the rendered graph.\n\t */\n\txAxisScale: number;\n\t/**\n\t * The step used to generate positions for annotations and grid lines on the x axis.\n\t */\n\txAxisStep: number;\n}\n\nexport function createGraph({\n\txAxisMax,\n\txAxisMin = 0,\n\txAxisSize,\n\txAxisScale,\n\txAxisStep = 1,\n\txAxisValues,\n\tyAxisMax,\n\tyAxisMin = 0,\n\tyAxisSize,\n\tyAxisScale,\n\tyAxisStep = 1,\n\tyAxisValues,\n}: GraphConstructor): GraphData {\n\t/**\n\t * If neither the x and y axis values are provided, cannot create the graph:\n\t */\n\tif (!xAxisValues && !yAxisValues) {\n\t\tthrow new Error(\n\t\t\t\"ONE OR BOTH x- or y-axis value arrays MUST be provided to create the graph.\"\n\t\t);\n\t}\n\n\t/**\n\t * If only one of the x/y axis values are provided, the other axis can be assumed\n\t * to be the length of the other (_ie_ the values are plotted on a range/in series):\n\t */\n\tif (yAxisValues && !xAxisValues) {\n\t\txAxisValues = Array.from(\n\t\t\t{ length: yAxisValues.length },\n\t\t\t(_, i) => i + xAxisMin\n\t\t);\n\t} else if (xAxisValues && !yAxisValues) {\n\t\tyAxisValues = Array.from(\n\t\t\t{ length: xAxisValues.length },\n\t\t\t(_, i) => i + yAxisMin\n\t\t);\n\t}\n\t// Once both of the arrays of values are populated, can infer the max values if not present:\n\txAxisMax = xAxisMax ?? Math.max(...(xAxisValues as number[]));\n\tyAxisMax = yAxisMax ?? Math.max(...(yAxisValues as number[]));\n\n\t/**\n\t * If the x-axis size is *not* provided, then the scale *must* be\n\t * provided, otherwise the size of the axis cannot be calculated:\n\t */\n\tif ((!xAxisSize && !xAxisScale) || (xAxisSize && xAxisScale)) {\n\t\tthrow new Error(\n\t\t\t\"EITHER the x-axis size OR the x-axis scale must be provided up-front or this graph axis cannot be plotted.\"\n\t\t);\n\t} else if (xAxisSize && !xAxisScale) {\n\t\txAxisScale = calculateScale(xAxisSize, xAxisMin, xAxisMax);\n\t} else if (!xAxisSize && xAxisScale) {\n\t\txAxisSize = calculateSize(xAxisScale, xAxisMin, xAxisMax);\n\t}\n\n\t/**\n\t * If the y-axis size is *not* provided, then the scale *must* be\n\t * provided, otherwise the size of the axis cannot be calculated:\n\t */\n\tif ((!yAxisSize && !yAxisScale) || (yAxisSize && yAxisScale)) {\n\t\tthrow new Error(\n\t\t\t\"EITHER the y-axis size OR the y-axis scale must be provided up-front or this graph axis cannot be plotted.\"\n\t\t);\n\t} else if (yAxisSize && !yAxisScale) {\n\t\tyAxisScale = calculateScale(yAxisSize, yAxisMin, yAxisMax);\n\t} else if (!yAxisSize && yAxisScale) {\n\t\tyAxisSize = calculateSize(yAxisScale, yAxisMin, yAxisMax);\n\t}\n\n\t// NOTE REGARDING TYPECASTING: All branches have been covered to populate values,\n\t// they cannot be undefined at this point, compiler is being overstrict:\n\treturn {\n\t\txAxisMax,\n\t\txAxisMin,\n\t\txAxisScale: xAxisScale as number,\n\t\txAxisSize: xAxisSize as number,\n\t\txAxisStep,\n\t\txAxisValues: xAxisValues as number[],\n\t\tyAxisMax,\n\t\tyAxisMin,\n\t\tyAxisScale: yAxisScale as number,\n\t\tyAxisSize: yAxisSize as number,\n\t\tyAxisStep,\n\t\tyAxisValues: yAxisValues as number[],\n\t};\n}\n\n/**\n * Examples:\n *\n * size 100 min 0 max 10 scale 10\n * size 100 min -50 max 50 scale 10\n * size 100 min -25 max 75 scale 10\n * size 100 min -100 max 0 scale 10\n *\n * @param {number} axisSize\n * @param {number} axisMin\n * @param {number} axisMax\n * @returns {number}\n */\nexport function calculateScale(\n\taxisSize: number,\n\taxisMin: number,\n\taxisMax: number\n): number {\n\treturn axisSize / (axisMax - axisMin);\n}\n\n/**\n * Examples:\n *\n * scale 10 min 0 max 10 size 100\n * scale 10 min -50 max 50 size 100\n * scale 10 min -25 max 75 size 100\n * scale 10 min -100 max 0 size 100\n *\n * @param {number} axisScale\n * @param {number} axisMin\n * @param {number} axisMax\n * @returns {number}\n */\nexport function calculateSize(\n\taxisScale: number,\n\taxisMin: number,\n\taxisMax: number\n): number {\n\treturn (axisMax - axisMin) * axisScale;\n}\n\n/**\n * Generate an array of x axis coordinates for stepped points along that axis. Used to place annotations.\n *\n * @param {GraphData} graphData\n * @param {number} graphData.xAxisMin\n * @param {number} graphData.xAxisMax\n * @param {number} graphData.xAxisStep\n * @returns {number[]}\n */\nexport function steppedXAxisValues({\n\txAxisMin,\n\txAxisMax,\n\txAxisStep,\n}: GraphData): number[] {\n\tconst vals = [];\n\n\t// TODO currently ignoring graphs that only have data with negative values that should be plotted\n\t// starting on a value < 0.\n\tif (xAxisMin > 0) {\n\t\tfor (let v = xAxisMin; v <= xAxisMax; v += xAxisStep) vals.push(v);\n\t\treturn vals;\n\t} else {\n\t\tvals.push(0);\n\t\tfor (let v = 0 - xAxisStep; v >= xAxisMin; v -= xAxisStep) vals.unshift(v);\n\t\tfor (let v = 0 + xAxisStep; v <= xAxisMax; v += xAxisStep) vals.push(v);\n\t\treturn vals;\n\t}\n}\n\n/**\n * Generate an array of y axis coordinates for stepped points along that axis. Used to place annotations.\n *\n * @param {GraphData} graphData\n * @param {number} graphData.yAxisMin\n * @param {number} graphData.yAxisMax\n * @param {number} graphData.yAxisStep\n * @returns {number[]}\n */\nexport function steppedYAxisValues({\n\tyAxisMin,\n\tyAxisMax,\n\tyAxisStep,\n}: GraphData): number[] {\n\tconst vals = [];\n\n\t// TODO currently ignoring graphs that only have data with negative values that should be plotted\n\t// starting on a value < 0.\n\tif (yAxisMin > 0) {\n\t\tfor (let v = yAxisMin; v <= yAxisMax; v += yAxisStep) vals.push(v);\n\t\treturn vals;\n\t} else {\n\t\tvals.push(0);\n\t\tfor (let v = 0 - yAxisStep; v >= yAxisMin; v -= yAxisStep) vals.unshift(v);\n\t\tfor (let v = 0 + yAxisStep; v <= yAxisMax; v += yAxisStep) vals.push(v);\n\t\treturn vals;\n\t}\n}\n","import { GraphData, steppedXAxisValues, steppedYAxisValues } from \"../create-graph\";\n\nexport interface LineCoordinate {\n\tx1: number;\n\tx2: number;\n\ty1: number;\n\ty2: number;\n}\nexport interface PointCoordinate {\n\tx: number;\n\ty: number;\n}\n\nexport type VerticalAlignment = \"top\" | \"zero\" | \"bottom\";\nexport type HorizontalAlignment = \"left\" | \"zero\" | \"right\";\n\n/**\n * Examples:\n * coord at 5, size 100, min 0, max 10, scale 10 = 50\n * coord at 5, size 100, min -5, max 5, scale 10 = 100\n * coord at 5, size 100, min -2.5, max 7.5, scale 10 = 75\n * coord at -5, size 100, min -10, max 0, scale 10 = 50\n *\n * If the axis min value is greater than zero, then floor it to zero\n * in the calculation: the graph is plotted on the SVG from a zero\n * point regardless of what the data is.\n *\n * coord at 0, size 100, min 1, max 10, scale 11.1 = 0\n *\n * REVIEW if there are only negative values, there may be an issue here, TEST.\n *\n * @param {GraphData} graphData\n * @param {number} graphData.xAxisMin\n * @param {number} graphData.xAxisScale\n * @param {number} axisCoord\n * @returns {number}\n */\nexport function projectXCoordToSVG(\n\t{ xAxisMin, xAxisScale }: GraphData,\n\taxisCoord: number\n): number {\n\treturn (axisCoord - xAxisMin) * xAxisScale;\n}\n\nexport const px = projectXCoordToSVG;\n\n/**\n * As `projectXCoordToSVG`, except that the resulting coordinate is inverted based on the y axis\n * size. This is because SVG coordinates are plotted from the top left, not the bottom left.\n * Leaving the coordinates as-is would cause the graph to be flipped vertically.\n *\n * Examples:\n * coord at 5, size 100, min 0, max 10, scale 10 = 100 - 50 = 50\n * coord at 5, size 100, min -5, max 5, scale 10 = 100 - 100 = 0\n * coord at 5, size 100, min -2.5, max 7.5, scale 10 = 100 - 75 = 25\n * coord at -5, size 100, min -10, max 0, scale 10 = 100 - 50 = 50\n *\n * @param {GraphData} graphData\n * @param {number} graphData.yAxisMin\n * @param {number} graphData.yAxisScale\n * @param {number} graphData.yAxisSize\n * @param {number} axisCoord\n * @returns {number}\n */\nexport function projectYCoordToSVG(\n\t{ yAxisMin, yAxisScale, yAxisSize }: GraphData,\n\taxisCoord: number\n): number {\n\treturn yAxisSize - (axisCoord - yAxisMin) * yAxisScale;\n}\n\nexport const py = projectYCoordToSVG;\n\nexport function verticalLineFullHeight(\n\tgraph: GraphData,\n\txPosition: number\n): LineCoordinate {\n\treturn {\n\t\tx1: px(graph, xPosition),\n\t\tx2: px(graph, xPosition),\n\t\ty1: 0,\n\t\ty2: graph.yAxisSize,\n\t};\n}\n\nexport function horizontalLineFullWidth(\n\tgraph: GraphData,\n\tyPosition: number\n): LineCoordinate {\n\treturn {\n\t\tx1: 0,\n\t\tx2: graph.xAxisSize,\n\t\ty1: py(graph, yPosition),\n\t\ty2: py(graph, yPosition),\n\t};\n}\n\nexport function yAxis(graph: GraphData): LineCoordinate {\n\tconst xPlacement = graph.xAxisMin > 0 ? graph.xAxisMin : 0;\n\n\treturn verticalLineFullHeight(graph, xPlacement);\n}\n\nexport function yAxisAnnotations(graph: GraphData): PointCoordinate[] {\n\tconst xPlacement = graph.xAxisMin > 0 ? graph.xAxisMin : 0;\n\n\treturn steppedYAxisValues(graph).map((v) => ({\n\t\tx: px(graph, xPlacement),\n\t\ty: py(graph, v),\n\t}));\n}\n\nexport function horizontalGridLines(graph: GraphData): LineCoordinate[] {\n\treturn steppedYAxisValues(graph).map((v) =>\n\t\thorizontalLineFullWidth(graph, v)\n\t);\n}\n\nexport function yAxisSteps(graph: GraphData): LineCoordinate[] {\n\treturn steppedYAxisValues(graph).map((v) => ({\n\t\tx1: px(graph, 0),\n\t\tx2: px(graph, 0) - 2,\n\t\ty1: py(graph, v),\n\t\ty2: py(graph, v),\n\t}));\n}\n\nexport function xAxis(graph: GraphData, position = \"bottom\"): LineCoordinate {\n\treturn horizontalLineFullWidth(\n\t\tgraph,\n\t\tposition === \"top\" ? graph.yAxisMax : 0\n\t);\n}\n\nexport function xAxisSteps(\n\tgraph: GraphData,\n\tposition: VerticalAlignment\n): LineCoordinate[] {\n\treturn steppedXAxisValues(graph).map((v) => ({\n\t\tx1: px(graph, v),\n\t\tx2: px(graph, v),\n\t\ty1: position === \"top\" ? py(graph, graph.yAxisMax) : py(graph, 0),\n\t\ty2: position === \"top\" ? py(graph, graph.yAxisMax) - 2 : py(graph, 0) + 2,\n\t}));\n}\n\nexport function xAxisAnnotations(\n\tgraph: GraphData,\n\tposition = \"bottom\"\n): PointCoordinate[] {\n\treturn steppedXAxisValues(graph).map((v) => ({\n\t\tx: px(graph, v),\n\t\ty: py(graph, position === \"top\" ? graph.yAxisMax : 0),\n\t}));\n}\n\nexport function verticalGridlines(graph: GraphData): LineCoordinate[] {\n\treturn steppedXAxisValues(graph).map((v) => verticalLineFullHeight(graph, v));\n}\n\nexport function dotPoints(graph: GraphData): PointCoordinate[] {\n\treturn graph.yAxisValues.map((v, i) => ({\n\t\tx: px(graph, graph.xAxisValues[i]),\n\t\ty: py(graph, v),\n\t}));\n}\n\nexport function linePoints(graph: GraphData): string {\n\treturn graph.yAxisValues\n\t\t.map((v, i) => `${px(graph, graph.xAxisValues[i])},${py(graph, v)}`)\n\t\t.join(\" \");\n}\n\nexport function horizontalLineBarPoints(graph: GraphData): LineCoordinate[] {\n\treturn graph.xAxisValues.map((v, i) => ({\n\t\tx1: px(graph, 0),\n\t\tx2: px(graph, v),\n\t\ty1: py(graph, graph.yAxisValues[i]),\n\t\ty2: py(graph, graph.yAxisValues[i]),\n\t}));\n}\n\nexport function verticalLineBarPoints(graph: GraphData): LineCoordinate[] {\n\treturn graph.yAxisValues.map((v, i) => ({\n\t\tx1: px(graph, graph.xAxisValues[i]),\n\t\tx2: px(graph, graph.xAxisValues[i]),\n\t\ty1: py(graph, 0),\n\t\ty2: py(graph, v),\n\t}));\n}\n"],"names":[],"mappings":"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"}