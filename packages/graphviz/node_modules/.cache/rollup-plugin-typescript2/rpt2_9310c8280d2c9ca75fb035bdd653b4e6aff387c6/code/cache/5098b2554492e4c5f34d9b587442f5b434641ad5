{"code":"export function createGraph({ xAxisMax, xAxisMin = 0, xAxisSize, xAxisScale, xAxisStep = 1, xAxisValues, yAxisMax, yAxisMin = 0, yAxisSize, yAxisScale, yAxisStep = 1, yAxisValues, }) {\r\n    /**\r\n     * If neither the x and y axis values are provided, cannot create the graph:\r\n     */\r\n    if (!xAxisValues && !yAxisValues) {\r\n        throw new Error(\"ONE OR BOTH x- or y-axis value arrays MUST be provided to create the graph.\");\r\n    }\r\n    /**\r\n     * If only one of the x/y axis values are provided, the other axis can be assumed\r\n     * to be the length of the other (_ie_ the values are plotted on a range/in series):\r\n     */\r\n    if (yAxisValues && !xAxisValues) {\r\n        xAxisValues = Array.from({ length: yAxisValues.length }, (_, i) => i + xAxisMin);\r\n    }\r\n    else if (xAxisValues && !yAxisValues) {\r\n        yAxisValues = Array.from({ length: xAxisValues.length }, (_, i) => i + yAxisMin);\r\n    }\r\n    // Once both of the arrays of values are populated, can infer the max values if not present:\r\n    xAxisMax = xAxisMax ?? Math.max(...xAxisValues);\r\n    yAxisMax = yAxisMax ?? Math.max(...yAxisValues);\r\n    /**\r\n     * If the x-axis size is *not* provided, then the scale *must* be\r\n     * provided, otherwise the size of the axis cannot be calculated:\r\n     */\r\n    if ((!xAxisSize && !xAxisScale) || (xAxisSize && xAxisScale)) {\r\n        throw new Error(\"EITHER the x-axis size OR the x-axis scale must be provided up-front or this graph axis cannot be plotted.\");\r\n    }\r\n    else if (xAxisSize && !xAxisScale) {\r\n        xAxisScale = calculateScale(xAxisSize, xAxisMin, xAxisMax);\r\n    }\r\n    else if (!xAxisSize && xAxisScale) {\r\n        xAxisSize = calculateSize(xAxisScale, xAxisMin, xAxisMax);\r\n    }\r\n    /**\r\n     * If the y-axis size is *not* provided, then the scale *must* be\r\n     * provided, otherwise the size of the axis cannot be calculated:\r\n     */\r\n    if ((!yAxisSize && !yAxisScale) || (yAxisSize && yAxisScale)) {\r\n        throw new Error(\"EITHER the y-axis size OR the y-axis scale must be provided up-front or this graph axis cannot be plotted.\");\r\n    }\r\n    else if (yAxisSize && !yAxisScale) {\r\n        yAxisScale = calculateScale(yAxisSize, yAxisMin, yAxisMax);\r\n    }\r\n    else if (!yAxisSize && yAxisScale) {\r\n        yAxisSize = calculateSize(yAxisScale, yAxisMin, yAxisMax);\r\n    }\r\n    // NOTE REGARDING TYPECASTING: All branches have been covered to populate values,\r\n    // they cannot be undefined at this point, compiler is being overstrict:\r\n    return {\r\n        xAxisMax,\r\n        xAxisMin,\r\n        xAxisScale: xAxisScale,\r\n        xAxisSize: xAxisSize,\r\n        xAxisStep,\r\n        xAxisValues: xAxisValues,\r\n        yAxisMax,\r\n        yAxisMin,\r\n        yAxisScale: yAxisScale,\r\n        yAxisSize: yAxisSize,\r\n        yAxisStep,\r\n        yAxisValues: yAxisValues,\r\n    };\r\n}\r\n/**\r\n * Examples:\r\n *\r\n * size 100 min 0 max 10 scale 10\r\n * size 100 min -50 max 50 scale 10\r\n * size 100 min -25 max 75 scale 10\r\n * size 100 min -100 max 0 scale 10\r\n *\r\n * @param {number} axisSize\r\n * @param {number} axisMin\r\n * @param {number} axisMax\r\n * @returns {number}\r\n */\r\nexport function calculateScale(axisSize, axisMin, axisMax) {\r\n    return axisSize / (axisMax - axisMin);\r\n}\r\n/**\r\n * Examples:\r\n *\r\n * scale 10 min 0 max 10 size 100\r\n * scale 10 min -50 max 50 size 100\r\n * scale 10 min -25 max 75 size 100\r\n * scale 10 min -100 max 0 size 100\r\n *\r\n * @param {number} axisScale\r\n * @param {number} axisMin\r\n * @param {number} axisMax\r\n * @returns {number}\r\n */\r\nexport function calculateSize(axisScale, axisMin, axisMax) {\r\n    return (axisMax - axisMin) * axisScale;\r\n}\r\n/**\r\n * Generate an array of x axis coordinates for stepped points along that axis. Used to place annotations.\r\n *\r\n * @param {GraphData} graphData\r\n * @param {number} graphData.xAxisMin\r\n * @param {number} graphData.xAxisMax\r\n * @param {number} graphData.xAxisStep\r\n * @returns {number[]}\r\n */\r\nexport function steppedXAxisValues({ xAxisMin, xAxisMax, xAxisStep, }) {\r\n    const vals = [];\r\n    // TODO currently ignoring graphs that only have data with negative values that should be plotted\r\n    // starting on a value < 0.\r\n    if (xAxisMin > 0) {\r\n        for (let v = xAxisMin; v <= xAxisMax; v += xAxisStep)\r\n            vals.push(v);\r\n        return vals;\r\n    }\r\n    else {\r\n        vals.push(0);\r\n        for (let v = 0 - xAxisStep; v >= xAxisMin; v -= xAxisStep)\r\n            vals.unshift(v);\r\n        for (let v = 0 + xAxisStep; v <= xAxisMax; v += xAxisStep)\r\n            vals.push(v);\r\n        return vals;\r\n    }\r\n}\r\n/**\r\n * Generate an array of y axis coordinates for stepped points along that axis. Used to place annotations.\r\n *\r\n * @param {GraphData} graphData\r\n * @param {number} graphData.yAxisMin\r\n * @param {number} graphData.yAxisMax\r\n * @param {number} graphData.yAxisStep\r\n * @returns {number[]}\r\n */\r\nexport function steppedYAxisValues({ yAxisMin, yAxisMax, yAxisStep, }) {\r\n    const vals = [];\r\n    // TODO currently ignoring graphs that only have data with negative values that should be plotted\r\n    // starting on a value < 0.\r\n    if (yAxisMin > 0) {\r\n        for (let v = yAxisMin; v <= yAxisMax; v += yAxisStep)\r\n            vals.push(v);\r\n        return vals;\r\n    }\r\n    else {\r\n        vals.push(0);\r\n        for (let v = 0 - yAxisStep; v >= yAxisMin; v -= yAxisStep)\r\n            vals.unshift(v);\r\n        for (let v = 0 + yAxisStep; v <= yAxisMax; v += yAxisStep)\r\n            vals.push(v);\r\n        return vals;\r\n    }\r\n}\r\n//# sourceMappingURL=mod.js.map","references":[],"map":"{\"version\":3,\"file\":\"mod.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/mod.ts\"],\"names\":[],\"mappings\":\"AA4DA,MAAM,UAAU,WAAW,CAAC,EAC3B,QAAQ,EACR,QAAQ,GAAG,CAAC,EACZ,SAAS,EACT,UAAU,EACV,SAAS,GAAG,CAAC,EACb,WAAW,EACX,QAAQ,EACR,QAAQ,GAAG,CAAC,EACZ,SAAS,EACT,UAAU,EACV,SAAS,GAAG,CAAC,EACb,WAAW,GACO;IAClB;;OAEG;IACH,IAAI,CAAC,WAAW,IAAI,CAAC,WAAW,EAAE;QACjC,MAAM,IAAI,KAAK,CACd,6EAA6E,CAC7E,CAAC;KACF;IAED;;;OAGG;IACH,IAAI,WAAW,IAAI,CAAC,WAAW,EAAE;QAChC,WAAW,GAAG,KAAK,CAAC,IAAI,CACvB,EAAE,MAAM,EAAE,WAAW,CAAC,MAAM,EAAE,EAC9B,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,QAAQ,CACtB,CAAC;KACF;SAAM,IAAI,WAAW,IAAI,CAAC,WAAW,EAAE;QACvC,WAAW,GAAG,KAAK,CAAC,IAAI,CACvB,EAAE,MAAM,EAAE,WAAW,CAAC,MAAM,EAAE,EAC9B,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,QAAQ,CACtB,CAAC;KACF;IACD,4FAA4F;IAC5F,QAAQ,GAAG,QAAQ,IAAI,IAAI,CAAC,GAAG,CAAC,GAAI,WAAwB,CAAC,CAAC;IAC9D,QAAQ,GAAG,QAAQ,IAAI,IAAI,CAAC,GAAG,CAAC,GAAI,WAAwB,CAAC,CAAC;IAE9D;;;OAGG;IACH,IAAI,CAAC,CAAC,SAAS,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,IAAI,UAAU,CAAC,EAAE;QAC7D,MAAM,IAAI,KAAK,CACd,4GAA4G,CAC5G,CAAC;KACF;SAAM,IAAI,SAAS,IAAI,CAAC,UAAU,EAAE;QACpC,UAAU,GAAG,cAAc,CAAC,SAAS,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;KAC3D;SAAM,IAAI,CAAC,SAAS,IAAI,UAAU,EAAE;QACpC,SAAS,GAAG,aAAa,CAAC,UAAU,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;KAC1D;IAED;;;OAGG;IACH,IAAI,CAAC,CAAC,SAAS,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,IAAI,UAAU,CAAC,EAAE;QAC7D,MAAM,IAAI,KAAK,CACd,4GAA4G,CAC5G,CAAC;KACF;SAAM,IAAI,SAAS,IAAI,CAAC,UAAU,EAAE;QACpC,UAAU,GAAG,cAAc,CAAC,SAAS,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;KAC3D;SAAM,IAAI,CAAC,SAAS,IAAI,UAAU,EAAE;QACpC,SAAS,GAAG,aAAa,CAAC,UAAU,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;KAC1D;IAED,iFAAiF;IACjF,wEAAwE;IACxE,OAAO;QACN,QAAQ;QACR,QAAQ;QACR,UAAU,EAAE,UAAoB;QAChC,SAAS,EAAE,SAAmB;QAC9B,SAAS;QACT,WAAW,EAAE,WAAuB;QACpC,QAAQ;QACR,QAAQ;QACR,UAAU,EAAE,UAAoB;QAChC,SAAS,EAAE,SAAmB;QAC9B,SAAS;QACT,WAAW,EAAE,WAAuB;KACpC,CAAC;AACH,CAAC;AAED;;;;;;;;;;;;GAYG;AACH,MAAM,UAAU,cAAc,CAC7B,QAAgB,EAChB,OAAe,EACf,OAAe;IAEf,OAAO,QAAQ,GAAG,CAAC,OAAO,GAAG,OAAO,CAAC,CAAC;AACvC,CAAC;AAED;;;;;;;;;;;;GAYG;AACH,MAAM,UAAU,aAAa,CAC5B,SAAiB,EACjB,OAAe,EACf,OAAe;IAEf,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,GAAG,SAAS,CAAC;AACxC,CAAC;AAED;;;;;;;;GAQG;AACH,MAAM,UAAU,kBAAkB,CAAC,EAClC,QAAQ,EACR,QAAQ,EACR,SAAS,GACE;IACX,MAAM,IAAI,GAAG,EAAE,CAAC;IAEhB,iGAAiG;IACjG,2BAA2B;IAC3B,IAAI,QAAQ,GAAG,CAAC,EAAE;QACjB,KAAK,IAAI,CAAC,GAAG,QAAQ,EAAE,CAAC,IAAI,QAAQ,EAAE,CAAC,IAAI,SAAS;YAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACnE,OAAO,IAAI,CAAC;KACZ;SAAM;QACN,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACb,KAAK,IAAI,CAAC,GAAG,CAAC,GAAG,SAAS,EAAE,CAAC,IAAI,QAAQ,EAAE,CAAC,IAAI,SAAS;YAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAC3E,KAAK,IAAI,CAAC,GAAG,CAAC,GAAG,SAAS,EAAE,CAAC,IAAI,QAAQ,EAAE,CAAC,IAAI,SAAS;YAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACxE,OAAO,IAAI,CAAC;KACZ;AACF,CAAC;AAED;;;;;;;;GAQG;AACH,MAAM,UAAU,kBAAkB,CAAC,EAClC,QAAQ,EACR,QAAQ,EACR,SAAS,GACE;IACX,MAAM,IAAI,GAAG,EAAE,CAAC;IAEhB,iGAAiG;IACjG,2BAA2B;IAC3B,IAAI,QAAQ,GAAG,CAAC,EAAE;QACjB,KAAK,IAAI,CAAC,GAAG,QAAQ,EAAE,CAAC,IAAI,QAAQ,EAAE,CAAC,IAAI,SAAS;YAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACnE,OAAO,IAAI,CAAC;KACZ;SAAM;QACN,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACb,KAAK,IAAI,CAAC,GAAG,CAAC,GAAG,SAAS,EAAE,CAAC,IAAI,QAAQ,EAAE,CAAC,IAAI,SAAS;YAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAC3E,KAAK,IAAI,CAAC,GAAG,CAAC,GAAG,SAAS,EAAE,CAAC,IAAI,QAAQ,EAAE,CAAC,IAAI,SAAS;YAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACxE,OAAO,IAAI,CAAC;KACZ;AACF,CAAC\"}","dtsmap":{"name":"/Users/daniel.couper/Work/shared-frontend-libs/packages/graphviz/node_modules/.cache/rollup-plugin-typescript2/placeholder/mod.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"mod.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/mod.ts\"],\"names\":[],\"mappings\":\"AAAA,oBAAY,gBAAgB,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AAElD,MAAM,WAAW,SAAS;IACzB,qDAAqD;IACrD,WAAW,EAAE,MAAM,EAAE,CAAC;IACtB;;;OAGG;IACH,SAAS,EAAE,MAAM,CAAC;IAClB;;;OAGG;IACH,QAAQ,EAAE,MAAM,CAAC;IACjB;;;;OAIG;IACH,QAAQ,EAAE,MAAM,CAAC;IACjB;;OAEG;IACH,UAAU,EAAE,MAAM,CAAC;IACnB;;OAEG;IACH,SAAS,EAAE,MAAM,CAAC;IAClB;;;OAGG;IACH,WAAW,EAAE,MAAM,EAAE,CAAC;IACtB;;;OAGG;IACH,SAAS,EAAE,MAAM,CAAC;IAClB;;;OAGG;IACH,QAAQ,EAAE,MAAM,CAAC;IACjB;;;;OAIG;IACH,QAAQ,EAAE,MAAM,CAAC;IACjB;;OAEG;IACH,UAAU,EAAE,MAAM,CAAC;IACnB;;OAEG;IACH,SAAS,EAAE,MAAM,CAAC;CAClB;AAED,wBAAgB,WAAW,CAAC,EAC3B,QAAQ,EACR,QAAY,EACZ,SAAS,EACT,UAAU,EACV,SAAa,EACb,WAAW,EACX,QAAQ,EACR,QAAY,EACZ,SAAS,EACT,UAAU,EACV,SAAa,EACb,WAAW,GACX,EAAE,gBAAgB,GAAG,SAAS,CAyE9B;AAED;;;;;;;;;;;;GAYG;AACH,wBAAgB,cAAc,CAC7B,QAAQ,EAAE,MAAM,EAChB,OAAO,EAAE,MAAM,EACf,OAAO,EAAE,MAAM,GACb,MAAM,CAER;AAED;;;;;;;;;;;;GAYG;AACH,wBAAgB,aAAa,CAC5B,SAAS,EAAE,MAAM,EACjB,OAAO,EAAE,MAAM,EACf,OAAO,EAAE,MAAM,GACb,MAAM,CAER;AAED;;;;;;;;GAQG;AACH,wBAAgB,kBAAkB,CAAC,EAClC,QAAQ,EACR,QAAQ,EACR,SAAS,GACT,EAAE,SAAS,GAAG,MAAM,EAAE,CActB;AAED;;;;;;;;GAQG;AACH,wBAAgB,kBAAkB,CAAC,EAClC,QAAQ,EACR,QAAQ,EACR,SAAS,GACT,EAAE,SAAS,GAAG,MAAM,EAAE,CActB\"}"},"dts":{"name":"/Users/daniel.couper/Work/shared-frontend-libs/packages/graphviz/node_modules/.cache/rollup-plugin-typescript2/placeholder/mod.d.ts","writeByteOrderMark":false,"text":"export declare type GraphConstructor = Partial<GraphData>;\r\nexport interface GraphData {\r\n    /** The array of data to be plotted on the y axis. */\r\n    yAxisValues: number[];\r\n    /**\r\n     * The defined length of the y axis, as in a literal [unitless, but is pixels]\r\n     * value for length.\r\n     */\r\n    yAxisSize: number;\r\n    /**\r\n     * The MINIMUM value to be used on the y axis. By default, this will be zero, but it is\r\n     * necessary to keep it configurable to allow for data that includes negative values.\r\n     */\r\n    yAxisMin: number;\r\n    /**\r\n     * The MAXIMUM value to be used on the y axis. By default this will be the maximum of the\r\n     * y axis values, but it is necessary to keep it configurable to allow for spacing at\r\n     * extremities of this graph axis.\r\n     */\r\n    yAxisMax: number;\r\n    /**\r\n     * The scaling factor for the y axis. Used to project coordinates onto the rendered graph.\r\n     */\r\n    yAxisScale: number;\r\n    /**\r\n     * The step used to generate positions for annotations and grid lines on the y axis.\r\n     */\r\n    yAxisStep: number;\r\n    /**\r\n     * The array of data to be plotted on the x axis. For a horizontal series graph, this\r\n     * will be just the indices of the yAxisValues data.\r\n     */\r\n    xAxisValues: number[];\r\n    /**\r\n     * The defined length of the x axis, as in a literal [unitless, but is pixels]\r\n     * value for length.\r\n     */\r\n    xAxisSize: number;\r\n    /**\r\n     * The MINIMUM value to be used on the x axis. By default, this will be zero, but it is\r\n     * necessary to keep it configurable to allow for data that includes negative values.\r\n     */\r\n    xAxisMin: number;\r\n    /**\r\n     * The MAXIMUM value to be used on the x axis. By default this will be the maximum of the\r\n     * x axis values, but it is necessary to keep it configurable to allow for spacing at\r\n     * extremities of this graph axis.\r\n     */\r\n    xAxisMax: number;\r\n    /**\r\n     * The scaling factor for the x axis. Used to project coordinates onto the rendered graph.\r\n     */\r\n    xAxisScale: number;\r\n    /**\r\n     * The step used to generate positions for annotations and grid lines on the x axis.\r\n     */\r\n    xAxisStep: number;\r\n}\r\nexport declare function createGraph({ xAxisMax, xAxisMin, xAxisSize, xAxisScale, xAxisStep, xAxisValues, yAxisMax, yAxisMin, yAxisSize, yAxisScale, yAxisStep, yAxisValues, }: GraphConstructor): GraphData;\r\n/**\r\n * Examples:\r\n *\r\n * size 100 min 0 max 10 scale 10\r\n * size 100 min -50 max 50 scale 10\r\n * size 100 min -25 max 75 scale 10\r\n * size 100 min -100 max 0 scale 10\r\n *\r\n * @param {number} axisSize\r\n * @param {number} axisMin\r\n * @param {number} axisMax\r\n * @returns {number}\r\n */\r\nexport declare function calculateScale(axisSize: number, axisMin: number, axisMax: number): number;\r\n/**\r\n * Examples:\r\n *\r\n * scale 10 min 0 max 10 size 100\r\n * scale 10 min -50 max 50 size 100\r\n * scale 10 min -25 max 75 size 100\r\n * scale 10 min -100 max 0 size 100\r\n *\r\n * @param {number} axisScale\r\n * @param {number} axisMin\r\n * @param {number} axisMax\r\n * @returns {number}\r\n */\r\nexport declare function calculateSize(axisScale: number, axisMin: number, axisMax: number): number;\r\n/**\r\n * Generate an array of x axis coordinates for stepped points along that axis. Used to place annotations.\r\n *\r\n * @param {GraphData} graphData\r\n * @param {number} graphData.xAxisMin\r\n * @param {number} graphData.xAxisMax\r\n * @param {number} graphData.xAxisStep\r\n * @returns {number[]}\r\n */\r\nexport declare function steppedXAxisValues({ xAxisMin, xAxisMax, xAxisStep, }: GraphData): number[];\r\n/**\r\n * Generate an array of y axis coordinates for stepped points along that axis. Used to place annotations.\r\n *\r\n * @param {GraphData} graphData\r\n * @param {number} graphData.yAxisMin\r\n * @param {number} graphData.yAxisMax\r\n * @param {number} graphData.yAxisStep\r\n * @returns {number[]}\r\n */\r\nexport declare function steppedYAxisValues({ yAxisMin, yAxisMax, yAxisStep, }: GraphData): number[];\r\n//# sourceMappingURL=mod.d.ts.map"}}
