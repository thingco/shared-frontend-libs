{"code":"export function createGraph({ xAxisMax, xAxisMin = 0, xAxisSize, xAxisStep = 1, xAxisValues, yAxisMax, yAxisMin = 0, yAxisSize, yAxisStep = 1, yAxisValues, }) {\r\n    if (!(xAxisSize && yAxisSize)) {\r\n        throw new Error(\"BOTH the x- and y-axis size MUST be provided to create the graph.\");\r\n    }\r\n    if (!(xAxisValues && yAxisValues)) {\r\n        throw new Error(\"ONE OR BOTH x- or y-axis value arrays MUST be provided to create the graph.\");\r\n    }\r\n    if (!xAxisValues) {\r\n        xAxisValues = Array.from({ length: yAxisValues.length }, (_, i) => i + xAxisMin);\r\n    }\r\n    if (!yAxisValues) {\r\n        yAxisValues = Array.from({ length: xAxisValues.length }, (_, i) => i + yAxisMin);\r\n    }\r\n    xAxisMax = xAxisMax ?? Math.max(...xAxisValues);\r\n    yAxisMax = yAxisMax ?? Math.max(...yAxisValues);\r\n    const xAxisScale = calculateScale(xAxisSize, xAxisMin, xAxisMax);\r\n    const yAxisScale = calculateScale(yAxisSize, yAxisMin, yAxisMax);\r\n    return {\r\n        xAxisMax,\r\n        xAxisMin,\r\n        xAxisScale,\r\n        xAxisSize,\r\n        xAxisStep,\r\n        xAxisValues,\r\n        yAxisMax,\r\n        yAxisMin,\r\n        yAxisScale,\r\n        yAxisSize,\r\n        yAxisStep,\r\n        yAxisValues,\r\n    };\r\n}\r\n/**\r\n * Examples:\r\n *\r\n * size 100 min 0 max 10 scale 10\r\n * size 100 min -50 max 50 scale 10\r\n * size 100 min -25 max 75 scale 10\r\n * size 100 min -100 max 0 scale 10\r\n *\r\n * @param {number} axisSize\r\n * @param {number} axisMin\r\n * @param {number} axisMax\r\n * @returns {number}\r\n */\r\nexport function calculateScale(axisSize, axisMin, axisMax) {\r\n    return axisSize / (axisMax - axisMin);\r\n}\r\n/**\r\n * Examples:\r\n * coord at 5, size 100, min 0, max 10, scale 10 = 50\r\n * coord at 5, size 100, min -5, max 5, scale 10 = 100\r\n * coord at 5, size 100, min -2.5, max 7.5, scale 10 = 75\r\n * coord at -5, size 100, min -10, max 0, scale 10 = 50\r\n *\r\n * If the axis min value is greater than zero, then floor it to zero\r\n * in the calculation: the graph is plotted on the SVG from a zero\r\n * point regardless of what the data is.\r\n *\r\n * coord at 0, size 100, min 1, max 10, scale 11.1 = 0\r\n *\r\n * REVIEW if there are only negative values, there may be an issue here, TEST.\r\n *\r\n * @param {GraphData} graphData\r\n * @param {number} graphData.xAxisMin\r\n * @param {number} graphData.xAxisScale\r\n * @param {number} axisCoord\r\n * @returns {number}\r\n */\r\nexport function projectXCoordToSVG({ xAxisMin, xAxisScale }, axisCoord) {\r\n    return (axisCoord - xAxisMin) * xAxisScale;\r\n}\r\n/**\r\n * As `projectXCoordToSVG`, except that the resulting coordinate is inverted based on the y axis\r\n * size. This is because SVG coordinates are plotted from the top left, not the bottom left.\r\n * Leaving the coordinates as-is would cause the graph to be flipped vertically.\r\n *\r\n * Examples:\r\n * coord at 5, size 100, min 0, max 10, scale 10 = 100 - 50 = 50\r\n * coord at 5, size 100, min -5, max 5, scale 10 = 100 - 100 = 0\r\n * coord at 5, size 100, min -2.5, max 7.5, scale 10 = 100 - 75 = 25\r\n * coord at -5, size 100, min -10, max 0, scale 10 = 100 - 50 = 50\r\n *\r\n * @param {GraphData} graphData\r\n * @param {number} graphData.yAxisMin\r\n * @param {number} graphData.yAxisScale\r\n * @param {number} graphData.yAxisSize\r\n * @param {number} axisCoord\r\n * @returns {number}\r\n */\r\nexport function projectYCoordToSVG({ yAxisMin, yAxisScale, yAxisSize }, axisCoord) {\r\n    return yAxisSize - (axisCoord - yAxisMin) * yAxisScale;\r\n}\r\n/**\r\n * Generate an array of x axis coordinates for stepped points along that axis. Used to place annotations.\r\n *\r\n * @param {GraphData} graphData\r\n * @param {number} graphData.xAxisMin\r\n * @param {number} graphData.xAxisMax\r\n * @param {number} graphData.xAxisStep\r\n * @returns {number[]}\r\n */\r\nexport function steppedXAxisValues({ xAxisMin, xAxisMax, xAxisStep, }) {\r\n    const vals = [];\r\n    // TODO currently ignoring graphs that only have data with negative values that should be plotted\r\n    // starting on a value < 0.\r\n    if (xAxisMin > 0) {\r\n        for (let v = xAxisMin; v <= xAxisMax; v += xAxisStep)\r\n            vals.push(v);\r\n        return vals;\r\n    }\r\n    else {\r\n        vals.push(0);\r\n        for (let v = 0 - xAxisStep; v >= xAxisMin; v -= xAxisStep)\r\n            vals.unshift(v);\r\n        for (let v = 0 + xAxisStep; v <= xAxisMax; v += xAxisStep)\r\n            vals.push(v);\r\n        return vals;\r\n    }\r\n}\r\n/**\r\n * Generate an array of y axis coordinates for stepped points along that axis. Used to place annotations.\r\n *\r\n * @param {GraphData} graphData\r\n * @param {number} graphData.yAxisMin\r\n * @param {number} graphData.yAxisMax\r\n * @param {number} graphData.yAxisStep\r\n * @returns {number[]}\r\n */\r\nexport function steppedYAxisValues({ yAxisMin, yAxisMax, yAxisStep, }) {\r\n    const vals = [];\r\n    // TODO currently ignoring graphs that only have data with negative values that should be plotted\r\n    // starting on a value < 0.\r\n    if (yAxisMin > 0) {\r\n        for (let v = yAxisMin; v <= yAxisMax; v += yAxisStep)\r\n            vals.push(v);\r\n        return vals;\r\n    }\r\n    else {\r\n        vals.push(0);\r\n        for (let v = 0 - yAxisStep; v >= yAxisMin; v -= yAxisStep)\r\n            vals.unshift(v);\r\n        for (let v = 0 + yAxisStep; v <= yAxisMax; v += yAxisStep)\r\n            vals.push(v);\r\n        return vals;\r\n    }\r\n}\r\n//# sourceMappingURL=setup.js.map","references":[],"map":"{\"version\":3,\"file\":\"setup.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/Graph/setup.ts\"],\"names\":[],\"mappings\":\"AA4DA,MAAM,UAAU,WAAW,CAAC,EAC3B,QAAQ,EACR,QAAQ,GAAG,CAAC,EACZ,SAAS,EACT,SAAS,GAAG,CAAC,EACb,WAAW,EACX,QAAQ,EACR,QAAQ,GAAG,CAAC,EACZ,SAAS,EACT,SAAS,GAAG,CAAC,EACb,WAAW,GACO;IAClB,IAAI,CAAC,CAAC,SAAS,IAAI,SAAS,CAAC,EAAE;QAC9B,MAAM,IAAI,KAAK,CACd,mEAAmE,CACnE,CAAC;KACF;IACD,IAAI,CAAC,CAAC,WAAW,IAAI,WAAW,CAAC,EAAE;QAClC,MAAM,IAAI,KAAK,CACd,6EAA6E,CAC7E,CAAC;KACF;IACD,IAAI,CAAC,WAAW,EAAE;QACjB,WAAW,GAAG,KAAK,CAAC,IAAI,CACvB,EAAE,MAAM,EAAE,WAAW,CAAC,MAAM,EAAE,EAC9B,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,QAAQ,CACtB,CAAC;KACF;IACD,IAAI,CAAC,WAAW,EAAE;QACjB,WAAW,GAAG,KAAK,CAAC,IAAI,CACvB,EAAE,MAAM,EAAE,WAAW,CAAC,MAAM,EAAE,EAC9B,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,QAAQ,CACtB,CAAC;KACF;IACD,QAAQ,GAAG,QAAQ,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC,CAAC;IAChD,QAAQ,GAAG,QAAQ,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC,CAAC;IAEhD,MAAM,UAAU,GAAG,cAAc,CAAC,SAAS,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;IACjE,MAAM,UAAU,GAAG,cAAc,CAAC,SAAS,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;IAEjE,OAAO;QACN,QAAQ;QACR,QAAQ;QACR,UAAU;QACV,SAAS;QACT,SAAS;QACT,WAAW;QACX,QAAQ;QACR,QAAQ;QACR,UAAU;QACV,SAAS;QACT,SAAS;QACT,WAAW;KACX,CAAC;AACH,CAAC;AAED;;;;;;;;;;;;GAYG;AACH,MAAM,UAAU,cAAc,CAC7B,QAAgB,EAChB,OAAe,EACf,OAAe;IAEf,OAAO,QAAQ,GAAG,CAAC,OAAO,GAAG,OAAO,CAAC,CAAC;AACvC,CAAC;AAED;;;;;;;;;;;;;;;;;;;;GAoBG;AACH,MAAM,UAAU,kBAAkB,CACjC,EAAE,QAAQ,EAAE,UAAU,EAAa,EACnC,SAAiB;IAEjB,OAAO,CAAC,SAAS,GAAG,QAAQ,CAAC,GAAG,UAAU,CAAC;AAC5C,CAAC;AAED;;;;;;;;;;;;;;;;;GAiBG;AACH,MAAM,UAAU,kBAAkB,CACjC,EAAE,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAa,EAC9C,SAAiB;IAEjB,OAAO,SAAS,GAAG,CAAC,SAAS,GAAG,QAAQ,CAAC,GAAG,UAAU,CAAC;AACxD,CAAC;AAED;;;;;;;;GAQG;AACH,MAAM,UAAU,kBAAkB,CAAC,EAClC,QAAQ,EACR,QAAQ,EACR,SAAS,GACE;IACX,MAAM,IAAI,GAAG,EAAE,CAAC;IAEhB,iGAAiG;IACjG,2BAA2B;IAC3B,IAAI,QAAQ,GAAG,CAAC,EAAE;QACjB,KAAK,IAAI,CAAC,GAAG,QAAQ,EAAE,CAAC,IAAI,QAAQ,EAAE,CAAC,IAAI,SAAS;YAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACnE,OAAO,IAAI,CAAC;KACZ;SAAM;QACN,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACb,KAAK,IAAI,CAAC,GAAG,CAAC,GAAG,SAAS,EAAE,CAAC,IAAI,QAAQ,EAAE,CAAC,IAAI,SAAS;YAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAC3E,KAAK,IAAI,CAAC,GAAG,CAAC,GAAG,SAAS,EAAE,CAAC,IAAI,QAAQ,EAAE,CAAC,IAAI,SAAS;YAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACxE,OAAO,IAAI,CAAC;KACZ;AACF,CAAC;AAED;;;;;;;;GAQG;AACH,MAAM,UAAU,kBAAkB,CAAC,EAClC,QAAQ,EACR,QAAQ,EACR,SAAS,GACE;IACX,MAAM,IAAI,GAAG,EAAE,CAAC;IAEhB,iGAAiG;IACjG,2BAA2B;IAC3B,IAAI,QAAQ,GAAG,CAAC,EAAE;QACjB,KAAK,IAAI,CAAC,GAAG,QAAQ,EAAE,CAAC,IAAI,QAAQ,EAAE,CAAC,IAAI,SAAS;YAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACnE,OAAO,IAAI,CAAC;KACZ;SAAM;QACN,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACb,KAAK,IAAI,CAAC,GAAG,CAAC,GAAG,SAAS,EAAE,CAAC,IAAI,QAAQ,EAAE,CAAC,IAAI,SAAS;YAAE,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAC3E,KAAK,IAAI,CAAC,GAAG,CAAC,GAAG,SAAS,EAAE,CAAC,IAAI,QAAQ,EAAE,CAAC,IAAI,SAAS;YAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACxE,OAAO,IAAI,CAAC;KACZ;AACF,CAAC\"}","dtsmap":{"name":"/Users/daniel.couper/Work/shared-frontend-libs/packages/dataviz/node_modules/.cache/rollup-plugin-typescript2/placeholder/Graph/setup.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"setup.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/Graph/setup.ts\"],\"names\":[],\"mappings\":\"AAAA,oBAAY,gBAAgB,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AAElD,MAAM,WAAW,SAAS;IACzB,qDAAqD;IACrD,WAAW,EAAE,MAAM,EAAE,CAAC;IACtB;;;OAGG;IACH,SAAS,EAAE,MAAM,CAAC;IAClB;;;OAGG;IACH,QAAQ,EAAE,MAAM,CAAC;IACjB;;;;OAIG;IACH,QAAQ,EAAE,MAAM,CAAC;IACjB;;OAEG;IACH,UAAU,EAAE,MAAM,CAAC;IACnB;;OAEG;IACH,SAAS,EAAE,MAAM,CAAC;IAClB;;;OAGG;IACH,WAAW,EAAE,MAAM,EAAE,CAAC;IACtB;;;OAGG;IACH,SAAS,EAAE,MAAM,CAAC;IAClB;;;OAGG;IACH,QAAQ,EAAE,MAAM,CAAC;IACjB;;;;OAIG;IACH,QAAQ,EAAE,MAAM,CAAC;IACjB;;OAEG;IACH,UAAU,EAAE,MAAM,CAAC;IACnB;;OAEG;IACH,SAAS,EAAE,MAAM,CAAC;CAClB;AAED,wBAAgB,WAAW,CAAC,EAC3B,QAAQ,EACR,QAAY,EACZ,SAAS,EACT,SAAa,EACb,WAAW,EACX,QAAQ,EACR,QAAY,EACZ,SAAS,EACT,SAAa,EACb,WAAW,GACX,EAAE,gBAAgB,GAAG,SAAS,CA2C9B;AAED;;;;;;;;;;;;GAYG;AACH,wBAAgB,cAAc,CAC7B,QAAQ,EAAE,MAAM,EAChB,OAAO,EAAE,MAAM,EACf,OAAO,EAAE,MAAM,GACb,MAAM,CAER;AAED;;;;;;;;;;;;;;;;;;;;GAoBG;AACH,wBAAgB,kBAAkB,CACjC,EAAE,QAAQ,EAAE,UAAU,EAAE,EAAE,SAAS,EACnC,SAAS,EAAE,MAAM,GACf,MAAM,CAER;AAED;;;;;;;;;;;;;;;;;GAiBG;AACH,wBAAgB,kBAAkB,CACjC,EAAE,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAE,EAAE,SAAS,EAC9C,SAAS,EAAE,MAAM,GACf,MAAM,CAER;AAED;;;;;;;;GAQG;AACH,wBAAgB,kBAAkB,CAAC,EAClC,QAAQ,EACR,QAAQ,EACR,SAAS,GACT,EAAE,SAAS,GAAG,MAAM,EAAE,CActB;AAED;;;;;;;;GAQG;AACH,wBAAgB,kBAAkB,CAAC,EAClC,QAAQ,EACR,QAAQ,EACR,SAAS,GACT,EAAE,SAAS,GAAG,MAAM,EAAE,CActB\"}"},"dts":{"name":"/Users/daniel.couper/Work/shared-frontend-libs/packages/dataviz/node_modules/.cache/rollup-plugin-typescript2/placeholder/Graph/setup.d.ts","writeByteOrderMark":false,"text":"export declare type GraphConstructor = Partial<GraphData>;\r\nexport interface GraphData {\r\n    /** The array of data to be plotted on the y axis. */\r\n    yAxisValues: number[];\r\n    /**\r\n     * The defined length of the y axis, as in a literal [unitless, but is pixels]\r\n     * value for length.\r\n     */\r\n    yAxisSize: number;\r\n    /**\r\n     * The MINIMUM value to be used on the y axis. By default, this will be zero, but it is\r\n     * necessary to keep it configurable to allow for data that includes negative values.\r\n     */\r\n    yAxisMin: number;\r\n    /**\r\n     * The MAXIMUM value to be used on the y axis. By default this will be the maximum of the\r\n     * y axis values, but it is necessary to keep it configurable to allow for spacing at\r\n     * extremities of this graph axis.\r\n     */\r\n    yAxisMax: number;\r\n    /**\r\n     * The scaling factor for the y axis. Used to project coordinates onto the rendered graph.\r\n     */\r\n    yAxisScale: number;\r\n    /**\r\n     * The step used to generate positions for annotations and grid lines on the y axis.\r\n     */\r\n    yAxisStep: number;\r\n    /**\r\n     * The array of data to be plotted on the x axis. For a horizontal series graph, this\r\n     * will be just the indices of the yAxisValues data.\r\n     */\r\n    xAxisValues: number[];\r\n    /**\r\n     * The defined length of the x axis, as in a literal [unitless, but is pixels]\r\n     * value for length.\r\n     */\r\n    xAxisSize: number;\r\n    /**\r\n     * The MINIMUM value to be used on the x axis. By default, this will be zero, but it is\r\n     * necessary to keep it configurable to allow for data that includes negative values.\r\n     */\r\n    xAxisMin: number;\r\n    /**\r\n     * The MAXIMUM value to be used on the x axis. By default this will be the maximum of the\r\n     * x axis values, but it is necessary to keep it configurable to allow for spacing at\r\n     * extremities of this graph axis.\r\n     */\r\n    xAxisMax: number;\r\n    /**\r\n     * The scaling factor for the x axis. Used to project coordinates onto the rendered graph.\r\n     */\r\n    xAxisScale: number;\r\n    /**\r\n     * The step used to generate positions for annotations and grid lines on the x axis.\r\n     */\r\n    xAxisStep: number;\r\n}\r\nexport declare function createGraph({ xAxisMax, xAxisMin, xAxisSize, xAxisStep, xAxisValues, yAxisMax, yAxisMin, yAxisSize, yAxisStep, yAxisValues, }: GraphConstructor): GraphData;\r\n/**\r\n * Examples:\r\n *\r\n * size 100 min 0 max 10 scale 10\r\n * size 100 min -50 max 50 scale 10\r\n * size 100 min -25 max 75 scale 10\r\n * size 100 min -100 max 0 scale 10\r\n *\r\n * @param {number} axisSize\r\n * @param {number} axisMin\r\n * @param {number} axisMax\r\n * @returns {number}\r\n */\r\nexport declare function calculateScale(axisSize: number, axisMin: number, axisMax: number): number;\r\n/**\r\n * Examples:\r\n * coord at 5, size 100, min 0, max 10, scale 10 = 50\r\n * coord at 5, size 100, min -5, max 5, scale 10 = 100\r\n * coord at 5, size 100, min -2.5, max 7.5, scale 10 = 75\r\n * coord at -5, size 100, min -10, max 0, scale 10 = 50\r\n *\r\n * If the axis min value is greater than zero, then floor it to zero\r\n * in the calculation: the graph is plotted on the SVG from a zero\r\n * point regardless of what the data is.\r\n *\r\n * coord at 0, size 100, min 1, max 10, scale 11.1 = 0\r\n *\r\n * REVIEW if there are only negative values, there may be an issue here, TEST.\r\n *\r\n * @param {GraphData} graphData\r\n * @param {number} graphData.xAxisMin\r\n * @param {number} graphData.xAxisScale\r\n * @param {number} axisCoord\r\n * @returns {number}\r\n */\r\nexport declare function projectXCoordToSVG({ xAxisMin, xAxisScale }: GraphData, axisCoord: number): number;\r\n/**\r\n * As `projectXCoordToSVG`, except that the resulting coordinate is inverted based on the y axis\r\n * size. This is because SVG coordinates are plotted from the top left, not the bottom left.\r\n * Leaving the coordinates as-is would cause the graph to be flipped vertically.\r\n *\r\n * Examples:\r\n * coord at 5, size 100, min 0, max 10, scale 10 = 100 - 50 = 50\r\n * coord at 5, size 100, min -5, max 5, scale 10 = 100 - 100 = 0\r\n * coord at 5, size 100, min -2.5, max 7.5, scale 10 = 100 - 75 = 25\r\n * coord at -5, size 100, min -10, max 0, scale 10 = 100 - 50 = 50\r\n *\r\n * @param {GraphData} graphData\r\n * @param {number} graphData.yAxisMin\r\n * @param {number} graphData.yAxisScale\r\n * @param {number} graphData.yAxisSize\r\n * @param {number} axisCoord\r\n * @returns {number}\r\n */\r\nexport declare function projectYCoordToSVG({ yAxisMin, yAxisScale, yAxisSize }: GraphData, axisCoord: number): number;\r\n/**\r\n * Generate an array of x axis coordinates for stepped points along that axis. Used to place annotations.\r\n *\r\n * @param {GraphData} graphData\r\n * @param {number} graphData.xAxisMin\r\n * @param {number} graphData.xAxisMax\r\n * @param {number} graphData.xAxisStep\r\n * @returns {number[]}\r\n */\r\nexport declare function steppedXAxisValues({ xAxisMin, xAxisMax, xAxisStep, }: GraphData): number[];\r\n/**\r\n * Generate an array of y axis coordinates for stepped points along that axis. Used to place annotations.\r\n *\r\n * @param {GraphData} graphData\r\n * @param {number} graphData.yAxisMin\r\n * @param {number} graphData.yAxisMax\r\n * @param {number} graphData.yAxisStep\r\n * @returns {number[]}\r\n */\r\nexport declare function steppedYAxisValues({ yAxisMin, yAxisMax, yAxisStep, }: GraphData): number[];\r\n//# sourceMappingURL=setup.d.ts.map"}}
