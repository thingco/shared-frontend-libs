(() => (new EventSource("/esbuild").onmessage = () => location.reload()))();
(() => {
	var __create = Object.create;
	var __defProp = Object.defineProperty;
	var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
	var __getOwnPropNames = Object.getOwnPropertyNames;
	var __getProtoOf = Object.getPrototypeOf;
	var __hasOwnProp = Object.prototype.hasOwnProperty;
	var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
	var __require = (x) => {
		if (typeof require !== "undefined") return require(x);
		throw new Error('Dynamic require of "' + x + '" is not supported');
	};
	var __commonJS = (cb, mod) =>
		function __require2() {
			return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
		};
	var __reExport = (target, module2, desc) => {
		if ((module2 && typeof module2 === "object") || typeof module2 === "function") {
			for (let key of __getOwnPropNames(module2))
				if (!__hasOwnProp.call(target, key) && key !== "default")
					__defProp(target, key, {
						get: () => module2[key],
						enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable,
					});
		}
		return target;
	};
	var __toModule = (module2) => {
		return __reExport(
			__markAsModule(
				__defProp(
					module2 != null ? __create(__getProtoOf(module2)) : {},
					"default",
					module2 && module2.__esModule && "default" in module2
						? { get: () => module2.default, enumerable: true }
						: { value: module2, enumerable: true }
				)
			),
			module2
		);
	};

	// ../../node_modules/object-assign/index.js
	var require_object_assign = __commonJS({
		"../../node_modules/object-assign/index.js"(exports, module2) {
			"use strict";
			var getOwnPropertySymbols = Object.getOwnPropertySymbols;
			var hasOwnProperty = Object.prototype.hasOwnProperty;
			var propIsEnumerable = Object.prototype.propertyIsEnumerable;
			function toObject(val) {
				if (val === null || val === void 0) {
					throw new TypeError("Object.assign cannot be called with null or undefined");
				}
				return Object(val);
			}
			function shouldUseNative() {
				try {
					if (!Object.assign) {
						return false;
					}
					var test1 = new String("abc");
					test1[5] = "de";
					if (Object.getOwnPropertyNames(test1)[0] === "5") {
						return false;
					}
					var test2 = {};
					for (var i = 0; i < 10; i++) {
						test2["_" + String.fromCharCode(i)] = i;
					}
					var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
						return test2[n];
					});
					if (order2.join("") !== "0123456789") {
						return false;
					}
					var test3 = {};
					"abcdefghijklmnopqrst".split("").forEach(function (letter) {
						test3[letter] = letter;
					});
					if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
						return false;
					}
					return true;
				} catch (err) {
					return false;
				}
			}
			module2.exports = shouldUseNative()
				? Object.assign
				: function (target, source) {
						var from;
						var to = toObject(target);
						var symbols;
						for (var s = 1; s < arguments.length; s++) {
							from = Object(arguments[s]);
							for (var key in from) {
								if (hasOwnProperty.call(from, key)) {
									to[key] = from[key];
								}
							}
							if (getOwnPropertySymbols) {
								symbols = getOwnPropertySymbols(from);
								for (var i = 0; i < symbols.length; i++) {
									if (propIsEnumerable.call(from, symbols[i])) {
										to[symbols[i]] = from[symbols[i]];
									}
								}
							}
						}
						return to;
				  };
		},
	});

	// ../../node_modules/react/cjs/react.development.js
	var require_react_development = __commonJS({
		"../../node_modules/react/cjs/react.development.js"(exports) {
			"use strict";
			if (true) {
				(function () {
					"use strict";
					var _assign = require_object_assign();
					var ReactVersion = "17.0.2";
					var REACT_ELEMENT_TYPE = 60103;
					var REACT_PORTAL_TYPE = 60106;
					exports.Fragment = 60107;
					exports.StrictMode = 60108;
					exports.Profiler = 60114;
					var REACT_PROVIDER_TYPE = 60109;
					var REACT_CONTEXT_TYPE = 60110;
					var REACT_FORWARD_REF_TYPE = 60112;
					exports.Suspense = 60113;
					var REACT_SUSPENSE_LIST_TYPE = 60120;
					var REACT_MEMO_TYPE = 60115;
					var REACT_LAZY_TYPE = 60116;
					var REACT_BLOCK_TYPE = 60121;
					var REACT_SERVER_BLOCK_TYPE = 60122;
					var REACT_FUNDAMENTAL_TYPE = 60117;
					var REACT_SCOPE_TYPE = 60119;
					var REACT_OPAQUE_ID_TYPE = 60128;
					var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
					var REACT_OFFSCREEN_TYPE = 60130;
					var REACT_LEGACY_HIDDEN_TYPE = 60131;
					if (typeof Symbol === "function" && Symbol.for) {
						var symbolFor = Symbol.for;
						REACT_ELEMENT_TYPE = symbolFor("react.element");
						REACT_PORTAL_TYPE = symbolFor("react.portal");
						exports.Fragment = symbolFor("react.fragment");
						exports.StrictMode = symbolFor("react.strict_mode");
						exports.Profiler = symbolFor("react.profiler");
						REACT_PROVIDER_TYPE = symbolFor("react.provider");
						REACT_CONTEXT_TYPE = symbolFor("react.context");
						REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
						exports.Suspense = symbolFor("react.suspense");
						REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
						REACT_MEMO_TYPE = symbolFor("react.memo");
						REACT_LAZY_TYPE = symbolFor("react.lazy");
						REACT_BLOCK_TYPE = symbolFor("react.block");
						REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
						REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
						REACT_SCOPE_TYPE = symbolFor("react.scope");
						REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
						REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
						REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
						REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
					}
					var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
					var FAUX_ITERATOR_SYMBOL = "@@iterator";
					function getIteratorFn(maybeIterable) {
						if (maybeIterable === null || typeof maybeIterable !== "object") {
							return null;
						}
						var maybeIterator =
							(MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
							maybeIterable[FAUX_ITERATOR_SYMBOL];
						if (typeof maybeIterator === "function") {
							return maybeIterator;
						}
						return null;
					}
					var ReactCurrentDispatcher = {
						current: null,
					};
					var ReactCurrentBatchConfig = {
						transition: 0,
					};
					var ReactCurrentOwner = {
						current: null,
					};
					var ReactDebugCurrentFrame = {};
					var currentExtraStackFrame = null;
					function setExtraStackFrame(stack) {
						{
							currentExtraStackFrame = stack;
						}
					}
					{
						ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {
							{
								currentExtraStackFrame = stack;
							}
						};
						ReactDebugCurrentFrame.getCurrentStack = null;
						ReactDebugCurrentFrame.getStackAddendum = function () {
							var stack = "";
							if (currentExtraStackFrame) {
								stack += currentExtraStackFrame;
							}
							var impl = ReactDebugCurrentFrame.getCurrentStack;
							if (impl) {
								stack += impl() || "";
							}
							return stack;
						};
					}
					var IsSomeRendererActing = {
						current: false,
					};
					var ReactSharedInternals = {
						ReactCurrentDispatcher,
						ReactCurrentBatchConfig,
						ReactCurrentOwner,
						IsSomeRendererActing,
						assign: _assign,
					};
					{
						ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
					}
					function warn2(format) {
						{
							for (
								var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1;
								_key < _len;
								_key++
							) {
								args[_key - 1] = arguments[_key];
							}
							printWarning("warn", format, args);
						}
					}
					function error3(format) {
						{
							for (
								var _len2 = arguments.length,
									args = new Array(_len2 > 1 ? _len2 - 1 : 0),
									_key2 = 1;
								_key2 < _len2;
								_key2++
							) {
								args[_key2 - 1] = arguments[_key2];
							}
							printWarning("error", format, args);
						}
					}
					function printWarning(level, format, args) {
						{
							var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
							var stack = ReactDebugCurrentFrame2.getStackAddendum();
							if (stack !== "") {
								format += "%s";
								args = args.concat([stack]);
							}
							var argsWithFormat = args.map(function (item) {
								return "" + item;
							});
							argsWithFormat.unshift("Warning: " + format);
							Function.prototype.apply.call(console[level], console, argsWithFormat);
						}
					}
					var didWarnStateUpdateForUnmountedComponent = {};
					function warnNoop(publicInstance, callerName) {
						{
							var _constructor = publicInstance.constructor;
							var componentName =
								(_constructor && (_constructor.displayName || _constructor.name)) || "ReactClass";
							var warningKey = componentName + "." + callerName;
							if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
								return;
							}
							error3(
								"Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.",
								callerName,
								componentName
							);
							didWarnStateUpdateForUnmountedComponent[warningKey] = true;
						}
					}
					var ReactNoopUpdateQueue = {
						isMounted: function (publicInstance) {
							return false;
						},
						enqueueForceUpdate: function (publicInstance, callback, callerName) {
							warnNoop(publicInstance, "forceUpdate");
						},
						enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
							warnNoop(publicInstance, "replaceState");
						},
						enqueueSetState: function (publicInstance, partialState, callback, callerName) {
							warnNoop(publicInstance, "setState");
						},
					};
					var emptyObject = {};
					{
						Object.freeze(emptyObject);
					}
					function Component(props, context, updater) {
						this.props = props;
						this.context = context;
						this.refs = emptyObject;
						this.updater = updater || ReactNoopUpdateQueue;
					}
					Component.prototype.isReactComponent = {};
					Component.prototype.setState = function (partialState, callback) {
						if (
							!(
								typeof partialState === "object" ||
								typeof partialState === "function" ||
								partialState == null
							)
						) {
							{
								throw Error(
									"setState(...): takes an object of state variables to update or a function which returns an object of state variables."
								);
							}
						}
						this.updater.enqueueSetState(this, partialState, callback, "setState");
					};
					Component.prototype.forceUpdate = function (callback) {
						this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
					};
					{
						var deprecatedAPIs = {
							isMounted: [
								"isMounted",
								"Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks.",
							],
							replaceState: [
								"replaceState",
								"Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236).",
							],
						};
						var defineDeprecationWarning = function (methodName, info) {
							Object.defineProperty(Component.prototype, methodName, {
								get: function () {
									warn2(
										"%s(...) is deprecated in plain JavaScript React classes. %s",
										info[0],
										info[1]
									);
									return void 0;
								},
							});
						};
						for (var fnName in deprecatedAPIs) {
							if (deprecatedAPIs.hasOwnProperty(fnName)) {
								defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
							}
						}
					}
					function ComponentDummy() {}
					ComponentDummy.prototype = Component.prototype;
					function PureComponent(props, context, updater) {
						this.props = props;
						this.context = context;
						this.refs = emptyObject;
						this.updater = updater || ReactNoopUpdateQueue;
					}
					var pureComponentPrototype = (PureComponent.prototype = new ComponentDummy());
					pureComponentPrototype.constructor = PureComponent;
					_assign(pureComponentPrototype, Component.prototype);
					pureComponentPrototype.isPureReactComponent = true;
					function createRef() {
						var refObject = {
							current: null,
						};
						{
							Object.seal(refObject);
						}
						return refObject;
					}
					function getWrappedName(outerType, innerType, wrapperName) {
						var functionName = innerType.displayName || innerType.name || "";
						return (
							outerType.displayName ||
							(functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName)
						);
					}
					function getContextName(type) {
						return type.displayName || "Context";
					}
					function getComponentName(type) {
						if (type == null) {
							return null;
						}
						{
							if (typeof type.tag === "number") {
								error3(
									"Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue."
								);
							}
						}
						if (typeof type === "function") {
							return type.displayName || type.name || null;
						}
						if (typeof type === "string") {
							return type;
						}
						switch (type) {
							case exports.Fragment:
								return "Fragment";
							case REACT_PORTAL_TYPE:
								return "Portal";
							case exports.Profiler:
								return "Profiler";
							case exports.StrictMode:
								return "StrictMode";
							case exports.Suspense:
								return "Suspense";
							case REACT_SUSPENSE_LIST_TYPE:
								return "SuspenseList";
						}
						if (typeof type === "object") {
							switch (type.$$typeof) {
								case REACT_CONTEXT_TYPE:
									var context = type;
									return getContextName(context) + ".Consumer";
								case REACT_PROVIDER_TYPE:
									var provider = type;
									return getContextName(provider._context) + ".Provider";
								case REACT_FORWARD_REF_TYPE:
									return getWrappedName(type, type.render, "ForwardRef");
								case REACT_MEMO_TYPE:
									return getComponentName(type.type);
								case REACT_BLOCK_TYPE:
									return getComponentName(type._render);
								case REACT_LAZY_TYPE: {
									var lazyComponent = type;
									var payload = lazyComponent._payload;
									var init2 = lazyComponent._init;
									try {
										return getComponentName(init2(payload));
									} catch (x) {
										return null;
									}
								}
							}
						}
						return null;
					}
					var hasOwnProperty = Object.prototype.hasOwnProperty;
					var RESERVED_PROPS = {
						key: true,
						ref: true,
						__self: true,
						__source: true,
					};
					var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
					{
						didWarnAboutStringRefs = {};
					}
					function hasValidRef(config) {
						{
							if (hasOwnProperty.call(config, "ref")) {
								var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
								if (getter && getter.isReactWarning) {
									return false;
								}
							}
						}
						return config.ref !== void 0;
					}
					function hasValidKey(config) {
						{
							if (hasOwnProperty.call(config, "key")) {
								var getter = Object.getOwnPropertyDescriptor(config, "key").get;
								if (getter && getter.isReactWarning) {
									return false;
								}
							}
						}
						return config.key !== void 0;
					}
					function defineKeyPropWarningGetter(props, displayName) {
						var warnAboutAccessingKey = function () {
							{
								if (!specialPropKeyWarningShown) {
									specialPropKeyWarningShown = true;
									error3(
										"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)",
										displayName
									);
								}
							}
						};
						warnAboutAccessingKey.isReactWarning = true;
						Object.defineProperty(props, "key", {
							get: warnAboutAccessingKey,
							configurable: true,
						});
					}
					function defineRefPropWarningGetter(props, displayName) {
						var warnAboutAccessingRef = function () {
							{
								if (!specialPropRefWarningShown) {
									specialPropRefWarningShown = true;
									error3(
										"%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)",
										displayName
									);
								}
							}
						};
						warnAboutAccessingRef.isReactWarning = true;
						Object.defineProperty(props, "ref", {
							get: warnAboutAccessingRef,
							configurable: true,
						});
					}
					function warnIfStringRefCannotBeAutoConverted(config) {
						{
							if (
								typeof config.ref === "string" &&
								ReactCurrentOwner.current &&
								config.__self &&
								ReactCurrentOwner.current.stateNode !== config.__self
							) {
								var componentName = getComponentName(ReactCurrentOwner.current.type);
								if (!didWarnAboutStringRefs[componentName]) {
									error3(
										'Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref',
										componentName,
										config.ref
									);
									didWarnAboutStringRefs[componentName] = true;
								}
							}
						}
					}
					var ReactElement = function (type, key, ref, self2, source, owner, props) {
						var element = {
							$$typeof: REACT_ELEMENT_TYPE,
							type,
							key,
							ref,
							props,
							_owner: owner,
						};
						{
							element._store = {};
							Object.defineProperty(element._store, "validated", {
								configurable: false,
								enumerable: false,
								writable: true,
								value: false,
							});
							Object.defineProperty(element, "_self", {
								configurable: false,
								enumerable: false,
								writable: false,
								value: self2,
							});
							Object.defineProperty(element, "_source", {
								configurable: false,
								enumerable: false,
								writable: false,
								value: source,
							});
							if (Object.freeze) {
								Object.freeze(element.props);
								Object.freeze(element);
							}
						}
						return element;
					};
					function createElement(type, config, children2) {
						var propName;
						var props = {};
						var key = null;
						var ref = null;
						var self2 = null;
						var source = null;
						if (config != null) {
							if (hasValidRef(config)) {
								ref = config.ref;
								{
									warnIfStringRefCannotBeAutoConverted(config);
								}
							}
							if (hasValidKey(config)) {
								key = "" + config.key;
							}
							self2 = config.__self === void 0 ? null : config.__self;
							source = config.__source === void 0 ? null : config.__source;
							for (propName in config) {
								if (
									hasOwnProperty.call(config, propName) &&
									!RESERVED_PROPS.hasOwnProperty(propName)
								) {
									props[propName] = config[propName];
								}
							}
						}
						var childrenLength = arguments.length - 2;
						if (childrenLength === 1) {
							props.children = children2;
						} else if (childrenLength > 1) {
							var childArray = Array(childrenLength);
							for (var i = 0; i < childrenLength; i++) {
								childArray[i] = arguments[i + 2];
							}
							{
								if (Object.freeze) {
									Object.freeze(childArray);
								}
							}
							props.children = childArray;
						}
						if (type && type.defaultProps) {
							var defaultProps = type.defaultProps;
							for (propName in defaultProps) {
								if (props[propName] === void 0) {
									props[propName] = defaultProps[propName];
								}
							}
						}
						{
							if (key || ref) {
								var displayName =
									typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
								if (key) {
									defineKeyPropWarningGetter(props, displayName);
								}
								if (ref) {
									defineRefPropWarningGetter(props, displayName);
								}
							}
						}
						return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
					}
					function cloneAndReplaceKey(oldElement, newKey) {
						var newElement = ReactElement(
							oldElement.type,
							newKey,
							oldElement.ref,
							oldElement._self,
							oldElement._source,
							oldElement._owner,
							oldElement.props
						);
						return newElement;
					}
					function cloneElement(element, config, children2) {
						if (!!(element === null || element === void 0)) {
							{
								throw Error(
									"React.cloneElement(...): The argument must be a React element, but you passed " +
										element +
										"."
								);
							}
						}
						var propName;
						var props = _assign({}, element.props);
						var key = element.key;
						var ref = element.ref;
						var self2 = element._self;
						var source = element._source;
						var owner = element._owner;
						if (config != null) {
							if (hasValidRef(config)) {
								ref = config.ref;
								owner = ReactCurrentOwner.current;
							}
							if (hasValidKey(config)) {
								key = "" + config.key;
							}
							var defaultProps;
							if (element.type && element.type.defaultProps) {
								defaultProps = element.type.defaultProps;
							}
							for (propName in config) {
								if (
									hasOwnProperty.call(config, propName) &&
									!RESERVED_PROPS.hasOwnProperty(propName)
								) {
									if (config[propName] === void 0 && defaultProps !== void 0) {
										props[propName] = defaultProps[propName];
									} else {
										props[propName] = config[propName];
									}
								}
							}
						}
						var childrenLength = arguments.length - 2;
						if (childrenLength === 1) {
							props.children = children2;
						} else if (childrenLength > 1) {
							var childArray = Array(childrenLength);
							for (var i = 0; i < childrenLength; i++) {
								childArray[i] = arguments[i + 2];
							}
							props.children = childArray;
						}
						return ReactElement(element.type, key, ref, self2, source, owner, props);
					}
					function isValidElement(object) {
						return (
							typeof object === "object" &&
							object !== null &&
							object.$$typeof === REACT_ELEMENT_TYPE
						);
					}
					var SEPARATOR = ".";
					var SUBSEPARATOR = ":";
					function escape2(key) {
						var escapeRegex = /[=:]/g;
						var escaperLookup = {
							"=": "=0",
							":": "=2",
						};
						var escapedString = key.replace(escapeRegex, function (match) {
							return escaperLookup[match];
						});
						return "$" + escapedString;
					}
					var didWarnAboutMaps = false;
					var userProvidedKeyEscapeRegex = /\/+/g;
					function escapeUserProvidedKey(text) {
						return text.replace(userProvidedKeyEscapeRegex, "$&/");
					}
					function getElementKey(element, index2) {
						if (typeof element === "object" && element !== null && element.key != null) {
							return escape2("" + element.key);
						}
						return index2.toString(36);
					}
					function mapIntoArray(children2, array, escapedPrefix, nameSoFar, callback) {
						var type = typeof children2;
						if (type === "undefined" || type === "boolean") {
							children2 = null;
						}
						var invokeCallback = false;
						if (children2 === null) {
							invokeCallback = true;
						} else {
							switch (type) {
								case "string":
								case "number":
									invokeCallback = true;
									break;
								case "object":
									switch (children2.$$typeof) {
										case REACT_ELEMENT_TYPE:
										case REACT_PORTAL_TYPE:
											invokeCallback = true;
									}
							}
						}
						if (invokeCallback) {
							var _child = children2;
							var mappedChild = callback(_child);
							var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
							if (Array.isArray(mappedChild)) {
								var escapedChildKey = "";
								if (childKey != null) {
									escapedChildKey = escapeUserProvidedKey(childKey) + "/";
								}
								mapIntoArray(mappedChild, array, escapedChildKey, "", function (c20) {
									return c20;
								});
							} else if (mappedChild != null) {
								if (isValidElement(mappedChild)) {
									mappedChild = cloneAndReplaceKey(
										mappedChild,
										escapedPrefix +
											(mappedChild.key && (!_child || _child.key !== mappedChild.key)
												? escapeUserProvidedKey("" + mappedChild.key) + "/"
												: "") +
											childKey
									);
								}
								array.push(mappedChild);
							}
							return 1;
						}
						var child;
						var nextName;
						var subtreeCount = 0;
						var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
						if (Array.isArray(children2)) {
							for (var i = 0; i < children2.length; i++) {
								child = children2[i];
								nextName = nextNamePrefix + getElementKey(child, i);
								subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
							}
						} else {
							var iteratorFn = getIteratorFn(children2);
							if (typeof iteratorFn === "function") {
								var iterableChildren = children2;
								{
									if (iteratorFn === iterableChildren.entries) {
										if (!didWarnAboutMaps) {
											warn2(
												"Using Maps as children is not supported. Use an array of keyed ReactElements instead."
											);
										}
										didWarnAboutMaps = true;
									}
								}
								var iterator = iteratorFn.call(iterableChildren);
								var step;
								var ii = 0;
								while (!(step = iterator.next()).done) {
									child = step.value;
									nextName = nextNamePrefix + getElementKey(child, ii++);
									subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
								}
							} else if (type === "object") {
								var childrenString = "" + children2;
								{
									{
										throw Error(
											"Objects are not valid as a React child (found: " +
												(childrenString === "[object Object]"
													? "object with keys {" + Object.keys(children2).join(", ") + "}"
													: childrenString) +
												"). If you meant to render a collection of children, use an array instead."
										);
									}
								}
							}
						}
						return subtreeCount;
					}
					function mapChildren(children2, func, context) {
						if (children2 == null) {
							return children2;
						}
						var result = [];
						var count = 0;
						mapIntoArray(children2, result, "", "", function (child) {
							return func.call(context, child, count++);
						});
						return result;
					}
					function countChildren(children2) {
						var n = 0;
						mapChildren(children2, function () {
							n++;
						});
						return n;
					}
					function forEachChildren(children2, forEachFunc, forEachContext) {
						mapChildren(
							children2,
							function () {
								forEachFunc.apply(this, arguments);
							},
							forEachContext
						);
					}
					function toArray2(children2) {
						return (
							mapChildren(children2, function (child) {
								return child;
							}) || []
						);
					}
					function onlyChild(children2) {
						if (!isValidElement(children2)) {
							{
								throw Error(
									"React.Children.only expected to receive a single React element child."
								);
							}
						}
						return children2;
					}
					function createContext2(defaultValue, calculateChangedBits) {
						if (calculateChangedBits === void 0) {
							calculateChangedBits = null;
						} else {
							{
								if (calculateChangedBits !== null && typeof calculateChangedBits !== "function") {
									error3(
										"createContext: Expected the optional second argument to be a function. Instead received: %s",
										calculateChangedBits
									);
								}
							}
						}
						var context = {
							$$typeof: REACT_CONTEXT_TYPE,
							_calculateChangedBits: calculateChangedBits,
							_currentValue: defaultValue,
							_currentValue2: defaultValue,
							_threadCount: 0,
							Provider: null,
							Consumer: null,
						};
						context.Provider = {
							$$typeof: REACT_PROVIDER_TYPE,
							_context: context,
						};
						var hasWarnedAboutUsingNestedContextConsumers = false;
						var hasWarnedAboutUsingConsumerProvider = false;
						var hasWarnedAboutDisplayNameOnConsumer = false;
						{
							var Consumer = {
								$$typeof: REACT_CONTEXT_TYPE,
								_context: context,
								_calculateChangedBits: context._calculateChangedBits,
							};
							Object.defineProperties(Consumer, {
								Provider: {
									get: function () {
										if (!hasWarnedAboutUsingConsumerProvider) {
											hasWarnedAboutUsingConsumerProvider = true;
											error3(
												"Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?"
											);
										}
										return context.Provider;
									},
									set: function (_Provider) {
										context.Provider = _Provider;
									},
								},
								_currentValue: {
									get: function () {
										return context._currentValue;
									},
									set: function (_currentValue) {
										context._currentValue = _currentValue;
									},
								},
								_currentValue2: {
									get: function () {
										return context._currentValue2;
									},
									set: function (_currentValue2) {
										context._currentValue2 = _currentValue2;
									},
								},
								_threadCount: {
									get: function () {
										return context._threadCount;
									},
									set: function (_threadCount) {
										context._threadCount = _threadCount;
									},
								},
								Consumer: {
									get: function () {
										if (!hasWarnedAboutUsingNestedContextConsumers) {
											hasWarnedAboutUsingNestedContextConsumers = true;
											error3(
												"Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?"
											);
										}
										return context.Consumer;
									},
								},
								displayName: {
									get: function () {
										return context.displayName;
									},
									set: function (displayName) {
										if (!hasWarnedAboutDisplayNameOnConsumer) {
											warn2(
												"Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.",
												displayName
											);
											hasWarnedAboutDisplayNameOnConsumer = true;
										}
									},
								},
							});
							context.Consumer = Consumer;
						}
						{
							context._currentRenderer = null;
							context._currentRenderer2 = null;
						}
						return context;
					}
					var Uninitialized = -1;
					var Pending = 0;
					var Resolved = 1;
					var Rejected = 2;
					function lazyInitializer(payload) {
						if (payload._status === Uninitialized) {
							var ctor = payload._result;
							var thenable = ctor();
							var pending = payload;
							pending._status = Pending;
							pending._result = thenable;
							thenable.then(
								function (moduleObject) {
									if (payload._status === Pending) {
										var defaultExport = moduleObject.default;
										{
											if (defaultExport === void 0) {
												error3(
													"lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))",
													moduleObject
												);
											}
										}
										var resolved = payload;
										resolved._status = Resolved;
										resolved._result = defaultExport;
									}
								},
								function (error4) {
									if (payload._status === Pending) {
										var rejected = payload;
										rejected._status = Rejected;
										rejected._result = error4;
									}
								}
							);
						}
						if (payload._status === Resolved) {
							return payload._result;
						} else {
							throw payload._result;
						}
					}
					function lazy(ctor) {
						var payload = {
							_status: -1,
							_result: ctor,
						};
						var lazyType = {
							$$typeof: REACT_LAZY_TYPE,
							_payload: payload,
							_init: lazyInitializer,
						};
						{
							var defaultProps;
							var propTypes;
							Object.defineProperties(lazyType, {
								defaultProps: {
									configurable: true,
									get: function () {
										return defaultProps;
									},
									set: function (newDefaultProps) {
										error3(
											"React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."
										);
										defaultProps = newDefaultProps;
										Object.defineProperty(lazyType, "defaultProps", {
											enumerable: true,
										});
									},
								},
								propTypes: {
									configurable: true,
									get: function () {
										return propTypes;
									},
									set: function (newPropTypes) {
										error3(
											"React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."
										);
										propTypes = newPropTypes;
										Object.defineProperty(lazyType, "propTypes", {
											enumerable: true,
										});
									},
								},
							});
						}
						return lazyType;
					}
					function forwardRef(render) {
						{
							if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
								error3(
									"forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...))."
								);
							} else if (typeof render !== "function") {
								error3(
									"forwardRef requires a render function but was given %s.",
									render === null ? "null" : typeof render
								);
							} else {
								if (render.length !== 0 && render.length !== 2) {
									error3(
										"forwardRef render functions accept exactly two parameters: props and ref. %s",
										render.length === 1
											? "Did you forget to use the ref parameter?"
											: "Any additional parameter will be undefined."
									);
								}
							}
							if (render != null) {
								if (render.defaultProps != null || render.propTypes != null) {
									error3(
										"forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?"
									);
								}
							}
						}
						var elementType = {
							$$typeof: REACT_FORWARD_REF_TYPE,
							render,
						};
						{
							var ownName;
							Object.defineProperty(elementType, "displayName", {
								enumerable: false,
								configurable: true,
								get: function () {
									return ownName;
								},
								set: function (name2) {
									ownName = name2;
									if (render.displayName == null) {
										render.displayName = name2;
									}
								},
							});
						}
						return elementType;
					}
					var enableScopeAPI = false;
					function isValidElementType(type) {
						if (typeof type === "string" || typeof type === "function") {
							return true;
						}
						if (
							type === exports.Fragment ||
							type === exports.Profiler ||
							type === REACT_DEBUG_TRACING_MODE_TYPE ||
							type === exports.StrictMode ||
							type === exports.Suspense ||
							type === REACT_SUSPENSE_LIST_TYPE ||
							type === REACT_LEGACY_HIDDEN_TYPE ||
							enableScopeAPI
						) {
							return true;
						}
						if (typeof type === "object" && type !== null) {
							if (
								type.$$typeof === REACT_LAZY_TYPE ||
								type.$$typeof === REACT_MEMO_TYPE ||
								type.$$typeof === REACT_PROVIDER_TYPE ||
								type.$$typeof === REACT_CONTEXT_TYPE ||
								type.$$typeof === REACT_FORWARD_REF_TYPE ||
								type.$$typeof === REACT_FUNDAMENTAL_TYPE ||
								type.$$typeof === REACT_BLOCK_TYPE ||
								type[0] === REACT_SERVER_BLOCK_TYPE
							) {
								return true;
							}
						}
						return false;
					}
					function memo(type, compare) {
						{
							if (!isValidElementType(type)) {
								error3(
									"memo: The first argument must be a component. Instead received: %s",
									type === null ? "null" : typeof type
								);
							}
						}
						var elementType = {
							$$typeof: REACT_MEMO_TYPE,
							type,
							compare: compare === void 0 ? null : compare,
						};
						{
							var ownName;
							Object.defineProperty(elementType, "displayName", {
								enumerable: false,
								configurable: true,
								get: function () {
									return ownName;
								},
								set: function (name2) {
									ownName = name2;
									if (type.displayName == null) {
										type.displayName = name2;
									}
								},
							});
						}
						return elementType;
					}
					function resolveDispatcher() {
						var dispatcher = ReactCurrentDispatcher.current;
						if (!(dispatcher !== null)) {
							{
								throw Error(
									"Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem."
								);
							}
						}
						return dispatcher;
					}
					function useContext2(Context, unstable_observedBits) {
						var dispatcher = resolveDispatcher();
						{
							if (unstable_observedBits !== void 0) {
								error3(
									"useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s",
									unstable_observedBits,
									typeof unstable_observedBits === "number" && Array.isArray(arguments[2])
										? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks"
										: ""
								);
							}
							if (Context._context !== void 0) {
								var realContext = Context._context;
								if (realContext.Consumer === Context) {
									error3(
										"Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?"
									);
								} else if (realContext.Provider === Context) {
									error3(
										"Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?"
									);
								}
							}
						}
						return dispatcher.useContext(Context, unstable_observedBits);
					}
					function useState24(initialState) {
						var dispatcher = resolveDispatcher();
						return dispatcher.useState(initialState);
					}
					function useReducer(reducer, initialArg, init2) {
						var dispatcher = resolveDispatcher();
						return dispatcher.useReducer(reducer, initialArg, init2);
					}
					function useRef5(initialValue) {
						var dispatcher = resolveDispatcher();
						return dispatcher.useRef(initialValue);
					}
					function useEffect3(create, deps) {
						var dispatcher = resolveDispatcher();
						return dispatcher.useEffect(create, deps);
					}
					function useLayoutEffect2(create, deps) {
						var dispatcher = resolveDispatcher();
						return dispatcher.useLayoutEffect(create, deps);
					}
					function useCallback16(callback, deps) {
						var dispatcher = resolveDispatcher();
						return dispatcher.useCallback(callback, deps);
					}
					function useMemo(create, deps) {
						var dispatcher = resolveDispatcher();
						return dispatcher.useMemo(create, deps);
					}
					function useImperativeHandle(ref, create, deps) {
						var dispatcher = resolveDispatcher();
						return dispatcher.useImperativeHandle(ref, create, deps);
					}
					function useDebugValue(value, formatterFn) {
						{
							var dispatcher = resolveDispatcher();
							return dispatcher.useDebugValue(value, formatterFn);
						}
					}
					var disabledDepth = 0;
					var prevLog;
					var prevInfo;
					var prevWarn;
					var prevError;
					var prevGroup;
					var prevGroupCollapsed;
					var prevGroupEnd;
					function disabledLog() {}
					disabledLog.__reactDisabledLog = true;
					function disableLogs() {
						{
							if (disabledDepth === 0) {
								prevLog = console.log;
								prevInfo = console.info;
								prevWarn = console.warn;
								prevError = console.error;
								prevGroup = console.group;
								prevGroupCollapsed = console.groupCollapsed;
								prevGroupEnd = console.groupEnd;
								var props = {
									configurable: true,
									enumerable: true,
									value: disabledLog,
									writable: true,
								};
								Object.defineProperties(console, {
									info: props,
									log: props,
									warn: props,
									error: props,
									group: props,
									groupCollapsed: props,
									groupEnd: props,
								});
							}
							disabledDepth++;
						}
					}
					function reenableLogs() {
						{
							disabledDepth--;
							if (disabledDepth === 0) {
								var props = {
									configurable: true,
									enumerable: true,
									writable: true,
								};
								Object.defineProperties(console, {
									log: _assign({}, props, {
										value: prevLog,
									}),
									info: _assign({}, props, {
										value: prevInfo,
									}),
									warn: _assign({}, props, {
										value: prevWarn,
									}),
									error: _assign({}, props, {
										value: prevError,
									}),
									group: _assign({}, props, {
										value: prevGroup,
									}),
									groupCollapsed: _assign({}, props, {
										value: prevGroupCollapsed,
									}),
									groupEnd: _assign({}, props, {
										value: prevGroupEnd,
									}),
								});
							}
							if (disabledDepth < 0) {
								error3(
									"disabledDepth fell below zero. This is a bug in React. Please file an issue."
								);
							}
						}
					}
					var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
					var prefix;
					function describeBuiltInComponentFrame(name2, source, ownerFn) {
						{
							if (prefix === void 0) {
								try {
									throw Error();
								} catch (x) {
									var match = x.stack.trim().match(/\n( *(at )?)/);
									prefix = (match && match[1]) || "";
								}
							}
							return "\n" + prefix + name2;
						}
					}
					var reentry = false;
					var componentFrameCache;
					{
						var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
						componentFrameCache = new PossiblyWeakMap();
					}
					function describeNativeComponentFrame(fn, construct) {
						if (!fn || reentry) {
							return "";
						}
						{
							var frame = componentFrameCache.get(fn);
							if (frame !== void 0) {
								return frame;
							}
						}
						var control;
						reentry = true;
						var previousPrepareStackTrace = Error.prepareStackTrace;
						Error.prepareStackTrace = void 0;
						var previousDispatcher;
						{
							previousDispatcher = ReactCurrentDispatcher$1.current;
							ReactCurrentDispatcher$1.current = null;
							disableLogs();
						}
						try {
							if (construct) {
								var Fake = function () {
									throw Error();
								};
								Object.defineProperty(Fake.prototype, "props", {
									set: function () {
										throw Error();
									},
								});
								if (typeof Reflect === "object" && Reflect.construct) {
									try {
										Reflect.construct(Fake, []);
									} catch (x) {
										control = x;
									}
									Reflect.construct(fn, [], Fake);
								} else {
									try {
										Fake.call();
									} catch (x) {
										control = x;
									}
									fn.call(Fake.prototype);
								}
							} else {
								try {
									throw Error();
								} catch (x) {
									control = x;
								}
								fn();
							}
						} catch (sample) {
							if (sample && control && typeof sample.stack === "string") {
								var sampleLines = sample.stack.split("\n");
								var controlLines = control.stack.split("\n");
								var s = sampleLines.length - 1;
								var c20 = controlLines.length - 1;
								while (s >= 1 && c20 >= 0 && sampleLines[s] !== controlLines[c20]) {
									c20--;
								}
								for (; s >= 1 && c20 >= 0; s--, c20--) {
									if (sampleLines[s] !== controlLines[c20]) {
										if (s !== 1 || c20 !== 1) {
											do {
												s--;
												c20--;
												if (c20 < 0 || sampleLines[s] !== controlLines[c20]) {
													var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
													{
														if (typeof fn === "function") {
															componentFrameCache.set(fn, _frame);
														}
													}
													return _frame;
												}
											} while (s >= 1 && c20 >= 0);
										}
										break;
									}
								}
							}
						} finally {
							reentry = false;
							{
								ReactCurrentDispatcher$1.current = previousDispatcher;
								reenableLogs();
							}
							Error.prepareStackTrace = previousPrepareStackTrace;
						}
						var name2 = fn ? fn.displayName || fn.name : "";
						var syntheticFrame = name2 ? describeBuiltInComponentFrame(name2) : "";
						{
							if (typeof fn === "function") {
								componentFrameCache.set(fn, syntheticFrame);
							}
						}
						return syntheticFrame;
					}
					function describeFunctionComponentFrame(fn, source, ownerFn) {
						{
							return describeNativeComponentFrame(fn, false);
						}
					}
					function shouldConstruct(Component2) {
						var prototype = Component2.prototype;
						return !!(prototype && prototype.isReactComponent);
					}
					function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
						if (type == null) {
							return "";
						}
						if (typeof type === "function") {
							{
								return describeNativeComponentFrame(type, shouldConstruct(type));
							}
						}
						if (typeof type === "string") {
							return describeBuiltInComponentFrame(type);
						}
						switch (type) {
							case exports.Suspense:
								return describeBuiltInComponentFrame("Suspense");
							case REACT_SUSPENSE_LIST_TYPE:
								return describeBuiltInComponentFrame("SuspenseList");
						}
						if (typeof type === "object") {
							switch (type.$$typeof) {
								case REACT_FORWARD_REF_TYPE:
									return describeFunctionComponentFrame(type.render);
								case REACT_MEMO_TYPE:
									return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
								case REACT_BLOCK_TYPE:
									return describeFunctionComponentFrame(type._render);
								case REACT_LAZY_TYPE: {
									var lazyComponent = type;
									var payload = lazyComponent._payload;
									var init2 = lazyComponent._init;
									try {
										return describeUnknownElementTypeFrameInDEV(init2(payload), source, ownerFn);
									} catch (x) {}
								}
							}
						}
						return "";
					}
					var loggedTypeFailures = {};
					var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
					function setCurrentlyValidatingElement(element) {
						{
							if (element) {
								var owner = element._owner;
								var stack = describeUnknownElementTypeFrameInDEV(
									element.type,
									element._source,
									owner ? owner.type : null
								);
								ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
							} else {
								ReactDebugCurrentFrame$1.setExtraStackFrame(null);
							}
						}
					}
					function checkPropTypes(typeSpecs, values, location, componentName, element) {
						{
							var has2 = Function.call.bind(Object.prototype.hasOwnProperty);
							for (var typeSpecName in typeSpecs) {
								if (has2(typeSpecs, typeSpecName)) {
									var error$1 = void 0;
									try {
										if (typeof typeSpecs[typeSpecName] !== "function") {
											var err = Error(
												(componentName || "React class") +
													": " +
													location +
													" type `" +
													typeSpecName +
													"` is invalid; it must be a function, usually from the `prop-types` package, but received `" +
													typeof typeSpecs[typeSpecName] +
													"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
											);
											err.name = "Invariant Violation";
											throw err;
										}
										error$1 = typeSpecs[typeSpecName](
											values,
											typeSpecName,
											componentName,
											location,
											null,
											"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"
										);
									} catch (ex) {
										error$1 = ex;
									}
									if (error$1 && !(error$1 instanceof Error)) {
										setCurrentlyValidatingElement(element);
										error3(
											"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",
											componentName || "React class",
											location,
											typeSpecName,
											typeof error$1
										);
										setCurrentlyValidatingElement(null);
									}
									if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
										loggedTypeFailures[error$1.message] = true;
										setCurrentlyValidatingElement(element);
										error3("Failed %s type: %s", location, error$1.message);
										setCurrentlyValidatingElement(null);
									}
								}
							}
						}
					}
					function setCurrentlyValidatingElement$1(element) {
						{
							if (element) {
								var owner = element._owner;
								var stack = describeUnknownElementTypeFrameInDEV(
									element.type,
									element._source,
									owner ? owner.type : null
								);
								setExtraStackFrame(stack);
							} else {
								setExtraStackFrame(null);
							}
						}
					}
					var propTypesMisspellWarningShown;
					{
						propTypesMisspellWarningShown = false;
					}
					function getDeclarationErrorAddendum() {
						if (ReactCurrentOwner.current) {
							var name2 = getComponentName(ReactCurrentOwner.current.type);
							if (name2) {
								return "\n\nCheck the render method of `" + name2 + "`.";
							}
						}
						return "";
					}
					function getSourceInfoErrorAddendum(source) {
						if (source !== void 0) {
							var fileName = source.fileName.replace(/^.*[\\\/]/, "");
							var lineNumber = source.lineNumber;
							return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
						}
						return "";
					}
					function getSourceInfoErrorAddendumForProps(elementProps) {
						if (elementProps !== null && elementProps !== void 0) {
							return getSourceInfoErrorAddendum(elementProps.__source);
						}
						return "";
					}
					var ownerHasKeyUseWarning = {};
					function getCurrentComponentErrorInfo(parentType) {
						var info = getDeclarationErrorAddendum();
						if (!info) {
							var parentName =
								typeof parentType === "string"
									? parentType
									: parentType.displayName || parentType.name;
							if (parentName) {
								info = "\n\nCheck the top-level render call using <" + parentName + ">.";
							}
						}
						return info;
					}
					function validateExplicitKey(element, parentType) {
						if (!element._store || element._store.validated || element.key != null) {
							return;
						}
						element._store.validated = true;
						var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
						if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
							return;
						}
						ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
						var childOwner = "";
						if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
							childOwner =
								" It was passed a child from " + getComponentName(element._owner.type) + ".";
						}
						{
							setCurrentlyValidatingElement$1(element);
							error3(
								'Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.',
								currentComponentErrorInfo,
								childOwner
							);
							setCurrentlyValidatingElement$1(null);
						}
					}
					function validateChildKeys(node, parentType) {
						if (typeof node !== "object") {
							return;
						}
						if (Array.isArray(node)) {
							for (var i = 0; i < node.length; i++) {
								var child = node[i];
								if (isValidElement(child)) {
									validateExplicitKey(child, parentType);
								}
							}
						} else if (isValidElement(node)) {
							if (node._store) {
								node._store.validated = true;
							}
						} else if (node) {
							var iteratorFn = getIteratorFn(node);
							if (typeof iteratorFn === "function") {
								if (iteratorFn !== node.entries) {
									var iterator = iteratorFn.call(node);
									var step;
									while (!(step = iterator.next()).done) {
										if (isValidElement(step.value)) {
											validateExplicitKey(step.value, parentType);
										}
									}
								}
							}
						}
					}
					function validatePropTypes(element) {
						{
							var type = element.type;
							if (type === null || type === void 0 || typeof type === "string") {
								return;
							}
							var propTypes;
							if (typeof type === "function") {
								propTypes = type.propTypes;
							} else if (
								typeof type === "object" &&
								(type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)
							) {
								propTypes = type.propTypes;
							} else {
								return;
							}
							if (propTypes) {
								var name2 = getComponentName(type);
								checkPropTypes(propTypes, element.props, "prop", name2, element);
							} else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
								propTypesMisspellWarningShown = true;
								var _name = getComponentName(type);
								error3(
									"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?",
									_name || "Unknown"
								);
							}
							if (
								typeof type.getDefaultProps === "function" &&
								!type.getDefaultProps.isReactClassApproved
							) {
								error3(
									"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead."
								);
							}
						}
					}
					function validateFragmentProps(fragment) {
						{
							var keys2 = Object.keys(fragment.props);
							for (var i = 0; i < keys2.length; i++) {
								var key = keys2[i];
								if (key !== "children" && key !== "key") {
									setCurrentlyValidatingElement$1(fragment);
									error3(
										"Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.",
										key
									);
									setCurrentlyValidatingElement$1(null);
									break;
								}
							}
							if (fragment.ref !== null) {
								setCurrentlyValidatingElement$1(fragment);
								error3("Invalid attribute `ref` supplied to `React.Fragment`.");
								setCurrentlyValidatingElement$1(null);
							}
						}
					}
					function createElementWithValidation(type, props, children2) {
						var validType = isValidElementType(type);
						if (!validType) {
							var info = "";
							if (
								type === void 0 ||
								(typeof type === "object" && type !== null && Object.keys(type).length === 0)
							) {
								info +=
									" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
							}
							var sourceInfo = getSourceInfoErrorAddendumForProps(props);
							if (sourceInfo) {
								info += sourceInfo;
							} else {
								info += getDeclarationErrorAddendum();
							}
							var typeString;
							if (type === null) {
								typeString = "null";
							} else if (Array.isArray(type)) {
								typeString = "array";
							} else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
								typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
								info = " Did you accidentally export a JSX literal instead of a component?";
							} else {
								typeString = typeof type;
							}
							{
								error3(
									"React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s",
									typeString,
									info
								);
							}
						}
						var element = createElement.apply(this, arguments);
						if (element == null) {
							return element;
						}
						if (validType) {
							for (var i = 2; i < arguments.length; i++) {
								validateChildKeys(arguments[i], type);
							}
						}
						if (type === exports.Fragment) {
							validateFragmentProps(element);
						} else {
							validatePropTypes(element);
						}
						return element;
					}
					var didWarnAboutDeprecatedCreateFactory = false;
					function createFactoryWithValidation(type) {
						var validatedFactory = createElementWithValidation.bind(null, type);
						validatedFactory.type = type;
						{
							if (!didWarnAboutDeprecatedCreateFactory) {
								didWarnAboutDeprecatedCreateFactory = true;
								warn2(
									"React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead."
								);
							}
							Object.defineProperty(validatedFactory, "type", {
								enumerable: false,
								get: function () {
									warn2(
										"Factory.type is deprecated. Access the class directly before passing it to createFactory."
									);
									Object.defineProperty(this, "type", {
										value: type,
									});
									return type;
								},
							});
						}
						return validatedFactory;
					}
					function cloneElementWithValidation(element, props, children2) {
						var newElement = cloneElement.apply(this, arguments);
						for (var i = 2; i < arguments.length; i++) {
							validateChildKeys(arguments[i], newElement.type);
						}
						validatePropTypes(newElement);
						return newElement;
					}
					{
						try {
							var frozenObject = Object.freeze({});
							new Map([[frozenObject, null]]);
							new Set([frozenObject]);
						} catch (e) {}
					}
					var createElement$1 = createElementWithValidation;
					var cloneElement$1 = cloneElementWithValidation;
					var createFactory = createFactoryWithValidation;
					var Children = {
						map: mapChildren,
						forEach: forEachChildren,
						count: countChildren,
						toArray: toArray2,
						only: onlyChild,
					};
					exports.Children = Children;
					exports.Component = Component;
					exports.PureComponent = PureComponent;
					exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
					exports.cloneElement = cloneElement$1;
					exports.createContext = createContext2;
					exports.createElement = createElement$1;
					exports.createFactory = createFactory;
					exports.createRef = createRef;
					exports.forwardRef = forwardRef;
					exports.isValidElement = isValidElement;
					exports.lazy = lazy;
					exports.memo = memo;
					exports.useCallback = useCallback16;
					exports.useContext = useContext2;
					exports.useDebugValue = useDebugValue;
					exports.useEffect = useEffect3;
					exports.useImperativeHandle = useImperativeHandle;
					exports.useLayoutEffect = useLayoutEffect2;
					exports.useMemo = useMemo;
					exports.useReducer = useReducer;
					exports.useRef = useRef5;
					exports.useState = useState24;
					exports.version = ReactVersion;
				})();
			}
		},
	});

	// ../../node_modules/react/index.js
	var require_react = __commonJS({
		"../../node_modules/react/index.js"(exports, module2) {
			"use strict";
			if (false) {
				module2.exports = null;
			} else {
				module2.exports = require_react_development();
			}
		},
	});

	// ../../node_modules/scheduler/cjs/scheduler.development.js
	var require_scheduler_development = __commonJS({
		"../../node_modules/scheduler/cjs/scheduler.development.js"(exports) {
			"use strict";
			if (true) {
				(function () {
					"use strict";
					var enableSchedulerDebugging = false;
					var enableProfiling = false;
					var requestHostCallback;
					var requestHostTimeout;
					var cancelHostTimeout;
					var requestPaint;
					var hasPerformanceNow =
						typeof performance === "object" && typeof performance.now === "function";
					if (hasPerformanceNow) {
						var localPerformance = performance;
						exports.unstable_now = function () {
							return localPerformance.now();
						};
					} else {
						var localDate = Date;
						var initialTime = localDate.now();
						exports.unstable_now = function () {
							return localDate.now() - initialTime;
						};
					}
					if (typeof window === "undefined" || typeof MessageChannel !== "function") {
						var _callback = null;
						var _timeoutID = null;
						var _flushCallback = function () {
							if (_callback !== null) {
								try {
									var currentTime = exports.unstable_now();
									var hasRemainingTime = true;
									_callback(hasRemainingTime, currentTime);
									_callback = null;
								} catch (e) {
									setTimeout(_flushCallback, 0);
									throw e;
								}
							}
						};
						requestHostCallback = function (cb) {
							if (_callback !== null) {
								setTimeout(requestHostCallback, 0, cb);
							} else {
								_callback = cb;
								setTimeout(_flushCallback, 0);
							}
						};
						requestHostTimeout = function (cb, ms) {
							_timeoutID = setTimeout(cb, ms);
						};
						cancelHostTimeout = function () {
							clearTimeout(_timeoutID);
						};
						exports.unstable_shouldYield = function () {
							return false;
						};
						requestPaint = exports.unstable_forceFrameRate = function () {};
					} else {
						var _setTimeout = window.setTimeout;
						var _clearTimeout = window.clearTimeout;
						if (typeof console !== "undefined") {
							var requestAnimationFrame = window.requestAnimationFrame;
							var cancelAnimationFrame = window.cancelAnimationFrame;
							if (typeof requestAnimationFrame !== "function") {
								console["error"](
									"This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"
								);
							}
							if (typeof cancelAnimationFrame !== "function") {
								console["error"](
									"This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"
								);
							}
						}
						var isMessageLoopRunning = false;
						var scheduledHostCallback = null;
						var taskTimeoutID = -1;
						var yieldInterval = 5;
						var deadline = 0;
						{
							exports.unstable_shouldYield = function () {
								return exports.unstable_now() >= deadline;
							};
							requestPaint = function () {};
						}
						exports.unstable_forceFrameRate = function (fps) {
							if (fps < 0 || fps > 125) {
								console["error"](
									"forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"
								);
								return;
							}
							if (fps > 0) {
								yieldInterval = Math.floor(1e3 / fps);
							} else {
								yieldInterval = 5;
							}
						};
						var performWorkUntilDeadline = function () {
							if (scheduledHostCallback !== null) {
								var currentTime = exports.unstable_now();
								deadline = currentTime + yieldInterval;
								var hasTimeRemaining = true;
								try {
									var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
									if (!hasMoreWork) {
										isMessageLoopRunning = false;
										scheduledHostCallback = null;
									} else {
										port.postMessage(null);
									}
								} catch (error3) {
									port.postMessage(null);
									throw error3;
								}
							} else {
								isMessageLoopRunning = false;
							}
						};
						var channel = new MessageChannel();
						var port = channel.port2;
						channel.port1.onmessage = performWorkUntilDeadline;
						requestHostCallback = function (callback) {
							scheduledHostCallback = callback;
							if (!isMessageLoopRunning) {
								isMessageLoopRunning = true;
								port.postMessage(null);
							}
						};
						requestHostTimeout = function (callback, ms) {
							taskTimeoutID = _setTimeout(function () {
								callback(exports.unstable_now());
							}, ms);
						};
						cancelHostTimeout = function () {
							_clearTimeout(taskTimeoutID);
							taskTimeoutID = -1;
						};
					}
					function push(heap, node) {
						var index2 = heap.length;
						heap.push(node);
						siftUp(heap, node, index2);
					}
					function peek(heap) {
						var first = heap[0];
						return first === void 0 ? null : first;
					}
					function pop(heap) {
						var first = heap[0];
						if (first !== void 0) {
							var last = heap.pop();
							if (last !== first) {
								heap[0] = last;
								siftDown(heap, last, 0);
							}
							return first;
						} else {
							return null;
						}
					}
					function siftUp(heap, node, i) {
						var index2 = i;
						while (true) {
							var parentIndex = (index2 - 1) >>> 1;
							var parent = heap[parentIndex];
							if (parent !== void 0 && compare(parent, node) > 0) {
								heap[parentIndex] = node;
								heap[index2] = parent;
								index2 = parentIndex;
							} else {
								return;
							}
						}
					}
					function siftDown(heap, node, i) {
						var index2 = i;
						var length = heap.length;
						while (index2 < length) {
							var leftIndex = (index2 + 1) * 2 - 1;
							var left = heap[leftIndex];
							var rightIndex = leftIndex + 1;
							var right = heap[rightIndex];
							if (left !== void 0 && compare(left, node) < 0) {
								if (right !== void 0 && compare(right, left) < 0) {
									heap[index2] = right;
									heap[rightIndex] = node;
									index2 = rightIndex;
								} else {
									heap[index2] = left;
									heap[leftIndex] = node;
									index2 = leftIndex;
								}
							} else if (right !== void 0 && compare(right, node) < 0) {
								heap[index2] = right;
								heap[rightIndex] = node;
								index2 = rightIndex;
							} else {
								return;
							}
						}
					}
					function compare(a, b) {
						var diff = a.sortIndex - b.sortIndex;
						return diff !== 0 ? diff : a.id - b.id;
					}
					var ImmediatePriority = 1;
					var UserBlockingPriority = 2;
					var NormalPriority = 3;
					var LowPriority = 4;
					var IdlePriority = 5;
					function markTaskErrored(task, ms) {}
					var maxSigned31BitInt = 1073741823;
					var IMMEDIATE_PRIORITY_TIMEOUT = -1;
					var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
					var NORMAL_PRIORITY_TIMEOUT = 5e3;
					var LOW_PRIORITY_TIMEOUT = 1e4;
					var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
					var taskQueue = [];
					var timerQueue = [];
					var taskIdCounter = 1;
					var currentTask = null;
					var currentPriorityLevel = NormalPriority;
					var isPerformingWork = false;
					var isHostCallbackScheduled = false;
					var isHostTimeoutScheduled = false;
					function advanceTimers(currentTime) {
						var timer = peek(timerQueue);
						while (timer !== null) {
							if (timer.callback === null) {
								pop(timerQueue);
							} else if (timer.startTime <= currentTime) {
								pop(timerQueue);
								timer.sortIndex = timer.expirationTime;
								push(taskQueue, timer);
							} else {
								return;
							}
							timer = peek(timerQueue);
						}
					}
					function handleTimeout(currentTime) {
						isHostTimeoutScheduled = false;
						advanceTimers(currentTime);
						if (!isHostCallbackScheduled) {
							if (peek(taskQueue) !== null) {
								isHostCallbackScheduled = true;
								requestHostCallback(flushWork);
							} else {
								var firstTimer = peek(timerQueue);
								if (firstTimer !== null) {
									requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
								}
							}
						}
					}
					function flushWork(hasTimeRemaining, initialTime2) {
						isHostCallbackScheduled = false;
						if (isHostTimeoutScheduled) {
							isHostTimeoutScheduled = false;
							cancelHostTimeout();
						}
						isPerformingWork = true;
						var previousPriorityLevel = currentPriorityLevel;
						try {
							if (enableProfiling) {
								try {
									return workLoop(hasTimeRemaining, initialTime2);
								} catch (error3) {
									if (currentTask !== null) {
										var currentTime = exports.unstable_now();
										markTaskErrored(currentTask, currentTime);
										currentTask.isQueued = false;
									}
									throw error3;
								}
							} else {
								return workLoop(hasTimeRemaining, initialTime2);
							}
						} finally {
							currentTask = null;
							currentPriorityLevel = previousPriorityLevel;
							isPerformingWork = false;
						}
					}
					function workLoop(hasTimeRemaining, initialTime2) {
						var currentTime = initialTime2;
						advanceTimers(currentTime);
						currentTask = peek(taskQueue);
						while (currentTask !== null && !enableSchedulerDebugging) {
							if (
								currentTask.expirationTime > currentTime &&
								(!hasTimeRemaining || exports.unstable_shouldYield())
							) {
								break;
							}
							var callback = currentTask.callback;
							if (typeof callback === "function") {
								currentTask.callback = null;
								currentPriorityLevel = currentTask.priorityLevel;
								var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
								var continuationCallback = callback(didUserCallbackTimeout);
								currentTime = exports.unstable_now();
								if (typeof continuationCallback === "function") {
									currentTask.callback = continuationCallback;
								} else {
									if (currentTask === peek(taskQueue)) {
										pop(taskQueue);
									}
								}
								advanceTimers(currentTime);
							} else {
								pop(taskQueue);
							}
							currentTask = peek(taskQueue);
						}
						if (currentTask !== null) {
							return true;
						} else {
							var firstTimer = peek(timerQueue);
							if (firstTimer !== null) {
								requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
							}
							return false;
						}
					}
					function unstable_runWithPriority(priorityLevel, eventHandler) {
						switch (priorityLevel) {
							case ImmediatePriority:
							case UserBlockingPriority:
							case NormalPriority:
							case LowPriority:
							case IdlePriority:
								break;
							default:
								priorityLevel = NormalPriority;
						}
						var previousPriorityLevel = currentPriorityLevel;
						currentPriorityLevel = priorityLevel;
						try {
							return eventHandler();
						} finally {
							currentPriorityLevel = previousPriorityLevel;
						}
					}
					function unstable_next(eventHandler) {
						var priorityLevel;
						switch (currentPriorityLevel) {
							case ImmediatePriority:
							case UserBlockingPriority:
							case NormalPriority:
								priorityLevel = NormalPriority;
								break;
							default:
								priorityLevel = currentPriorityLevel;
								break;
						}
						var previousPriorityLevel = currentPriorityLevel;
						currentPriorityLevel = priorityLevel;
						try {
							return eventHandler();
						} finally {
							currentPriorityLevel = previousPriorityLevel;
						}
					}
					function unstable_wrapCallback(callback) {
						var parentPriorityLevel = currentPriorityLevel;
						return function () {
							var previousPriorityLevel = currentPriorityLevel;
							currentPriorityLevel = parentPriorityLevel;
							try {
								return callback.apply(this, arguments);
							} finally {
								currentPriorityLevel = previousPriorityLevel;
							}
						};
					}
					function unstable_scheduleCallback(priorityLevel, callback, options) {
						var currentTime = exports.unstable_now();
						var startTime;
						if (typeof options === "object" && options !== null) {
							var delay = options.delay;
							if (typeof delay === "number" && delay > 0) {
								startTime = currentTime + delay;
							} else {
								startTime = currentTime;
							}
						} else {
							startTime = currentTime;
						}
						var timeout;
						switch (priorityLevel) {
							case ImmediatePriority:
								timeout = IMMEDIATE_PRIORITY_TIMEOUT;
								break;
							case UserBlockingPriority:
								timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
								break;
							case IdlePriority:
								timeout = IDLE_PRIORITY_TIMEOUT;
								break;
							case LowPriority:
								timeout = LOW_PRIORITY_TIMEOUT;
								break;
							case NormalPriority:
							default:
								timeout = NORMAL_PRIORITY_TIMEOUT;
								break;
						}
						var expirationTime = startTime + timeout;
						var newTask = {
							id: taskIdCounter++,
							callback,
							priorityLevel,
							startTime,
							expirationTime,
							sortIndex: -1,
						};
						if (startTime > currentTime) {
							newTask.sortIndex = startTime;
							push(timerQueue, newTask);
							if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
								if (isHostTimeoutScheduled) {
									cancelHostTimeout();
								} else {
									isHostTimeoutScheduled = true;
								}
								requestHostTimeout(handleTimeout, startTime - currentTime);
							}
						} else {
							newTask.sortIndex = expirationTime;
							push(taskQueue, newTask);
							if (!isHostCallbackScheduled && !isPerformingWork) {
								isHostCallbackScheduled = true;
								requestHostCallback(flushWork);
							}
						}
						return newTask;
					}
					function unstable_pauseExecution() {}
					function unstable_continueExecution() {
						if (!isHostCallbackScheduled && !isPerformingWork) {
							isHostCallbackScheduled = true;
							requestHostCallback(flushWork);
						}
					}
					function unstable_getFirstCallbackNode() {
						return peek(taskQueue);
					}
					function unstable_cancelCallback(task) {
						task.callback = null;
					}
					function unstable_getCurrentPriorityLevel() {
						return currentPriorityLevel;
					}
					var unstable_requestPaint = requestPaint;
					var unstable_Profiling = null;
					exports.unstable_IdlePriority = IdlePriority;
					exports.unstable_ImmediatePriority = ImmediatePriority;
					exports.unstable_LowPriority = LowPriority;
					exports.unstable_NormalPriority = NormalPriority;
					exports.unstable_Profiling = unstable_Profiling;
					exports.unstable_UserBlockingPriority = UserBlockingPriority;
					exports.unstable_cancelCallback = unstable_cancelCallback;
					exports.unstable_continueExecution = unstable_continueExecution;
					exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
					exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
					exports.unstable_next = unstable_next;
					exports.unstable_pauseExecution = unstable_pauseExecution;
					exports.unstable_requestPaint = unstable_requestPaint;
					exports.unstable_runWithPriority = unstable_runWithPriority;
					exports.unstable_scheduleCallback = unstable_scheduleCallback;
					exports.unstable_wrapCallback = unstable_wrapCallback;
				})();
			}
		},
	});

	// ../../node_modules/scheduler/index.js
	var require_scheduler = __commonJS({
		"../../node_modules/scheduler/index.js"(exports, module2) {
			"use strict";
			if (false) {
				module2.exports = null;
			} else {
				module2.exports = require_scheduler_development();
			}
		},
	});

	// ../../node_modules/scheduler/cjs/scheduler-tracing.development.js
	var require_scheduler_tracing_development = __commonJS({
		"../../node_modules/scheduler/cjs/scheduler-tracing.development.js"(exports) {
			"use strict";
			if (true) {
				(function () {
					"use strict";
					var DEFAULT_THREAD_ID = 0;
					var interactionIDCounter = 0;
					var threadIDCounter = 0;
					exports.__interactionsRef = null;
					exports.__subscriberRef = null;
					{
						exports.__interactionsRef = {
							current: new Set(),
						};
						exports.__subscriberRef = {
							current: null,
						};
					}
					function unstable_clear(callback) {
						var prevInteractions = exports.__interactionsRef.current;
						exports.__interactionsRef.current = new Set();
						try {
							return callback();
						} finally {
							exports.__interactionsRef.current = prevInteractions;
						}
					}
					function unstable_getCurrent() {
						{
							return exports.__interactionsRef.current;
						}
					}
					function unstable_getThreadID() {
						return ++threadIDCounter;
					}
					function unstable_trace(name2, timestamp, callback) {
						var threadID =
							arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : DEFAULT_THREAD_ID;
						var interaction = {
							__count: 1,
							id: interactionIDCounter++,
							name: name2,
							timestamp,
						};
						var prevInteractions = exports.__interactionsRef.current;
						var interactions = new Set(prevInteractions);
						interactions.add(interaction);
						exports.__interactionsRef.current = interactions;
						var subscriber = exports.__subscriberRef.current;
						var returnValue;
						try {
							if (subscriber !== null) {
								subscriber.onInteractionTraced(interaction);
							}
						} finally {
							try {
								if (subscriber !== null) {
									subscriber.onWorkStarted(interactions, threadID);
								}
							} finally {
								try {
									returnValue = callback();
								} finally {
									exports.__interactionsRef.current = prevInteractions;
									try {
										if (subscriber !== null) {
											subscriber.onWorkStopped(interactions, threadID);
										}
									} finally {
										interaction.__count--;
										if (subscriber !== null && interaction.__count === 0) {
											subscriber.onInteractionScheduledWorkCompleted(interaction);
										}
									}
								}
							}
						}
						return returnValue;
					}
					function unstable_wrap(callback) {
						var threadID =
							arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_THREAD_ID;
						var wrappedInteractions = exports.__interactionsRef.current;
						var subscriber = exports.__subscriberRef.current;
						if (subscriber !== null) {
							subscriber.onWorkScheduled(wrappedInteractions, threadID);
						}
						wrappedInteractions.forEach(function (interaction) {
							interaction.__count++;
						});
						var hasRun = false;
						function wrapped() {
							var prevInteractions = exports.__interactionsRef.current;
							exports.__interactionsRef.current = wrappedInteractions;
							subscriber = exports.__subscriberRef.current;
							try {
								var returnValue;
								try {
									if (subscriber !== null) {
										subscriber.onWorkStarted(wrappedInteractions, threadID);
									}
								} finally {
									try {
										returnValue = callback.apply(void 0, arguments);
									} finally {
										exports.__interactionsRef.current = prevInteractions;
										if (subscriber !== null) {
											subscriber.onWorkStopped(wrappedInteractions, threadID);
										}
									}
								}
								return returnValue;
							} finally {
								if (!hasRun) {
									hasRun = true;
									wrappedInteractions.forEach(function (interaction) {
										interaction.__count--;
										if (subscriber !== null && interaction.__count === 0) {
											subscriber.onInteractionScheduledWorkCompleted(interaction);
										}
									});
								}
							}
						}
						wrapped.cancel = function cancel3() {
							subscriber = exports.__subscriberRef.current;
							try {
								if (subscriber !== null) {
									subscriber.onWorkCanceled(wrappedInteractions, threadID);
								}
							} finally {
								wrappedInteractions.forEach(function (interaction) {
									interaction.__count--;
									if (subscriber && interaction.__count === 0) {
										subscriber.onInteractionScheduledWorkCompleted(interaction);
									}
								});
							}
						};
						return wrapped;
					}
					var subscribers = null;
					{
						subscribers = new Set();
					}
					function unstable_subscribe(subscriber) {
						{
							subscribers.add(subscriber);
							if (subscribers.size === 1) {
								exports.__subscriberRef.current = {
									onInteractionScheduledWorkCompleted,
									onInteractionTraced,
									onWorkCanceled,
									onWorkScheduled,
									onWorkStarted,
									onWorkStopped,
								};
							}
						}
					}
					function unstable_unsubscribe(subscriber) {
						{
							subscribers.delete(subscriber);
							if (subscribers.size === 0) {
								exports.__subscriberRef.current = null;
							}
						}
					}
					function onInteractionTraced(interaction) {
						var didCatchError = false;
						var caughtError = null;
						subscribers.forEach(function (subscriber) {
							try {
								subscriber.onInteractionTraced(interaction);
							} catch (error3) {
								if (!didCatchError) {
									didCatchError = true;
									caughtError = error3;
								}
							}
						});
						if (didCatchError) {
							throw caughtError;
						}
					}
					function onInteractionScheduledWorkCompleted(interaction) {
						var didCatchError = false;
						var caughtError = null;
						subscribers.forEach(function (subscriber) {
							try {
								subscriber.onInteractionScheduledWorkCompleted(interaction);
							} catch (error3) {
								if (!didCatchError) {
									didCatchError = true;
									caughtError = error3;
								}
							}
						});
						if (didCatchError) {
							throw caughtError;
						}
					}
					function onWorkScheduled(interactions, threadID) {
						var didCatchError = false;
						var caughtError = null;
						subscribers.forEach(function (subscriber) {
							try {
								subscriber.onWorkScheduled(interactions, threadID);
							} catch (error3) {
								if (!didCatchError) {
									didCatchError = true;
									caughtError = error3;
								}
							}
						});
						if (didCatchError) {
							throw caughtError;
						}
					}
					function onWorkStarted(interactions, threadID) {
						var didCatchError = false;
						var caughtError = null;
						subscribers.forEach(function (subscriber) {
							try {
								subscriber.onWorkStarted(interactions, threadID);
							} catch (error3) {
								if (!didCatchError) {
									didCatchError = true;
									caughtError = error3;
								}
							}
						});
						if (didCatchError) {
							throw caughtError;
						}
					}
					function onWorkStopped(interactions, threadID) {
						var didCatchError = false;
						var caughtError = null;
						subscribers.forEach(function (subscriber) {
							try {
								subscriber.onWorkStopped(interactions, threadID);
							} catch (error3) {
								if (!didCatchError) {
									didCatchError = true;
									caughtError = error3;
								}
							}
						});
						if (didCatchError) {
							throw caughtError;
						}
					}
					function onWorkCanceled(interactions, threadID) {
						var didCatchError = false;
						var caughtError = null;
						subscribers.forEach(function (subscriber) {
							try {
								subscriber.onWorkCanceled(interactions, threadID);
							} catch (error3) {
								if (!didCatchError) {
									didCatchError = true;
									caughtError = error3;
								}
							}
						});
						if (didCatchError) {
							throw caughtError;
						}
					}
					exports.unstable_clear = unstable_clear;
					exports.unstable_getCurrent = unstable_getCurrent;
					exports.unstable_getThreadID = unstable_getThreadID;
					exports.unstable_subscribe = unstable_subscribe;
					exports.unstable_trace = unstable_trace;
					exports.unstable_unsubscribe = unstable_unsubscribe;
					exports.unstable_wrap = unstable_wrap;
				})();
			}
		},
	});

	// ../../node_modules/scheduler/tracing.js
	var require_tracing = __commonJS({
		"../../node_modules/scheduler/tracing.js"(exports, module2) {
			"use strict";
			if (false) {
				module2.exports = null;
			} else {
				module2.exports = require_scheduler_tracing_development();
			}
		},
	});

	// ../../node_modules/react-dom/cjs/react-dom.development.js
	var require_react_dom_development = __commonJS({
		"../../node_modules/react-dom/cjs/react-dom.development.js"(exports) {
			"use strict";
			if (true) {
				(function () {
					"use strict";
					var React27 = require_react();
					var _assign = require_object_assign();
					var Scheduler2 = require_scheduler();
					var tracing = require_tracing();
					var ReactSharedInternals = React27.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
					function warn2(format) {
						{
							for (
								var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1;
								_key < _len;
								_key++
							) {
								args[_key - 1] = arguments[_key];
							}
							printWarning("warn", format, args);
						}
					}
					function error3(format) {
						{
							for (
								var _len2 = arguments.length,
									args = new Array(_len2 > 1 ? _len2 - 1 : 0),
									_key2 = 1;
								_key2 < _len2;
								_key2++
							) {
								args[_key2 - 1] = arguments[_key2];
							}
							printWarning("error", format, args);
						}
					}
					function printWarning(level, format, args) {
						{
							var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
							var stack = ReactDebugCurrentFrame2.getStackAddendum();
							if (stack !== "") {
								format += "%s";
								args = args.concat([stack]);
							}
							var argsWithFormat = args.map(function (item) {
								return "" + item;
							});
							argsWithFormat.unshift("Warning: " + format);
							Function.prototype.apply.call(console[level], console, argsWithFormat);
						}
					}
					if (!React27) {
						{
							throw Error(
								"ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM."
							);
						}
					}
					var FunctionComponent = 0;
					var ClassComponent = 1;
					var IndeterminateComponent = 2;
					var HostRoot = 3;
					var HostPortal = 4;
					var HostComponent = 5;
					var HostText = 6;
					var Fragment = 7;
					var Mode = 8;
					var ContextConsumer = 9;
					var ContextProvider = 10;
					var ForwardRef = 11;
					var Profiler = 12;
					var SuspenseComponent = 13;
					var MemoComponent = 14;
					var SimpleMemoComponent = 15;
					var LazyComponent = 16;
					var IncompleteClassComponent = 17;
					var DehydratedFragment = 18;
					var SuspenseListComponent = 19;
					var FundamentalComponent = 20;
					var ScopeComponent = 21;
					var Block = 22;
					var OffscreenComponent = 23;
					var LegacyHiddenComponent = 24;
					var enableProfilerTimer = true;
					var enableFundamentalAPI = false;
					var enableNewReconciler = false;
					var warnAboutStringRefs = false;
					var allNativeEvents = new Set();
					var registrationNameDependencies = {};
					var possibleRegistrationNames = {};
					function registerTwoPhaseEvent(registrationName, dependencies2) {
						registerDirectEvent(registrationName, dependencies2);
						registerDirectEvent(registrationName + "Capture", dependencies2);
					}
					function registerDirectEvent(registrationName, dependencies2) {
						{
							if (registrationNameDependencies[registrationName]) {
								error3(
									"EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.",
									registrationName
								);
							}
						}
						registrationNameDependencies[registrationName] = dependencies2;
						{
							var lowerCasedName = registrationName.toLowerCase();
							possibleRegistrationNames[lowerCasedName] = registrationName;
							if (registrationName === "onDoubleClick") {
								possibleRegistrationNames.ondblclick = registrationName;
							}
						}
						for (var i = 0; i < dependencies2.length; i++) {
							allNativeEvents.add(dependencies2[i]);
						}
					}
					var canUseDOM = !!(
						typeof window !== "undefined" &&
						typeof window.document !== "undefined" &&
						typeof window.document.createElement !== "undefined"
					);
					var RESERVED = 0;
					var STRING = 1;
					var BOOLEANISH_STRING = 2;
					var BOOLEAN = 3;
					var OVERLOADED_BOOLEAN = 4;
					var NUMERIC = 5;
					var POSITIVE_NUMERIC = 6;
					var ATTRIBUTE_NAME_START_CHAR =
						":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
					var ATTRIBUTE_NAME_CHAR =
						ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
					var ROOT_ATTRIBUTE_NAME = "data-reactroot";
					var VALID_ATTRIBUTE_NAME_REGEX = new RegExp(
						"^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$"
					);
					var hasOwnProperty = Object.prototype.hasOwnProperty;
					var illegalAttributeNameCache = {};
					var validatedAttributeNameCache = {};
					function isAttributeNameSafe(attributeName) {
						if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
							return true;
						}
						if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
							return false;
						}
						if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
							validatedAttributeNameCache[attributeName] = true;
							return true;
						}
						illegalAttributeNameCache[attributeName] = true;
						{
							error3("Invalid attribute name: `%s`", attributeName);
						}
						return false;
					}
					function shouldIgnoreAttribute(name2, propertyInfo, isCustomComponentTag) {
						if (propertyInfo !== null) {
							return propertyInfo.type === RESERVED;
						}
						if (isCustomComponentTag) {
							return false;
						}
						if (
							name2.length > 2 &&
							(name2[0] === "o" || name2[0] === "O") &&
							(name2[1] === "n" || name2[1] === "N")
						) {
							return true;
						}
						return false;
					}
					function shouldRemoveAttributeWithWarning(
						name2,
						value,
						propertyInfo,
						isCustomComponentTag
					) {
						if (propertyInfo !== null && propertyInfo.type === RESERVED) {
							return false;
						}
						switch (typeof value) {
							case "function":
							case "symbol":
								return true;
							case "boolean": {
								if (isCustomComponentTag) {
									return false;
								}
								if (propertyInfo !== null) {
									return !propertyInfo.acceptsBooleans;
								} else {
									var prefix2 = name2.toLowerCase().slice(0, 5);
									return prefix2 !== "data-" && prefix2 !== "aria-";
								}
							}
							default:
								return false;
						}
					}
					function shouldRemoveAttribute(name2, value, propertyInfo, isCustomComponentTag) {
						if (value === null || typeof value === "undefined") {
							return true;
						}
						if (
							shouldRemoveAttributeWithWarning(name2, value, propertyInfo, isCustomComponentTag)
						) {
							return true;
						}
						if (isCustomComponentTag) {
							return false;
						}
						if (propertyInfo !== null) {
							switch (propertyInfo.type) {
								case BOOLEAN:
									return !value;
								case OVERLOADED_BOOLEAN:
									return value === false;
								case NUMERIC:
									return isNaN(value);
								case POSITIVE_NUMERIC:
									return isNaN(value) || value < 1;
							}
						}
						return false;
					}
					function getPropertyInfo(name2) {
						return properties.hasOwnProperty(name2) ? properties[name2] : null;
					}
					function PropertyInfoRecord(
						name2,
						type,
						mustUseProperty,
						attributeName,
						attributeNamespace,
						sanitizeURL2,
						removeEmptyString
					) {
						this.acceptsBooleans =
							type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
						this.attributeName = attributeName;
						this.attributeNamespace = attributeNamespace;
						this.mustUseProperty = mustUseProperty;
						this.propertyName = name2;
						this.type = type;
						this.sanitizeURL = sanitizeURL2;
						this.removeEmptyString = removeEmptyString;
					}
					var properties = {};
					var reservedProps = [
						"children",
						"dangerouslySetInnerHTML",
						"defaultValue",
						"defaultChecked",
						"innerHTML",
						"suppressContentEditableWarning",
						"suppressHydrationWarning",
						"style",
					];
					reservedProps.forEach(function (name2) {
						properties[name2] = new PropertyInfoRecord(
							name2,
							RESERVED,
							false,
							name2,
							null,
							false,
							false
						);
					});
					[
						["acceptCharset", "accept-charset"],
						["className", "class"],
						["htmlFor", "for"],
						["httpEquiv", "http-equiv"],
					].forEach(function (_ref) {
						var name2 = _ref[0],
							attributeName = _ref[1];
						properties[name2] = new PropertyInfoRecord(
							name2,
							STRING,
							false,
							attributeName,
							null,
							false,
							false
						);
					});
					["contentEditable", "draggable", "spellCheck", "value"].forEach(function (name2) {
						properties[name2] = new PropertyInfoRecord(
							name2,
							BOOLEANISH_STRING,
							false,
							name2.toLowerCase(),
							null,
							false,
							false
						);
					});
					["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(
						function (name2) {
							properties[name2] = new PropertyInfoRecord(
								name2,
								BOOLEANISH_STRING,
								false,
								name2,
								null,
								false,
								false
							);
						}
					);
					[
						"allowFullScreen",
						"async",
						"autoFocus",
						"autoPlay",
						"controls",
						"default",
						"defer",
						"disabled",
						"disablePictureInPicture",
						"disableRemotePlayback",
						"formNoValidate",
						"hidden",
						"loop",
						"noModule",
						"noValidate",
						"open",
						"playsInline",
						"readOnly",
						"required",
						"reversed",
						"scoped",
						"seamless",
						"itemScope",
					].forEach(function (name2) {
						properties[name2] = new PropertyInfoRecord(
							name2,
							BOOLEAN,
							false,
							name2.toLowerCase(),
							null,
							false,
							false
						);
					});
					["checked", "multiple", "muted", "selected"].forEach(function (name2) {
						properties[name2] = new PropertyInfoRecord(
							name2,
							BOOLEAN,
							true,
							name2,
							null,
							false,
							false
						);
					});
					["capture", "download"].forEach(function (name2) {
						properties[name2] = new PropertyInfoRecord(
							name2,
							OVERLOADED_BOOLEAN,
							false,
							name2,
							null,
							false,
							false
						);
					});
					["cols", "rows", "size", "span"].forEach(function (name2) {
						properties[name2] = new PropertyInfoRecord(
							name2,
							POSITIVE_NUMERIC,
							false,
							name2,
							null,
							false,
							false
						);
					});
					["rowSpan", "start"].forEach(function (name2) {
						properties[name2] = new PropertyInfoRecord(
							name2,
							NUMERIC,
							false,
							name2.toLowerCase(),
							null,
							false,
							false
						);
					});
					var CAMELIZE = /[\-\:]([a-z])/g;
					var capitalize = function (token) {
						return token[1].toUpperCase();
					};
					[
						"accent-height",
						"alignment-baseline",
						"arabic-form",
						"baseline-shift",
						"cap-height",
						"clip-path",
						"clip-rule",
						"color-interpolation",
						"color-interpolation-filters",
						"color-profile",
						"color-rendering",
						"dominant-baseline",
						"enable-background",
						"fill-opacity",
						"fill-rule",
						"flood-color",
						"flood-opacity",
						"font-family",
						"font-size",
						"font-size-adjust",
						"font-stretch",
						"font-style",
						"font-variant",
						"font-weight",
						"glyph-name",
						"glyph-orientation-horizontal",
						"glyph-orientation-vertical",
						"horiz-adv-x",
						"horiz-origin-x",
						"image-rendering",
						"letter-spacing",
						"lighting-color",
						"marker-end",
						"marker-mid",
						"marker-start",
						"overline-position",
						"overline-thickness",
						"paint-order",
						"panose-1",
						"pointer-events",
						"rendering-intent",
						"shape-rendering",
						"stop-color",
						"stop-opacity",
						"strikethrough-position",
						"strikethrough-thickness",
						"stroke-dasharray",
						"stroke-dashoffset",
						"stroke-linecap",
						"stroke-linejoin",
						"stroke-miterlimit",
						"stroke-opacity",
						"stroke-width",
						"text-anchor",
						"text-decoration",
						"text-rendering",
						"underline-position",
						"underline-thickness",
						"unicode-bidi",
						"unicode-range",
						"units-per-em",
						"v-alphabetic",
						"v-hanging",
						"v-ideographic",
						"v-mathematical",
						"vector-effect",
						"vert-adv-y",
						"vert-origin-x",
						"vert-origin-y",
						"word-spacing",
						"writing-mode",
						"xmlns:xlink",
						"x-height",
					].forEach(function (attributeName) {
						var name2 = attributeName.replace(CAMELIZE, capitalize);
						properties[name2] = new PropertyInfoRecord(
							name2,
							STRING,
							false,
							attributeName,
							null,
							false,
							false
						);
					});
					[
						"xlink:actuate",
						"xlink:arcrole",
						"xlink:role",
						"xlink:show",
						"xlink:title",
						"xlink:type",
					].forEach(function (attributeName) {
						var name2 = attributeName.replace(CAMELIZE, capitalize);
						properties[name2] = new PropertyInfoRecord(
							name2,
							STRING,
							false,
							attributeName,
							"http://www.w3.org/1999/xlink",
							false,
							false
						);
					});
					["xml:base", "xml:lang", "xml:space"].forEach(function (attributeName) {
						var name2 = attributeName.replace(CAMELIZE, capitalize);
						properties[name2] = new PropertyInfoRecord(
							name2,
							STRING,
							false,
							attributeName,
							"http://www.w3.org/XML/1998/namespace",
							false,
							false
						);
					});
					["tabIndex", "crossOrigin"].forEach(function (attributeName) {
						properties[attributeName] = new PropertyInfoRecord(
							attributeName,
							STRING,
							false,
							attributeName.toLowerCase(),
							null,
							false,
							false
						);
					});
					var xlinkHref = "xlinkHref";
					properties[xlinkHref] = new PropertyInfoRecord(
						"xlinkHref",
						STRING,
						false,
						"xlink:href",
						"http://www.w3.org/1999/xlink",
						true,
						false
					);
					["src", "href", "action", "formAction"].forEach(function (attributeName) {
						properties[attributeName] = new PropertyInfoRecord(
							attributeName,
							STRING,
							false,
							attributeName.toLowerCase(),
							null,
							true,
							true
						);
					});
					var isJavaScriptProtocol =
						/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
					var didWarn = false;
					function sanitizeURL(url) {
						{
							if (!didWarn && isJavaScriptProtocol.test(url)) {
								didWarn = true;
								error3(
									"A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.",
									JSON.stringify(url)
								);
							}
						}
					}
					function getValueForProperty(node, name2, expected, propertyInfo) {
						{
							if (propertyInfo.mustUseProperty) {
								var propertyName = propertyInfo.propertyName;
								return node[propertyName];
							} else {
								if (propertyInfo.sanitizeURL) {
									sanitizeURL("" + expected);
								}
								var attributeName = propertyInfo.attributeName;
								var stringValue = null;
								if (propertyInfo.type === OVERLOADED_BOOLEAN) {
									if (node.hasAttribute(attributeName)) {
										var value = node.getAttribute(attributeName);
										if (value === "") {
											return true;
										}
										if (shouldRemoveAttribute(name2, expected, propertyInfo, false)) {
											return value;
										}
										if (value === "" + expected) {
											return expected;
										}
										return value;
									}
								} else if (node.hasAttribute(attributeName)) {
									if (shouldRemoveAttribute(name2, expected, propertyInfo, false)) {
										return node.getAttribute(attributeName);
									}
									if (propertyInfo.type === BOOLEAN) {
										return expected;
									}
									stringValue = node.getAttribute(attributeName);
								}
								if (shouldRemoveAttribute(name2, expected, propertyInfo, false)) {
									return stringValue === null ? expected : stringValue;
								} else if (stringValue === "" + expected) {
									return expected;
								} else {
									return stringValue;
								}
							}
						}
					}
					function getValueForAttribute(node, name2, expected) {
						{
							if (!isAttributeNameSafe(name2)) {
								return;
							}
							if (isOpaqueHydratingObject(expected)) {
								return expected;
							}
							if (!node.hasAttribute(name2)) {
								return expected === void 0 ? void 0 : null;
							}
							var value = node.getAttribute(name2);
							if (value === "" + expected) {
								return expected;
							}
							return value;
						}
					}
					function setValueForProperty(node, name2, value, isCustomComponentTag) {
						var propertyInfo = getPropertyInfo(name2);
						if (shouldIgnoreAttribute(name2, propertyInfo, isCustomComponentTag)) {
							return;
						}
						if (shouldRemoveAttribute(name2, value, propertyInfo, isCustomComponentTag)) {
							value = null;
						}
						if (isCustomComponentTag || propertyInfo === null) {
							if (isAttributeNameSafe(name2)) {
								var _attributeName = name2;
								if (value === null) {
									node.removeAttribute(_attributeName);
								} else {
									node.setAttribute(_attributeName, "" + value);
								}
							}
							return;
						}
						var mustUseProperty = propertyInfo.mustUseProperty;
						if (mustUseProperty) {
							var propertyName = propertyInfo.propertyName;
							if (value === null) {
								var type = propertyInfo.type;
								node[propertyName] = type === BOOLEAN ? false : "";
							} else {
								node[propertyName] = value;
							}
							return;
						}
						var attributeName = propertyInfo.attributeName,
							attributeNamespace = propertyInfo.attributeNamespace;
						if (value === null) {
							node.removeAttribute(attributeName);
						} else {
							var _type = propertyInfo.type;
							var attributeValue;
							if (_type === BOOLEAN || (_type === OVERLOADED_BOOLEAN && value === true)) {
								attributeValue = "";
							} else {
								{
									attributeValue = "" + value;
								}
								if (propertyInfo.sanitizeURL) {
									sanitizeURL(attributeValue.toString());
								}
							}
							if (attributeNamespace) {
								node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
							} else {
								node.setAttribute(attributeName, attributeValue);
							}
						}
					}
					var REACT_ELEMENT_TYPE = 60103;
					var REACT_PORTAL_TYPE = 60106;
					var REACT_FRAGMENT_TYPE = 60107;
					var REACT_STRICT_MODE_TYPE = 60108;
					var REACT_PROFILER_TYPE = 60114;
					var REACT_PROVIDER_TYPE = 60109;
					var REACT_CONTEXT_TYPE = 60110;
					var REACT_FORWARD_REF_TYPE = 60112;
					var REACT_SUSPENSE_TYPE = 60113;
					var REACT_SUSPENSE_LIST_TYPE = 60120;
					var REACT_MEMO_TYPE = 60115;
					var REACT_LAZY_TYPE = 60116;
					var REACT_BLOCK_TYPE = 60121;
					var REACT_SERVER_BLOCK_TYPE = 60122;
					var REACT_FUNDAMENTAL_TYPE = 60117;
					var REACT_SCOPE_TYPE = 60119;
					var REACT_OPAQUE_ID_TYPE = 60128;
					var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
					var REACT_OFFSCREEN_TYPE = 60130;
					var REACT_LEGACY_HIDDEN_TYPE = 60131;
					if (typeof Symbol === "function" && Symbol.for) {
						var symbolFor = Symbol.for;
						REACT_ELEMENT_TYPE = symbolFor("react.element");
						REACT_PORTAL_TYPE = symbolFor("react.portal");
						REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
						REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
						REACT_PROFILER_TYPE = symbolFor("react.profiler");
						REACT_PROVIDER_TYPE = symbolFor("react.provider");
						REACT_CONTEXT_TYPE = symbolFor("react.context");
						REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
						REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
						REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
						REACT_MEMO_TYPE = symbolFor("react.memo");
						REACT_LAZY_TYPE = symbolFor("react.lazy");
						REACT_BLOCK_TYPE = symbolFor("react.block");
						REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
						REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
						REACT_SCOPE_TYPE = symbolFor("react.scope");
						REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
						REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
						REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
						REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
					}
					var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
					var FAUX_ITERATOR_SYMBOL = "@@iterator";
					function getIteratorFn(maybeIterable) {
						if (maybeIterable === null || typeof maybeIterable !== "object") {
							return null;
						}
						var maybeIterator =
							(MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
							maybeIterable[FAUX_ITERATOR_SYMBOL];
						if (typeof maybeIterator === "function") {
							return maybeIterator;
						}
						return null;
					}
					var disabledDepth = 0;
					var prevLog;
					var prevInfo;
					var prevWarn;
					var prevError;
					var prevGroup;
					var prevGroupCollapsed;
					var prevGroupEnd;
					function disabledLog() {}
					disabledLog.__reactDisabledLog = true;
					function disableLogs() {
						{
							if (disabledDepth === 0) {
								prevLog = console.log;
								prevInfo = console.info;
								prevWarn = console.warn;
								prevError = console.error;
								prevGroup = console.group;
								prevGroupCollapsed = console.groupCollapsed;
								prevGroupEnd = console.groupEnd;
								var props = {
									configurable: true,
									enumerable: true,
									value: disabledLog,
									writable: true,
								};
								Object.defineProperties(console, {
									info: props,
									log: props,
									warn: props,
									error: props,
									group: props,
									groupCollapsed: props,
									groupEnd: props,
								});
							}
							disabledDepth++;
						}
					}
					function reenableLogs() {
						{
							disabledDepth--;
							if (disabledDepth === 0) {
								var props = {
									configurable: true,
									enumerable: true,
									writable: true,
								};
								Object.defineProperties(console, {
									log: _assign({}, props, {
										value: prevLog,
									}),
									info: _assign({}, props, {
										value: prevInfo,
									}),
									warn: _assign({}, props, {
										value: prevWarn,
									}),
									error: _assign({}, props, {
										value: prevError,
									}),
									group: _assign({}, props, {
										value: prevGroup,
									}),
									groupCollapsed: _assign({}, props, {
										value: prevGroupCollapsed,
									}),
									groupEnd: _assign({}, props, {
										value: prevGroupEnd,
									}),
								});
							}
							if (disabledDepth < 0) {
								error3(
									"disabledDepth fell below zero. This is a bug in React. Please file an issue."
								);
							}
						}
					}
					var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
					var prefix;
					function describeBuiltInComponentFrame(name2, source, ownerFn) {
						{
							if (prefix === void 0) {
								try {
									throw Error();
								} catch (x) {
									var match = x.stack.trim().match(/\n( *(at )?)/);
									prefix = (match && match[1]) || "";
								}
							}
							return "\n" + prefix + name2;
						}
					}
					var reentry = false;
					var componentFrameCache;
					{
						var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
						componentFrameCache = new PossiblyWeakMap();
					}
					function describeNativeComponentFrame(fn, construct) {
						if (!fn || reentry) {
							return "";
						}
						{
							var frame = componentFrameCache.get(fn);
							if (frame !== void 0) {
								return frame;
							}
						}
						var control;
						reentry = true;
						var previousPrepareStackTrace = Error.prepareStackTrace;
						Error.prepareStackTrace = void 0;
						var previousDispatcher;
						{
							previousDispatcher = ReactCurrentDispatcher.current;
							ReactCurrentDispatcher.current = null;
							disableLogs();
						}
						try {
							if (construct) {
								var Fake = function () {
									throw Error();
								};
								Object.defineProperty(Fake.prototype, "props", {
									set: function () {
										throw Error();
									},
								});
								if (typeof Reflect === "object" && Reflect.construct) {
									try {
										Reflect.construct(Fake, []);
									} catch (x) {
										control = x;
									}
									Reflect.construct(fn, [], Fake);
								} else {
									try {
										Fake.call();
									} catch (x) {
										control = x;
									}
									fn.call(Fake.prototype);
								}
							} else {
								try {
									throw Error();
								} catch (x) {
									control = x;
								}
								fn();
							}
						} catch (sample) {
							if (sample && control && typeof sample.stack === "string") {
								var sampleLines = sample.stack.split("\n");
								var controlLines = control.stack.split("\n");
								var s = sampleLines.length - 1;
								var c20 = controlLines.length - 1;
								while (s >= 1 && c20 >= 0 && sampleLines[s] !== controlLines[c20]) {
									c20--;
								}
								for (; s >= 1 && c20 >= 0; s--, c20--) {
									if (sampleLines[s] !== controlLines[c20]) {
										if (s !== 1 || c20 !== 1) {
											do {
												s--;
												c20--;
												if (c20 < 0 || sampleLines[s] !== controlLines[c20]) {
													var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
													{
														if (typeof fn === "function") {
															componentFrameCache.set(fn, _frame);
														}
													}
													return _frame;
												}
											} while (s >= 1 && c20 >= 0);
										}
										break;
									}
								}
							}
						} finally {
							reentry = false;
							{
								ReactCurrentDispatcher.current = previousDispatcher;
								reenableLogs();
							}
							Error.prepareStackTrace = previousPrepareStackTrace;
						}
						var name2 = fn ? fn.displayName || fn.name : "";
						var syntheticFrame = name2 ? describeBuiltInComponentFrame(name2) : "";
						{
							if (typeof fn === "function") {
								componentFrameCache.set(fn, syntheticFrame);
							}
						}
						return syntheticFrame;
					}
					function describeClassComponentFrame(ctor, source, ownerFn) {
						{
							return describeNativeComponentFrame(ctor, true);
						}
					}
					function describeFunctionComponentFrame(fn, source, ownerFn) {
						{
							return describeNativeComponentFrame(fn, false);
						}
					}
					function shouldConstruct(Component) {
						var prototype = Component.prototype;
						return !!(prototype && prototype.isReactComponent);
					}
					function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
						if (type == null) {
							return "";
						}
						if (typeof type === "function") {
							{
								return describeNativeComponentFrame(type, shouldConstruct(type));
							}
						}
						if (typeof type === "string") {
							return describeBuiltInComponentFrame(type);
						}
						switch (type) {
							case REACT_SUSPENSE_TYPE:
								return describeBuiltInComponentFrame("Suspense");
							case REACT_SUSPENSE_LIST_TYPE:
								return describeBuiltInComponentFrame("SuspenseList");
						}
						if (typeof type === "object") {
							switch (type.$$typeof) {
								case REACT_FORWARD_REF_TYPE:
									return describeFunctionComponentFrame(type.render);
								case REACT_MEMO_TYPE:
									return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
								case REACT_BLOCK_TYPE:
									return describeFunctionComponentFrame(type._render);
								case REACT_LAZY_TYPE: {
									var lazyComponent = type;
									var payload = lazyComponent._payload;
									var init2 = lazyComponent._init;
									try {
										return describeUnknownElementTypeFrameInDEV(init2(payload), source, ownerFn);
									} catch (x) {}
								}
							}
						}
						return "";
					}
					function describeFiber(fiber) {
						var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
						var source = fiber._debugSource;
						switch (fiber.tag) {
							case HostComponent:
								return describeBuiltInComponentFrame(fiber.type);
							case LazyComponent:
								return describeBuiltInComponentFrame("Lazy");
							case SuspenseComponent:
								return describeBuiltInComponentFrame("Suspense");
							case SuspenseListComponent:
								return describeBuiltInComponentFrame("SuspenseList");
							case FunctionComponent:
							case IndeterminateComponent:
							case SimpleMemoComponent:
								return describeFunctionComponentFrame(fiber.type);
							case ForwardRef:
								return describeFunctionComponentFrame(fiber.type.render);
							case Block:
								return describeFunctionComponentFrame(fiber.type._render);
							case ClassComponent:
								return describeClassComponentFrame(fiber.type);
							default:
								return "";
						}
					}
					function getStackByFiberInDevAndProd(workInProgress2) {
						try {
							var info = "";
							var node = workInProgress2;
							do {
								info += describeFiber(node);
								node = node.return;
							} while (node);
							return info;
						} catch (x) {
							return "\nError generating stack: " + x.message + "\n" + x.stack;
						}
					}
					function getWrappedName(outerType, innerType, wrapperName) {
						var functionName = innerType.displayName || innerType.name || "";
						return (
							outerType.displayName ||
							(functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName)
						);
					}
					function getContextName(type) {
						return type.displayName || "Context";
					}
					function getComponentName(type) {
						if (type == null) {
							return null;
						}
						{
							if (typeof type.tag === "number") {
								error3(
									"Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue."
								);
							}
						}
						if (typeof type === "function") {
							return type.displayName || type.name || null;
						}
						if (typeof type === "string") {
							return type;
						}
						switch (type) {
							case REACT_FRAGMENT_TYPE:
								return "Fragment";
							case REACT_PORTAL_TYPE:
								return "Portal";
							case REACT_PROFILER_TYPE:
								return "Profiler";
							case REACT_STRICT_MODE_TYPE:
								return "StrictMode";
							case REACT_SUSPENSE_TYPE:
								return "Suspense";
							case REACT_SUSPENSE_LIST_TYPE:
								return "SuspenseList";
						}
						if (typeof type === "object") {
							switch (type.$$typeof) {
								case REACT_CONTEXT_TYPE:
									var context = type;
									return getContextName(context) + ".Consumer";
								case REACT_PROVIDER_TYPE:
									var provider = type;
									return getContextName(provider._context) + ".Provider";
								case REACT_FORWARD_REF_TYPE:
									return getWrappedName(type, type.render, "ForwardRef");
								case REACT_MEMO_TYPE:
									return getComponentName(type.type);
								case REACT_BLOCK_TYPE:
									return getComponentName(type._render);
								case REACT_LAZY_TYPE: {
									var lazyComponent = type;
									var payload = lazyComponent._payload;
									var init2 = lazyComponent._init;
									try {
										return getComponentName(init2(payload));
									} catch (x) {
										return null;
									}
								}
							}
						}
						return null;
					}
					var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
					var current = null;
					var isRendering = false;
					function getCurrentFiberOwnerNameInDevOrNull() {
						{
							if (current === null) {
								return null;
							}
							var owner = current._debugOwner;
							if (owner !== null && typeof owner !== "undefined") {
								return getComponentName(owner.type);
							}
						}
						return null;
					}
					function getCurrentFiberStackInDev() {
						{
							if (current === null) {
								return "";
							}
							return getStackByFiberInDevAndProd(current);
						}
					}
					function resetCurrentFiber() {
						{
							ReactDebugCurrentFrame.getCurrentStack = null;
							current = null;
							isRendering = false;
						}
					}
					function setCurrentFiber(fiber) {
						{
							ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
							current = fiber;
							isRendering = false;
						}
					}
					function setIsRendering(rendering) {
						{
							isRendering = rendering;
						}
					}
					function getIsRendering() {
						{
							return isRendering;
						}
					}
					function toString(value) {
						return "" + value;
					}
					function getToStringValue(value) {
						switch (typeof value) {
							case "boolean":
							case "number":
							case "object":
							case "string":
							case "undefined":
								return value;
							default:
								return "";
						}
					}
					var hasReadOnlyValue = {
						button: true,
						checkbox: true,
						image: true,
						hidden: true,
						radio: true,
						reset: true,
						submit: true,
					};
					function checkControlledValueProps(tagName, props) {
						{
							if (
								!(
									hasReadOnlyValue[props.type] ||
									props.onChange ||
									props.onInput ||
									props.readOnly ||
									props.disabled ||
									props.value == null
								)
							) {
								error3(
									"You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`."
								);
							}
							if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
								error3(
									"You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`."
								);
							}
						}
					}
					function isCheckable(elem) {
						var type = elem.type;
						var nodeName = elem.nodeName;
						return (
							nodeName &&
							nodeName.toLowerCase() === "input" &&
							(type === "checkbox" || type === "radio")
						);
					}
					function getTracker(node) {
						return node._valueTracker;
					}
					function detachTracker(node) {
						node._valueTracker = null;
					}
					function getValueFromNode(node) {
						var value = "";
						if (!node) {
							return value;
						}
						if (isCheckable(node)) {
							value = node.checked ? "true" : "false";
						} else {
							value = node.value;
						}
						return value;
					}
					function trackValueOnNode(node) {
						var valueField = isCheckable(node) ? "checked" : "value";
						var descriptor = Object.getOwnPropertyDescriptor(
							node.constructor.prototype,
							valueField
						);
						var currentValue = "" + node[valueField];
						if (
							node.hasOwnProperty(valueField) ||
							typeof descriptor === "undefined" ||
							typeof descriptor.get !== "function" ||
							typeof descriptor.set !== "function"
						) {
							return;
						}
						var get3 = descriptor.get,
							set3 = descriptor.set;
						Object.defineProperty(node, valueField, {
							configurable: true,
							get: function () {
								return get3.call(this);
							},
							set: function (value) {
								currentValue = "" + value;
								set3.call(this, value);
							},
						});
						Object.defineProperty(node, valueField, {
							enumerable: descriptor.enumerable,
						});
						var tracker = {
							getValue: function () {
								return currentValue;
							},
							setValue: function (value) {
								currentValue = "" + value;
							},
							stopTracking: function () {
								detachTracker(node);
								delete node[valueField];
							},
						};
						return tracker;
					}
					function track(node) {
						if (getTracker(node)) {
							return;
						}
						node._valueTracker = trackValueOnNode(node);
					}
					function updateValueIfChanged(node) {
						if (!node) {
							return false;
						}
						var tracker = getTracker(node);
						if (!tracker) {
							return true;
						}
						var lastValue = tracker.getValue();
						var nextValue = getValueFromNode(node);
						if (nextValue !== lastValue) {
							tracker.setValue(nextValue);
							return true;
						}
						return false;
					}
					function getActiveElement(doc) {
						doc = doc || (typeof document !== "undefined" ? document : void 0);
						if (typeof doc === "undefined") {
							return null;
						}
						try {
							return doc.activeElement || doc.body;
						} catch (e) {
							return doc.body;
						}
					}
					var didWarnValueDefaultValue = false;
					var didWarnCheckedDefaultChecked = false;
					var didWarnControlledToUncontrolled = false;
					var didWarnUncontrolledToControlled = false;
					function isControlled(props) {
						var usesChecked = props.type === "checkbox" || props.type === "radio";
						return usesChecked ? props.checked != null : props.value != null;
					}
					function getHostProps(element, props) {
						var node = element;
						var checked = props.checked;
						var hostProps = _assign({}, props, {
							defaultChecked: void 0,
							defaultValue: void 0,
							value: void 0,
							checked: checked != null ? checked : node._wrapperState.initialChecked,
						});
						return hostProps;
					}
					function initWrapperState(element, props) {
						{
							checkControlledValueProps("input", props);
							if (
								props.checked !== void 0 &&
								props.defaultChecked !== void 0 &&
								!didWarnCheckedDefaultChecked
							) {
								error3(
									"%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components",
									getCurrentFiberOwnerNameInDevOrNull() || "A component",
									props.type
								);
								didWarnCheckedDefaultChecked = true;
							}
							if (
								props.value !== void 0 &&
								props.defaultValue !== void 0 &&
								!didWarnValueDefaultValue
							) {
								error3(
									"%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components",
									getCurrentFiberOwnerNameInDevOrNull() || "A component",
									props.type
								);
								didWarnValueDefaultValue = true;
							}
						}
						var node = element;
						var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
						node._wrapperState = {
							initialChecked: props.checked != null ? props.checked : props.defaultChecked,
							initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
							controlled: isControlled(props),
						};
					}
					function updateChecked(element, props) {
						var node = element;
						var checked = props.checked;
						if (checked != null) {
							setValueForProperty(node, "checked", checked, false);
						}
					}
					function updateWrapper(element, props) {
						var node = element;
						{
							var controlled = isControlled(props);
							if (
								!node._wrapperState.controlled &&
								controlled &&
								!didWarnUncontrolledToControlled
							) {
								error3(
									"A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components"
								);
								didWarnUncontrolledToControlled = true;
							}
							if (
								node._wrapperState.controlled &&
								!controlled &&
								!didWarnControlledToUncontrolled
							) {
								error3(
									"A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components"
								);
								didWarnControlledToUncontrolled = true;
							}
						}
						updateChecked(element, props);
						var value = getToStringValue(props.value);
						var type = props.type;
						if (value != null) {
							if (type === "number") {
								if ((value === 0 && node.value === "") || node.value != value) {
									node.value = toString(value);
								}
							} else if (node.value !== toString(value)) {
								node.value = toString(value);
							}
						} else if (type === "submit" || type === "reset") {
							node.removeAttribute("value");
							return;
						}
						{
							if (props.hasOwnProperty("value")) {
								setDefaultValue(node, props.type, value);
							} else if (props.hasOwnProperty("defaultValue")) {
								setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
							}
						}
						{
							if (props.checked == null && props.defaultChecked != null) {
								node.defaultChecked = !!props.defaultChecked;
							}
						}
					}
					function postMountWrapper(element, props, isHydrating2) {
						var node = element;
						if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
							var type = props.type;
							var isButton = type === "submit" || type === "reset";
							if (isButton && (props.value === void 0 || props.value === null)) {
								return;
							}
							var initialValue = toString(node._wrapperState.initialValue);
							if (!isHydrating2) {
								{
									if (initialValue !== node.value) {
										node.value = initialValue;
									}
								}
							}
							{
								node.defaultValue = initialValue;
							}
						}
						var name2 = node.name;
						if (name2 !== "") {
							node.name = "";
						}
						{
							node.defaultChecked = !node.defaultChecked;
							node.defaultChecked = !!node._wrapperState.initialChecked;
						}
						if (name2 !== "") {
							node.name = name2;
						}
					}
					function restoreControlledState(element, props) {
						var node = element;
						updateWrapper(node, props);
						updateNamedCousins(node, props);
					}
					function updateNamedCousins(rootNode, props) {
						var name2 = props.name;
						if (props.type === "radio" && name2 != null) {
							var queryRoot = rootNode;
							while (queryRoot.parentNode) {
								queryRoot = queryRoot.parentNode;
							}
							var group = queryRoot.querySelectorAll(
								"input[name=" + JSON.stringify("" + name2) + '][type="radio"]'
							);
							for (var i = 0; i < group.length; i++) {
								var otherNode = group[i];
								if (otherNode === rootNode || otherNode.form !== rootNode.form) {
									continue;
								}
								var otherProps = getFiberCurrentPropsFromNode(otherNode);
								if (!otherProps) {
									{
										throw Error(
											"ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported."
										);
									}
								}
								updateValueIfChanged(otherNode);
								updateWrapper(otherNode, otherProps);
							}
						}
					}
					function setDefaultValue(node, type, value) {
						if (type !== "number" || getActiveElement(node.ownerDocument) !== node) {
							if (value == null) {
								node.defaultValue = toString(node._wrapperState.initialValue);
							} else if (node.defaultValue !== toString(value)) {
								node.defaultValue = toString(value);
							}
						}
					}
					var didWarnSelectedSetOnOption = false;
					var didWarnInvalidChild = false;
					function flattenChildren(children2) {
						var content = "";
						React27.Children.forEach(children2, function (child) {
							if (child == null) {
								return;
							}
							content += child;
						});
						return content;
					}
					function validateProps(element, props) {
						{
							if (typeof props.children === "object" && props.children !== null) {
								React27.Children.forEach(props.children, function (child) {
									if (child == null) {
										return;
									}
									if (typeof child === "string" || typeof child === "number") {
										return;
									}
									if (typeof child.type !== "string") {
										return;
									}
									if (!didWarnInvalidChild) {
										didWarnInvalidChild = true;
										error3("Only strings and numbers are supported as <option> children.");
									}
								});
							}
							if (props.selected != null && !didWarnSelectedSetOnOption) {
								error3(
									"Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>."
								);
								didWarnSelectedSetOnOption = true;
							}
						}
					}
					function postMountWrapper$1(element, props) {
						if (props.value != null) {
							element.setAttribute("value", toString(getToStringValue(props.value)));
						}
					}
					function getHostProps$1(element, props) {
						var hostProps = _assign(
							{
								children: void 0,
							},
							props
						);
						var content = flattenChildren(props.children);
						if (content) {
							hostProps.children = content;
						}
						return hostProps;
					}
					var didWarnValueDefaultValue$1;
					{
						didWarnValueDefaultValue$1 = false;
					}
					function getDeclarationErrorAddendum() {
						var ownerName = getCurrentFiberOwnerNameInDevOrNull();
						if (ownerName) {
							return "\n\nCheck the render method of `" + ownerName + "`.";
						}
						return "";
					}
					var valuePropNames = ["value", "defaultValue"];
					function checkSelectPropTypes(props) {
						{
							checkControlledValueProps("select", props);
							for (var i = 0; i < valuePropNames.length; i++) {
								var propName = valuePropNames[i];
								if (props[propName] == null) {
									continue;
								}
								var isArray3 = Array.isArray(props[propName]);
								if (props.multiple && !isArray3) {
									error3(
										"The `%s` prop supplied to <select> must be an array if `multiple` is true.%s",
										propName,
										getDeclarationErrorAddendum()
									);
								} else if (!props.multiple && isArray3) {
									error3(
										"The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s",
										propName,
										getDeclarationErrorAddendum()
									);
								}
							}
						}
					}
					function updateOptions(node, multiple, propValue, setDefaultSelected) {
						var options2 = node.options;
						if (multiple) {
							var selectedValues = propValue;
							var selectedValue = {};
							for (var i = 0; i < selectedValues.length; i++) {
								selectedValue["$" + selectedValues[i]] = true;
							}
							for (var _i = 0; _i < options2.length; _i++) {
								var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
								if (options2[_i].selected !== selected) {
									options2[_i].selected = selected;
								}
								if (selected && setDefaultSelected) {
									options2[_i].defaultSelected = true;
								}
							}
						} else {
							var _selectedValue = toString(getToStringValue(propValue));
							var defaultSelected = null;
							for (var _i2 = 0; _i2 < options2.length; _i2++) {
								if (options2[_i2].value === _selectedValue) {
									options2[_i2].selected = true;
									if (setDefaultSelected) {
										options2[_i2].defaultSelected = true;
									}
									return;
								}
								if (defaultSelected === null && !options2[_i2].disabled) {
									defaultSelected = options2[_i2];
								}
							}
							if (defaultSelected !== null) {
								defaultSelected.selected = true;
							}
						}
					}
					function getHostProps$2(element, props) {
						return _assign({}, props, {
							value: void 0,
						});
					}
					function initWrapperState$1(element, props) {
						var node = element;
						{
							checkSelectPropTypes(props);
						}
						node._wrapperState = {
							wasMultiple: !!props.multiple,
						};
						{
							if (
								props.value !== void 0 &&
								props.defaultValue !== void 0 &&
								!didWarnValueDefaultValue$1
							) {
								error3(
									"Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components"
								);
								didWarnValueDefaultValue$1 = true;
							}
						}
					}
					function postMountWrapper$2(element, props) {
						var node = element;
						node.multiple = !!props.multiple;
						var value = props.value;
						if (value != null) {
							updateOptions(node, !!props.multiple, value, false);
						} else if (props.defaultValue != null) {
							updateOptions(node, !!props.multiple, props.defaultValue, true);
						}
					}
					function postUpdateWrapper(element, props) {
						var node = element;
						var wasMultiple = node._wrapperState.wasMultiple;
						node._wrapperState.wasMultiple = !!props.multiple;
						var value = props.value;
						if (value != null) {
							updateOptions(node, !!props.multiple, value, false);
						} else if (wasMultiple !== !!props.multiple) {
							if (props.defaultValue != null) {
								updateOptions(node, !!props.multiple, props.defaultValue, true);
							} else {
								updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
							}
						}
					}
					function restoreControlledState$1(element, props) {
						var node = element;
						var value = props.value;
						if (value != null) {
							updateOptions(node, !!props.multiple, value, false);
						}
					}
					var didWarnValDefaultVal = false;
					function getHostProps$3(element, props) {
						var node = element;
						if (!(props.dangerouslySetInnerHTML == null)) {
							{
								throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
							}
						}
						var hostProps = _assign({}, props, {
							value: void 0,
							defaultValue: void 0,
							children: toString(node._wrapperState.initialValue),
						});
						return hostProps;
					}
					function initWrapperState$2(element, props) {
						var node = element;
						{
							checkControlledValueProps("textarea", props);
							if (
								props.value !== void 0 &&
								props.defaultValue !== void 0 &&
								!didWarnValDefaultVal
							) {
								error3(
									"%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components",
									getCurrentFiberOwnerNameInDevOrNull() || "A component"
								);
								didWarnValDefaultVal = true;
							}
						}
						var initialValue = props.value;
						if (initialValue == null) {
							var children2 = props.children,
								defaultValue = props.defaultValue;
							if (children2 != null) {
								{
									error3(
										"Use the `defaultValue` or `value` props instead of setting children on <textarea>."
									);
								}
								{
									if (!(defaultValue == null)) {
										{
											throw Error(
												"If you supply `defaultValue` on a <textarea>, do not pass children."
											);
										}
									}
									if (Array.isArray(children2)) {
										if (!(children2.length <= 1)) {
											{
												throw Error("<textarea> can only have at most one child.");
											}
										}
										children2 = children2[0];
									}
									defaultValue = children2;
								}
							}
							if (defaultValue == null) {
								defaultValue = "";
							}
							initialValue = defaultValue;
						}
						node._wrapperState = {
							initialValue: getToStringValue(initialValue),
						};
					}
					function updateWrapper$1(element, props) {
						var node = element;
						var value = getToStringValue(props.value);
						var defaultValue = getToStringValue(props.defaultValue);
						if (value != null) {
							var newValue = toString(value);
							if (newValue !== node.value) {
								node.value = newValue;
							}
							if (props.defaultValue == null && node.defaultValue !== newValue) {
								node.defaultValue = newValue;
							}
						}
						if (defaultValue != null) {
							node.defaultValue = toString(defaultValue);
						}
					}
					function postMountWrapper$3(element, props) {
						var node = element;
						var textContent = node.textContent;
						if (textContent === node._wrapperState.initialValue) {
							if (textContent !== "" && textContent !== null) {
								node.value = textContent;
							}
						}
					}
					function restoreControlledState$2(element, props) {
						updateWrapper$1(element, props);
					}
					var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
					var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
					var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
					var Namespaces = {
						html: HTML_NAMESPACE,
						mathml: MATH_NAMESPACE,
						svg: SVG_NAMESPACE,
					};
					function getIntrinsicNamespace(type) {
						switch (type) {
							case "svg":
								return SVG_NAMESPACE;
							case "math":
								return MATH_NAMESPACE;
							default:
								return HTML_NAMESPACE;
						}
					}
					function getChildNamespace(parentNamespace, type) {
						if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
							return getIntrinsicNamespace(type);
						}
						if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
							return HTML_NAMESPACE;
						}
						return parentNamespace;
					}
					var createMicrosoftUnsafeLocalFunction = function (func) {
						if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
							return function (arg0, arg1, arg2, arg3) {
								MSApp.execUnsafeLocalFunction(function () {
									return func(arg0, arg1, arg2, arg3);
								});
							};
						} else {
							return func;
						}
					};
					var reusableSVGContainer;
					var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
						if (node.namespaceURI === Namespaces.svg) {
							if (!("innerHTML" in node)) {
								reusableSVGContainer = reusableSVGContainer || document.createElement("div");
								reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
								var svgNode = reusableSVGContainer.firstChild;
								while (node.firstChild) {
									node.removeChild(node.firstChild);
								}
								while (svgNode.firstChild) {
									node.appendChild(svgNode.firstChild);
								}
								return;
							}
						}
						node.innerHTML = html;
					});
					var ELEMENT_NODE = 1;
					var TEXT_NODE = 3;
					var COMMENT_NODE = 8;
					var DOCUMENT_NODE = 9;
					var DOCUMENT_FRAGMENT_NODE = 11;
					var setTextContent = function (node, text) {
						if (text) {
							var firstChild = node.firstChild;
							if (
								firstChild &&
								firstChild === node.lastChild &&
								firstChild.nodeType === TEXT_NODE
							) {
								firstChild.nodeValue = text;
								return;
							}
						}
						node.textContent = text;
					};
					var shorthandToLonghand = {
						animation: [
							"animationDelay",
							"animationDirection",
							"animationDuration",
							"animationFillMode",
							"animationIterationCount",
							"animationName",
							"animationPlayState",
							"animationTimingFunction",
						],
						background: [
							"backgroundAttachment",
							"backgroundClip",
							"backgroundColor",
							"backgroundImage",
							"backgroundOrigin",
							"backgroundPositionX",
							"backgroundPositionY",
							"backgroundRepeat",
							"backgroundSize",
						],
						backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
						border: [
							"borderBottomColor",
							"borderBottomStyle",
							"borderBottomWidth",
							"borderImageOutset",
							"borderImageRepeat",
							"borderImageSlice",
							"borderImageSource",
							"borderImageWidth",
							"borderLeftColor",
							"borderLeftStyle",
							"borderLeftWidth",
							"borderRightColor",
							"borderRightStyle",
							"borderRightWidth",
							"borderTopColor",
							"borderTopStyle",
							"borderTopWidth",
						],
						borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
						borderBlockStart: [
							"borderBlockStartColor",
							"borderBlockStartStyle",
							"borderBlockStartWidth",
						],
						borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
						borderColor: [
							"borderBottomColor",
							"borderLeftColor",
							"borderRightColor",
							"borderTopColor",
						],
						borderImage: [
							"borderImageOutset",
							"borderImageRepeat",
							"borderImageSlice",
							"borderImageSource",
							"borderImageWidth",
						],
						borderInlineEnd: [
							"borderInlineEndColor",
							"borderInlineEndStyle",
							"borderInlineEndWidth",
						],
						borderInlineStart: [
							"borderInlineStartColor",
							"borderInlineStartStyle",
							"borderInlineStartWidth",
						],
						borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
						borderRadius: [
							"borderBottomLeftRadius",
							"borderBottomRightRadius",
							"borderTopLeftRadius",
							"borderTopRightRadius",
						],
						borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
						borderStyle: [
							"borderBottomStyle",
							"borderLeftStyle",
							"borderRightStyle",
							"borderTopStyle",
						],
						borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
						borderWidth: [
							"borderBottomWidth",
							"borderLeftWidth",
							"borderRightWidth",
							"borderTopWidth",
						],
						columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
						columns: ["columnCount", "columnWidth"],
						flex: ["flexBasis", "flexGrow", "flexShrink"],
						flexFlow: ["flexDirection", "flexWrap"],
						font: [
							"fontFamily",
							"fontFeatureSettings",
							"fontKerning",
							"fontLanguageOverride",
							"fontSize",
							"fontSizeAdjust",
							"fontStretch",
							"fontStyle",
							"fontVariant",
							"fontVariantAlternates",
							"fontVariantCaps",
							"fontVariantEastAsian",
							"fontVariantLigatures",
							"fontVariantNumeric",
							"fontVariantPosition",
							"fontWeight",
							"lineHeight",
						],
						fontVariant: [
							"fontVariantAlternates",
							"fontVariantCaps",
							"fontVariantEastAsian",
							"fontVariantLigatures",
							"fontVariantNumeric",
							"fontVariantPosition",
						],
						gap: ["columnGap", "rowGap"],
						grid: [
							"gridAutoColumns",
							"gridAutoFlow",
							"gridAutoRows",
							"gridTemplateAreas",
							"gridTemplateColumns",
							"gridTemplateRows",
						],
						gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
						gridColumn: ["gridColumnEnd", "gridColumnStart"],
						gridColumnGap: ["columnGap"],
						gridGap: ["columnGap", "rowGap"],
						gridRow: ["gridRowEnd", "gridRowStart"],
						gridRowGap: ["rowGap"],
						gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
						listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
						margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
						marker: ["markerEnd", "markerMid", "markerStart"],
						mask: [
							"maskClip",
							"maskComposite",
							"maskImage",
							"maskMode",
							"maskOrigin",
							"maskPositionX",
							"maskPositionY",
							"maskRepeat",
							"maskSize",
						],
						maskPosition: ["maskPositionX", "maskPositionY"],
						outline: ["outlineColor", "outlineStyle", "outlineWidth"],
						overflow: ["overflowX", "overflowY"],
						padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
						placeContent: ["alignContent", "justifyContent"],
						placeItems: ["alignItems", "justifyItems"],
						placeSelf: ["alignSelf", "justifySelf"],
						textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
						textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
						transition: [
							"transitionDelay",
							"transitionDuration",
							"transitionProperty",
							"transitionTimingFunction",
						],
						wordWrap: ["overflowWrap"],
					};
					var isUnitlessNumber = {
						animationIterationCount: true,
						borderImageOutset: true,
						borderImageSlice: true,
						borderImageWidth: true,
						boxFlex: true,
						boxFlexGroup: true,
						boxOrdinalGroup: true,
						columnCount: true,
						columns: true,
						flex: true,
						flexGrow: true,
						flexPositive: true,
						flexShrink: true,
						flexNegative: true,
						flexOrder: true,
						gridArea: true,
						gridRow: true,
						gridRowEnd: true,
						gridRowSpan: true,
						gridRowStart: true,
						gridColumn: true,
						gridColumnEnd: true,
						gridColumnSpan: true,
						gridColumnStart: true,
						fontWeight: true,
						lineClamp: true,
						lineHeight: true,
						opacity: true,
						order: true,
						orphans: true,
						tabSize: true,
						widows: true,
						zIndex: true,
						zoom: true,
						fillOpacity: true,
						floodOpacity: true,
						stopOpacity: true,
						strokeDasharray: true,
						strokeDashoffset: true,
						strokeMiterlimit: true,
						strokeOpacity: true,
						strokeWidth: true,
					};
					function prefixKey(prefix2, key) {
						return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
					}
					var prefixes = ["Webkit", "ms", "Moz", "O"];
					Object.keys(isUnitlessNumber).forEach(function (prop) {
						prefixes.forEach(function (prefix2) {
							isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
						});
					});
					function dangerousStyleValue(name2, value, isCustomProperty) {
						var isEmpty2 = value == null || typeof value === "boolean" || value === "";
						if (isEmpty2) {
							return "";
						}
						if (
							!isCustomProperty &&
							typeof value === "number" &&
							value !== 0 &&
							!(isUnitlessNumber.hasOwnProperty(name2) && isUnitlessNumber[name2])
						) {
							return value + "px";
						}
						return ("" + value).trim();
					}
					var uppercasePattern = /([A-Z])/g;
					var msPattern = /^ms-/;
					function hyphenateStyleName(name2) {
						return name2.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
					}
					var warnValidStyle = function () {};
					{
						var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
						var msPattern$1 = /^-ms-/;
						var hyphenPattern = /-(.)/g;
						var badStyleValueWithSemicolonPattern = /;\s*$/;
						var warnedStyleNames = {};
						var warnedStyleValues = {};
						var warnedForNaNValue = false;
						var warnedForInfinityValue = false;
						var camelize = function (string) {
							return string.replace(hyphenPattern, function (_, character) {
								return character.toUpperCase();
							});
						};
						var warnHyphenatedStyleName = function (name2) {
							if (warnedStyleNames.hasOwnProperty(name2) && warnedStyleNames[name2]) {
								return;
							}
							warnedStyleNames[name2] = true;
							error3(
								"Unsupported style property %s. Did you mean %s?",
								name2,
								camelize(name2.replace(msPattern$1, "ms-"))
							);
						};
						var warnBadVendoredStyleName = function (name2) {
							if (warnedStyleNames.hasOwnProperty(name2) && warnedStyleNames[name2]) {
								return;
							}
							warnedStyleNames[name2] = true;
							error3(
								"Unsupported vendor-prefixed style property %s. Did you mean %s?",
								name2,
								name2.charAt(0).toUpperCase() + name2.slice(1)
							);
						};
						var warnStyleValueWithSemicolon = function (name2, value) {
							if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
								return;
							}
							warnedStyleValues[value] = true;
							error3(
								`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`,
								name2,
								value.replace(badStyleValueWithSemicolonPattern, "")
							);
						};
						var warnStyleValueIsNaN = function (name2, value) {
							if (warnedForNaNValue) {
								return;
							}
							warnedForNaNValue = true;
							error3("`NaN` is an invalid value for the `%s` css style property.", name2);
						};
						var warnStyleValueIsInfinity = function (name2, value) {
							if (warnedForInfinityValue) {
								return;
							}
							warnedForInfinityValue = true;
							error3("`Infinity` is an invalid value for the `%s` css style property.", name2);
						};
						warnValidStyle = function (name2, value) {
							if (name2.indexOf("-") > -1) {
								warnHyphenatedStyleName(name2);
							} else if (badVendoredStyleNamePattern.test(name2)) {
								warnBadVendoredStyleName(name2);
							} else if (badStyleValueWithSemicolonPattern.test(value)) {
								warnStyleValueWithSemicolon(name2, value);
							}
							if (typeof value === "number") {
								if (isNaN(value)) {
									warnStyleValueIsNaN(name2, value);
								} else if (!isFinite(value)) {
									warnStyleValueIsInfinity(name2, value);
								}
							}
						};
					}
					var warnValidStyle$1 = warnValidStyle;
					function createDangerousStringForStyles(styles) {
						{
							var serialized = "";
							var delimiter = "";
							for (var styleName in styles) {
								if (!styles.hasOwnProperty(styleName)) {
									continue;
								}
								var styleValue = styles[styleName];
								if (styleValue != null) {
									var isCustomProperty = styleName.indexOf("--") === 0;
									serialized +=
										delimiter +
										(isCustomProperty ? styleName : hyphenateStyleName(styleName)) +
										":";
									serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
									delimiter = ";";
								}
							}
							return serialized || null;
						}
					}
					function setValueForStyles(node, styles) {
						var style2 = node.style;
						for (var styleName in styles) {
							if (!styles.hasOwnProperty(styleName)) {
								continue;
							}
							var isCustomProperty = styleName.indexOf("--") === 0;
							{
								if (!isCustomProperty) {
									warnValidStyle$1(styleName, styles[styleName]);
								}
							}
							var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
							if (styleName === "float") {
								styleName = "cssFloat";
							}
							if (isCustomProperty) {
								style2.setProperty(styleName, styleValue);
							} else {
								style2[styleName] = styleValue;
							}
						}
					}
					function isValueEmpty(value) {
						return value == null || typeof value === "boolean" || value === "";
					}
					function expandShorthandMap(styles) {
						var expanded = {};
						for (var key in styles) {
							var longhands = shorthandToLonghand[key] || [key];
							for (var i = 0; i < longhands.length; i++) {
								expanded[longhands[i]] = key;
							}
						}
						return expanded;
					}
					function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
						{
							if (!nextStyles) {
								return;
							}
							var expandedUpdates = expandShorthandMap(styleUpdates);
							var expandedStyles = expandShorthandMap(nextStyles);
							var warnedAbout = {};
							for (var key in expandedUpdates) {
								var originalKey = expandedUpdates[key];
								var correctOriginalKey = expandedStyles[key];
								if (correctOriginalKey && originalKey !== correctOriginalKey) {
									var warningKey = originalKey + "," + correctOriginalKey;
									if (warnedAbout[warningKey]) {
										continue;
									}
									warnedAbout[warningKey] = true;
									error3(
										"%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.",
										isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating",
										originalKey,
										correctOriginalKey
									);
								}
							}
						}
					}
					var omittedCloseTags = {
						area: true,
						base: true,
						br: true,
						col: true,
						embed: true,
						hr: true,
						img: true,
						input: true,
						keygen: true,
						link: true,
						meta: true,
						param: true,
						source: true,
						track: true,
						wbr: true,
					};
					var voidElementTags = _assign(
						{
							menuitem: true,
						},
						omittedCloseTags
					);
					var HTML = "__html";
					function assertValidProps(tag, props) {
						if (!props) {
							return;
						}
						if (voidElementTags[tag]) {
							if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
								{
									throw Error(
										tag +
											" is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`."
									);
								}
							}
						}
						if (props.dangerouslySetInnerHTML != null) {
							if (!(props.children == null)) {
								{
									throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
								}
							}
							if (
								!(
									typeof props.dangerouslySetInnerHTML === "object" &&
									HTML in props.dangerouslySetInnerHTML
								)
							) {
								{
									throw Error(
										"`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information."
									);
								}
							}
						}
						{
							if (
								!props.suppressContentEditableWarning &&
								props.contentEditable &&
								props.children != null
							) {
								error3(
									"A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."
								);
							}
						}
						if (!(props.style == null || typeof props.style === "object")) {
							{
								throw Error(
									"The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX."
								);
							}
						}
					}
					function isCustomComponent(tagName, props) {
						if (tagName.indexOf("-") === -1) {
							return typeof props.is === "string";
						}
						switch (tagName) {
							case "annotation-xml":
							case "color-profile":
							case "font-face":
							case "font-face-src":
							case "font-face-uri":
							case "font-face-format":
							case "font-face-name":
							case "missing-glyph":
								return false;
							default:
								return true;
						}
					}
					var possibleStandardNames = {
						accept: "accept",
						acceptcharset: "acceptCharset",
						"accept-charset": "acceptCharset",
						accesskey: "accessKey",
						action: "action",
						allowfullscreen: "allowFullScreen",
						alt: "alt",
						as: "as",
						async: "async",
						autocapitalize: "autoCapitalize",
						autocomplete: "autoComplete",
						autocorrect: "autoCorrect",
						autofocus: "autoFocus",
						autoplay: "autoPlay",
						autosave: "autoSave",
						capture: "capture",
						cellpadding: "cellPadding",
						cellspacing: "cellSpacing",
						challenge: "challenge",
						charset: "charSet",
						checked: "checked",
						children: "children",
						cite: "cite",
						class: "className",
						classid: "classID",
						classname: "className",
						cols: "cols",
						colspan: "colSpan",
						content: "content",
						contenteditable: "contentEditable",
						contextmenu: "contextMenu",
						controls: "controls",
						controlslist: "controlsList",
						coords: "coords",
						crossorigin: "crossOrigin",
						dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
						data: "data",
						datetime: "dateTime",
						default: "default",
						defaultchecked: "defaultChecked",
						defaultvalue: "defaultValue",
						defer: "defer",
						dir: "dir",
						disabled: "disabled",
						disablepictureinpicture: "disablePictureInPicture",
						disableremoteplayback: "disableRemotePlayback",
						download: "download",
						draggable: "draggable",
						enctype: "encType",
						enterkeyhint: "enterKeyHint",
						for: "htmlFor",
						form: "form",
						formmethod: "formMethod",
						formaction: "formAction",
						formenctype: "formEncType",
						formnovalidate: "formNoValidate",
						formtarget: "formTarget",
						frameborder: "frameBorder",
						headers: "headers",
						height: "height",
						hidden: "hidden",
						high: "high",
						href: "href",
						hreflang: "hrefLang",
						htmlfor: "htmlFor",
						httpequiv: "httpEquiv",
						"http-equiv": "httpEquiv",
						icon: "icon",
						id: "id",
						innerhtml: "innerHTML",
						inputmode: "inputMode",
						integrity: "integrity",
						is: "is",
						itemid: "itemID",
						itemprop: "itemProp",
						itemref: "itemRef",
						itemscope: "itemScope",
						itemtype: "itemType",
						keyparams: "keyParams",
						keytype: "keyType",
						kind: "kind",
						label: "label",
						lang: "lang",
						list: "list",
						loop: "loop",
						low: "low",
						manifest: "manifest",
						marginwidth: "marginWidth",
						marginheight: "marginHeight",
						max: "max",
						maxlength: "maxLength",
						media: "media",
						mediagroup: "mediaGroup",
						method: "method",
						min: "min",
						minlength: "minLength",
						multiple: "multiple",
						muted: "muted",
						name: "name",
						nomodule: "noModule",
						nonce: "nonce",
						novalidate: "noValidate",
						open: "open",
						optimum: "optimum",
						pattern: "pattern",
						placeholder: "placeholder",
						playsinline: "playsInline",
						poster: "poster",
						preload: "preload",
						profile: "profile",
						radiogroup: "radioGroup",
						readonly: "readOnly",
						referrerpolicy: "referrerPolicy",
						rel: "rel",
						required: "required",
						reversed: "reversed",
						role: "role",
						rows: "rows",
						rowspan: "rowSpan",
						sandbox: "sandbox",
						scope: "scope",
						scoped: "scoped",
						scrolling: "scrolling",
						seamless: "seamless",
						selected: "selected",
						shape: "shape",
						size: "size",
						sizes: "sizes",
						span: "span",
						spellcheck: "spellCheck",
						src: "src",
						srcdoc: "srcDoc",
						srclang: "srcLang",
						srcset: "srcSet",
						start: "start",
						step: "step",
						style: "style",
						summary: "summary",
						tabindex: "tabIndex",
						target: "target",
						title: "title",
						type: "type",
						usemap: "useMap",
						value: "value",
						width: "width",
						wmode: "wmode",
						wrap: "wrap",
						about: "about",
						accentheight: "accentHeight",
						"accent-height": "accentHeight",
						accumulate: "accumulate",
						additive: "additive",
						alignmentbaseline: "alignmentBaseline",
						"alignment-baseline": "alignmentBaseline",
						allowreorder: "allowReorder",
						alphabetic: "alphabetic",
						amplitude: "amplitude",
						arabicform: "arabicForm",
						"arabic-form": "arabicForm",
						ascent: "ascent",
						attributename: "attributeName",
						attributetype: "attributeType",
						autoreverse: "autoReverse",
						azimuth: "azimuth",
						basefrequency: "baseFrequency",
						baselineshift: "baselineShift",
						"baseline-shift": "baselineShift",
						baseprofile: "baseProfile",
						bbox: "bbox",
						begin: "begin",
						bias: "bias",
						by: "by",
						calcmode: "calcMode",
						capheight: "capHeight",
						"cap-height": "capHeight",
						clip: "clip",
						clippath: "clipPath",
						"clip-path": "clipPath",
						clippathunits: "clipPathUnits",
						cliprule: "clipRule",
						"clip-rule": "clipRule",
						color: "color",
						colorinterpolation: "colorInterpolation",
						"color-interpolation": "colorInterpolation",
						colorinterpolationfilters: "colorInterpolationFilters",
						"color-interpolation-filters": "colorInterpolationFilters",
						colorprofile: "colorProfile",
						"color-profile": "colorProfile",
						colorrendering: "colorRendering",
						"color-rendering": "colorRendering",
						contentscripttype: "contentScriptType",
						contentstyletype: "contentStyleType",
						cursor: "cursor",
						cx: "cx",
						cy: "cy",
						d: "d",
						datatype: "datatype",
						decelerate: "decelerate",
						descent: "descent",
						diffuseconstant: "diffuseConstant",
						direction: "direction",
						display: "display",
						divisor: "divisor",
						dominantbaseline: "dominantBaseline",
						"dominant-baseline": "dominantBaseline",
						dur: "dur",
						dx: "dx",
						dy: "dy",
						edgemode: "edgeMode",
						elevation: "elevation",
						enablebackground: "enableBackground",
						"enable-background": "enableBackground",
						end: "end",
						exponent: "exponent",
						externalresourcesrequired: "externalResourcesRequired",
						fill: "fill",
						fillopacity: "fillOpacity",
						"fill-opacity": "fillOpacity",
						fillrule: "fillRule",
						"fill-rule": "fillRule",
						filter: "filter",
						filterres: "filterRes",
						filterunits: "filterUnits",
						floodopacity: "floodOpacity",
						"flood-opacity": "floodOpacity",
						floodcolor: "floodColor",
						"flood-color": "floodColor",
						focusable: "focusable",
						fontfamily: "fontFamily",
						"font-family": "fontFamily",
						fontsize: "fontSize",
						"font-size": "fontSize",
						fontsizeadjust: "fontSizeAdjust",
						"font-size-adjust": "fontSizeAdjust",
						fontstretch: "fontStretch",
						"font-stretch": "fontStretch",
						fontstyle: "fontStyle",
						"font-style": "fontStyle",
						fontvariant: "fontVariant",
						"font-variant": "fontVariant",
						fontweight: "fontWeight",
						"font-weight": "fontWeight",
						format: "format",
						from: "from",
						fx: "fx",
						fy: "fy",
						g1: "g1",
						g2: "g2",
						glyphname: "glyphName",
						"glyph-name": "glyphName",
						glyphorientationhorizontal: "glyphOrientationHorizontal",
						"glyph-orientation-horizontal": "glyphOrientationHorizontal",
						glyphorientationvertical: "glyphOrientationVertical",
						"glyph-orientation-vertical": "glyphOrientationVertical",
						glyphref: "glyphRef",
						gradienttransform: "gradientTransform",
						gradientunits: "gradientUnits",
						hanging: "hanging",
						horizadvx: "horizAdvX",
						"horiz-adv-x": "horizAdvX",
						horizoriginx: "horizOriginX",
						"horiz-origin-x": "horizOriginX",
						ideographic: "ideographic",
						imagerendering: "imageRendering",
						"image-rendering": "imageRendering",
						in2: "in2",
						in: "in",
						inlist: "inlist",
						intercept: "intercept",
						k1: "k1",
						k2: "k2",
						k3: "k3",
						k4: "k4",
						k: "k",
						kernelmatrix: "kernelMatrix",
						kernelunitlength: "kernelUnitLength",
						kerning: "kerning",
						keypoints: "keyPoints",
						keysplines: "keySplines",
						keytimes: "keyTimes",
						lengthadjust: "lengthAdjust",
						letterspacing: "letterSpacing",
						"letter-spacing": "letterSpacing",
						lightingcolor: "lightingColor",
						"lighting-color": "lightingColor",
						limitingconeangle: "limitingConeAngle",
						local: "local",
						markerend: "markerEnd",
						"marker-end": "markerEnd",
						markerheight: "markerHeight",
						markermid: "markerMid",
						"marker-mid": "markerMid",
						markerstart: "markerStart",
						"marker-start": "markerStart",
						markerunits: "markerUnits",
						markerwidth: "markerWidth",
						mask: "mask",
						maskcontentunits: "maskContentUnits",
						maskunits: "maskUnits",
						mathematical: "mathematical",
						mode: "mode",
						numoctaves: "numOctaves",
						offset: "offset",
						opacity: "opacity",
						operator: "operator",
						order: "order",
						orient: "orient",
						orientation: "orientation",
						origin: "origin",
						overflow: "overflow",
						overlineposition: "overlinePosition",
						"overline-position": "overlinePosition",
						overlinethickness: "overlineThickness",
						"overline-thickness": "overlineThickness",
						paintorder: "paintOrder",
						"paint-order": "paintOrder",
						panose1: "panose1",
						"panose-1": "panose1",
						pathlength: "pathLength",
						patterncontentunits: "patternContentUnits",
						patterntransform: "patternTransform",
						patternunits: "patternUnits",
						pointerevents: "pointerEvents",
						"pointer-events": "pointerEvents",
						points: "points",
						pointsatx: "pointsAtX",
						pointsaty: "pointsAtY",
						pointsatz: "pointsAtZ",
						prefix: "prefix",
						preservealpha: "preserveAlpha",
						preserveaspectratio: "preserveAspectRatio",
						primitiveunits: "primitiveUnits",
						property: "property",
						r: "r",
						radius: "radius",
						refx: "refX",
						refy: "refY",
						renderingintent: "renderingIntent",
						"rendering-intent": "renderingIntent",
						repeatcount: "repeatCount",
						repeatdur: "repeatDur",
						requiredextensions: "requiredExtensions",
						requiredfeatures: "requiredFeatures",
						resource: "resource",
						restart: "restart",
						result: "result",
						results: "results",
						rotate: "rotate",
						rx: "rx",
						ry: "ry",
						scale: "scale",
						security: "security",
						seed: "seed",
						shaperendering: "shapeRendering",
						"shape-rendering": "shapeRendering",
						slope: "slope",
						spacing: "spacing",
						specularconstant: "specularConstant",
						specularexponent: "specularExponent",
						speed: "speed",
						spreadmethod: "spreadMethod",
						startoffset: "startOffset",
						stddeviation: "stdDeviation",
						stemh: "stemh",
						stemv: "stemv",
						stitchtiles: "stitchTiles",
						stopcolor: "stopColor",
						"stop-color": "stopColor",
						stopopacity: "stopOpacity",
						"stop-opacity": "stopOpacity",
						strikethroughposition: "strikethroughPosition",
						"strikethrough-position": "strikethroughPosition",
						strikethroughthickness: "strikethroughThickness",
						"strikethrough-thickness": "strikethroughThickness",
						string: "string",
						stroke: "stroke",
						strokedasharray: "strokeDasharray",
						"stroke-dasharray": "strokeDasharray",
						strokedashoffset: "strokeDashoffset",
						"stroke-dashoffset": "strokeDashoffset",
						strokelinecap: "strokeLinecap",
						"stroke-linecap": "strokeLinecap",
						strokelinejoin: "strokeLinejoin",
						"stroke-linejoin": "strokeLinejoin",
						strokemiterlimit: "strokeMiterlimit",
						"stroke-miterlimit": "strokeMiterlimit",
						strokewidth: "strokeWidth",
						"stroke-width": "strokeWidth",
						strokeopacity: "strokeOpacity",
						"stroke-opacity": "strokeOpacity",
						suppresscontenteditablewarning: "suppressContentEditableWarning",
						suppresshydrationwarning: "suppressHydrationWarning",
						surfacescale: "surfaceScale",
						systemlanguage: "systemLanguage",
						tablevalues: "tableValues",
						targetx: "targetX",
						targety: "targetY",
						textanchor: "textAnchor",
						"text-anchor": "textAnchor",
						textdecoration: "textDecoration",
						"text-decoration": "textDecoration",
						textlength: "textLength",
						textrendering: "textRendering",
						"text-rendering": "textRendering",
						to: "to",
						transform: "transform",
						typeof: "typeof",
						u1: "u1",
						u2: "u2",
						underlineposition: "underlinePosition",
						"underline-position": "underlinePosition",
						underlinethickness: "underlineThickness",
						"underline-thickness": "underlineThickness",
						unicode: "unicode",
						unicodebidi: "unicodeBidi",
						"unicode-bidi": "unicodeBidi",
						unicoderange: "unicodeRange",
						"unicode-range": "unicodeRange",
						unitsperem: "unitsPerEm",
						"units-per-em": "unitsPerEm",
						unselectable: "unselectable",
						valphabetic: "vAlphabetic",
						"v-alphabetic": "vAlphabetic",
						values: "values",
						vectoreffect: "vectorEffect",
						"vector-effect": "vectorEffect",
						version: "version",
						vertadvy: "vertAdvY",
						"vert-adv-y": "vertAdvY",
						vertoriginx: "vertOriginX",
						"vert-origin-x": "vertOriginX",
						vertoriginy: "vertOriginY",
						"vert-origin-y": "vertOriginY",
						vhanging: "vHanging",
						"v-hanging": "vHanging",
						videographic: "vIdeographic",
						"v-ideographic": "vIdeographic",
						viewbox: "viewBox",
						viewtarget: "viewTarget",
						visibility: "visibility",
						vmathematical: "vMathematical",
						"v-mathematical": "vMathematical",
						vocab: "vocab",
						widths: "widths",
						wordspacing: "wordSpacing",
						"word-spacing": "wordSpacing",
						writingmode: "writingMode",
						"writing-mode": "writingMode",
						x1: "x1",
						x2: "x2",
						x: "x",
						xchannelselector: "xChannelSelector",
						xheight: "xHeight",
						"x-height": "xHeight",
						xlinkactuate: "xlinkActuate",
						"xlink:actuate": "xlinkActuate",
						xlinkarcrole: "xlinkArcrole",
						"xlink:arcrole": "xlinkArcrole",
						xlinkhref: "xlinkHref",
						"xlink:href": "xlinkHref",
						xlinkrole: "xlinkRole",
						"xlink:role": "xlinkRole",
						xlinkshow: "xlinkShow",
						"xlink:show": "xlinkShow",
						xlinktitle: "xlinkTitle",
						"xlink:title": "xlinkTitle",
						xlinktype: "xlinkType",
						"xlink:type": "xlinkType",
						xmlbase: "xmlBase",
						"xml:base": "xmlBase",
						xmllang: "xmlLang",
						"xml:lang": "xmlLang",
						xmlns: "xmlns",
						"xml:space": "xmlSpace",
						xmlnsxlink: "xmlnsXlink",
						"xmlns:xlink": "xmlnsXlink",
						xmlspace: "xmlSpace",
						y1: "y1",
						y2: "y2",
						y: "y",
						ychannelselector: "yChannelSelector",
						z: "z",
						zoomandpan: "zoomAndPan",
					};
					var ariaProperties = {
						"aria-current": 0,
						"aria-details": 0,
						"aria-disabled": 0,
						"aria-hidden": 0,
						"aria-invalid": 0,
						"aria-keyshortcuts": 0,
						"aria-label": 0,
						"aria-roledescription": 0,
						"aria-autocomplete": 0,
						"aria-checked": 0,
						"aria-expanded": 0,
						"aria-haspopup": 0,
						"aria-level": 0,
						"aria-modal": 0,
						"aria-multiline": 0,
						"aria-multiselectable": 0,
						"aria-orientation": 0,
						"aria-placeholder": 0,
						"aria-pressed": 0,
						"aria-readonly": 0,
						"aria-required": 0,
						"aria-selected": 0,
						"aria-sort": 0,
						"aria-valuemax": 0,
						"aria-valuemin": 0,
						"aria-valuenow": 0,
						"aria-valuetext": 0,
						"aria-atomic": 0,
						"aria-busy": 0,
						"aria-live": 0,
						"aria-relevant": 0,
						"aria-dropeffect": 0,
						"aria-grabbed": 0,
						"aria-activedescendant": 0,
						"aria-colcount": 0,
						"aria-colindex": 0,
						"aria-colspan": 0,
						"aria-controls": 0,
						"aria-describedby": 0,
						"aria-errormessage": 0,
						"aria-flowto": 0,
						"aria-labelledby": 0,
						"aria-owns": 0,
						"aria-posinset": 0,
						"aria-rowcount": 0,
						"aria-rowindex": 0,
						"aria-rowspan": 0,
						"aria-setsize": 0,
					};
					var warnedProperties = {};
					var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
					var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
					var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
					function validateProperty(tagName, name2) {
						{
							if (hasOwnProperty$1.call(warnedProperties, name2) && warnedProperties[name2]) {
								return true;
							}
							if (rARIACamel.test(name2)) {
								var ariaName = "aria-" + name2.slice(4).toLowerCase();
								var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
								if (correctName == null) {
									error3(
										"Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.",
										name2
									);
									warnedProperties[name2] = true;
									return true;
								}
								if (name2 !== correctName) {
									error3("Invalid ARIA attribute `%s`. Did you mean `%s`?", name2, correctName);
									warnedProperties[name2] = true;
									return true;
								}
							}
							if (rARIA.test(name2)) {
								var lowerCasedName = name2.toLowerCase();
								var standardName = ariaProperties.hasOwnProperty(lowerCasedName)
									? lowerCasedName
									: null;
								if (standardName == null) {
									warnedProperties[name2] = true;
									return false;
								}
								if (name2 !== standardName) {
									error3("Unknown ARIA attribute `%s`. Did you mean `%s`?", name2, standardName);
									warnedProperties[name2] = true;
									return true;
								}
							}
						}
						return true;
					}
					function warnInvalidARIAProps(type, props) {
						{
							var invalidProps = [];
							for (var key in props) {
								var isValid = validateProperty(type, key);
								if (!isValid) {
									invalidProps.push(key);
								}
							}
							var unknownPropString = invalidProps
								.map(function (prop) {
									return "`" + prop + "`";
								})
								.join(", ");
							if (invalidProps.length === 1) {
								error3(
									"Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props",
									unknownPropString,
									type
								);
							} else if (invalidProps.length > 1) {
								error3(
									"Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props",
									unknownPropString,
									type
								);
							}
						}
					}
					function validateProperties(type, props) {
						if (isCustomComponent(type, props)) {
							return;
						}
						warnInvalidARIAProps(type, props);
					}
					var didWarnValueNull = false;
					function validateProperties$1(type, props) {
						{
							if (type !== "input" && type !== "textarea" && type !== "select") {
								return;
							}
							if (props != null && props.value === null && !didWarnValueNull) {
								didWarnValueNull = true;
								if (type === "select" && props.multiple) {
									error3(
										"`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.",
										type
									);
								} else {
									error3(
										"`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.",
										type
									);
								}
							}
						}
					}
					var validateProperty$1 = function () {};
					{
						var warnedProperties$1 = {};
						var _hasOwnProperty = Object.prototype.hasOwnProperty;
						var EVENT_NAME_REGEX = /^on./;
						var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
						var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
						var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
						validateProperty$1 = function (tagName, name2, value, eventRegistry) {
							if (_hasOwnProperty.call(warnedProperties$1, name2) && warnedProperties$1[name2]) {
								return true;
							}
							var lowerCasedName = name2.toLowerCase();
							if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
								error3(
									"React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."
								);
								warnedProperties$1[name2] = true;
								return true;
							}
							if (eventRegistry != null) {
								var registrationNameDependencies2 = eventRegistry.registrationNameDependencies,
									possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
								if (registrationNameDependencies2.hasOwnProperty(name2)) {
									return true;
								}
								var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName)
									? possibleRegistrationNames2[lowerCasedName]
									: null;
								if (registrationName != null) {
									error3(
										"Invalid event handler property `%s`. Did you mean `%s`?",
										name2,
										registrationName
									);
									warnedProperties$1[name2] = true;
									return true;
								}
								if (EVENT_NAME_REGEX.test(name2)) {
									error3("Unknown event handler property `%s`. It will be ignored.", name2);
									warnedProperties$1[name2] = true;
									return true;
								}
							} else if (EVENT_NAME_REGEX.test(name2)) {
								if (INVALID_EVENT_NAME_REGEX.test(name2)) {
									error3(
										"Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.",
										name2
									);
								}
								warnedProperties$1[name2] = true;
								return true;
							}
							if (rARIA$1.test(name2) || rARIACamel$1.test(name2)) {
								return true;
							}
							if (lowerCasedName === "innerhtml") {
								error3(
									"Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."
								);
								warnedProperties$1[name2] = true;
								return true;
							}
							if (lowerCasedName === "aria") {
								error3(
									"The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."
								);
								warnedProperties$1[name2] = true;
								return true;
							}
							if (
								lowerCasedName === "is" &&
								value !== null &&
								value !== void 0 &&
								typeof value !== "string"
							) {
								error3(
									"Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.",
									typeof value
								);
								warnedProperties$1[name2] = true;
								return true;
							}
							if (typeof value === "number" && isNaN(value)) {
								error3(
									"Received NaN for the `%s` attribute. If this is expected, cast the value to a string.",
									name2
								);
								warnedProperties$1[name2] = true;
								return true;
							}
							var propertyInfo = getPropertyInfo(name2);
							var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
							if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
								var standardName = possibleStandardNames[lowerCasedName];
								if (standardName !== name2) {
									error3("Invalid DOM property `%s`. Did you mean `%s`?", name2, standardName);
									warnedProperties$1[name2] = true;
									return true;
								}
							} else if (!isReserved && name2 !== lowerCasedName) {
								error3(
									"React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.",
									name2,
									lowerCasedName
								);
								warnedProperties$1[name2] = true;
								return true;
							}
							if (
								typeof value === "boolean" &&
								shouldRemoveAttributeWithWarning(name2, value, propertyInfo, false)
							) {
								if (value) {
									error3(
										'Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.',
										value,
										name2,
										name2,
										value,
										name2
									);
								} else {
									error3(
										'Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.',
										value,
										name2,
										name2,
										value,
										name2,
										name2,
										name2
									);
								}
								warnedProperties$1[name2] = true;
								return true;
							}
							if (isReserved) {
								return true;
							}
							if (shouldRemoveAttributeWithWarning(name2, value, propertyInfo, false)) {
								warnedProperties$1[name2] = true;
								return false;
							}
							if (
								(value === "false" || value === "true") &&
								propertyInfo !== null &&
								propertyInfo.type === BOOLEAN
							) {
								error3(
									"Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?",
									value,
									name2,
									value === "false"
										? "The browser will interpret it as a truthy value."
										: 'Although this works, it will not work as expected if you pass the string "false".',
									name2,
									value
								);
								warnedProperties$1[name2] = true;
								return true;
							}
							return true;
						};
					}
					var warnUnknownProperties = function (type, props, eventRegistry) {
						{
							var unknownProps = [];
							for (var key in props) {
								var isValid = validateProperty$1(type, key, props[key], eventRegistry);
								if (!isValid) {
									unknownProps.push(key);
								}
							}
							var unknownPropString = unknownProps
								.map(function (prop) {
									return "`" + prop + "`";
								})
								.join(", ");
							if (unknownProps.length === 1) {
								error3(
									"Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ",
									unknownPropString,
									type
								);
							} else if (unknownProps.length > 1) {
								error3(
									"Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ",
									unknownPropString,
									type
								);
							}
						}
					};
					function validateProperties$2(type, props, eventRegistry) {
						if (isCustomComponent(type, props)) {
							return;
						}
						warnUnknownProperties(type, props, eventRegistry);
					}
					var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
					var IS_NON_DELEGATED = 1 << 1;
					var IS_CAPTURE_PHASE = 1 << 2;
					var IS_REPLAYED = 1 << 4;
					var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS =
						IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
					function getEventTarget(nativeEvent) {
						var target = nativeEvent.target || nativeEvent.srcElement || window;
						if (target.correspondingUseElement) {
							target = target.correspondingUseElement;
						}
						return target.nodeType === TEXT_NODE ? target.parentNode : target;
					}
					var restoreImpl = null;
					var restoreTarget = null;
					var restoreQueue = null;
					function restoreStateOfTarget(target) {
						var internalInstance = getInstanceFromNode(target);
						if (!internalInstance) {
							return;
						}
						if (!(typeof restoreImpl === "function")) {
							{
								throw Error(
									"setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue."
								);
							}
						}
						var stateNode = internalInstance.stateNode;
						if (stateNode) {
							var _props = getFiberCurrentPropsFromNode(stateNode);
							restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
						}
					}
					function setRestoreImplementation(impl) {
						restoreImpl = impl;
					}
					function enqueueStateRestore(target) {
						if (restoreTarget) {
							if (restoreQueue) {
								restoreQueue.push(target);
							} else {
								restoreQueue = [target];
							}
						} else {
							restoreTarget = target;
						}
					}
					function needsStateRestore() {
						return restoreTarget !== null || restoreQueue !== null;
					}
					function restoreStateIfNeeded() {
						if (!restoreTarget) {
							return;
						}
						var target = restoreTarget;
						var queuedTargets = restoreQueue;
						restoreTarget = null;
						restoreQueue = null;
						restoreStateOfTarget(target);
						if (queuedTargets) {
							for (var i = 0; i < queuedTargets.length; i++) {
								restoreStateOfTarget(queuedTargets[i]);
							}
						}
					}
					var batchedUpdatesImpl = function (fn, bookkeeping) {
						return fn(bookkeeping);
					};
					var discreteUpdatesImpl = function (fn, a, b, c20, d) {
						return fn(a, b, c20, d);
					};
					var flushDiscreteUpdatesImpl = function () {};
					var batchedEventUpdatesImpl = batchedUpdatesImpl;
					var isInsideEventHandler = false;
					var isBatchingEventUpdates = false;
					function finishEventHandler() {
						var controlledComponentsHavePendingUpdates = needsStateRestore();
						if (controlledComponentsHavePendingUpdates) {
							flushDiscreteUpdatesImpl();
							restoreStateIfNeeded();
						}
					}
					function batchedUpdates(fn, bookkeeping) {
						if (isInsideEventHandler) {
							return fn(bookkeeping);
						}
						isInsideEventHandler = true;
						try {
							return batchedUpdatesImpl(fn, bookkeeping);
						} finally {
							isInsideEventHandler = false;
							finishEventHandler();
						}
					}
					function batchedEventUpdates(fn, a, b) {
						if (isBatchingEventUpdates) {
							return fn(a, b);
						}
						isBatchingEventUpdates = true;
						try {
							return batchedEventUpdatesImpl(fn, a, b);
						} finally {
							isBatchingEventUpdates = false;
							finishEventHandler();
						}
					}
					function discreteUpdates(fn, a, b, c20, d) {
						var prevIsInsideEventHandler = isInsideEventHandler;
						isInsideEventHandler = true;
						try {
							return discreteUpdatesImpl(fn, a, b, c20, d);
						} finally {
							isInsideEventHandler = prevIsInsideEventHandler;
							if (!isInsideEventHandler) {
								finishEventHandler();
							}
						}
					}
					function flushDiscreteUpdatesIfNeeded(timeStamp) {
						{
							if (!isInsideEventHandler) {
								flushDiscreteUpdatesImpl();
							}
						}
					}
					function setBatchingImplementation(
						_batchedUpdatesImpl,
						_discreteUpdatesImpl,
						_flushDiscreteUpdatesImpl,
						_batchedEventUpdatesImpl
					) {
						batchedUpdatesImpl = _batchedUpdatesImpl;
						discreteUpdatesImpl = _discreteUpdatesImpl;
						flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
						batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
					}
					function isInteractive(tag) {
						return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
					}
					function shouldPreventMouseEvent(name2, type, props) {
						switch (name2) {
							case "onClick":
							case "onClickCapture":
							case "onDoubleClick":
							case "onDoubleClickCapture":
							case "onMouseDown":
							case "onMouseDownCapture":
							case "onMouseMove":
							case "onMouseMoveCapture":
							case "onMouseUp":
							case "onMouseUpCapture":
							case "onMouseEnter":
								return !!(props.disabled && isInteractive(type));
							default:
								return false;
						}
					}
					function getListener(inst, registrationName) {
						var stateNode = inst.stateNode;
						if (stateNode === null) {
							return null;
						}
						var props = getFiberCurrentPropsFromNode(stateNode);
						if (props === null) {
							return null;
						}
						var listener = props[registrationName];
						if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
							return null;
						}
						if (!(!listener || typeof listener === "function")) {
							{
								throw Error(
									"Expected `" +
										registrationName +
										"` listener to be a function, instead got a value of `" +
										typeof listener +
										"` type."
								);
							}
						}
						return listener;
					}
					var passiveBrowserEventsSupported = false;
					if (canUseDOM) {
						try {
							var options = {};
							Object.defineProperty(options, "passive", {
								get: function () {
									passiveBrowserEventsSupported = true;
								},
							});
							window.addEventListener("test", options, options);
							window.removeEventListener("test", options, options);
						} catch (e) {
							passiveBrowserEventsSupported = false;
						}
					}
					function invokeGuardedCallbackProd(name2, func, context, a, b, c20, d, e, f) {
						var funcArgs = Array.prototype.slice.call(arguments, 3);
						try {
							func.apply(context, funcArgs);
						} catch (error4) {
							this.onError(error4);
						}
					}
					var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
					{
						if (
							typeof window !== "undefined" &&
							typeof window.dispatchEvent === "function" &&
							typeof document !== "undefined" &&
							typeof document.createEvent === "function"
						) {
							var fakeNode = document.createElement("react");
							invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(
								name2,
								func,
								context,
								a,
								b,
								c20,
								d,
								e,
								f
							) {
								if (!(typeof document !== "undefined")) {
									{
										throw Error(
											"The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous."
										);
									}
								}
								var evt = document.createEvent("Event");
								var didCall = false;
								var didError = true;
								var windowEvent = window.event;
								var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
								function restoreAfterDispatch() {
									fakeNode.removeEventListener(evtType, callCallback2, false);
									if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
										window.event = windowEvent;
									}
								}
								var funcArgs = Array.prototype.slice.call(arguments, 3);
								function callCallback2() {
									didCall = true;
									restoreAfterDispatch();
									func.apply(context, funcArgs);
									didError = false;
								}
								var error4;
								var didSetError = false;
								var isCrossOriginError = false;
								function handleWindowError(event2) {
									error4 = event2.error;
									didSetError = true;
									if (error4 === null && event2.colno === 0 && event2.lineno === 0) {
										isCrossOriginError = true;
									}
									if (event2.defaultPrevented) {
										if (error4 != null && typeof error4 === "object") {
											try {
												error4._suppressLogging = true;
											} catch (inner) {}
										}
									}
								}
								var evtType = "react-" + (name2 ? name2 : "invokeguardedcallback");
								window.addEventListener("error", handleWindowError);
								fakeNode.addEventListener(evtType, callCallback2, false);
								evt.initEvent(evtType, false, false);
								fakeNode.dispatchEvent(evt);
								if (windowEventDescriptor) {
									Object.defineProperty(window, "event", windowEventDescriptor);
								}
								if (didCall && didError) {
									if (!didSetError) {
										error4 = new Error(
											`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`
										);
									} else if (isCrossOriginError) {
										error4 = new Error(
											"A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information."
										);
									}
									this.onError(error4);
								}
								window.removeEventListener("error", handleWindowError);
								if (!didCall) {
									restoreAfterDispatch();
									return invokeGuardedCallbackProd.apply(this, arguments);
								}
							};
						}
					}
					var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
					var hasError = false;
					var caughtError = null;
					var hasRethrowError = false;
					var rethrowError = null;
					var reporter = {
						onError: function (error4) {
							hasError = true;
							caughtError = error4;
						},
					};
					function invokeGuardedCallback(name2, func, context, a, b, c20, d, e, f) {
						hasError = false;
						caughtError = null;
						invokeGuardedCallbackImpl$1.apply(reporter, arguments);
					}
					function invokeGuardedCallbackAndCatchFirstError(
						name2,
						func,
						context,
						a,
						b,
						c20,
						d,
						e,
						f
					) {
						invokeGuardedCallback.apply(this, arguments);
						if (hasError) {
							var error4 = clearCaughtError();
							if (!hasRethrowError) {
								hasRethrowError = true;
								rethrowError = error4;
							}
						}
					}
					function rethrowCaughtError() {
						if (hasRethrowError) {
							var error4 = rethrowError;
							hasRethrowError = false;
							rethrowError = null;
							throw error4;
						}
					}
					function hasCaughtError() {
						return hasError;
					}
					function clearCaughtError() {
						if (hasError) {
							var error4 = caughtError;
							hasError = false;
							caughtError = null;
							return error4;
						} else {
							{
								{
									throw Error(
										"clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue."
									);
								}
							}
						}
					}
					function get2(key) {
						return key._reactInternals;
					}
					function has2(key) {
						return key._reactInternals !== void 0;
					}
					function set2(key, value) {
						key._reactInternals = value;
					}
					var NoFlags = 0;
					var PerformedWork = 1;
					var Placement = 2;
					var Update = 4;
					var PlacementAndUpdate = 6;
					var Deletion = 8;
					var ContentReset = 16;
					var Callback = 32;
					var DidCapture = 64;
					var Ref = 128;
					var Snapshot = 256;
					var Passive = 512;
					var PassiveUnmountPendingDev = 8192;
					var Hydrating = 1024;
					var HydratingAndUpdate = 1028;
					var LifecycleEffectMask = 932;
					var HostEffectMask = 2047;
					var Incomplete = 2048;
					var ShouldCapture = 4096;
					var ForceUpdateForLegacySuspense = 16384;
					var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
					function getNearestMountedFiber(fiber) {
						var node = fiber;
						var nearestMounted = fiber;
						if (!fiber.alternate) {
							var nextNode = node;
							do {
								node = nextNode;
								if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
									nearestMounted = node.return;
								}
								nextNode = node.return;
							} while (nextNode);
						} else {
							while (node.return) {
								node = node.return;
							}
						}
						if (node.tag === HostRoot) {
							return nearestMounted;
						}
						return null;
					}
					function getSuspenseInstanceFromFiber(fiber) {
						if (fiber.tag === SuspenseComponent) {
							var suspenseState = fiber.memoizedState;
							if (suspenseState === null) {
								var current2 = fiber.alternate;
								if (current2 !== null) {
									suspenseState = current2.memoizedState;
								}
							}
							if (suspenseState !== null) {
								return suspenseState.dehydrated;
							}
						}
						return null;
					}
					function getContainerFromFiber(fiber) {
						return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
					}
					function isFiberMounted(fiber) {
						return getNearestMountedFiber(fiber) === fiber;
					}
					function isMounted(component) {
						{
							var owner = ReactCurrentOwner.current;
							if (owner !== null && owner.tag === ClassComponent) {
								var ownerFiber = owner;
								var instance = ownerFiber.stateNode;
								if (!instance._warnedAboutRefsInRender) {
									error3(
										"%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.",
										getComponentName(ownerFiber.type) || "A component"
									);
								}
								instance._warnedAboutRefsInRender = true;
							}
						}
						var fiber = get2(component);
						if (!fiber) {
							return false;
						}
						return getNearestMountedFiber(fiber) === fiber;
					}
					function assertIsMounted(fiber) {
						if (!(getNearestMountedFiber(fiber) === fiber)) {
							{
								throw Error("Unable to find node on an unmounted component.");
							}
						}
					}
					function findCurrentFiberUsingSlowPath(fiber) {
						var alternate = fiber.alternate;
						if (!alternate) {
							var nearestMounted = getNearestMountedFiber(fiber);
							if (!(nearestMounted !== null)) {
								{
									throw Error("Unable to find node on an unmounted component.");
								}
							}
							if (nearestMounted !== fiber) {
								return null;
							}
							return fiber;
						}
						var a = fiber;
						var b = alternate;
						while (true) {
							var parentA = a.return;
							if (parentA === null) {
								break;
							}
							var parentB = parentA.alternate;
							if (parentB === null) {
								var nextParent = parentA.return;
								if (nextParent !== null) {
									a = b = nextParent;
									continue;
								}
								break;
							}
							if (parentA.child === parentB.child) {
								var child = parentA.child;
								while (child) {
									if (child === a) {
										assertIsMounted(parentA);
										return fiber;
									}
									if (child === b) {
										assertIsMounted(parentA);
										return alternate;
									}
									child = child.sibling;
								}
								{
									{
										throw Error("Unable to find node on an unmounted component.");
									}
								}
							}
							if (a.return !== b.return) {
								a = parentA;
								b = parentB;
							} else {
								var didFindChild = false;
								var _child = parentA.child;
								while (_child) {
									if (_child === a) {
										didFindChild = true;
										a = parentA;
										b = parentB;
										break;
									}
									if (_child === b) {
										didFindChild = true;
										b = parentA;
										a = parentB;
										break;
									}
									_child = _child.sibling;
								}
								if (!didFindChild) {
									_child = parentB.child;
									while (_child) {
										if (_child === a) {
											didFindChild = true;
											a = parentB;
											b = parentA;
											break;
										}
										if (_child === b) {
											didFindChild = true;
											b = parentB;
											a = parentA;
											break;
										}
										_child = _child.sibling;
									}
									if (!didFindChild) {
										{
											throw Error(
												"Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue."
											);
										}
									}
								}
							}
							if (!(a.alternate === b)) {
								{
									throw Error(
										"Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue."
									);
								}
							}
						}
						if (!(a.tag === HostRoot)) {
							{
								throw Error("Unable to find node on an unmounted component.");
							}
						}
						if (a.stateNode.current === a) {
							return fiber;
						}
						return alternate;
					}
					function findCurrentHostFiber(parent) {
						var currentParent = findCurrentFiberUsingSlowPath(parent);
						if (!currentParent) {
							return null;
						}
						var node = currentParent;
						while (true) {
							if (node.tag === HostComponent || node.tag === HostText) {
								return node;
							} else if (node.child) {
								node.child.return = node;
								node = node.child;
								continue;
							}
							if (node === currentParent) {
								return null;
							}
							while (!node.sibling) {
								if (!node.return || node.return === currentParent) {
									return null;
								}
								node = node.return;
							}
							node.sibling.return = node.return;
							node = node.sibling;
						}
						return null;
					}
					function findCurrentHostFiberWithNoPortals(parent) {
						var currentParent = findCurrentFiberUsingSlowPath(parent);
						if (!currentParent) {
							return null;
						}
						var node = currentParent;
						while (true) {
							if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) {
								return node;
							} else if (node.child && node.tag !== HostPortal) {
								node.child.return = node;
								node = node.child;
								continue;
							}
							if (node === currentParent) {
								return null;
							}
							while (!node.sibling) {
								if (!node.return || node.return === currentParent) {
									return null;
								}
								node = node.return;
							}
							node.sibling.return = node.return;
							node = node.sibling;
						}
						return null;
					}
					function doesFiberContain(parentFiber, childFiber) {
						var node = childFiber;
						var parentFiberAlternate = parentFiber.alternate;
						while (node !== null) {
							if (node === parentFiber || node === parentFiberAlternate) {
								return true;
							}
							node = node.return;
						}
						return false;
					}
					var attemptUserBlockingHydration;
					function setAttemptUserBlockingHydration(fn) {
						attemptUserBlockingHydration = fn;
					}
					var attemptContinuousHydration;
					function setAttemptContinuousHydration(fn) {
						attemptContinuousHydration = fn;
					}
					var attemptHydrationAtCurrentPriority;
					function setAttemptHydrationAtCurrentPriority(fn) {
						attemptHydrationAtCurrentPriority = fn;
					}
					var attemptHydrationAtPriority;
					function setAttemptHydrationAtPriority(fn) {
						attemptHydrationAtPriority = fn;
					}
					var hasScheduledReplayAttempt = false;
					var queuedDiscreteEvents = [];
					var queuedFocus = null;
					var queuedDrag = null;
					var queuedMouse = null;
					var queuedPointers = new Map();
					var queuedPointerCaptures = new Map();
					var queuedExplicitHydrationTargets = [];
					function hasQueuedDiscreteEvents() {
						return queuedDiscreteEvents.length > 0;
					}
					var discreteReplayableEvents = [
						"mousedown",
						"mouseup",
						"touchcancel",
						"touchend",
						"touchstart",
						"auxclick",
						"dblclick",
						"pointercancel",
						"pointerdown",
						"pointerup",
						"dragend",
						"dragstart",
						"drop",
						"compositionend",
						"compositionstart",
						"keydown",
						"keypress",
						"keyup",
						"input",
						"textInput",
						"copy",
						"cut",
						"paste",
						"click",
						"change",
						"contextmenu",
						"reset",
						"submit",
					];
					function isReplayableDiscreteEvent(eventType) {
						return discreteReplayableEvents.indexOf(eventType) > -1;
					}
					function createQueuedReplayableEvent(
						blockedOn,
						domEventName,
						eventSystemFlags,
						targetContainer,
						nativeEvent
					) {
						return {
							blockedOn,
							domEventName,
							eventSystemFlags: eventSystemFlags | IS_REPLAYED,
							nativeEvent,
							targetContainers: [targetContainer],
						};
					}
					function queueDiscreteEvent(
						blockedOn,
						domEventName,
						eventSystemFlags,
						targetContainer,
						nativeEvent
					) {
						var queuedEvent = createQueuedReplayableEvent(
							blockedOn,
							domEventName,
							eventSystemFlags,
							targetContainer,
							nativeEvent
						);
						queuedDiscreteEvents.push(queuedEvent);
					}
					function clearIfContinuousEvent(domEventName, nativeEvent) {
						switch (domEventName) {
							case "focusin":
							case "focusout":
								queuedFocus = null;
								break;
							case "dragenter":
							case "dragleave":
								queuedDrag = null;
								break;
							case "mouseover":
							case "mouseout":
								queuedMouse = null;
								break;
							case "pointerover":
							case "pointerout": {
								var pointerId = nativeEvent.pointerId;
								queuedPointers.delete(pointerId);
								break;
							}
							case "gotpointercapture":
							case "lostpointercapture": {
								var _pointerId = nativeEvent.pointerId;
								queuedPointerCaptures.delete(_pointerId);
								break;
							}
						}
					}
					function accumulateOrCreateContinuousQueuedReplayableEvent(
						existingQueuedEvent,
						blockedOn,
						domEventName,
						eventSystemFlags,
						targetContainer,
						nativeEvent
					) {
						if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
							var queuedEvent = createQueuedReplayableEvent(
								blockedOn,
								domEventName,
								eventSystemFlags,
								targetContainer,
								nativeEvent
							);
							if (blockedOn !== null) {
								var _fiber2 = getInstanceFromNode(blockedOn);
								if (_fiber2 !== null) {
									attemptContinuousHydration(_fiber2);
								}
							}
							return queuedEvent;
						}
						existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
						var targetContainers = existingQueuedEvent.targetContainers;
						if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
							targetContainers.push(targetContainer);
						}
						return existingQueuedEvent;
					}
					function queueIfContinuousEvent(
						blockedOn,
						domEventName,
						eventSystemFlags,
						targetContainer,
						nativeEvent
					) {
						switch (domEventName) {
							case "focusin": {
								var focusEvent = nativeEvent;
								queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(
									queuedFocus,
									blockedOn,
									domEventName,
									eventSystemFlags,
									targetContainer,
									focusEvent
								);
								return true;
							}
							case "dragenter": {
								var dragEvent = nativeEvent;
								queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(
									queuedDrag,
									blockedOn,
									domEventName,
									eventSystemFlags,
									targetContainer,
									dragEvent
								);
								return true;
							}
							case "mouseover": {
								var mouseEvent = nativeEvent;
								queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(
									queuedMouse,
									blockedOn,
									domEventName,
									eventSystemFlags,
									targetContainer,
									mouseEvent
								);
								return true;
							}
							case "pointerover": {
								var pointerEvent = nativeEvent;
								var pointerId = pointerEvent.pointerId;
								queuedPointers.set(
									pointerId,
									accumulateOrCreateContinuousQueuedReplayableEvent(
										queuedPointers.get(pointerId) || null,
										blockedOn,
										domEventName,
										eventSystemFlags,
										targetContainer,
										pointerEvent
									)
								);
								return true;
							}
							case "gotpointercapture": {
								var _pointerEvent = nativeEvent;
								var _pointerId2 = _pointerEvent.pointerId;
								queuedPointerCaptures.set(
									_pointerId2,
									accumulateOrCreateContinuousQueuedReplayableEvent(
										queuedPointerCaptures.get(_pointerId2) || null,
										blockedOn,
										domEventName,
										eventSystemFlags,
										targetContainer,
										_pointerEvent
									)
								);
								return true;
							}
						}
						return false;
					}
					function attemptExplicitHydrationTarget(queuedTarget) {
						var targetInst = getClosestInstanceFromNode(queuedTarget.target);
						if (targetInst !== null) {
							var nearestMounted = getNearestMountedFiber(targetInst);
							if (nearestMounted !== null) {
								var tag = nearestMounted.tag;
								if (tag === SuspenseComponent) {
									var instance = getSuspenseInstanceFromFiber(nearestMounted);
									if (instance !== null) {
										queuedTarget.blockedOn = instance;
										attemptHydrationAtPriority(queuedTarget.lanePriority, function () {
											Scheduler2.unstable_runWithPriority(queuedTarget.priority, function () {
												attemptHydrationAtCurrentPriority(nearestMounted);
											});
										});
										return;
									}
								} else if (tag === HostRoot) {
									var root2 = nearestMounted.stateNode;
									if (root2.hydrate) {
										queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
										return;
									}
								}
							}
						}
						queuedTarget.blockedOn = null;
					}
					function attemptReplayContinuousQueuedEvent(queuedEvent) {
						if (queuedEvent.blockedOn !== null) {
							return false;
						}
						var targetContainers = queuedEvent.targetContainers;
						while (targetContainers.length > 0) {
							var targetContainer = targetContainers[0];
							var nextBlockedOn = attemptToDispatchEvent(
								queuedEvent.domEventName,
								queuedEvent.eventSystemFlags,
								targetContainer,
								queuedEvent.nativeEvent
							);
							if (nextBlockedOn !== null) {
								var _fiber3 = getInstanceFromNode(nextBlockedOn);
								if (_fiber3 !== null) {
									attemptContinuousHydration(_fiber3);
								}
								queuedEvent.blockedOn = nextBlockedOn;
								return false;
							}
							targetContainers.shift();
						}
						return true;
					}
					function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
						if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
							map.delete(key);
						}
					}
					function replayUnblockedEvents() {
						hasScheduledReplayAttempt = false;
						while (queuedDiscreteEvents.length > 0) {
							var nextDiscreteEvent = queuedDiscreteEvents[0];
							if (nextDiscreteEvent.blockedOn !== null) {
								var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);
								if (_fiber4 !== null) {
									attemptUserBlockingHydration(_fiber4);
								}
								break;
							}
							var targetContainers = nextDiscreteEvent.targetContainers;
							while (targetContainers.length > 0) {
								var targetContainer = targetContainers[0];
								var nextBlockedOn = attemptToDispatchEvent(
									nextDiscreteEvent.domEventName,
									nextDiscreteEvent.eventSystemFlags,
									targetContainer,
									nextDiscreteEvent.nativeEvent
								);
								if (nextBlockedOn !== null) {
									nextDiscreteEvent.blockedOn = nextBlockedOn;
									break;
								}
								targetContainers.shift();
							}
							if (nextDiscreteEvent.blockedOn === null) {
								queuedDiscreteEvents.shift();
							}
						}
						if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
							queuedFocus = null;
						}
						if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
							queuedDrag = null;
						}
						if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
							queuedMouse = null;
						}
						queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
						queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
					}
					function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
						if (queuedEvent.blockedOn === unblocked) {
							queuedEvent.blockedOn = null;
							if (!hasScheduledReplayAttempt) {
								hasScheduledReplayAttempt = true;
								Scheduler2.unstable_scheduleCallback(
									Scheduler2.unstable_NormalPriority,
									replayUnblockedEvents
								);
							}
						}
					}
					function retryIfBlockedOn(unblocked) {
						if (queuedDiscreteEvents.length > 0) {
							scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
							for (var i = 1; i < queuedDiscreteEvents.length; i++) {
								var queuedEvent = queuedDiscreteEvents[i];
								if (queuedEvent.blockedOn === unblocked) {
									queuedEvent.blockedOn = null;
								}
							}
						}
						if (queuedFocus !== null) {
							scheduleCallbackIfUnblocked(queuedFocus, unblocked);
						}
						if (queuedDrag !== null) {
							scheduleCallbackIfUnblocked(queuedDrag, unblocked);
						}
						if (queuedMouse !== null) {
							scheduleCallbackIfUnblocked(queuedMouse, unblocked);
						}
						var unblock = function (queuedEvent2) {
							return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
						};
						queuedPointers.forEach(unblock);
						queuedPointerCaptures.forEach(unblock);
						for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
							var queuedTarget = queuedExplicitHydrationTargets[_i];
							if (queuedTarget.blockedOn === unblocked) {
								queuedTarget.blockedOn = null;
							}
						}
						while (queuedExplicitHydrationTargets.length > 0) {
							var nextExplicitTarget = queuedExplicitHydrationTargets[0];
							if (nextExplicitTarget.blockedOn !== null) {
								break;
							} else {
								attemptExplicitHydrationTarget(nextExplicitTarget);
								if (nextExplicitTarget.blockedOn === null) {
									queuedExplicitHydrationTargets.shift();
								}
							}
						}
					}
					var DiscreteEvent = 0;
					var UserBlockingEvent = 1;
					var ContinuousEvent = 2;
					function makePrefixMap(styleProp, eventName) {
						var prefixes2 = {};
						prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
						prefixes2["Webkit" + styleProp] = "webkit" + eventName;
						prefixes2["Moz" + styleProp] = "moz" + eventName;
						return prefixes2;
					}
					var vendorPrefixes = {
						animationend: makePrefixMap("Animation", "AnimationEnd"),
						animationiteration: makePrefixMap("Animation", "AnimationIteration"),
						animationstart: makePrefixMap("Animation", "AnimationStart"),
						transitionend: makePrefixMap("Transition", "TransitionEnd"),
					};
					var prefixedEventNames = {};
					var style = {};
					if (canUseDOM) {
						style = document.createElement("div").style;
						if (!("AnimationEvent" in window)) {
							delete vendorPrefixes.animationend.animation;
							delete vendorPrefixes.animationiteration.animation;
							delete vendorPrefixes.animationstart.animation;
						}
						if (!("TransitionEvent" in window)) {
							delete vendorPrefixes.transitionend.transition;
						}
					}
					function getVendorPrefixedEventName(eventName) {
						if (prefixedEventNames[eventName]) {
							return prefixedEventNames[eventName];
						} else if (!vendorPrefixes[eventName]) {
							return eventName;
						}
						var prefixMap = vendorPrefixes[eventName];
						for (var styleProp in prefixMap) {
							if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
								return (prefixedEventNames[eventName] = prefixMap[styleProp]);
							}
						}
						return eventName;
					}
					var ANIMATION_END = getVendorPrefixedEventName("animationend");
					var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
					var ANIMATION_START = getVendorPrefixedEventName("animationstart");
					var TRANSITION_END = getVendorPrefixedEventName("transitionend");
					var topLevelEventsToReactNames = new Map();
					var eventPriorities = new Map();
					var discreteEventPairsForSimpleEventPlugin = [
						"cancel",
						"cancel",
						"click",
						"click",
						"close",
						"close",
						"contextmenu",
						"contextMenu",
						"copy",
						"copy",
						"cut",
						"cut",
						"auxclick",
						"auxClick",
						"dblclick",
						"doubleClick",
						"dragend",
						"dragEnd",
						"dragstart",
						"dragStart",
						"drop",
						"drop",
						"focusin",
						"focus",
						"focusout",
						"blur",
						"input",
						"input",
						"invalid",
						"invalid",
						"keydown",
						"keyDown",
						"keypress",
						"keyPress",
						"keyup",
						"keyUp",
						"mousedown",
						"mouseDown",
						"mouseup",
						"mouseUp",
						"paste",
						"paste",
						"pause",
						"pause",
						"play",
						"play",
						"pointercancel",
						"pointerCancel",
						"pointerdown",
						"pointerDown",
						"pointerup",
						"pointerUp",
						"ratechange",
						"rateChange",
						"reset",
						"reset",
						"seeked",
						"seeked",
						"submit",
						"submit",
						"touchcancel",
						"touchCancel",
						"touchend",
						"touchEnd",
						"touchstart",
						"touchStart",
						"volumechange",
						"volumeChange",
					];
					var otherDiscreteEvents = [
						"change",
						"selectionchange",
						"textInput",
						"compositionstart",
						"compositionend",
						"compositionupdate",
					];
					var userBlockingPairsForSimpleEventPlugin = [
						"drag",
						"drag",
						"dragenter",
						"dragEnter",
						"dragexit",
						"dragExit",
						"dragleave",
						"dragLeave",
						"dragover",
						"dragOver",
						"mousemove",
						"mouseMove",
						"mouseout",
						"mouseOut",
						"mouseover",
						"mouseOver",
						"pointermove",
						"pointerMove",
						"pointerout",
						"pointerOut",
						"pointerover",
						"pointerOver",
						"scroll",
						"scroll",
						"toggle",
						"toggle",
						"touchmove",
						"touchMove",
						"wheel",
						"wheel",
					];
					var continuousPairsForSimpleEventPlugin = [
						"abort",
						"abort",
						ANIMATION_END,
						"animationEnd",
						ANIMATION_ITERATION,
						"animationIteration",
						ANIMATION_START,
						"animationStart",
						"canplay",
						"canPlay",
						"canplaythrough",
						"canPlayThrough",
						"durationchange",
						"durationChange",
						"emptied",
						"emptied",
						"encrypted",
						"encrypted",
						"ended",
						"ended",
						"error",
						"error",
						"gotpointercapture",
						"gotPointerCapture",
						"load",
						"load",
						"loadeddata",
						"loadedData",
						"loadedmetadata",
						"loadedMetadata",
						"loadstart",
						"loadStart",
						"lostpointercapture",
						"lostPointerCapture",
						"playing",
						"playing",
						"progress",
						"progress",
						"seeking",
						"seeking",
						"stalled",
						"stalled",
						"suspend",
						"suspend",
						"timeupdate",
						"timeUpdate",
						TRANSITION_END,
						"transitionEnd",
						"waiting",
						"waiting",
					];
					function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
						for (var i = 0; i < eventTypes.length; i += 2) {
							var topEvent = eventTypes[i];
							var event2 = eventTypes[i + 1];
							var capitalizedEvent = event2[0].toUpperCase() + event2.slice(1);
							var reactName = "on" + capitalizedEvent;
							eventPriorities.set(topEvent, priority);
							topLevelEventsToReactNames.set(topEvent, reactName);
							registerTwoPhaseEvent(reactName, [topEvent]);
						}
					}
					function setEventPriorities(eventTypes, priority) {
						for (var i = 0; i < eventTypes.length; i++) {
							eventPriorities.set(eventTypes[i], priority);
						}
					}
					function getEventPriorityForPluginSystem(domEventName) {
						var priority = eventPriorities.get(domEventName);
						return priority === void 0 ? ContinuousEvent : priority;
					}
					function registerSimpleEvents() {
						registerSimplePluginEventsAndSetTheirPriorities(
							discreteEventPairsForSimpleEventPlugin,
							DiscreteEvent
						);
						registerSimplePluginEventsAndSetTheirPriorities(
							userBlockingPairsForSimpleEventPlugin,
							UserBlockingEvent
						);
						registerSimplePluginEventsAndSetTheirPriorities(
							continuousPairsForSimpleEventPlugin,
							ContinuousEvent
						);
						setEventPriorities(otherDiscreteEvents, DiscreteEvent);
					}
					var Scheduler_now = Scheduler2.unstable_now;
					{
						if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
							{
								throw Error(
									"It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling"
								);
							}
						}
					}
					var ImmediatePriority = 99;
					var UserBlockingPriority = 98;
					var NormalPriority = 97;
					var LowPriority = 96;
					var IdlePriority = 95;
					var NoPriority = 90;
					var initialTimeMs = Scheduler_now();
					var SyncLanePriority = 15;
					var SyncBatchedLanePriority = 14;
					var InputDiscreteHydrationLanePriority = 13;
					var InputDiscreteLanePriority = 12;
					var InputContinuousHydrationLanePriority = 11;
					var InputContinuousLanePriority = 10;
					var DefaultHydrationLanePriority = 9;
					var DefaultLanePriority = 8;
					var TransitionHydrationPriority = 7;
					var TransitionPriority = 6;
					var RetryLanePriority = 5;
					var SelectiveHydrationLanePriority = 4;
					var IdleHydrationLanePriority = 3;
					var IdleLanePriority = 2;
					var OffscreenLanePriority = 1;
					var NoLanePriority = 0;
					var TotalLanes = 31;
					var NoLanes = 0;
					var NoLane = 0;
					var SyncLane = 1;
					var SyncBatchedLane = 2;
					var InputDiscreteHydrationLane = 4;
					var InputDiscreteLanes = 24;
					var InputContinuousHydrationLane = 32;
					var InputContinuousLanes = 192;
					var DefaultHydrationLane = 256;
					var DefaultLanes = 3584;
					var TransitionHydrationLane = 4096;
					var TransitionLanes = 4186112;
					var RetryLanes = 62914560;
					var SomeRetryLane = 33554432;
					var SelectiveHydrationLane = 67108864;
					var NonIdleLanes = 134217727;
					var IdleHydrationLane = 134217728;
					var IdleLanes = 805306368;
					var OffscreenLane = 1073741824;
					var NoTimestamp = -1;
					function setCurrentUpdateLanePriority(newLanePriority) {}
					var return_highestLanePriority = DefaultLanePriority;
					function getHighestPriorityLanes(lanes) {
						if ((SyncLane & lanes) !== NoLanes) {
							return_highestLanePriority = SyncLanePriority;
							return SyncLane;
						}
						if ((SyncBatchedLane & lanes) !== NoLanes) {
							return_highestLanePriority = SyncBatchedLanePriority;
							return SyncBatchedLane;
						}
						if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
							return_highestLanePriority = InputDiscreteHydrationLanePriority;
							return InputDiscreteHydrationLane;
						}
						var inputDiscreteLanes = InputDiscreteLanes & lanes;
						if (inputDiscreteLanes !== NoLanes) {
							return_highestLanePriority = InputDiscreteLanePriority;
							return inputDiscreteLanes;
						}
						if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
							return_highestLanePriority = InputContinuousHydrationLanePriority;
							return InputContinuousHydrationLane;
						}
						var inputContinuousLanes = InputContinuousLanes & lanes;
						if (inputContinuousLanes !== NoLanes) {
							return_highestLanePriority = InputContinuousLanePriority;
							return inputContinuousLanes;
						}
						if ((lanes & DefaultHydrationLane) !== NoLanes) {
							return_highestLanePriority = DefaultHydrationLanePriority;
							return DefaultHydrationLane;
						}
						var defaultLanes = DefaultLanes & lanes;
						if (defaultLanes !== NoLanes) {
							return_highestLanePriority = DefaultLanePriority;
							return defaultLanes;
						}
						if ((lanes & TransitionHydrationLane) !== NoLanes) {
							return_highestLanePriority = TransitionHydrationPriority;
							return TransitionHydrationLane;
						}
						var transitionLanes = TransitionLanes & lanes;
						if (transitionLanes !== NoLanes) {
							return_highestLanePriority = TransitionPriority;
							return transitionLanes;
						}
						var retryLanes = RetryLanes & lanes;
						if (retryLanes !== NoLanes) {
							return_highestLanePriority = RetryLanePriority;
							return retryLanes;
						}
						if (lanes & SelectiveHydrationLane) {
							return_highestLanePriority = SelectiveHydrationLanePriority;
							return SelectiveHydrationLane;
						}
						if ((lanes & IdleHydrationLane) !== NoLanes) {
							return_highestLanePriority = IdleHydrationLanePriority;
							return IdleHydrationLane;
						}
						var idleLanes = IdleLanes & lanes;
						if (idleLanes !== NoLanes) {
							return_highestLanePriority = IdleLanePriority;
							return idleLanes;
						}
						if ((OffscreenLane & lanes) !== NoLanes) {
							return_highestLanePriority = OffscreenLanePriority;
							return OffscreenLane;
						}
						{
							error3("Should have found matching lanes. This is a bug in React.");
						}
						return_highestLanePriority = DefaultLanePriority;
						return lanes;
					}
					function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
						switch (schedulerPriorityLevel) {
							case ImmediatePriority:
								return SyncLanePriority;
							case UserBlockingPriority:
								return InputContinuousLanePriority;
							case NormalPriority:
							case LowPriority:
								return DefaultLanePriority;
							case IdlePriority:
								return IdleLanePriority;
							default:
								return NoLanePriority;
						}
					}
					function lanePriorityToSchedulerPriority(lanePriority) {
						switch (lanePriority) {
							case SyncLanePriority:
							case SyncBatchedLanePriority:
								return ImmediatePriority;
							case InputDiscreteHydrationLanePriority:
							case InputDiscreteLanePriority:
							case InputContinuousHydrationLanePriority:
							case InputContinuousLanePriority:
								return UserBlockingPriority;
							case DefaultHydrationLanePriority:
							case DefaultLanePriority:
							case TransitionHydrationPriority:
							case TransitionPriority:
							case SelectiveHydrationLanePriority:
							case RetryLanePriority:
								return NormalPriority;
							case IdleHydrationLanePriority:
							case IdleLanePriority:
							case OffscreenLanePriority:
								return IdlePriority;
							case NoLanePriority:
								return NoPriority;
							default: {
								{
									throw Error(
										"Invalid update priority: " + lanePriority + ". This is a bug in React."
									);
								}
							}
						}
					}
					function getNextLanes(root2, wipLanes) {
						var pendingLanes = root2.pendingLanes;
						if (pendingLanes === NoLanes) {
							return_highestLanePriority = NoLanePriority;
							return NoLanes;
						}
						var nextLanes = NoLanes;
						var nextLanePriority = NoLanePriority;
						var expiredLanes = root2.expiredLanes;
						var suspendedLanes = root2.suspendedLanes;
						var pingedLanes = root2.pingedLanes;
						if (expiredLanes !== NoLanes) {
							nextLanes = expiredLanes;
							nextLanePriority = return_highestLanePriority = SyncLanePriority;
						} else {
							var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
							if (nonIdlePendingLanes !== NoLanes) {
								var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
								if (nonIdleUnblockedLanes !== NoLanes) {
									nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
									nextLanePriority = return_highestLanePriority;
								} else {
									var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
									if (nonIdlePingedLanes !== NoLanes) {
										nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
										nextLanePriority = return_highestLanePriority;
									}
								}
							} else {
								var unblockedLanes = pendingLanes & ~suspendedLanes;
								if (unblockedLanes !== NoLanes) {
									nextLanes = getHighestPriorityLanes(unblockedLanes);
									nextLanePriority = return_highestLanePriority;
								} else {
									if (pingedLanes !== NoLanes) {
										nextLanes = getHighestPriorityLanes(pingedLanes);
										nextLanePriority = return_highestLanePriority;
									}
								}
							}
						}
						if (nextLanes === NoLanes) {
							return NoLanes;
						}
						nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes);
						if (
							wipLanes !== NoLanes &&
							wipLanes !== nextLanes &&
							(wipLanes & suspendedLanes) === NoLanes
						) {
							getHighestPriorityLanes(wipLanes);
							var wipLanePriority = return_highestLanePriority;
							if (nextLanePriority <= wipLanePriority) {
								return wipLanes;
							} else {
								return_highestLanePriority = nextLanePriority;
							}
						}
						var entangledLanes = root2.entangledLanes;
						if (entangledLanes !== NoLanes) {
							var entanglements = root2.entanglements;
							var lanes = nextLanes & entangledLanes;
							while (lanes > 0) {
								var index3 = pickArbitraryLaneIndex(lanes);
								var lane = 1 << index3;
								nextLanes |= entanglements[index3];
								lanes &= ~lane;
							}
						}
						return nextLanes;
					}
					function getMostRecentEventTime(root2, lanes) {
						var eventTimes = root2.eventTimes;
						var mostRecentEventTime = NoTimestamp;
						while (lanes > 0) {
							var index3 = pickArbitraryLaneIndex(lanes);
							var lane = 1 << index3;
							var eventTime = eventTimes[index3];
							if (eventTime > mostRecentEventTime) {
								mostRecentEventTime = eventTime;
							}
							lanes &= ~lane;
						}
						return mostRecentEventTime;
					}
					function computeExpirationTime(lane, currentTime) {
						getHighestPriorityLanes(lane);
						var priority = return_highestLanePriority;
						if (priority >= InputContinuousLanePriority) {
							return currentTime + 250;
						} else if (priority >= TransitionPriority) {
							return currentTime + 5e3;
						} else {
							return NoTimestamp;
						}
					}
					function markStarvedLanesAsExpired(root2, currentTime) {
						var pendingLanes = root2.pendingLanes;
						var suspendedLanes = root2.suspendedLanes;
						var pingedLanes = root2.pingedLanes;
						var expirationTimes = root2.expirationTimes;
						var lanes = pendingLanes;
						while (lanes > 0) {
							var index3 = pickArbitraryLaneIndex(lanes);
							var lane = 1 << index3;
							var expirationTime = expirationTimes[index3];
							if (expirationTime === NoTimestamp) {
								if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
									expirationTimes[index3] = computeExpirationTime(lane, currentTime);
								}
							} else if (expirationTime <= currentTime) {
								root2.expiredLanes |= lane;
							}
							lanes &= ~lane;
						}
					}
					function getLanesToRetrySynchronouslyOnError(root2) {
						var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
						if (everythingButOffscreen !== NoLanes) {
							return everythingButOffscreen;
						}
						if (everythingButOffscreen & OffscreenLane) {
							return OffscreenLane;
						}
						return NoLanes;
					}
					function returnNextLanesPriority() {
						return return_highestLanePriority;
					}
					function includesNonIdleWork(lanes) {
						return (lanes & NonIdleLanes) !== NoLanes;
					}
					function includesOnlyRetries(lanes) {
						return (lanes & RetryLanes) === lanes;
					}
					function includesOnlyTransitions(lanes) {
						return (lanes & TransitionLanes) === lanes;
					}
					function findUpdateLane(lanePriority, wipLanes) {
						switch (lanePriority) {
							case NoLanePriority:
								break;
							case SyncLanePriority:
								return SyncLane;
							case SyncBatchedLanePriority:
								return SyncBatchedLane;
							case InputDiscreteLanePriority: {
								var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);
								if (_lane === NoLane) {
									return findUpdateLane(InputContinuousLanePriority, wipLanes);
								}
								return _lane;
							}
							case InputContinuousLanePriority: {
								var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);
								if (_lane2 === NoLane) {
									return findUpdateLane(DefaultLanePriority, wipLanes);
								}
								return _lane2;
							}
							case DefaultLanePriority: {
								var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);
								if (_lane3 === NoLane) {
									_lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);
									if (_lane3 === NoLane) {
										_lane3 = pickArbitraryLane(DefaultLanes);
									}
								}
								return _lane3;
							}
							case TransitionPriority:
							case RetryLanePriority:
								break;
							case IdleLanePriority:
								var lane = pickArbitraryLane(IdleLanes & ~wipLanes);
								if (lane === NoLane) {
									lane = pickArbitraryLane(IdleLanes);
								}
								return lane;
						}
						{
							{
								throw Error(
									"Invalid update priority: " + lanePriority + ". This is a bug in React."
								);
							}
						}
					}
					function findTransitionLane(wipLanes, pendingLanes) {
						var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);
						if (lane === NoLane) {
							lane = pickArbitraryLane(TransitionLanes & ~wipLanes);
							if (lane === NoLane) {
								lane = pickArbitraryLane(TransitionLanes);
							}
						}
						return lane;
					}
					function findRetryLane(wipLanes) {
						var lane = pickArbitraryLane(RetryLanes & ~wipLanes);
						if (lane === NoLane) {
							lane = pickArbitraryLane(RetryLanes);
						}
						return lane;
					}
					function getHighestPriorityLane(lanes) {
						return lanes & -lanes;
					}
					function getLowestPriorityLane(lanes) {
						var index3 = 31 - clz32(lanes);
						return index3 < 0 ? NoLanes : 1 << index3;
					}
					function getEqualOrHigherPriorityLanes(lanes) {
						return (getLowestPriorityLane(lanes) << 1) - 1;
					}
					function pickArbitraryLane(lanes) {
						return getHighestPriorityLane(lanes);
					}
					function pickArbitraryLaneIndex(lanes) {
						return 31 - clz32(lanes);
					}
					function laneToIndex(lane) {
						return pickArbitraryLaneIndex(lane);
					}
					function includesSomeLane(a, b) {
						return (a & b) !== NoLanes;
					}
					function isSubsetOfLanes(set3, subset) {
						return (set3 & subset) === subset;
					}
					function mergeLanes(a, b) {
						return a | b;
					}
					function removeLanes(set3, subset) {
						return set3 & ~subset;
					}
					function laneToLanes(lane) {
						return lane;
					}
					function higherPriorityLane(a, b) {
						return a !== NoLane && a < b ? a : b;
					}
					function createLaneMap(initial) {
						var laneMap = [];
						for (var i = 0; i < TotalLanes; i++) {
							laneMap.push(initial);
						}
						return laneMap;
					}
					function markRootUpdated(root2, updateLane, eventTime) {
						root2.pendingLanes |= updateLane;
						var higherPriorityLanes = updateLane - 1;
						root2.suspendedLanes &= higherPriorityLanes;
						root2.pingedLanes &= higherPriorityLanes;
						var eventTimes = root2.eventTimes;
						var index3 = laneToIndex(updateLane);
						eventTimes[index3] = eventTime;
					}
					function markRootSuspended(root2, suspendedLanes) {
						root2.suspendedLanes |= suspendedLanes;
						root2.pingedLanes &= ~suspendedLanes;
						var expirationTimes = root2.expirationTimes;
						var lanes = suspendedLanes;
						while (lanes > 0) {
							var index3 = pickArbitraryLaneIndex(lanes);
							var lane = 1 << index3;
							expirationTimes[index3] = NoTimestamp;
							lanes &= ~lane;
						}
					}
					function markRootPinged(root2, pingedLanes, eventTime) {
						root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
					}
					function markDiscreteUpdatesExpired(root2) {
						root2.expiredLanes |= InputDiscreteLanes & root2.pendingLanes;
					}
					function hasDiscreteLanes(lanes) {
						return (lanes & InputDiscreteLanes) !== NoLanes;
					}
					function markRootMutableRead(root2, updateLane) {
						root2.mutableReadLanes |= updateLane & root2.pendingLanes;
					}
					function markRootFinished(root2, remainingLanes) {
						var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
						root2.pendingLanes = remainingLanes;
						root2.suspendedLanes = 0;
						root2.pingedLanes = 0;
						root2.expiredLanes &= remainingLanes;
						root2.mutableReadLanes &= remainingLanes;
						root2.entangledLanes &= remainingLanes;
						var entanglements = root2.entanglements;
						var eventTimes = root2.eventTimes;
						var expirationTimes = root2.expirationTimes;
						var lanes = noLongerPendingLanes;
						while (lanes > 0) {
							var index3 = pickArbitraryLaneIndex(lanes);
							var lane = 1 << index3;
							entanglements[index3] = NoLanes;
							eventTimes[index3] = NoTimestamp;
							expirationTimes[index3] = NoTimestamp;
							lanes &= ~lane;
						}
					}
					function markRootEntangled(root2, entangledLanes) {
						root2.entangledLanes |= entangledLanes;
						var entanglements = root2.entanglements;
						var lanes = entangledLanes;
						while (lanes > 0) {
							var index3 = pickArbitraryLaneIndex(lanes);
							var lane = 1 << index3;
							entanglements[index3] |= entangledLanes;
							lanes &= ~lane;
						}
					}
					var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
					var log2 = Math.log;
					var LN2 = Math.LN2;
					function clz32Fallback(lanes) {
						if (lanes === 0) {
							return 32;
						}
						return (31 - ((log2(lanes) / LN2) | 0)) | 0;
					}
					var UserBlockingPriority$1 = Scheduler2.unstable_UserBlockingPriority,
						runWithPriority = Scheduler2.unstable_runWithPriority;
					var _enabled = true;
					function setEnabled(enabled) {
						_enabled = !!enabled;
					}
					function isEnabled() {
						return _enabled;
					}
					function createEventListenerWrapperWithPriority(
						targetContainer,
						domEventName,
						eventSystemFlags
					) {
						var eventPriority = getEventPriorityForPluginSystem(domEventName);
						var listenerWrapper;
						switch (eventPriority) {
							case DiscreteEvent:
								listenerWrapper = dispatchDiscreteEvent;
								break;
							case UserBlockingEvent:
								listenerWrapper = dispatchUserBlockingUpdate;
								break;
							case ContinuousEvent:
							default:
								listenerWrapper = dispatchEvent;
								break;
						}
						return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
					}
					function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
						{
							flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
						}
						discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container, nativeEvent);
					}
					function dispatchUserBlockingUpdate(
						domEventName,
						eventSystemFlags,
						container,
						nativeEvent
					) {
						{
							runWithPriority(
								UserBlockingPriority$1,
								dispatchEvent.bind(null, domEventName, eventSystemFlags, container, nativeEvent)
							);
						}
					}
					function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
						if (!_enabled) {
							return;
						}
						var allowReplay = true;
						{
							allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
						}
						if (
							allowReplay &&
							hasQueuedDiscreteEvents() &&
							isReplayableDiscreteEvent(domEventName)
						) {
							queueDiscreteEvent(
								null,
								domEventName,
								eventSystemFlags,
								targetContainer,
								nativeEvent
							);
							return;
						}
						var blockedOn = attemptToDispatchEvent(
							domEventName,
							eventSystemFlags,
							targetContainer,
							nativeEvent
						);
						if (blockedOn === null) {
							if (allowReplay) {
								clearIfContinuousEvent(domEventName, nativeEvent);
							}
							return;
						}
						if (allowReplay) {
							if (isReplayableDiscreteEvent(domEventName)) {
								queueDiscreteEvent(
									blockedOn,
									domEventName,
									eventSystemFlags,
									targetContainer,
									nativeEvent
								);
								return;
							}
							if (
								queueIfContinuousEvent(
									blockedOn,
									domEventName,
									eventSystemFlags,
									targetContainer,
									nativeEvent
								)
							) {
								return;
							}
							clearIfContinuousEvent(domEventName, nativeEvent);
						}
						dispatchEventForPluginEventSystem(
							domEventName,
							eventSystemFlags,
							nativeEvent,
							null,
							targetContainer
						);
					}
					function attemptToDispatchEvent(
						domEventName,
						eventSystemFlags,
						targetContainer,
						nativeEvent
					) {
						var nativeEventTarget = getEventTarget(nativeEvent);
						var targetInst = getClosestInstanceFromNode(nativeEventTarget);
						if (targetInst !== null) {
							var nearestMounted = getNearestMountedFiber(targetInst);
							if (nearestMounted === null) {
								targetInst = null;
							} else {
								var tag = nearestMounted.tag;
								if (tag === SuspenseComponent) {
									var instance = getSuspenseInstanceFromFiber(nearestMounted);
									if (instance !== null) {
										return instance;
									}
									targetInst = null;
								} else if (tag === HostRoot) {
									var root2 = nearestMounted.stateNode;
									if (root2.hydrate) {
										return getContainerFromFiber(nearestMounted);
									}
									targetInst = null;
								} else if (nearestMounted !== targetInst) {
									targetInst = null;
								}
							}
						}
						dispatchEventForPluginEventSystem(
							domEventName,
							eventSystemFlags,
							nativeEvent,
							targetInst,
							targetContainer
						);
						return null;
					}
					function addEventBubbleListener(target, eventType, listener) {
						target.addEventListener(eventType, listener, false);
						return listener;
					}
					function addEventCaptureListener(target, eventType, listener) {
						target.addEventListener(eventType, listener, true);
						return listener;
					}
					function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
						target.addEventListener(eventType, listener, {
							capture: true,
							passive,
						});
						return listener;
					}
					function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
						target.addEventListener(eventType, listener, {
							passive,
						});
						return listener;
					}
					var root = null;
					var startText = null;
					var fallbackText = null;
					function initialize(nativeEventTarget) {
						root = nativeEventTarget;
						startText = getText();
						return true;
					}
					function reset() {
						root = null;
						startText = null;
						fallbackText = null;
					}
					function getData() {
						if (fallbackText) {
							return fallbackText;
						}
						var start3;
						var startValue = startText;
						var startLength = startValue.length;
						var end;
						var endValue = getText();
						var endLength = endValue.length;
						for (start3 = 0; start3 < startLength; start3++) {
							if (startValue[start3] !== endValue[start3]) {
								break;
							}
						}
						var minEnd = startLength - start3;
						for (end = 1; end <= minEnd; end++) {
							if (startValue[startLength - end] !== endValue[endLength - end]) {
								break;
							}
						}
						var sliceTail = end > 1 ? 1 - end : void 0;
						fallbackText = endValue.slice(start3, sliceTail);
						return fallbackText;
					}
					function getText() {
						if ("value" in root) {
							return root.value;
						}
						return root.textContent;
					}
					function getEventCharCode(nativeEvent) {
						var charCode;
						var keyCode = nativeEvent.keyCode;
						if ("charCode" in nativeEvent) {
							charCode = nativeEvent.charCode;
							if (charCode === 0 && keyCode === 13) {
								charCode = 13;
							}
						} else {
							charCode = keyCode;
						}
						if (charCode === 10) {
							charCode = 13;
						}
						if (charCode >= 32 || charCode === 13) {
							return charCode;
						}
						return 0;
					}
					function functionThatReturnsTrue() {
						return true;
					}
					function functionThatReturnsFalse() {
						return false;
					}
					function createSyntheticEvent(Interface) {
						function SyntheticBaseEvent(
							reactName,
							reactEventType,
							targetInst,
							nativeEvent,
							nativeEventTarget
						) {
							this._reactName = reactName;
							this._targetInst = targetInst;
							this.type = reactEventType;
							this.nativeEvent = nativeEvent;
							this.target = nativeEventTarget;
							this.currentTarget = null;
							for (var _propName in Interface) {
								if (!Interface.hasOwnProperty(_propName)) {
									continue;
								}
								var normalize = Interface[_propName];
								if (normalize) {
									this[_propName] = normalize(nativeEvent);
								} else {
									this[_propName] = nativeEvent[_propName];
								}
							}
							var defaultPrevented =
								nativeEvent.defaultPrevented != null
									? nativeEvent.defaultPrevented
									: nativeEvent.returnValue === false;
							if (defaultPrevented) {
								this.isDefaultPrevented = functionThatReturnsTrue;
							} else {
								this.isDefaultPrevented = functionThatReturnsFalse;
							}
							this.isPropagationStopped = functionThatReturnsFalse;
							return this;
						}
						_assign(SyntheticBaseEvent.prototype, {
							preventDefault: function () {
								this.defaultPrevented = true;
								var event2 = this.nativeEvent;
								if (!event2) {
									return;
								}
								if (event2.preventDefault) {
									event2.preventDefault();
								} else if (typeof event2.returnValue !== "unknown") {
									event2.returnValue = false;
								}
								this.isDefaultPrevented = functionThatReturnsTrue;
							},
							stopPropagation: function () {
								var event2 = this.nativeEvent;
								if (!event2) {
									return;
								}
								if (event2.stopPropagation) {
									event2.stopPropagation();
								} else if (typeof event2.cancelBubble !== "unknown") {
									event2.cancelBubble = true;
								}
								this.isPropagationStopped = functionThatReturnsTrue;
							},
							persist: function () {},
							isPersistent: functionThatReturnsTrue,
						});
						return SyntheticBaseEvent;
					}
					var EventInterface = {
						eventPhase: 0,
						bubbles: 0,
						cancelable: 0,
						timeStamp: function (event2) {
							return event2.timeStamp || Date.now();
						},
						defaultPrevented: 0,
						isTrusted: 0,
					};
					var SyntheticEvent = createSyntheticEvent(EventInterface);
					var UIEventInterface = _assign({}, EventInterface, {
						view: 0,
						detail: 0,
					});
					var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
					var lastMovementX;
					var lastMovementY;
					var lastMouseEvent;
					function updateMouseMovementPolyfillState(event2) {
						if (event2 !== lastMouseEvent) {
							if (lastMouseEvent && event2.type === "mousemove") {
								lastMovementX = event2.screenX - lastMouseEvent.screenX;
								lastMovementY = event2.screenY - lastMouseEvent.screenY;
							} else {
								lastMovementX = 0;
								lastMovementY = 0;
							}
							lastMouseEvent = event2;
						}
					}
					var MouseEventInterface = _assign({}, UIEventInterface, {
						screenX: 0,
						screenY: 0,
						clientX: 0,
						clientY: 0,
						pageX: 0,
						pageY: 0,
						ctrlKey: 0,
						shiftKey: 0,
						altKey: 0,
						metaKey: 0,
						getModifierState: getEventModifierState,
						button: 0,
						buttons: 0,
						relatedTarget: function (event2) {
							if (event2.relatedTarget === void 0)
								return event2.fromElement === event2.srcElement
									? event2.toElement
									: event2.fromElement;
							return event2.relatedTarget;
						},
						movementX: function (event2) {
							if ("movementX" in event2) {
								return event2.movementX;
							}
							updateMouseMovementPolyfillState(event2);
							return lastMovementX;
						},
						movementY: function (event2) {
							if ("movementY" in event2) {
								return event2.movementY;
							}
							return lastMovementY;
						},
					});
					var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
					var DragEventInterface = _assign({}, MouseEventInterface, {
						dataTransfer: 0,
					});
					var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
					var FocusEventInterface = _assign({}, UIEventInterface, {
						relatedTarget: 0,
					});
					var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
					var AnimationEventInterface = _assign({}, EventInterface, {
						animationName: 0,
						elapsedTime: 0,
						pseudoElement: 0,
					});
					var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
					var ClipboardEventInterface = _assign({}, EventInterface, {
						clipboardData: function (event2) {
							return "clipboardData" in event2 ? event2.clipboardData : window.clipboardData;
						},
					});
					var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
					var CompositionEventInterface = _assign({}, EventInterface, {
						data: 0,
					});
					var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
					var SyntheticInputEvent = SyntheticCompositionEvent;
					var normalizeKey = {
						Esc: "Escape",
						Spacebar: " ",
						Left: "ArrowLeft",
						Up: "ArrowUp",
						Right: "ArrowRight",
						Down: "ArrowDown",
						Del: "Delete",
						Win: "OS",
						Menu: "ContextMenu",
						Apps: "ContextMenu",
						Scroll: "ScrollLock",
						MozPrintableKey: "Unidentified",
					};
					var translateToKey = {
						8: "Backspace",
						9: "Tab",
						12: "Clear",
						13: "Enter",
						16: "Shift",
						17: "Control",
						18: "Alt",
						19: "Pause",
						20: "CapsLock",
						27: "Escape",
						32: " ",
						33: "PageUp",
						34: "PageDown",
						35: "End",
						36: "Home",
						37: "ArrowLeft",
						38: "ArrowUp",
						39: "ArrowRight",
						40: "ArrowDown",
						45: "Insert",
						46: "Delete",
						112: "F1",
						113: "F2",
						114: "F3",
						115: "F4",
						116: "F5",
						117: "F6",
						118: "F7",
						119: "F8",
						120: "F9",
						121: "F10",
						122: "F11",
						123: "F12",
						144: "NumLock",
						145: "ScrollLock",
						224: "Meta",
					};
					function getEventKey(nativeEvent) {
						if (nativeEvent.key) {
							var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
							if (key !== "Unidentified") {
								return key;
							}
						}
						if (nativeEvent.type === "keypress") {
							var charCode = getEventCharCode(nativeEvent);
							return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
						}
						if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
							return translateToKey[nativeEvent.keyCode] || "Unidentified";
						}
						return "";
					}
					var modifierKeyToProp = {
						Alt: "altKey",
						Control: "ctrlKey",
						Meta: "metaKey",
						Shift: "shiftKey",
					};
					function modifierStateGetter(keyArg) {
						var syntheticEvent = this;
						var nativeEvent = syntheticEvent.nativeEvent;
						if (nativeEvent.getModifierState) {
							return nativeEvent.getModifierState(keyArg);
						}
						var keyProp = modifierKeyToProp[keyArg];
						return keyProp ? !!nativeEvent[keyProp] : false;
					}
					function getEventModifierState(nativeEvent) {
						return modifierStateGetter;
					}
					var KeyboardEventInterface = _assign({}, UIEventInterface, {
						key: getEventKey,
						code: 0,
						location: 0,
						ctrlKey: 0,
						shiftKey: 0,
						altKey: 0,
						metaKey: 0,
						repeat: 0,
						locale: 0,
						getModifierState: getEventModifierState,
						charCode: function (event2) {
							if (event2.type === "keypress") {
								return getEventCharCode(event2);
							}
							return 0;
						},
						keyCode: function (event2) {
							if (event2.type === "keydown" || event2.type === "keyup") {
								return event2.keyCode;
							}
							return 0;
						},
						which: function (event2) {
							if (event2.type === "keypress") {
								return getEventCharCode(event2);
							}
							if (event2.type === "keydown" || event2.type === "keyup") {
								return event2.keyCode;
							}
							return 0;
						},
					});
					var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
					var PointerEventInterface = _assign({}, MouseEventInterface, {
						pointerId: 0,
						width: 0,
						height: 0,
						pressure: 0,
						tangentialPressure: 0,
						tiltX: 0,
						tiltY: 0,
						twist: 0,
						pointerType: 0,
						isPrimary: 0,
					});
					var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
					var TouchEventInterface = _assign({}, UIEventInterface, {
						touches: 0,
						targetTouches: 0,
						changedTouches: 0,
						altKey: 0,
						metaKey: 0,
						ctrlKey: 0,
						shiftKey: 0,
						getModifierState: getEventModifierState,
					});
					var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
					var TransitionEventInterface = _assign({}, EventInterface, {
						propertyName: 0,
						elapsedTime: 0,
						pseudoElement: 0,
					});
					var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
					var WheelEventInterface = _assign({}, MouseEventInterface, {
						deltaX: function (event2) {
							return "deltaX" in event2
								? event2.deltaX
								: "wheelDeltaX" in event2
								? -event2.wheelDeltaX
								: 0;
						},
						deltaY: function (event2) {
							return "deltaY" in event2
								? event2.deltaY
								: "wheelDeltaY" in event2
								? -event2.wheelDeltaY
								: "wheelDelta" in event2
								? -event2.wheelDelta
								: 0;
						},
						deltaZ: 0,
						deltaMode: 0,
					});
					var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
					var END_KEYCODES = [9, 13, 27, 32];
					var START_KEYCODE = 229;
					var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
					var documentMode = null;
					if (canUseDOM && "documentMode" in document) {
						documentMode = document.documentMode;
					}
					var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
					var useFallbackCompositionData =
						canUseDOM &&
						(!canUseCompositionEvent || (documentMode && documentMode > 8 && documentMode <= 11));
					var SPACEBAR_CODE = 32;
					var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
					function registerEvents() {
						registerTwoPhaseEvent("onBeforeInput", [
							"compositionend",
							"keypress",
							"textInput",
							"paste",
						]);
						registerTwoPhaseEvent("onCompositionEnd", [
							"compositionend",
							"focusout",
							"keydown",
							"keypress",
							"keyup",
							"mousedown",
						]);
						registerTwoPhaseEvent("onCompositionStart", [
							"compositionstart",
							"focusout",
							"keydown",
							"keypress",
							"keyup",
							"mousedown",
						]);
						registerTwoPhaseEvent("onCompositionUpdate", [
							"compositionupdate",
							"focusout",
							"keydown",
							"keypress",
							"keyup",
							"mousedown",
						]);
					}
					var hasSpaceKeypress = false;
					function isKeypressCommand(nativeEvent) {
						return (
							(nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
							!(nativeEvent.ctrlKey && nativeEvent.altKey)
						);
					}
					function getCompositionEventType(domEventName) {
						switch (domEventName) {
							case "compositionstart":
								return "onCompositionStart";
							case "compositionend":
								return "onCompositionEnd";
							case "compositionupdate":
								return "onCompositionUpdate";
						}
					}
					function isFallbackCompositionStart(domEventName, nativeEvent) {
						return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
					}
					function isFallbackCompositionEnd(domEventName, nativeEvent) {
						switch (domEventName) {
							case "keyup":
								return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
							case "keydown":
								return nativeEvent.keyCode !== START_KEYCODE;
							case "keypress":
							case "mousedown":
							case "focusout":
								return true;
							default:
								return false;
						}
					}
					function getDataFromCustomEvent(nativeEvent) {
						var detail = nativeEvent.detail;
						if (typeof detail === "object" && "data" in detail) {
							return detail.data;
						}
						return null;
					}
					function isUsingKoreanIME(nativeEvent) {
						return nativeEvent.locale === "ko";
					}
					var isComposing = false;
					function extractCompositionEvent(
						dispatchQueue,
						domEventName,
						targetInst,
						nativeEvent,
						nativeEventTarget
					) {
						var eventType;
						var fallbackData;
						if (canUseCompositionEvent) {
							eventType = getCompositionEventType(domEventName);
						} else if (!isComposing) {
							if (isFallbackCompositionStart(domEventName, nativeEvent)) {
								eventType = "onCompositionStart";
							}
						} else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
							eventType = "onCompositionEnd";
						}
						if (!eventType) {
							return null;
						}
						if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
							if (!isComposing && eventType === "onCompositionStart") {
								isComposing = initialize(nativeEventTarget);
							} else if (eventType === "onCompositionEnd") {
								if (isComposing) {
									fallbackData = getData();
								}
							}
						}
						var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
						if (listeners.length > 0) {
							var event2 = new SyntheticCompositionEvent(
								eventType,
								domEventName,
								null,
								nativeEvent,
								nativeEventTarget
							);
							dispatchQueue.push({
								event: event2,
								listeners,
							});
							if (fallbackData) {
								event2.data = fallbackData;
							} else {
								var customData = getDataFromCustomEvent(nativeEvent);
								if (customData !== null) {
									event2.data = customData;
								}
							}
						}
					}
					function getNativeBeforeInputChars(domEventName, nativeEvent) {
						switch (domEventName) {
							case "compositionend":
								return getDataFromCustomEvent(nativeEvent);
							case "keypress":
								var which = nativeEvent.which;
								if (which !== SPACEBAR_CODE) {
									return null;
								}
								hasSpaceKeypress = true;
								return SPACEBAR_CHAR;
							case "textInput":
								var chars = nativeEvent.data;
								if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
									return null;
								}
								return chars;
							default:
								return null;
						}
					}
					function getFallbackBeforeInputChars(domEventName, nativeEvent) {
						if (isComposing) {
							if (
								domEventName === "compositionend" ||
								(!canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent))
							) {
								var chars = getData();
								reset();
								isComposing = false;
								return chars;
							}
							return null;
						}
						switch (domEventName) {
							case "paste":
								return null;
							case "keypress":
								if (!isKeypressCommand(nativeEvent)) {
									if (nativeEvent.char && nativeEvent.char.length > 1) {
										return nativeEvent.char;
									} else if (nativeEvent.which) {
										return String.fromCharCode(nativeEvent.which);
									}
								}
								return null;
							case "compositionend":
								return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)
									? null
									: nativeEvent.data;
							default:
								return null;
						}
					}
					function extractBeforeInputEvent(
						dispatchQueue,
						domEventName,
						targetInst,
						nativeEvent,
						nativeEventTarget
					) {
						var chars;
						if (canUseTextInputEvent) {
							chars = getNativeBeforeInputChars(domEventName, nativeEvent);
						} else {
							chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
						}
						if (!chars) {
							return null;
						}
						var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
						if (listeners.length > 0) {
							var event2 = new SyntheticInputEvent(
								"onBeforeInput",
								"beforeinput",
								null,
								nativeEvent,
								nativeEventTarget
							);
							dispatchQueue.push({
								event: event2,
								listeners,
							});
							event2.data = chars;
						}
					}
					function extractEvents(
						dispatchQueue,
						domEventName,
						targetInst,
						nativeEvent,
						nativeEventTarget,
						eventSystemFlags,
						targetContainer
					) {
						extractCompositionEvent(
							dispatchQueue,
							domEventName,
							targetInst,
							nativeEvent,
							nativeEventTarget
						);
						extractBeforeInputEvent(
							dispatchQueue,
							domEventName,
							targetInst,
							nativeEvent,
							nativeEventTarget
						);
					}
					var supportedInputTypes = {
						color: true,
						date: true,
						datetime: true,
						"datetime-local": true,
						email: true,
						month: true,
						number: true,
						password: true,
						range: true,
						search: true,
						tel: true,
						text: true,
						time: true,
						url: true,
						week: true,
					};
					function isTextInputElement(elem) {
						var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
						if (nodeName === "input") {
							return !!supportedInputTypes[elem.type];
						}
						if (nodeName === "textarea") {
							return true;
						}
						return false;
					}
					function isEventSupported(eventNameSuffix) {
						if (!canUseDOM) {
							return false;
						}
						var eventName = "on" + eventNameSuffix;
						var isSupported = eventName in document;
						if (!isSupported) {
							var element = document.createElement("div");
							element.setAttribute(eventName, "return;");
							isSupported = typeof element[eventName] === "function";
						}
						return isSupported;
					}
					function registerEvents$1() {
						registerTwoPhaseEvent("onChange", [
							"change",
							"click",
							"focusin",
							"focusout",
							"input",
							"keydown",
							"keyup",
							"selectionchange",
						]);
					}
					function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
						enqueueStateRestore(target);
						var listeners = accumulateTwoPhaseListeners(inst, "onChange");
						if (listeners.length > 0) {
							var event2 = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
							dispatchQueue.push({
								event: event2,
								listeners,
							});
						}
					}
					var activeElement = null;
					var activeElementInst = null;
					function shouldUseChangeEvent(elem) {
						var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
						return nodeName === "select" || (nodeName === "input" && elem.type === "file");
					}
					function manualDispatchChangeEvent(nativeEvent) {
						var dispatchQueue = [];
						createAndAccumulateChangeEvent(
							dispatchQueue,
							activeElementInst,
							nativeEvent,
							getEventTarget(nativeEvent)
						);
						batchedUpdates(runEventInBatch, dispatchQueue);
					}
					function runEventInBatch(dispatchQueue) {
						processDispatchQueue(dispatchQueue, 0);
					}
					function getInstIfValueChanged(targetInst) {
						var targetNode = getNodeFromInstance(targetInst);
						if (updateValueIfChanged(targetNode)) {
							return targetInst;
						}
					}
					function getTargetInstForChangeEvent(domEventName, targetInst) {
						if (domEventName === "change") {
							return targetInst;
						}
					}
					var isInputEventSupported = false;
					if (canUseDOM) {
						isInputEventSupported =
							isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
					}
					function startWatchingForValueChange(target, targetInst) {
						activeElement = target;
						activeElementInst = targetInst;
						activeElement.attachEvent("onpropertychange", handlePropertyChange);
					}
					function stopWatchingForValueChange() {
						if (!activeElement) {
							return;
						}
						activeElement.detachEvent("onpropertychange", handlePropertyChange);
						activeElement = null;
						activeElementInst = null;
					}
					function handlePropertyChange(nativeEvent) {
						if (nativeEvent.propertyName !== "value") {
							return;
						}
						if (getInstIfValueChanged(activeElementInst)) {
							manualDispatchChangeEvent(nativeEvent);
						}
					}
					function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
						if (domEventName === "focusin") {
							stopWatchingForValueChange();
							startWatchingForValueChange(target, targetInst);
						} else if (domEventName === "focusout") {
							stopWatchingForValueChange();
						}
					}
					function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
						if (
							domEventName === "selectionchange" ||
							domEventName === "keyup" ||
							domEventName === "keydown"
						) {
							return getInstIfValueChanged(activeElementInst);
						}
					}
					function shouldUseClickEvent(elem) {
						var nodeName = elem.nodeName;
						return (
							nodeName &&
							nodeName.toLowerCase() === "input" &&
							(elem.type === "checkbox" || elem.type === "radio")
						);
					}
					function getTargetInstForClickEvent(domEventName, targetInst) {
						if (domEventName === "click") {
							return getInstIfValueChanged(targetInst);
						}
					}
					function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
						if (domEventName === "input" || domEventName === "change") {
							return getInstIfValueChanged(targetInst);
						}
					}
					function handleControlledInputBlur(node) {
						var state = node._wrapperState;
						if (!state || !state.controlled || node.type !== "number") {
							return;
						}
						{
							setDefaultValue(node, "number", node.value);
						}
					}
					function extractEvents$1(
						dispatchQueue,
						domEventName,
						targetInst,
						nativeEvent,
						nativeEventTarget,
						eventSystemFlags,
						targetContainer
					) {
						var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
						var getTargetInstFunc, handleEventFunc;
						if (shouldUseChangeEvent(targetNode)) {
							getTargetInstFunc = getTargetInstForChangeEvent;
						} else if (isTextInputElement(targetNode)) {
							if (isInputEventSupported) {
								getTargetInstFunc = getTargetInstForInputOrChangeEvent;
							} else {
								getTargetInstFunc = getTargetInstForInputEventPolyfill;
								handleEventFunc = handleEventsForInputEventPolyfill;
							}
						} else if (shouldUseClickEvent(targetNode)) {
							getTargetInstFunc = getTargetInstForClickEvent;
						}
						if (getTargetInstFunc) {
							var inst = getTargetInstFunc(domEventName, targetInst);
							if (inst) {
								createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
								return;
							}
						}
						if (handleEventFunc) {
							handleEventFunc(domEventName, targetNode, targetInst);
						}
						if (domEventName === "focusout") {
							handleControlledInputBlur(targetNode);
						}
					}
					function registerEvents$2() {
						registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
						registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
						registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
						registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
					}
					function extractEvents$2(
						dispatchQueue,
						domEventName,
						targetInst,
						nativeEvent,
						nativeEventTarget,
						eventSystemFlags,
						targetContainer
					) {
						var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
						var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
						if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
							var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
							if (related) {
								if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
									return;
								}
							}
						}
						if (!isOutEvent && !isOverEvent) {
							return;
						}
						var win;
						if (nativeEventTarget.window === nativeEventTarget) {
							win = nativeEventTarget;
						} else {
							var doc = nativeEventTarget.ownerDocument;
							if (doc) {
								win = doc.defaultView || doc.parentWindow;
							} else {
								win = window;
							}
						}
						var from;
						var to;
						if (isOutEvent) {
							var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
							from = targetInst;
							to = _related ? getClosestInstanceFromNode(_related) : null;
							if (to !== null) {
								var nearestMounted = getNearestMountedFiber(to);
								if (to !== nearestMounted || (to.tag !== HostComponent && to.tag !== HostText)) {
									to = null;
								}
							}
						} else {
							from = null;
							to = targetInst;
						}
						if (from === to) {
							return;
						}
						var SyntheticEventCtor = SyntheticMouseEvent;
						var leaveEventType = "onMouseLeave";
						var enterEventType = "onMouseEnter";
						var eventTypePrefix = "mouse";
						if (domEventName === "pointerout" || domEventName === "pointerover") {
							SyntheticEventCtor = SyntheticPointerEvent;
							leaveEventType = "onPointerLeave";
							enterEventType = "onPointerEnter";
							eventTypePrefix = "pointer";
						}
						var fromNode = from == null ? win : getNodeFromInstance(from);
						var toNode = to == null ? win : getNodeFromInstance(to);
						var leave = new SyntheticEventCtor(
							leaveEventType,
							eventTypePrefix + "leave",
							from,
							nativeEvent,
							nativeEventTarget
						);
						leave.target = fromNode;
						leave.relatedTarget = toNode;
						var enter = null;
						var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
						if (nativeTargetInst === targetInst) {
							var enterEvent = new SyntheticEventCtor(
								enterEventType,
								eventTypePrefix + "enter",
								to,
								nativeEvent,
								nativeEventTarget
							);
							enterEvent.target = toNode;
							enterEvent.relatedTarget = fromNode;
							enter = enterEvent;
						}
						accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
					}
					function is(x, y) {
						return (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y);
					}
					var objectIs = typeof Object.is === "function" ? Object.is : is;
					var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
					function shallowEqual(objA, objB) {
						if (objectIs(objA, objB)) {
							return true;
						}
						if (
							typeof objA !== "object" ||
							objA === null ||
							typeof objB !== "object" ||
							objB === null
						) {
							return false;
						}
						var keysA = Object.keys(objA);
						var keysB = Object.keys(objB);
						if (keysA.length !== keysB.length) {
							return false;
						}
						for (var i = 0; i < keysA.length; i++) {
							if (
								!hasOwnProperty$2.call(objB, keysA[i]) ||
								!objectIs(objA[keysA[i]], objB[keysA[i]])
							) {
								return false;
							}
						}
						return true;
					}
					function getLeafNode(node) {
						while (node && node.firstChild) {
							node = node.firstChild;
						}
						return node;
					}
					function getSiblingNode(node) {
						while (node) {
							if (node.nextSibling) {
								return node.nextSibling;
							}
							node = node.parentNode;
						}
					}
					function getNodeForCharacterOffset(root2, offset) {
						var node = getLeafNode(root2);
						var nodeStart = 0;
						var nodeEnd = 0;
						while (node) {
							if (node.nodeType === TEXT_NODE) {
								nodeEnd = nodeStart + node.textContent.length;
								if (nodeStart <= offset && nodeEnd >= offset) {
									return {
										node,
										offset: offset - nodeStart,
									};
								}
								nodeStart = nodeEnd;
							}
							node = getLeafNode(getSiblingNode(node));
						}
					}
					function getOffsets(outerNode) {
						var ownerDocument = outerNode.ownerDocument;
						var win = (ownerDocument && ownerDocument.defaultView) || window;
						var selection = win.getSelection && win.getSelection();
						if (!selection || selection.rangeCount === 0) {
							return null;
						}
						var anchorNode = selection.anchorNode,
							anchorOffset = selection.anchorOffset,
							focusNode = selection.focusNode,
							focusOffset = selection.focusOffset;
						try {
							anchorNode.nodeType;
							focusNode.nodeType;
						} catch (e) {
							return null;
						}
						return getModernOffsetsFromPoints(
							outerNode,
							anchorNode,
							anchorOffset,
							focusNode,
							focusOffset
						);
					}
					function getModernOffsetsFromPoints(
						outerNode,
						anchorNode,
						anchorOffset,
						focusNode,
						focusOffset
					) {
						var length = 0;
						var start3 = -1;
						var end = -1;
						var indexWithinAnchor = 0;
						var indexWithinFocus = 0;
						var node = outerNode;
						var parentNode = null;
						outer: while (true) {
							var next = null;
							while (true) {
								if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
									start3 = length + anchorOffset;
								}
								if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
									end = length + focusOffset;
								}
								if (node.nodeType === TEXT_NODE) {
									length += node.nodeValue.length;
								}
								if ((next = node.firstChild) === null) {
									break;
								}
								parentNode = node;
								node = next;
							}
							while (true) {
								if (node === outerNode) {
									break outer;
								}
								if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
									start3 = length;
								}
								if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
									end = length;
								}
								if ((next = node.nextSibling) !== null) {
									break;
								}
								node = parentNode;
								parentNode = node.parentNode;
							}
							node = next;
						}
						if (start3 === -1 || end === -1) {
							return null;
						}
						return {
							start: start3,
							end,
						};
					}
					function setOffsets(node, offsets) {
						var doc = node.ownerDocument || document;
						var win = (doc && doc.defaultView) || window;
						if (!win.getSelection) {
							return;
						}
						var selection = win.getSelection();
						var length = node.textContent.length;
						var start3 = Math.min(offsets.start, length);
						var end = offsets.end === void 0 ? start3 : Math.min(offsets.end, length);
						if (!selection.extend && start3 > end) {
							var temp = end;
							end = start3;
							start3 = temp;
						}
						var startMarker = getNodeForCharacterOffset(node, start3);
						var endMarker = getNodeForCharacterOffset(node, end);
						if (startMarker && endMarker) {
							if (
								selection.rangeCount === 1 &&
								selection.anchorNode === startMarker.node &&
								selection.anchorOffset === startMarker.offset &&
								selection.focusNode === endMarker.node &&
								selection.focusOffset === endMarker.offset
							) {
								return;
							}
							var range = doc.createRange();
							range.setStart(startMarker.node, startMarker.offset);
							selection.removeAllRanges();
							if (start3 > end) {
								selection.addRange(range);
								selection.extend(endMarker.node, endMarker.offset);
							} else {
								range.setEnd(endMarker.node, endMarker.offset);
								selection.addRange(range);
							}
						}
					}
					function isTextNode(node) {
						return node && node.nodeType === TEXT_NODE;
					}
					function containsNode(outerNode, innerNode) {
						if (!outerNode || !innerNode) {
							return false;
						} else if (outerNode === innerNode) {
							return true;
						} else if (isTextNode(outerNode)) {
							return false;
						} else if (isTextNode(innerNode)) {
							return containsNode(outerNode, innerNode.parentNode);
						} else if ("contains" in outerNode) {
							return outerNode.contains(innerNode);
						} else if (outerNode.compareDocumentPosition) {
							return !!(outerNode.compareDocumentPosition(innerNode) & 16);
						} else {
							return false;
						}
					}
					function isInDocument(node) {
						return (
							node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node)
						);
					}
					function isSameOriginFrame(iframe) {
						try {
							return typeof iframe.contentWindow.location.href === "string";
						} catch (err) {
							return false;
						}
					}
					function getActiveElementDeep() {
						var win = window;
						var element = getActiveElement();
						while (element instanceof win.HTMLIFrameElement) {
							if (isSameOriginFrame(element)) {
								win = element.contentWindow;
							} else {
								return element;
							}
							element = getActiveElement(win.document);
						}
						return element;
					}
					function hasSelectionCapabilities(elem) {
						var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
						return (
							nodeName &&
							((nodeName === "input" &&
								(elem.type === "text" ||
									elem.type === "search" ||
									elem.type === "tel" ||
									elem.type === "url" ||
									elem.type === "password")) ||
								nodeName === "textarea" ||
								elem.contentEditable === "true")
						);
					}
					function getSelectionInformation() {
						var focusedElem = getActiveElementDeep();
						return {
							focusedElem,
							selectionRange: hasSelectionCapabilities(focusedElem)
								? getSelection(focusedElem)
								: null,
						};
					}
					function restoreSelection(priorSelectionInformation) {
						var curFocusedElem = getActiveElementDeep();
						var priorFocusedElem = priorSelectionInformation.focusedElem;
						var priorSelectionRange = priorSelectionInformation.selectionRange;
						if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
							if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
								setSelection(priorFocusedElem, priorSelectionRange);
							}
							var ancestors = [];
							var ancestor = priorFocusedElem;
							while ((ancestor = ancestor.parentNode)) {
								if (ancestor.nodeType === ELEMENT_NODE) {
									ancestors.push({
										element: ancestor,
										left: ancestor.scrollLeft,
										top: ancestor.scrollTop,
									});
								}
							}
							if (typeof priorFocusedElem.focus === "function") {
								priorFocusedElem.focus();
							}
							for (var i = 0; i < ancestors.length; i++) {
								var info = ancestors[i];
								info.element.scrollLeft = info.left;
								info.element.scrollTop = info.top;
							}
						}
					}
					function getSelection(input) {
						var selection;
						if ("selectionStart" in input) {
							selection = {
								start: input.selectionStart,
								end: input.selectionEnd,
							};
						} else {
							selection = getOffsets(input);
						}
						return (
							selection || {
								start: 0,
								end: 0,
							}
						);
					}
					function setSelection(input, offsets) {
						var start3 = offsets.start;
						var end = offsets.end;
						if (end === void 0) {
							end = start3;
						}
						if ("selectionStart" in input) {
							input.selectionStart = start3;
							input.selectionEnd = Math.min(end, input.value.length);
						} else {
							setOffsets(input, offsets);
						}
					}
					var skipSelectionChangeEvent =
						canUseDOM && "documentMode" in document && document.documentMode <= 11;
					function registerEvents$3() {
						registerTwoPhaseEvent("onSelect", [
							"focusout",
							"contextmenu",
							"dragend",
							"focusin",
							"keydown",
							"keyup",
							"mousedown",
							"mouseup",
							"selectionchange",
						]);
					}
					var activeElement$1 = null;
					var activeElementInst$1 = null;
					var lastSelection = null;
					var mouseDown = false;
					function getSelection$1(node) {
						if ("selectionStart" in node && hasSelectionCapabilities(node)) {
							return {
								start: node.selectionStart,
								end: node.selectionEnd,
							};
						} else {
							var win = (node.ownerDocument && node.ownerDocument.defaultView) || window;
							var selection = win.getSelection();
							return {
								anchorNode: selection.anchorNode,
								anchorOffset: selection.anchorOffset,
								focusNode: selection.focusNode,
								focusOffset: selection.focusOffset,
							};
						}
					}
					function getEventTargetDocument(eventTarget) {
						return eventTarget.window === eventTarget
							? eventTarget.document
							: eventTarget.nodeType === DOCUMENT_NODE
							? eventTarget
							: eventTarget.ownerDocument;
					}
					function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
						var doc = getEventTargetDocument(nativeEventTarget);
						if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
							return;
						}
						var currentSelection = getSelection$1(activeElement$1);
						if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
							lastSelection = currentSelection;
							var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
							if (listeners.length > 0) {
								var event2 = new SyntheticEvent(
									"onSelect",
									"select",
									null,
									nativeEvent,
									nativeEventTarget
								);
								dispatchQueue.push({
									event: event2,
									listeners,
								});
								event2.target = activeElement$1;
							}
						}
					}
					function extractEvents$3(
						dispatchQueue,
						domEventName,
						targetInst,
						nativeEvent,
						nativeEventTarget,
						eventSystemFlags,
						targetContainer
					) {
						var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
						switch (domEventName) {
							case "focusin":
								if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
									activeElement$1 = targetNode;
									activeElementInst$1 = targetInst;
									lastSelection = null;
								}
								break;
							case "focusout":
								activeElement$1 = null;
								activeElementInst$1 = null;
								lastSelection = null;
								break;
							case "mousedown":
								mouseDown = true;
								break;
							case "contextmenu":
							case "mouseup":
							case "dragend":
								mouseDown = false;
								constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
								break;
							case "selectionchange":
								if (skipSelectionChangeEvent) {
									break;
								}
							case "keydown":
							case "keyup":
								constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
						}
					}
					function extractEvents$4(
						dispatchQueue,
						domEventName,
						targetInst,
						nativeEvent,
						nativeEventTarget,
						eventSystemFlags,
						targetContainer
					) {
						var reactName = topLevelEventsToReactNames.get(domEventName);
						if (reactName === void 0) {
							return;
						}
						var SyntheticEventCtor = SyntheticEvent;
						var reactEventType = domEventName;
						switch (domEventName) {
							case "keypress":
								if (getEventCharCode(nativeEvent) === 0) {
									return;
								}
							case "keydown":
							case "keyup":
								SyntheticEventCtor = SyntheticKeyboardEvent;
								break;
							case "focusin":
								reactEventType = "focus";
								SyntheticEventCtor = SyntheticFocusEvent;
								break;
							case "focusout":
								reactEventType = "blur";
								SyntheticEventCtor = SyntheticFocusEvent;
								break;
							case "beforeblur":
							case "afterblur":
								SyntheticEventCtor = SyntheticFocusEvent;
								break;
							case "click":
								if (nativeEvent.button === 2) {
									return;
								}
							case "auxclick":
							case "dblclick":
							case "mousedown":
							case "mousemove":
							case "mouseup":
							case "mouseout":
							case "mouseover":
							case "contextmenu":
								SyntheticEventCtor = SyntheticMouseEvent;
								break;
							case "drag":
							case "dragend":
							case "dragenter":
							case "dragexit":
							case "dragleave":
							case "dragover":
							case "dragstart":
							case "drop":
								SyntheticEventCtor = SyntheticDragEvent;
								break;
							case "touchcancel":
							case "touchend":
							case "touchmove":
							case "touchstart":
								SyntheticEventCtor = SyntheticTouchEvent;
								break;
							case ANIMATION_END:
							case ANIMATION_ITERATION:
							case ANIMATION_START:
								SyntheticEventCtor = SyntheticAnimationEvent;
								break;
							case TRANSITION_END:
								SyntheticEventCtor = SyntheticTransitionEvent;
								break;
							case "scroll":
								SyntheticEventCtor = SyntheticUIEvent;
								break;
							case "wheel":
								SyntheticEventCtor = SyntheticWheelEvent;
								break;
							case "copy":
							case "cut":
							case "paste":
								SyntheticEventCtor = SyntheticClipboardEvent;
								break;
							case "gotpointercapture":
							case "lostpointercapture":
							case "pointercancel":
							case "pointerdown":
							case "pointermove":
							case "pointerout":
							case "pointerover":
							case "pointerup":
								SyntheticEventCtor = SyntheticPointerEvent;
								break;
						}
						var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
						{
							var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
							var _listeners = accumulateSinglePhaseListeners(
								targetInst,
								reactName,
								nativeEvent.type,
								inCapturePhase,
								accumulateTargetOnly
							);
							if (_listeners.length > 0) {
								var _event = new SyntheticEventCtor(
									reactName,
									reactEventType,
									null,
									nativeEvent,
									nativeEventTarget
								);
								dispatchQueue.push({
									event: _event,
									listeners: _listeners,
								});
							}
						}
					}
					registerSimpleEvents();
					registerEvents$2();
					registerEvents$1();
					registerEvents$3();
					registerEvents();
					function extractEvents$5(
						dispatchQueue,
						domEventName,
						targetInst,
						nativeEvent,
						nativeEventTarget,
						eventSystemFlags,
						targetContainer
					) {
						extractEvents$4(
							dispatchQueue,
							domEventName,
							targetInst,
							nativeEvent,
							nativeEventTarget,
							eventSystemFlags
						);
						var shouldProcessPolyfillPlugins =
							(eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
						if (shouldProcessPolyfillPlugins) {
							extractEvents$2(
								dispatchQueue,
								domEventName,
								targetInst,
								nativeEvent,
								nativeEventTarget,
								eventSystemFlags
							);
							extractEvents$1(
								dispatchQueue,
								domEventName,
								targetInst,
								nativeEvent,
								nativeEventTarget
							);
							extractEvents$3(
								dispatchQueue,
								domEventName,
								targetInst,
								nativeEvent,
								nativeEventTarget
							);
							extractEvents(
								dispatchQueue,
								domEventName,
								targetInst,
								nativeEvent,
								nativeEventTarget
							);
						}
					}
					var mediaEventTypes = [
						"abort",
						"canplay",
						"canplaythrough",
						"durationchange",
						"emptied",
						"encrypted",
						"ended",
						"error",
						"loadeddata",
						"loadedmetadata",
						"loadstart",
						"pause",
						"play",
						"playing",
						"progress",
						"ratechange",
						"seeked",
						"seeking",
						"stalled",
						"suspend",
						"timeupdate",
						"volumechange",
						"waiting",
					];
					var nonDelegatedEvents = new Set(
						["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes)
					);
					function executeDispatch(event2, listener, currentTarget) {
						var type = event2.type || "unknown-event";
						event2.currentTarget = currentTarget;
						invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event2);
						event2.currentTarget = null;
					}
					function processDispatchQueueItemsInOrder(event2, dispatchListeners, inCapturePhase) {
						var previousInstance;
						if (inCapturePhase) {
							for (var i = dispatchListeners.length - 1; i >= 0; i--) {
								var _dispatchListeners$i = dispatchListeners[i],
									instance = _dispatchListeners$i.instance,
									currentTarget = _dispatchListeners$i.currentTarget,
									listener = _dispatchListeners$i.listener;
								if (instance !== previousInstance && event2.isPropagationStopped()) {
									return;
								}
								executeDispatch(event2, listener, currentTarget);
								previousInstance = instance;
							}
						} else {
							for (var _i = 0; _i < dispatchListeners.length; _i++) {
								var _dispatchListeners$_i = dispatchListeners[_i],
									_instance = _dispatchListeners$_i.instance,
									_currentTarget = _dispatchListeners$_i.currentTarget,
									_listener = _dispatchListeners$_i.listener;
								if (_instance !== previousInstance && event2.isPropagationStopped()) {
									return;
								}
								executeDispatch(event2, _listener, _currentTarget);
								previousInstance = _instance;
							}
						}
					}
					function processDispatchQueue(dispatchQueue, eventSystemFlags) {
						var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
						for (var i = 0; i < dispatchQueue.length; i++) {
							var _dispatchQueue$i = dispatchQueue[i],
								event2 = _dispatchQueue$i.event,
								listeners = _dispatchQueue$i.listeners;
							processDispatchQueueItemsInOrder(event2, listeners, inCapturePhase);
						}
						rethrowCaughtError();
					}
					function dispatchEventsForPlugins(
						domEventName,
						eventSystemFlags,
						nativeEvent,
						targetInst,
						targetContainer
					) {
						var nativeEventTarget = getEventTarget(nativeEvent);
						var dispatchQueue = [];
						extractEvents$5(
							dispatchQueue,
							domEventName,
							targetInst,
							nativeEvent,
							nativeEventTarget,
							eventSystemFlags
						);
						processDispatchQueue(dispatchQueue, eventSystemFlags);
					}
					function listenToNonDelegatedEvent(domEventName, targetElement) {
						var isCapturePhaseListener = false;
						var listenerSet = getEventListenerSet(targetElement);
						var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
						if (!listenerSet.has(listenerSetKey)) {
							addTrappedEventListener(
								targetElement,
								domEventName,
								IS_NON_DELEGATED,
								isCapturePhaseListener
							);
							listenerSet.add(listenerSetKey);
						}
					}
					var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
					function listenToAllSupportedEvents(rootContainerElement) {
						{
							if (rootContainerElement[listeningMarker]) {
								return;
							}
							rootContainerElement[listeningMarker] = true;
							allNativeEvents.forEach(function (domEventName) {
								if (!nonDelegatedEvents.has(domEventName)) {
									listenToNativeEvent(domEventName, false, rootContainerElement, null);
								}
								listenToNativeEvent(domEventName, true, rootContainerElement, null);
							});
						}
					}
					function listenToNativeEvent(
						domEventName,
						isCapturePhaseListener,
						rootContainerElement,
						targetElement
					) {
						var eventSystemFlags =
							arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
						var target = rootContainerElement;
						if (
							domEventName === "selectionchange" &&
							rootContainerElement.nodeType !== DOCUMENT_NODE
						) {
							target = rootContainerElement.ownerDocument;
						}
						if (
							targetElement !== null &&
							!isCapturePhaseListener &&
							nonDelegatedEvents.has(domEventName)
						) {
							if (domEventName !== "scroll") {
								return;
							}
							eventSystemFlags |= IS_NON_DELEGATED;
							target = targetElement;
						}
						var listenerSet = getEventListenerSet(target);
						var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
						if (!listenerSet.has(listenerSetKey)) {
							if (isCapturePhaseListener) {
								eventSystemFlags |= IS_CAPTURE_PHASE;
							}
							addTrappedEventListener(
								target,
								domEventName,
								eventSystemFlags,
								isCapturePhaseListener
							);
							listenerSet.add(listenerSetKey);
						}
					}
					function addTrappedEventListener(
						targetContainer,
						domEventName,
						eventSystemFlags,
						isCapturePhaseListener,
						isDeferredListenerForLegacyFBSupport
					) {
						var listener = createEventListenerWrapperWithPriority(
							targetContainer,
							domEventName,
							eventSystemFlags
						);
						var isPassiveListener = void 0;
						if (passiveBrowserEventsSupported) {
							if (
								domEventName === "touchstart" ||
								domEventName === "touchmove" ||
								domEventName === "wheel"
							) {
								isPassiveListener = true;
							}
						}
						targetContainer = targetContainer;
						var unsubscribeListener;
						if (isCapturePhaseListener) {
							if (isPassiveListener !== void 0) {
								unsubscribeListener = addEventCaptureListenerWithPassiveFlag(
									targetContainer,
									domEventName,
									listener,
									isPassiveListener
								);
							} else {
								unsubscribeListener = addEventCaptureListener(
									targetContainer,
									domEventName,
									listener
								);
							}
						} else {
							if (isPassiveListener !== void 0) {
								unsubscribeListener = addEventBubbleListenerWithPassiveFlag(
									targetContainer,
									domEventName,
									listener,
									isPassiveListener
								);
							} else {
								unsubscribeListener = addEventBubbleListener(
									targetContainer,
									domEventName,
									listener
								);
							}
						}
					}
					function isMatchingRootContainer(grandContainer, targetContainer) {
						return (
							grandContainer === targetContainer ||
							(grandContainer.nodeType === COMMENT_NODE &&
								grandContainer.parentNode === targetContainer)
						);
					}
					function dispatchEventForPluginEventSystem(
						domEventName,
						eventSystemFlags,
						nativeEvent,
						targetInst,
						targetContainer
					) {
						var ancestorInst = targetInst;
						if (
							(eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 &&
							(eventSystemFlags & IS_NON_DELEGATED) === 0
						) {
							var targetContainerNode = targetContainer;
							if (targetInst !== null) {
								var node = targetInst;
								mainLoop: while (true) {
									if (node === null) {
										return;
									}
									var nodeTag = node.tag;
									if (nodeTag === HostRoot || nodeTag === HostPortal) {
										var container = node.stateNode.containerInfo;
										if (isMatchingRootContainer(container, targetContainerNode)) {
											break;
										}
										if (nodeTag === HostPortal) {
											var grandNode = node.return;
											while (grandNode !== null) {
												var grandTag = grandNode.tag;
												if (grandTag === HostRoot || grandTag === HostPortal) {
													var grandContainer = grandNode.stateNode.containerInfo;
													if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
														return;
													}
												}
												grandNode = grandNode.return;
											}
										}
										while (container !== null) {
											var parentNode = getClosestInstanceFromNode(container);
											if (parentNode === null) {
												return;
											}
											var parentTag = parentNode.tag;
											if (parentTag === HostComponent || parentTag === HostText) {
												node = ancestorInst = parentNode;
												continue mainLoop;
											}
											container = container.parentNode;
										}
									}
									node = node.return;
								}
							}
						}
						batchedEventUpdates(function () {
							return dispatchEventsForPlugins(
								domEventName,
								eventSystemFlags,
								nativeEvent,
								ancestorInst
							);
						});
					}
					function createDispatchListener(instance, listener, currentTarget) {
						return {
							instance,
							listener,
							currentTarget,
						};
					}
					function accumulateSinglePhaseListeners(
						targetFiber,
						reactName,
						nativeEventType,
						inCapturePhase,
						accumulateTargetOnly
					) {
						var captureName = reactName !== null ? reactName + "Capture" : null;
						var reactEventName = inCapturePhase ? captureName : reactName;
						var listeners = [];
						var instance = targetFiber;
						var lastHostComponent = null;
						while (instance !== null) {
							var _instance2 = instance,
								stateNode = _instance2.stateNode,
								tag = _instance2.tag;
							if (tag === HostComponent && stateNode !== null) {
								lastHostComponent = stateNode;
								if (reactEventName !== null) {
									var listener = getListener(instance, reactEventName);
									if (listener != null) {
										listeners.push(createDispatchListener(instance, listener, lastHostComponent));
									}
								}
							}
							if (accumulateTargetOnly) {
								break;
							}
							instance = instance.return;
						}
						return listeners;
					}
					function accumulateTwoPhaseListeners(targetFiber, reactName) {
						var captureName = reactName + "Capture";
						var listeners = [];
						var instance = targetFiber;
						while (instance !== null) {
							var _instance3 = instance,
								stateNode = _instance3.stateNode,
								tag = _instance3.tag;
							if (tag === HostComponent && stateNode !== null) {
								var currentTarget = stateNode;
								var captureListener = getListener(instance, captureName);
								if (captureListener != null) {
									listeners.unshift(
										createDispatchListener(instance, captureListener, currentTarget)
									);
								}
								var bubbleListener = getListener(instance, reactName);
								if (bubbleListener != null) {
									listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
								}
							}
							instance = instance.return;
						}
						return listeners;
					}
					function getParent(inst) {
						if (inst === null) {
							return null;
						}
						do {
							inst = inst.return;
						} while (inst && inst.tag !== HostComponent);
						if (inst) {
							return inst;
						}
						return null;
					}
					function getLowestCommonAncestor(instA, instB) {
						var nodeA = instA;
						var nodeB = instB;
						var depthA = 0;
						for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
							depthA++;
						}
						var depthB = 0;
						for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
							depthB++;
						}
						while (depthA - depthB > 0) {
							nodeA = getParent(nodeA);
							depthA--;
						}
						while (depthB - depthA > 0) {
							nodeB = getParent(nodeB);
							depthB--;
						}
						var depth = depthA;
						while (depth--) {
							if (nodeA === nodeB || (nodeB !== null && nodeA === nodeB.alternate)) {
								return nodeA;
							}
							nodeA = getParent(nodeA);
							nodeB = getParent(nodeB);
						}
						return null;
					}
					function accumulateEnterLeaveListenersForEvent(
						dispatchQueue,
						event2,
						target,
						common,
						inCapturePhase
					) {
						var registrationName = event2._reactName;
						var listeners = [];
						var instance = target;
						while (instance !== null) {
							if (instance === common) {
								break;
							}
							var _instance4 = instance,
								alternate = _instance4.alternate,
								stateNode = _instance4.stateNode,
								tag = _instance4.tag;
							if (alternate !== null && alternate === common) {
								break;
							}
							if (tag === HostComponent && stateNode !== null) {
								var currentTarget = stateNode;
								if (inCapturePhase) {
									var captureListener = getListener(instance, registrationName);
									if (captureListener != null) {
										listeners.unshift(
											createDispatchListener(instance, captureListener, currentTarget)
										);
									}
								} else if (!inCapturePhase) {
									var bubbleListener = getListener(instance, registrationName);
									if (bubbleListener != null) {
										listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
									}
								}
							}
							instance = instance.return;
						}
						if (listeners.length !== 0) {
							dispatchQueue.push({
								event: event2,
								listeners,
							});
						}
					}
					function accumulateEnterLeaveTwoPhaseListeners(
						dispatchQueue,
						leaveEvent,
						enterEvent,
						from,
						to
					) {
						var common = from && to ? getLowestCommonAncestor(from, to) : null;
						if (from !== null) {
							accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
						}
						if (to !== null && enterEvent !== null) {
							accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
						}
					}
					function getListenerSetKey(domEventName, capture) {
						return domEventName + "__" + (capture ? "capture" : "bubble");
					}
					var didWarnInvalidHydration = false;
					var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
					var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
					var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
					var AUTOFOCUS = "autoFocus";
					var CHILDREN = "children";
					var STYLE = "style";
					var HTML$1 = "__html";
					var HTML_NAMESPACE$1 = Namespaces.html;
					var warnedUnknownTags;
					var suppressHydrationWarning;
					var validatePropertiesInDevelopment;
					var warnForTextDifference;
					var warnForPropDifference;
					var warnForExtraAttributes;
					var warnForInvalidEventListener;
					var canDiffStyleForHydrationWarning;
					var normalizeMarkupForTextOrAttribute;
					var normalizeHTML;
					{
						warnedUnknownTags = {
							dialog: true,
							webview: true,
						};
						validatePropertiesInDevelopment = function (type, props) {
							validateProperties(type, props);
							validateProperties$1(type, props);
							validateProperties$2(type, props, {
								registrationNameDependencies,
								possibleRegistrationNames,
							});
						};
						canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
						var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
						var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
						normalizeMarkupForTextOrAttribute = function (markup) {
							var markupString = typeof markup === "string" ? markup : "" + markup;
							return markupString
								.replace(NORMALIZE_NEWLINES_REGEX, "\n")
								.replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
						};
						warnForTextDifference = function (serverText, clientText) {
							if (didWarnInvalidHydration) {
								return;
							}
							var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
							var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
							if (normalizedServerText === normalizedClientText) {
								return;
							}
							didWarnInvalidHydration = true;
							error3(
								'Text content did not match. Server: "%s" Client: "%s"',
								normalizedServerText,
								normalizedClientText
							);
						};
						warnForPropDifference = function (propName, serverValue, clientValue) {
							if (didWarnInvalidHydration) {
								return;
							}
							var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
							var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
							if (normalizedServerValue === normalizedClientValue) {
								return;
							}
							didWarnInvalidHydration = true;
							error3(
								"Prop `%s` did not match. Server: %s Client: %s",
								propName,
								JSON.stringify(normalizedServerValue),
								JSON.stringify(normalizedClientValue)
							);
						};
						warnForExtraAttributes = function (attributeNames) {
							if (didWarnInvalidHydration) {
								return;
							}
							didWarnInvalidHydration = true;
							var names = [];
							attributeNames.forEach(function (name2) {
								names.push(name2);
							});
							error3("Extra attributes from the server: %s", names);
						};
						warnForInvalidEventListener = function (registrationName, listener) {
							if (listener === false) {
								error3(
									"Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.",
									registrationName,
									registrationName,
									registrationName
								);
							} else {
								error3(
									"Expected `%s` listener to be a function, instead got a value of `%s` type.",
									registrationName,
									typeof listener
								);
							}
						};
						normalizeHTML = function (parent, html) {
							var testElement =
								parent.namespaceURI === HTML_NAMESPACE$1
									? parent.ownerDocument.createElement(parent.tagName)
									: parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
							testElement.innerHTML = html;
							return testElement.innerHTML;
						};
					}
					function getOwnerDocumentFromRootContainer(rootContainerElement) {
						return rootContainerElement.nodeType === DOCUMENT_NODE
							? rootContainerElement
							: rootContainerElement.ownerDocument;
					}
					function noop() {}
					function trapClickOnNonInteractiveElement(node) {
						node.onclick = noop;
					}
					function setInitialDOMProperties(
						tag,
						domElement,
						rootContainerElement,
						nextProps,
						isCustomComponentTag
					) {
						for (var propKey in nextProps) {
							if (!nextProps.hasOwnProperty(propKey)) {
								continue;
							}
							var nextProp = nextProps[propKey];
							if (propKey === STYLE) {
								{
									if (nextProp) {
										Object.freeze(nextProp);
									}
								}
								setValueForStyles(domElement, nextProp);
							} else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
								var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
								if (nextHtml != null) {
									setInnerHTML(domElement, nextHtml);
								}
							} else if (propKey === CHILDREN) {
								if (typeof nextProp === "string") {
									var canSetTextContent = tag !== "textarea" || nextProp !== "";
									if (canSetTextContent) {
										setTextContent(domElement, nextProp);
									}
								} else if (typeof nextProp === "number") {
									setTextContent(domElement, "" + nextProp);
								}
							} else if (
								propKey === SUPPRESS_CONTENT_EDITABLE_WARNING ||
								propKey === SUPPRESS_HYDRATION_WARNING
							);
							else if (propKey === AUTOFOCUS);
							else if (registrationNameDependencies.hasOwnProperty(propKey)) {
								if (nextProp != null) {
									if (typeof nextProp !== "function") {
										warnForInvalidEventListener(propKey, nextProp);
									}
									if (propKey === "onScroll") {
										listenToNonDelegatedEvent("scroll", domElement);
									}
								}
							} else if (nextProp != null) {
								setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
							}
						}
					}
					function updateDOMProperties(
						domElement,
						updatePayload,
						wasCustomComponentTag,
						isCustomComponentTag
					) {
						for (var i = 0; i < updatePayload.length; i += 2) {
							var propKey = updatePayload[i];
							var propValue = updatePayload[i + 1];
							if (propKey === STYLE) {
								setValueForStyles(domElement, propValue);
							} else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
								setInnerHTML(domElement, propValue);
							} else if (propKey === CHILDREN) {
								setTextContent(domElement, propValue);
							} else {
								setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
							}
						}
					}
					function createElement(type, props, rootContainerElement, parentNamespace) {
						var isCustomComponentTag;
						var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
						var domElement;
						var namespaceURI = parentNamespace;
						if (namespaceURI === HTML_NAMESPACE$1) {
							namespaceURI = getIntrinsicNamespace(type);
						}
						if (namespaceURI === HTML_NAMESPACE$1) {
							{
								isCustomComponentTag = isCustomComponent(type, props);
								if (!isCustomComponentTag && type !== type.toLowerCase()) {
									error3(
										"<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.",
										type
									);
								}
							}
							if (type === "script") {
								var div = ownerDocument.createElement("div");
								div.innerHTML = "<script></script>";
								var firstChild = div.firstChild;
								domElement = div.removeChild(firstChild);
							} else if (typeof props.is === "string") {
								domElement = ownerDocument.createElement(type, {
									is: props.is,
								});
							} else {
								domElement = ownerDocument.createElement(type);
								if (type === "select") {
									var node = domElement;
									if (props.multiple) {
										node.multiple = true;
									} else if (props.size) {
										node.size = props.size;
									}
								}
							}
						} else {
							domElement = ownerDocument.createElementNS(namespaceURI, type);
						}
						{
							if (namespaceURI === HTML_NAMESPACE$1) {
								if (
									!isCustomComponentTag &&
									Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" &&
									!Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)
								) {
									warnedUnknownTags[type] = true;
									error3(
										"The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.",
										type
									);
								}
							}
						}
						return domElement;
					}
					function createTextNode(text, rootContainerElement) {
						return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
					}
					function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
						var isCustomComponentTag = isCustomComponent(tag, rawProps);
						{
							validatePropertiesInDevelopment(tag, rawProps);
						}
						var props;
						switch (tag) {
							case "dialog":
								listenToNonDelegatedEvent("cancel", domElement);
								listenToNonDelegatedEvent("close", domElement);
								props = rawProps;
								break;
							case "iframe":
							case "object":
							case "embed":
								listenToNonDelegatedEvent("load", domElement);
								props = rawProps;
								break;
							case "video":
							case "audio":
								for (var i = 0; i < mediaEventTypes.length; i++) {
									listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
								}
								props = rawProps;
								break;
							case "source":
								listenToNonDelegatedEvent("error", domElement);
								props = rawProps;
								break;
							case "img":
							case "image":
							case "link":
								listenToNonDelegatedEvent("error", domElement);
								listenToNonDelegatedEvent("load", domElement);
								props = rawProps;
								break;
							case "details":
								listenToNonDelegatedEvent("toggle", domElement);
								props = rawProps;
								break;
							case "input":
								initWrapperState(domElement, rawProps);
								props = getHostProps(domElement, rawProps);
								listenToNonDelegatedEvent("invalid", domElement);
								break;
							case "option":
								validateProps(domElement, rawProps);
								props = getHostProps$1(domElement, rawProps);
								break;
							case "select":
								initWrapperState$1(domElement, rawProps);
								props = getHostProps$2(domElement, rawProps);
								listenToNonDelegatedEvent("invalid", domElement);
								break;
							case "textarea":
								initWrapperState$2(domElement, rawProps);
								props = getHostProps$3(domElement, rawProps);
								listenToNonDelegatedEvent("invalid", domElement);
								break;
							default:
								props = rawProps;
						}
						assertValidProps(tag, props);
						setInitialDOMProperties(
							tag,
							domElement,
							rootContainerElement,
							props,
							isCustomComponentTag
						);
						switch (tag) {
							case "input":
								track(domElement);
								postMountWrapper(domElement, rawProps, false);
								break;
							case "textarea":
								track(domElement);
								postMountWrapper$3(domElement);
								break;
							case "option":
								postMountWrapper$1(domElement, rawProps);
								break;
							case "select":
								postMountWrapper$2(domElement, rawProps);
								break;
							default:
								if (typeof props.onClick === "function") {
									trapClickOnNonInteractiveElement(domElement);
								}
								break;
						}
					}
					function diffProperties(
						domElement,
						tag,
						lastRawProps,
						nextRawProps,
						rootContainerElement
					) {
						{
							validatePropertiesInDevelopment(tag, nextRawProps);
						}
						var updatePayload = null;
						var lastProps;
						var nextProps;
						switch (tag) {
							case "input":
								lastProps = getHostProps(domElement, lastRawProps);
								nextProps = getHostProps(domElement, nextRawProps);
								updatePayload = [];
								break;
							case "option":
								lastProps = getHostProps$1(domElement, lastRawProps);
								nextProps = getHostProps$1(domElement, nextRawProps);
								updatePayload = [];
								break;
							case "select":
								lastProps = getHostProps$2(domElement, lastRawProps);
								nextProps = getHostProps$2(domElement, nextRawProps);
								updatePayload = [];
								break;
							case "textarea":
								lastProps = getHostProps$3(domElement, lastRawProps);
								nextProps = getHostProps$3(domElement, nextRawProps);
								updatePayload = [];
								break;
							default:
								lastProps = lastRawProps;
								nextProps = nextRawProps;
								if (
									typeof lastProps.onClick !== "function" &&
									typeof nextProps.onClick === "function"
								) {
									trapClickOnNonInteractiveElement(domElement);
								}
								break;
						}
						assertValidProps(tag, nextProps);
						var propKey;
						var styleName;
						var styleUpdates = null;
						for (propKey in lastProps) {
							if (
								nextProps.hasOwnProperty(propKey) ||
								!lastProps.hasOwnProperty(propKey) ||
								lastProps[propKey] == null
							) {
								continue;
							}
							if (propKey === STYLE) {
								var lastStyle = lastProps[propKey];
								for (styleName in lastStyle) {
									if (lastStyle.hasOwnProperty(styleName)) {
										if (!styleUpdates) {
											styleUpdates = {};
										}
										styleUpdates[styleName] = "";
									}
								}
							} else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN);
							else if (
								propKey === SUPPRESS_CONTENT_EDITABLE_WARNING ||
								propKey === SUPPRESS_HYDRATION_WARNING
							);
							else if (propKey === AUTOFOCUS);
							else if (registrationNameDependencies.hasOwnProperty(propKey)) {
								if (!updatePayload) {
									updatePayload = [];
								}
							} else {
								(updatePayload = updatePayload || []).push(propKey, null);
							}
						}
						for (propKey in nextProps) {
							var nextProp = nextProps[propKey];
							var lastProp = lastProps != null ? lastProps[propKey] : void 0;
							if (
								!nextProps.hasOwnProperty(propKey) ||
								nextProp === lastProp ||
								(nextProp == null && lastProp == null)
							) {
								continue;
							}
							if (propKey === STYLE) {
								{
									if (nextProp) {
										Object.freeze(nextProp);
									}
								}
								if (lastProp) {
									for (styleName in lastProp) {
										if (
											lastProp.hasOwnProperty(styleName) &&
											(!nextProp || !nextProp.hasOwnProperty(styleName))
										) {
											if (!styleUpdates) {
												styleUpdates = {};
											}
											styleUpdates[styleName] = "";
										}
									}
									for (styleName in nextProp) {
										if (
											nextProp.hasOwnProperty(styleName) &&
											lastProp[styleName] !== nextProp[styleName]
										) {
											if (!styleUpdates) {
												styleUpdates = {};
											}
											styleUpdates[styleName] = nextProp[styleName];
										}
									}
								} else {
									if (!styleUpdates) {
										if (!updatePayload) {
											updatePayload = [];
										}
										updatePayload.push(propKey, styleUpdates);
									}
									styleUpdates = nextProp;
								}
							} else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
								var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
								var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
								if (nextHtml != null) {
									if (lastHtml !== nextHtml) {
										(updatePayload = updatePayload || []).push(propKey, nextHtml);
									}
								}
							} else if (propKey === CHILDREN) {
								if (typeof nextProp === "string" || typeof nextProp === "number") {
									(updatePayload = updatePayload || []).push(propKey, "" + nextProp);
								}
							} else if (
								propKey === SUPPRESS_CONTENT_EDITABLE_WARNING ||
								propKey === SUPPRESS_HYDRATION_WARNING
							);
							else if (registrationNameDependencies.hasOwnProperty(propKey)) {
								if (nextProp != null) {
									if (typeof nextProp !== "function") {
										warnForInvalidEventListener(propKey, nextProp);
									}
									if (propKey === "onScroll") {
										listenToNonDelegatedEvent("scroll", domElement);
									}
								}
								if (!updatePayload && lastProp !== nextProp) {
									updatePayload = [];
								}
							} else if (
								typeof nextProp === "object" &&
								nextProp !== null &&
								nextProp.$$typeof === REACT_OPAQUE_ID_TYPE
							) {
								nextProp.toString();
							} else {
								(updatePayload = updatePayload || []).push(propKey, nextProp);
							}
						}
						if (styleUpdates) {
							{
								validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
							}
							(updatePayload = updatePayload || []).push(STYLE, styleUpdates);
						}
						return updatePayload;
					}
					function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
						if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
							updateChecked(domElement, nextRawProps);
						}
						var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
						var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
						updateDOMProperties(
							domElement,
							updatePayload,
							wasCustomComponentTag,
							isCustomComponentTag
						);
						switch (tag) {
							case "input":
								updateWrapper(domElement, nextRawProps);
								break;
							case "textarea":
								updateWrapper$1(domElement, nextRawProps);
								break;
							case "select":
								postUpdateWrapper(domElement, nextRawProps);
								break;
						}
					}
					function getPossibleStandardName(propName) {
						{
							var lowerCasedName = propName.toLowerCase();
							if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
								return null;
							}
							return possibleStandardNames[lowerCasedName] || null;
						}
					}
					function diffHydratedProperties(
						domElement,
						tag,
						rawProps,
						parentNamespace,
						rootContainerElement
					) {
						var isCustomComponentTag;
						var extraAttributeNames;
						{
							suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
							isCustomComponentTag = isCustomComponent(tag, rawProps);
							validatePropertiesInDevelopment(tag, rawProps);
						}
						switch (tag) {
							case "dialog":
								listenToNonDelegatedEvent("cancel", domElement);
								listenToNonDelegatedEvent("close", domElement);
								break;
							case "iframe":
							case "object":
							case "embed":
								listenToNonDelegatedEvent("load", domElement);
								break;
							case "video":
							case "audio":
								for (var i = 0; i < mediaEventTypes.length; i++) {
									listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
								}
								break;
							case "source":
								listenToNonDelegatedEvent("error", domElement);
								break;
							case "img":
							case "image":
							case "link":
								listenToNonDelegatedEvent("error", domElement);
								listenToNonDelegatedEvent("load", domElement);
								break;
							case "details":
								listenToNonDelegatedEvent("toggle", domElement);
								break;
							case "input":
								initWrapperState(domElement, rawProps);
								listenToNonDelegatedEvent("invalid", domElement);
								break;
							case "option":
								validateProps(domElement, rawProps);
								break;
							case "select":
								initWrapperState$1(domElement, rawProps);
								listenToNonDelegatedEvent("invalid", domElement);
								break;
							case "textarea":
								initWrapperState$2(domElement, rawProps);
								listenToNonDelegatedEvent("invalid", domElement);
								break;
						}
						assertValidProps(tag, rawProps);
						{
							extraAttributeNames = new Set();
							var attributes = domElement.attributes;
							for (var _i = 0; _i < attributes.length; _i++) {
								var name2 = attributes[_i].name.toLowerCase();
								switch (name2) {
									case "data-reactroot":
										break;
									case "value":
										break;
									case "checked":
										break;
									case "selected":
										break;
									default:
										extraAttributeNames.add(attributes[_i].name);
								}
							}
						}
						var updatePayload = null;
						for (var propKey in rawProps) {
							if (!rawProps.hasOwnProperty(propKey)) {
								continue;
							}
							var nextProp = rawProps[propKey];
							if (propKey === CHILDREN) {
								if (typeof nextProp === "string") {
									if (domElement.textContent !== nextProp) {
										if (!suppressHydrationWarning) {
											warnForTextDifference(domElement.textContent, nextProp);
										}
										updatePayload = [CHILDREN, nextProp];
									}
								} else if (typeof nextProp === "number") {
									if (domElement.textContent !== "" + nextProp) {
										if (!suppressHydrationWarning) {
											warnForTextDifference(domElement.textContent, nextProp);
										}
										updatePayload = [CHILDREN, "" + nextProp];
									}
								}
							} else if (registrationNameDependencies.hasOwnProperty(propKey)) {
								if (nextProp != null) {
									if (typeof nextProp !== "function") {
										warnForInvalidEventListener(propKey, nextProp);
									}
									if (propKey === "onScroll") {
										listenToNonDelegatedEvent("scroll", domElement);
									}
								}
							} else if (typeof isCustomComponentTag === "boolean") {
								var serverValue = void 0;
								var propertyInfo = getPropertyInfo(propKey);
								if (suppressHydrationWarning);
								else if (
									propKey === SUPPRESS_CONTENT_EDITABLE_WARNING ||
									propKey === SUPPRESS_HYDRATION_WARNING ||
									propKey === "value" ||
									propKey === "checked" ||
									propKey === "selected"
								);
								else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
									var serverHTML = domElement.innerHTML;
									var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
									if (nextHtml != null) {
										var expectedHTML = normalizeHTML(domElement, nextHtml);
										if (expectedHTML !== serverHTML) {
											warnForPropDifference(propKey, serverHTML, expectedHTML);
										}
									}
								} else if (propKey === STYLE) {
									extraAttributeNames.delete(propKey);
									if (canDiffStyleForHydrationWarning) {
										var expectedStyle = createDangerousStringForStyles(nextProp);
										serverValue = domElement.getAttribute("style");
										if (expectedStyle !== serverValue) {
											warnForPropDifference(propKey, serverValue, expectedStyle);
										}
									}
								} else if (isCustomComponentTag) {
									extraAttributeNames.delete(propKey.toLowerCase());
									serverValue = getValueForAttribute(domElement, propKey, nextProp);
									if (nextProp !== serverValue) {
										warnForPropDifference(propKey, serverValue, nextProp);
									}
								} else if (
									!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) &&
									!shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)
								) {
									var isMismatchDueToBadCasing = false;
									if (propertyInfo !== null) {
										extraAttributeNames.delete(propertyInfo.attributeName);
										serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
									} else {
										var ownNamespace = parentNamespace;
										if (ownNamespace === HTML_NAMESPACE$1) {
											ownNamespace = getIntrinsicNamespace(tag);
										}
										if (ownNamespace === HTML_NAMESPACE$1) {
											extraAttributeNames.delete(propKey.toLowerCase());
										} else {
											var standardName = getPossibleStandardName(propKey);
											if (standardName !== null && standardName !== propKey) {
												isMismatchDueToBadCasing = true;
												extraAttributeNames.delete(standardName);
											}
											extraAttributeNames.delete(propKey);
										}
										serverValue = getValueForAttribute(domElement, propKey, nextProp);
									}
									if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
										warnForPropDifference(propKey, serverValue, nextProp);
									}
								}
							}
						}
						{
							if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
								warnForExtraAttributes(extraAttributeNames);
							}
						}
						switch (tag) {
							case "input":
								track(domElement);
								postMountWrapper(domElement, rawProps, true);
								break;
							case "textarea":
								track(domElement);
								postMountWrapper$3(domElement);
								break;
							case "select":
							case "option":
								break;
							default:
								if (typeof rawProps.onClick === "function") {
									trapClickOnNonInteractiveElement(domElement);
								}
								break;
						}
						return updatePayload;
					}
					function diffHydratedText(textNode, text) {
						var isDifferent = textNode.nodeValue !== text;
						return isDifferent;
					}
					function warnForUnmatchedText(textNode, text) {
						{
							warnForTextDifference(textNode.nodeValue, text);
						}
					}
					function warnForDeletedHydratableElement(parentNode, child) {
						{
							if (didWarnInvalidHydration) {
								return;
							}
							didWarnInvalidHydration = true;
							error3(
								"Did not expect server HTML to contain a <%s> in <%s>.",
								child.nodeName.toLowerCase(),
								parentNode.nodeName.toLowerCase()
							);
						}
					}
					function warnForDeletedHydratableText(parentNode, child) {
						{
							if (didWarnInvalidHydration) {
								return;
							}
							didWarnInvalidHydration = true;
							error3(
								'Did not expect server HTML to contain the text node "%s" in <%s>.',
								child.nodeValue,
								parentNode.nodeName.toLowerCase()
							);
						}
					}
					function warnForInsertedHydratedElement(parentNode, tag, props) {
						{
							if (didWarnInvalidHydration) {
								return;
							}
							didWarnInvalidHydration = true;
							error3(
								"Expected server HTML to contain a matching <%s> in <%s>.",
								tag,
								parentNode.nodeName.toLowerCase()
							);
						}
					}
					function warnForInsertedHydratedText(parentNode, text) {
						{
							if (text === "") {
								return;
							}
							if (didWarnInvalidHydration) {
								return;
							}
							didWarnInvalidHydration = true;
							error3(
								'Expected server HTML to contain a matching text node for "%s" in <%s>.',
								text,
								parentNode.nodeName.toLowerCase()
							);
						}
					}
					function restoreControlledState$3(domElement, tag, props) {
						switch (tag) {
							case "input":
								restoreControlledState(domElement, props);
								return;
							case "textarea":
								restoreControlledState$2(domElement, props);
								return;
							case "select":
								restoreControlledState$1(domElement, props);
								return;
						}
					}
					var validateDOMNesting = function () {};
					var updatedAncestorInfo = function () {};
					{
						var specialTags = [
							"address",
							"applet",
							"area",
							"article",
							"aside",
							"base",
							"basefont",
							"bgsound",
							"blockquote",
							"body",
							"br",
							"button",
							"caption",
							"center",
							"col",
							"colgroup",
							"dd",
							"details",
							"dir",
							"div",
							"dl",
							"dt",
							"embed",
							"fieldset",
							"figcaption",
							"figure",
							"footer",
							"form",
							"frame",
							"frameset",
							"h1",
							"h2",
							"h3",
							"h4",
							"h5",
							"h6",
							"head",
							"header",
							"hgroup",
							"hr",
							"html",
							"iframe",
							"img",
							"input",
							"isindex",
							"li",
							"link",
							"listing",
							"main",
							"marquee",
							"menu",
							"menuitem",
							"meta",
							"nav",
							"noembed",
							"noframes",
							"noscript",
							"object",
							"ol",
							"p",
							"param",
							"plaintext",
							"pre",
							"script",
							"section",
							"select",
							"source",
							"style",
							"summary",
							"table",
							"tbody",
							"td",
							"template",
							"textarea",
							"tfoot",
							"th",
							"thead",
							"title",
							"tr",
							"track",
							"ul",
							"wbr",
							"xmp",
						];
						var inScopeTags = [
							"applet",
							"caption",
							"html",
							"table",
							"td",
							"th",
							"marquee",
							"object",
							"template",
							"foreignObject",
							"desc",
							"title",
						];
						var buttonScopeTags = inScopeTags.concat(["button"]);
						var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
						var emptyAncestorInfo = {
							current: null,
							formTag: null,
							aTagInScope: null,
							buttonTagInScope: null,
							nobrTagInScope: null,
							pTagInButtonScope: null,
							listItemTagAutoclosing: null,
							dlItemTagAutoclosing: null,
						};
						updatedAncestorInfo = function (oldInfo, tag) {
							var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
							var info = {
								tag,
							};
							if (inScopeTags.indexOf(tag) !== -1) {
								ancestorInfo.aTagInScope = null;
								ancestorInfo.buttonTagInScope = null;
								ancestorInfo.nobrTagInScope = null;
							}
							if (buttonScopeTags.indexOf(tag) !== -1) {
								ancestorInfo.pTagInButtonScope = null;
							}
							if (
								specialTags.indexOf(tag) !== -1 &&
								tag !== "address" &&
								tag !== "div" &&
								tag !== "p"
							) {
								ancestorInfo.listItemTagAutoclosing = null;
								ancestorInfo.dlItemTagAutoclosing = null;
							}
							ancestorInfo.current = info;
							if (tag === "form") {
								ancestorInfo.formTag = info;
							}
							if (tag === "a") {
								ancestorInfo.aTagInScope = info;
							}
							if (tag === "button") {
								ancestorInfo.buttonTagInScope = info;
							}
							if (tag === "nobr") {
								ancestorInfo.nobrTagInScope = info;
							}
							if (tag === "p") {
								ancestorInfo.pTagInButtonScope = info;
							}
							if (tag === "li") {
								ancestorInfo.listItemTagAutoclosing = info;
							}
							if (tag === "dd" || tag === "dt") {
								ancestorInfo.dlItemTagAutoclosing = info;
							}
							return ancestorInfo;
						};
						var isTagValidWithParent = function (tag, parentTag) {
							switch (parentTag) {
								case "select":
									return tag === "option" || tag === "optgroup" || tag === "#text";
								case "optgroup":
									return tag === "option" || tag === "#text";
								case "option":
									return tag === "#text";
								case "tr":
									return (
										tag === "th" ||
										tag === "td" ||
										tag === "style" ||
										tag === "script" ||
										tag === "template"
									);
								case "tbody":
								case "thead":
								case "tfoot":
									return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
								case "colgroup":
									return tag === "col" || tag === "template";
								case "table":
									return (
										tag === "caption" ||
										tag === "colgroup" ||
										tag === "tbody" ||
										tag === "tfoot" ||
										tag === "thead" ||
										tag === "style" ||
										tag === "script" ||
										tag === "template"
									);
								case "head":
									return (
										tag === "base" ||
										tag === "basefont" ||
										tag === "bgsound" ||
										tag === "link" ||
										tag === "meta" ||
										tag === "title" ||
										tag === "noscript" ||
										tag === "noframes" ||
										tag === "style" ||
										tag === "script" ||
										tag === "template"
									);
								case "html":
									return tag === "head" || tag === "body" || tag === "frameset";
								case "frameset":
									return tag === "frame";
								case "#document":
									return tag === "html";
							}
							switch (tag) {
								case "h1":
								case "h2":
								case "h3":
								case "h4":
								case "h5":
								case "h6":
									return (
										parentTag !== "h1" &&
										parentTag !== "h2" &&
										parentTag !== "h3" &&
										parentTag !== "h4" &&
										parentTag !== "h5" &&
										parentTag !== "h6"
									);
								case "rp":
								case "rt":
									return impliedEndTags.indexOf(parentTag) === -1;
								case "body":
								case "caption":
								case "col":
								case "colgroup":
								case "frameset":
								case "frame":
								case "head":
								case "html":
								case "tbody":
								case "td":
								case "tfoot":
								case "th":
								case "thead":
								case "tr":
									return parentTag == null;
							}
							return true;
						};
						var findInvalidAncestorForTag = function (tag, ancestorInfo) {
							switch (tag) {
								case "address":
								case "article":
								case "aside":
								case "blockquote":
								case "center":
								case "details":
								case "dialog":
								case "dir":
								case "div":
								case "dl":
								case "fieldset":
								case "figcaption":
								case "figure":
								case "footer":
								case "header":
								case "hgroup":
								case "main":
								case "menu":
								case "nav":
								case "ol":
								case "p":
								case "section":
								case "summary":
								case "ul":
								case "pre":
								case "listing":
								case "table":
								case "hr":
								case "xmp":
								case "h1":
								case "h2":
								case "h3":
								case "h4":
								case "h5":
								case "h6":
									return ancestorInfo.pTagInButtonScope;
								case "form":
									return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
								case "li":
									return ancestorInfo.listItemTagAutoclosing;
								case "dd":
								case "dt":
									return ancestorInfo.dlItemTagAutoclosing;
								case "button":
									return ancestorInfo.buttonTagInScope;
								case "a":
									return ancestorInfo.aTagInScope;
								case "nobr":
									return ancestorInfo.nobrTagInScope;
							}
							return null;
						};
						var didWarn$1 = {};
						validateDOMNesting = function (childTag, childText, ancestorInfo) {
							ancestorInfo = ancestorInfo || emptyAncestorInfo;
							var parentInfo = ancestorInfo.current;
							var parentTag = parentInfo && parentInfo.tag;
							if (childText != null) {
								if (childTag != null) {
									error3("validateDOMNesting: when childText is passed, childTag should be null");
								}
								childTag = "#text";
							}
							var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
							var invalidAncestor = invalidParent
								? null
								: findInvalidAncestorForTag(childTag, ancestorInfo);
							var invalidParentOrAncestor = invalidParent || invalidAncestor;
							if (!invalidParentOrAncestor) {
								return;
							}
							var ancestorTag = invalidParentOrAncestor.tag;
							var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
							if (didWarn$1[warnKey]) {
								return;
							}
							didWarn$1[warnKey] = true;
							var tagDisplayName = childTag;
							var whitespaceInfo = "";
							if (childTag === "#text") {
								if (/\S/.test(childText)) {
									tagDisplayName = "Text nodes";
								} else {
									tagDisplayName = "Whitespace text nodes";
									whitespaceInfo =
										" Make sure you don't have any extra whitespace between tags on each line of your source code.";
								}
							} else {
								tagDisplayName = "<" + childTag + ">";
							}
							if (invalidParent) {
								var info = "";
								if (ancestorTag === "table" && childTag === "tr") {
									info +=
										" Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
								}
								error3(
									"validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s",
									tagDisplayName,
									ancestorTag,
									whitespaceInfo,
									info
								);
							} else {
								error3(
									"validateDOMNesting(...): %s cannot appear as a descendant of <%s>.",
									tagDisplayName,
									ancestorTag
								);
							}
						};
					}
					var SUPPRESS_HYDRATION_WARNING$1;
					{
						SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
					}
					var SUSPENSE_START_DATA = "$";
					var SUSPENSE_END_DATA = "/$";
					var SUSPENSE_PENDING_START_DATA = "$?";
					var SUSPENSE_FALLBACK_START_DATA = "$!";
					var STYLE$1 = "style";
					var eventsEnabled = null;
					var selectionInformation = null;
					function shouldAutoFocusHostComponent(type, props) {
						switch (type) {
							case "button":
							case "input":
							case "select":
							case "textarea":
								return !!props.autoFocus;
						}
						return false;
					}
					function getRootHostContext(rootContainerInstance) {
						var type;
						var namespace;
						var nodeType = rootContainerInstance.nodeType;
						switch (nodeType) {
							case DOCUMENT_NODE:
							case DOCUMENT_FRAGMENT_NODE: {
								type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
								var root2 = rootContainerInstance.documentElement;
								namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
								break;
							}
							default: {
								var container =
									nodeType === COMMENT_NODE
										? rootContainerInstance.parentNode
										: rootContainerInstance;
								var ownNamespace = container.namespaceURI || null;
								type = container.tagName;
								namespace = getChildNamespace(ownNamespace, type);
								break;
							}
						}
						{
							var validatedTag = type.toLowerCase();
							var ancestorInfo = updatedAncestorInfo(null, validatedTag);
							return {
								namespace,
								ancestorInfo,
							};
						}
					}
					function getChildHostContext(parentHostContext, type, rootContainerInstance) {
						{
							var parentHostContextDev = parentHostContext;
							var namespace = getChildNamespace(parentHostContextDev.namespace, type);
							var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
							return {
								namespace,
								ancestorInfo,
							};
						}
					}
					function getPublicInstance(instance) {
						return instance;
					}
					function prepareForCommit(containerInfo) {
						eventsEnabled = isEnabled();
						selectionInformation = getSelectionInformation();
						var activeInstance = null;
						setEnabled(false);
						return activeInstance;
					}
					function resetAfterCommit(containerInfo) {
						restoreSelection(selectionInformation);
						setEnabled(eventsEnabled);
						eventsEnabled = null;
						selectionInformation = null;
					}
					function createInstance(
						type,
						props,
						rootContainerInstance,
						hostContext,
						internalInstanceHandle
					) {
						var parentNamespace;
						{
							var hostContextDev = hostContext;
							validateDOMNesting(type, null, hostContextDev.ancestorInfo);
							if (typeof props.children === "string" || typeof props.children === "number") {
								var string = "" + props.children;
								var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
								validateDOMNesting(null, string, ownAncestorInfo);
							}
							parentNamespace = hostContextDev.namespace;
						}
						var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
						precacheFiberNode(internalInstanceHandle, domElement);
						updateFiberProps(domElement, props);
						return domElement;
					}
					function appendInitialChild(parentInstance, child) {
						parentInstance.appendChild(child);
					}
					function finalizeInitialChildren(
						domElement,
						type,
						props,
						rootContainerInstance,
						hostContext
					) {
						setInitialProperties(domElement, type, props, rootContainerInstance);
						return shouldAutoFocusHostComponent(type, props);
					}
					function prepareUpdate(
						domElement,
						type,
						oldProps,
						newProps,
						rootContainerInstance,
						hostContext
					) {
						{
							var hostContextDev = hostContext;
							if (
								typeof newProps.children !== typeof oldProps.children &&
								(typeof newProps.children === "string" || typeof newProps.children === "number")
							) {
								var string = "" + newProps.children;
								var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
								validateDOMNesting(null, string, ownAncestorInfo);
							}
						}
						return diffProperties(domElement, type, oldProps, newProps);
					}
					function shouldSetTextContent(type, props) {
						return (
							type === "textarea" ||
							type === "option" ||
							type === "noscript" ||
							typeof props.children === "string" ||
							typeof props.children === "number" ||
							(typeof props.dangerouslySetInnerHTML === "object" &&
								props.dangerouslySetInnerHTML !== null &&
								props.dangerouslySetInnerHTML.__html != null)
						);
					}
					function createTextInstance(
						text,
						rootContainerInstance,
						hostContext,
						internalInstanceHandle
					) {
						{
							var hostContextDev = hostContext;
							validateDOMNesting(null, text, hostContextDev.ancestorInfo);
						}
						var textNode = createTextNode(text, rootContainerInstance);
						precacheFiberNode(internalInstanceHandle, textNode);
						return textNode;
					}
					var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
					var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
					var noTimeout = -1;
					function commitMount(domElement, type, newProps, internalInstanceHandle) {
						if (shouldAutoFocusHostComponent(type, newProps)) {
							domElement.focus();
						}
					}
					function commitUpdate(
						domElement,
						updatePayload,
						type,
						oldProps,
						newProps,
						internalInstanceHandle
					) {
						updateFiberProps(domElement, newProps);
						updateProperties(domElement, updatePayload, type, oldProps, newProps);
					}
					function resetTextContent(domElement) {
						setTextContent(domElement, "");
					}
					function commitTextUpdate(textInstance, oldText, newText) {
						textInstance.nodeValue = newText;
					}
					function appendChild(parentInstance, child) {
						parentInstance.appendChild(child);
					}
					function appendChildToContainer(container, child) {
						var parentNode;
						if (container.nodeType === COMMENT_NODE) {
							parentNode = container.parentNode;
							parentNode.insertBefore(child, container);
						} else {
							parentNode = container;
							parentNode.appendChild(child);
						}
						var reactRootContainer = container._reactRootContainer;
						if (
							(reactRootContainer === null || reactRootContainer === void 0) &&
							parentNode.onclick === null
						) {
							trapClickOnNonInteractiveElement(parentNode);
						}
					}
					function insertBefore(parentInstance, child, beforeChild) {
						parentInstance.insertBefore(child, beforeChild);
					}
					function insertInContainerBefore(container, child, beforeChild) {
						if (container.nodeType === COMMENT_NODE) {
							container.parentNode.insertBefore(child, beforeChild);
						} else {
							container.insertBefore(child, beforeChild);
						}
					}
					function removeChild(parentInstance, child) {
						parentInstance.removeChild(child);
					}
					function removeChildFromContainer(container, child) {
						if (container.nodeType === COMMENT_NODE) {
							container.parentNode.removeChild(child);
						} else {
							container.removeChild(child);
						}
					}
					function hideInstance(instance) {
						instance = instance;
						var style2 = instance.style;
						if (typeof style2.setProperty === "function") {
							style2.setProperty("display", "none", "important");
						} else {
							style2.display = "none";
						}
					}
					function hideTextInstance(textInstance) {
						textInstance.nodeValue = "";
					}
					function unhideInstance(instance, props) {
						instance = instance;
						var styleProp = props[STYLE$1];
						var display =
							styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display")
								? styleProp.display
								: null;
						instance.style.display = dangerousStyleValue("display", display);
					}
					function unhideTextInstance(textInstance, text) {
						textInstance.nodeValue = text;
					}
					function clearContainer(container) {
						if (container.nodeType === ELEMENT_NODE) {
							container.textContent = "";
						} else if (container.nodeType === DOCUMENT_NODE) {
							var body = container.body;
							if (body != null) {
								body.textContent = "";
							}
						}
					}
					function canHydrateInstance(instance, type, props) {
						if (
							instance.nodeType !== ELEMENT_NODE ||
							type.toLowerCase() !== instance.nodeName.toLowerCase()
						) {
							return null;
						}
						return instance;
					}
					function canHydrateTextInstance(instance, text) {
						if (text === "" || instance.nodeType !== TEXT_NODE) {
							return null;
						}
						return instance;
					}
					function isSuspenseInstancePending(instance) {
						return instance.data === SUSPENSE_PENDING_START_DATA;
					}
					function isSuspenseInstanceFallback(instance) {
						return instance.data === SUSPENSE_FALLBACK_START_DATA;
					}
					function getNextHydratable(node) {
						for (; node != null; node = node.nextSibling) {
							var nodeType = node.nodeType;
							if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
								break;
							}
						}
						return node;
					}
					function getNextHydratableSibling(instance) {
						return getNextHydratable(instance.nextSibling);
					}
					function getFirstHydratableChild(parentInstance) {
						return getNextHydratable(parentInstance.firstChild);
					}
					function hydrateInstance(
						instance,
						type,
						props,
						rootContainerInstance,
						hostContext,
						internalInstanceHandle
					) {
						precacheFiberNode(internalInstanceHandle, instance);
						updateFiberProps(instance, props);
						var parentNamespace;
						{
							var hostContextDev = hostContext;
							parentNamespace = hostContextDev.namespace;
						}
						return diffHydratedProperties(instance, type, props, parentNamespace);
					}
					function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
						precacheFiberNode(internalInstanceHandle, textInstance);
						return diffHydratedText(textInstance, text);
					}
					function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
						var node = suspenseInstance.nextSibling;
						var depth = 0;
						while (node) {
							if (node.nodeType === COMMENT_NODE) {
								var data = node.data;
								if (data === SUSPENSE_END_DATA) {
									if (depth === 0) {
										return getNextHydratableSibling(node);
									} else {
										depth--;
									}
								} else if (
									data === SUSPENSE_START_DATA ||
									data === SUSPENSE_FALLBACK_START_DATA ||
									data === SUSPENSE_PENDING_START_DATA
								) {
									depth++;
								}
							}
							node = node.nextSibling;
						}
						return null;
					}
					function getParentSuspenseInstance(targetInstance) {
						var node = targetInstance.previousSibling;
						var depth = 0;
						while (node) {
							if (node.nodeType === COMMENT_NODE) {
								var data = node.data;
								if (
									data === SUSPENSE_START_DATA ||
									data === SUSPENSE_FALLBACK_START_DATA ||
									data === SUSPENSE_PENDING_START_DATA
								) {
									if (depth === 0) {
										return node;
									} else {
										depth--;
									}
								} else if (data === SUSPENSE_END_DATA) {
									depth++;
								}
							}
							node = node.previousSibling;
						}
						return null;
					}
					function commitHydratedContainer(container) {
						retryIfBlockedOn(container);
					}
					function commitHydratedSuspenseInstance(suspenseInstance) {
						retryIfBlockedOn(suspenseInstance);
					}
					function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
						{
							warnForUnmatchedText(textInstance, text);
						}
					}
					function didNotMatchHydratedTextInstance(
						parentType,
						parentProps,
						parentInstance,
						textInstance,
						text
					) {
						if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
							warnForUnmatchedText(textInstance, text);
						}
					}
					function didNotHydrateContainerInstance(parentContainer, instance) {
						{
							if (instance.nodeType === ELEMENT_NODE) {
								warnForDeletedHydratableElement(parentContainer, instance);
							} else if (instance.nodeType === COMMENT_NODE);
							else {
								warnForDeletedHydratableText(parentContainer, instance);
							}
						}
					}
					function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
						if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
							if (instance.nodeType === ELEMENT_NODE) {
								warnForDeletedHydratableElement(parentInstance, instance);
							} else if (instance.nodeType === COMMENT_NODE);
							else {
								warnForDeletedHydratableText(parentInstance, instance);
							}
						}
					}
					function didNotFindHydratableContainerInstance(parentContainer, type, props) {
						{
							warnForInsertedHydratedElement(parentContainer, type);
						}
					}
					function didNotFindHydratableContainerTextInstance(parentContainer, text) {
						{
							warnForInsertedHydratedText(parentContainer, text);
						}
					}
					function didNotFindHydratableInstance(
						parentType,
						parentProps,
						parentInstance,
						type,
						props
					) {
						if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
							warnForInsertedHydratedElement(parentInstance, type);
						}
					}
					function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
						if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
							warnForInsertedHydratedText(parentInstance, text);
						}
					}
					function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
						if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true);
					}
					var clientId = 0;
					function makeClientIdInDEV(warnOnAccessInDEV) {
						var id = "r:" + (clientId++).toString(36);
						return {
							toString: function () {
								warnOnAccessInDEV();
								return id;
							},
							valueOf: function () {
								warnOnAccessInDEV();
								return id;
							},
						};
					}
					function isOpaqueHydratingObject(value) {
						return (
							value !== null && typeof value === "object" && value.$$typeof === REACT_OPAQUE_ID_TYPE
						);
					}
					function makeOpaqueHydratingObject(attemptToReadValue) {
						return {
							$$typeof: REACT_OPAQUE_ID_TYPE,
							toString: attemptToReadValue,
							valueOf: attemptToReadValue,
						};
					}
					function preparePortalMount(portalInstance) {
						{
							listenToAllSupportedEvents(portalInstance);
						}
					}
					var randomKey = Math.random().toString(36).slice(2);
					var internalInstanceKey = "__reactFiber$" + randomKey;
					var internalPropsKey = "__reactProps$" + randomKey;
					var internalContainerInstanceKey = "__reactContainer$" + randomKey;
					var internalEventHandlersKey = "__reactEvents$" + randomKey;
					function precacheFiberNode(hostInst, node) {
						node[internalInstanceKey] = hostInst;
					}
					function markContainerAsRoot(hostRoot, node) {
						node[internalContainerInstanceKey] = hostRoot;
					}
					function unmarkContainerAsRoot(node) {
						node[internalContainerInstanceKey] = null;
					}
					function isContainerMarkedAsRoot(node) {
						return !!node[internalContainerInstanceKey];
					}
					function getClosestInstanceFromNode(targetNode) {
						var targetInst = targetNode[internalInstanceKey];
						if (targetInst) {
							return targetInst;
						}
						var parentNode = targetNode.parentNode;
						while (parentNode) {
							targetInst =
								parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
							if (targetInst) {
								var alternate = targetInst.alternate;
								if (targetInst.child !== null || (alternate !== null && alternate.child !== null)) {
									var suspenseInstance = getParentSuspenseInstance(targetNode);
									while (suspenseInstance !== null) {
										var targetSuspenseInst = suspenseInstance[internalInstanceKey];
										if (targetSuspenseInst) {
											return targetSuspenseInst;
										}
										suspenseInstance = getParentSuspenseInstance(suspenseInstance);
									}
								}
								return targetInst;
							}
							targetNode = parentNode;
							parentNode = targetNode.parentNode;
						}
						return null;
					}
					function getInstanceFromNode(node) {
						var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
						if (inst) {
							if (
								inst.tag === HostComponent ||
								inst.tag === HostText ||
								inst.tag === SuspenseComponent ||
								inst.tag === HostRoot
							) {
								return inst;
							} else {
								return null;
							}
						}
						return null;
					}
					function getNodeFromInstance(inst) {
						if (inst.tag === HostComponent || inst.tag === HostText) {
							return inst.stateNode;
						}
						{
							{
								throw Error("getNodeFromInstance: Invalid argument.");
							}
						}
					}
					function getFiberCurrentPropsFromNode(node) {
						return node[internalPropsKey] || null;
					}
					function updateFiberProps(node, props) {
						node[internalPropsKey] = props;
					}
					function getEventListenerSet(node) {
						var elementListenerSet = node[internalEventHandlersKey];
						if (elementListenerSet === void 0) {
							elementListenerSet = node[internalEventHandlersKey] = new Set();
						}
						return elementListenerSet;
					}
					var loggedTypeFailures = {};
					var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
					function setCurrentlyValidatingElement(element) {
						{
							if (element) {
								var owner = element._owner;
								var stack = describeUnknownElementTypeFrameInDEV(
									element.type,
									element._source,
									owner ? owner.type : null
								);
								ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
							} else {
								ReactDebugCurrentFrame$1.setExtraStackFrame(null);
							}
						}
					}
					function checkPropTypes(typeSpecs, values, location, componentName, element) {
						{
							var has3 = Function.call.bind(Object.prototype.hasOwnProperty);
							for (var typeSpecName in typeSpecs) {
								if (has3(typeSpecs, typeSpecName)) {
									var error$1 = void 0;
									try {
										if (typeof typeSpecs[typeSpecName] !== "function") {
											var err = Error(
												(componentName || "React class") +
													": " +
													location +
													" type `" +
													typeSpecName +
													"` is invalid; it must be a function, usually from the `prop-types` package, but received `" +
													typeof typeSpecs[typeSpecName] +
													"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
											);
											err.name = "Invariant Violation";
											throw err;
										}
										error$1 = typeSpecs[typeSpecName](
											values,
											typeSpecName,
											componentName,
											location,
											null,
											"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"
										);
									} catch (ex) {
										error$1 = ex;
									}
									if (error$1 && !(error$1 instanceof Error)) {
										setCurrentlyValidatingElement(element);
										error3(
											"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",
											componentName || "React class",
											location,
											typeSpecName,
											typeof error$1
										);
										setCurrentlyValidatingElement(null);
									}
									if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
										loggedTypeFailures[error$1.message] = true;
										setCurrentlyValidatingElement(element);
										error3("Failed %s type: %s", location, error$1.message);
										setCurrentlyValidatingElement(null);
									}
								}
							}
						}
					}
					var valueStack = [];
					var fiberStack;
					{
						fiberStack = [];
					}
					var index2 = -1;
					function createCursor(defaultValue) {
						return {
							current: defaultValue,
						};
					}
					function pop(cursor, fiber) {
						if (index2 < 0) {
							{
								error3("Unexpected pop.");
							}
							return;
						}
						{
							if (fiber !== fiberStack[index2]) {
								error3("Unexpected Fiber popped.");
							}
						}
						cursor.current = valueStack[index2];
						valueStack[index2] = null;
						{
							fiberStack[index2] = null;
						}
						index2--;
					}
					function push(cursor, value, fiber) {
						index2++;
						valueStack[index2] = cursor.current;
						{
							fiberStack[index2] = fiber;
						}
						cursor.current = value;
					}
					var warnedAboutMissingGetChildContext;
					{
						warnedAboutMissingGetChildContext = {};
					}
					var emptyContextObject = {};
					{
						Object.freeze(emptyContextObject);
					}
					var contextStackCursor = createCursor(emptyContextObject);
					var didPerformWorkStackCursor = createCursor(false);
					var previousContext = emptyContextObject;
					function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
						{
							if (didPushOwnContextIfProvider && isContextProvider(Component)) {
								return previousContext;
							}
							return contextStackCursor.current;
						}
					}
					function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
						{
							var instance = workInProgress2.stateNode;
							instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
							instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
						}
					}
					function getMaskedContext(workInProgress2, unmaskedContext) {
						{
							var type = workInProgress2.type;
							var contextTypes = type.contextTypes;
							if (!contextTypes) {
								return emptyContextObject;
							}
							var instance = workInProgress2.stateNode;
							if (
								instance &&
								instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext
							) {
								return instance.__reactInternalMemoizedMaskedChildContext;
							}
							var context = {};
							for (var key in contextTypes) {
								context[key] = unmaskedContext[key];
							}
							{
								var name2 = getComponentName(type) || "Unknown";
								checkPropTypes(contextTypes, context, "context", name2);
							}
							if (instance) {
								cacheContext(workInProgress2, unmaskedContext, context);
							}
							return context;
						}
					}
					function hasContextChanged() {
						{
							return didPerformWorkStackCursor.current;
						}
					}
					function isContextProvider(type) {
						{
							var childContextTypes = type.childContextTypes;
							return childContextTypes !== null && childContextTypes !== void 0;
						}
					}
					function popContext(fiber) {
						{
							pop(didPerformWorkStackCursor, fiber);
							pop(contextStackCursor, fiber);
						}
					}
					function popTopLevelContextObject(fiber) {
						{
							pop(didPerformWorkStackCursor, fiber);
							pop(contextStackCursor, fiber);
						}
					}
					function pushTopLevelContextObject(fiber, context, didChange) {
						{
							if (!(contextStackCursor.current === emptyContextObject)) {
								{
									throw Error(
										"Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue."
									);
								}
							}
							push(contextStackCursor, context, fiber);
							push(didPerformWorkStackCursor, didChange, fiber);
						}
					}
					function processChildContext(fiber, type, parentContext) {
						{
							var instance = fiber.stateNode;
							var childContextTypes = type.childContextTypes;
							if (typeof instance.getChildContext !== "function") {
								{
									var componentName = getComponentName(type) || "Unknown";
									if (!warnedAboutMissingGetChildContext[componentName]) {
										warnedAboutMissingGetChildContext[componentName] = true;
										error3(
											"%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.",
											componentName,
											componentName
										);
									}
								}
								return parentContext;
							}
							var childContext = instance.getChildContext();
							for (var contextKey in childContext) {
								if (!(contextKey in childContextTypes)) {
									{
										throw Error(
											(getComponentName(type) || "Unknown") +
												'.getChildContext(): key "' +
												contextKey +
												'" is not defined in childContextTypes.'
										);
									}
								}
							}
							{
								var name2 = getComponentName(type) || "Unknown";
								checkPropTypes(childContextTypes, childContext, "child context", name2);
							}
							return _assign({}, parentContext, childContext);
						}
					}
					function pushContextProvider(workInProgress2) {
						{
							var instance = workInProgress2.stateNode;
							var memoizedMergedChildContext =
								(instance && instance.__reactInternalMemoizedMergedChildContext) ||
								emptyContextObject;
							previousContext = contextStackCursor.current;
							push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
							push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
							return true;
						}
					}
					function invalidateContextProvider(workInProgress2, type, didChange) {
						{
							var instance = workInProgress2.stateNode;
							if (!instance) {
								{
									throw Error(
										"Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue."
									);
								}
							}
							if (didChange) {
								var mergedContext = processChildContext(workInProgress2, type, previousContext);
								instance.__reactInternalMemoizedMergedChildContext = mergedContext;
								pop(didPerformWorkStackCursor, workInProgress2);
								pop(contextStackCursor, workInProgress2);
								push(contextStackCursor, mergedContext, workInProgress2);
								push(didPerformWorkStackCursor, didChange, workInProgress2);
							} else {
								pop(didPerformWorkStackCursor, workInProgress2);
								push(didPerformWorkStackCursor, didChange, workInProgress2);
							}
						}
					}
					function findCurrentUnmaskedContext(fiber) {
						{
							if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
								{
									throw Error(
										"Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue."
									);
								}
							}
							var node = fiber;
							do {
								switch (node.tag) {
									case HostRoot:
										return node.stateNode.context;
									case ClassComponent: {
										var Component = node.type;
										if (isContextProvider(Component)) {
											return node.stateNode.__reactInternalMemoizedMergedChildContext;
										}
										break;
									}
								}
								node = node.return;
							} while (node !== null);
							{
								{
									throw Error(
										"Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue."
									);
								}
							}
						}
					}
					var LegacyRoot = 0;
					var BlockingRoot = 1;
					var ConcurrentRoot = 2;
					var rendererID = null;
					var injectedHook = null;
					var hasLoggedError = false;
					var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
					function injectInternals(internals) {
						if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
							return false;
						}
						var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
						if (hook.isDisabled) {
							return true;
						}
						if (!hook.supportsFiber) {
							{
								error3(
									"The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools"
								);
							}
							return true;
						}
						try {
							rendererID = hook.inject(internals);
							injectedHook = hook;
						} catch (err) {
							{
								error3("React instrumentation encountered an error: %s.", err);
							}
						}
						return true;
					}
					function onScheduleRoot(root2, children2) {
						{
							if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
								try {
									injectedHook.onScheduleFiberRoot(rendererID, root2, children2);
								} catch (err) {
									if (!hasLoggedError) {
										hasLoggedError = true;
										error3("React instrumentation encountered an error: %s", err);
									}
								}
							}
						}
					}
					function onCommitRoot(root2, priorityLevel) {
						if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
							try {
								var didError = (root2.current.flags & DidCapture) === DidCapture;
								if (enableProfilerTimer) {
									injectedHook.onCommitFiberRoot(rendererID, root2, priorityLevel, didError);
								} else {
									injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
								}
							} catch (err) {
								{
									if (!hasLoggedError) {
										hasLoggedError = true;
										error3("React instrumentation encountered an error: %s", err);
									}
								}
							}
						}
					}
					function onCommitUnmount(fiber) {
						if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
							try {
								injectedHook.onCommitFiberUnmount(rendererID, fiber);
							} catch (err) {
								{
									if (!hasLoggedError) {
										hasLoggedError = true;
										error3("React instrumentation encountered an error: %s", err);
									}
								}
							}
						}
					}
					var Scheduler_runWithPriority = Scheduler2.unstable_runWithPriority,
						Scheduler_scheduleCallback = Scheduler2.unstable_scheduleCallback,
						Scheduler_cancelCallback = Scheduler2.unstable_cancelCallback,
						Scheduler_shouldYield = Scheduler2.unstable_shouldYield,
						Scheduler_requestPaint = Scheduler2.unstable_requestPaint,
						Scheduler_now$1 = Scheduler2.unstable_now,
						Scheduler_getCurrentPriorityLevel = Scheduler2.unstable_getCurrentPriorityLevel,
						Scheduler_ImmediatePriority = Scheduler2.unstable_ImmediatePriority,
						Scheduler_UserBlockingPriority = Scheduler2.unstable_UserBlockingPriority,
						Scheduler_NormalPriority = Scheduler2.unstable_NormalPriority,
						Scheduler_LowPriority = Scheduler2.unstable_LowPriority,
						Scheduler_IdlePriority = Scheduler2.unstable_IdlePriority;
					{
						if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
							{
								throw Error(
									"It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling"
								);
							}
						}
					}
					var fakeCallbackNode = {};
					var ImmediatePriority$1 = 99;
					var UserBlockingPriority$2 = 98;
					var NormalPriority$1 = 97;
					var LowPriority$1 = 96;
					var IdlePriority$1 = 95;
					var NoPriority$1 = 90;
					var shouldYield = Scheduler_shouldYield;
					var requestPaint =
						Scheduler_requestPaint !== void 0 ? Scheduler_requestPaint : function () {};
					var syncQueue = null;
					var immediateQueueCallbackNode = null;
					var isFlushingSyncQueue = false;
					var initialTimeMs$1 = Scheduler_now$1();
					var now =
						initialTimeMs$1 < 1e4
							? Scheduler_now$1
							: function () {
									return Scheduler_now$1() - initialTimeMs$1;
							  };
					function getCurrentPriorityLevel() {
						switch (Scheduler_getCurrentPriorityLevel()) {
							case Scheduler_ImmediatePriority:
								return ImmediatePriority$1;
							case Scheduler_UserBlockingPriority:
								return UserBlockingPriority$2;
							case Scheduler_NormalPriority:
								return NormalPriority$1;
							case Scheduler_LowPriority:
								return LowPriority$1;
							case Scheduler_IdlePriority:
								return IdlePriority$1;
							default: {
								{
									throw Error("Unknown priority level.");
								}
							}
						}
					}
					function reactPriorityToSchedulerPriority(reactPriorityLevel) {
						switch (reactPriorityLevel) {
							case ImmediatePriority$1:
								return Scheduler_ImmediatePriority;
							case UserBlockingPriority$2:
								return Scheduler_UserBlockingPriority;
							case NormalPriority$1:
								return Scheduler_NormalPriority;
							case LowPriority$1:
								return Scheduler_LowPriority;
							case IdlePriority$1:
								return Scheduler_IdlePriority;
							default: {
								{
									throw Error("Unknown priority level.");
								}
							}
						}
					}
					function runWithPriority$1(reactPriorityLevel, fn) {
						var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
						return Scheduler_runWithPriority(priorityLevel, fn);
					}
					function scheduleCallback(reactPriorityLevel, callback, options2) {
						var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
						return Scheduler_scheduleCallback(priorityLevel, callback, options2);
					}
					function scheduleSyncCallback(callback) {
						if (syncQueue === null) {
							syncQueue = [callback];
							immediateQueueCallbackNode = Scheduler_scheduleCallback(
								Scheduler_ImmediatePriority,
								flushSyncCallbackQueueImpl
							);
						} else {
							syncQueue.push(callback);
						}
						return fakeCallbackNode;
					}
					function cancelCallback(callbackNode) {
						if (callbackNode !== fakeCallbackNode) {
							Scheduler_cancelCallback(callbackNode);
						}
					}
					function flushSyncCallbackQueue() {
						if (immediateQueueCallbackNode !== null) {
							var node = immediateQueueCallbackNode;
							immediateQueueCallbackNode = null;
							Scheduler_cancelCallback(node);
						}
						flushSyncCallbackQueueImpl();
					}
					function flushSyncCallbackQueueImpl() {
						if (!isFlushingSyncQueue && syncQueue !== null) {
							isFlushingSyncQueue = true;
							var i = 0;
							{
								try {
									var _isSync2 = true;
									var _queue = syncQueue;
									runWithPriority$1(ImmediatePriority$1, function () {
										for (; i < _queue.length; i++) {
											var callback = _queue[i];
											do {
												callback = callback(_isSync2);
											} while (callback !== null);
										}
									});
									syncQueue = null;
								} catch (error4) {
									if (syncQueue !== null) {
										syncQueue = syncQueue.slice(i + 1);
									}
									Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
									throw error4;
								} finally {
									isFlushingSyncQueue = false;
								}
							}
						}
					}
					var ReactVersion = "17.0.2";
					var NoMode = 0;
					var StrictMode = 1;
					var BlockingMode = 2;
					var ConcurrentMode = 4;
					var ProfileMode = 8;
					var DebugTracingMode = 16;
					var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
					var NoTransition = 0;
					function requestCurrentTransition() {
						return ReactCurrentBatchConfig.transition;
					}
					var ReactStrictModeWarnings = {
						recordUnsafeLifecycleWarnings: function (fiber, instance) {},
						flushPendingUnsafeLifecycleWarnings: function () {},
						recordLegacyContextWarning: function (fiber, instance) {},
						flushLegacyContextWarning: function () {},
						discardPendingWarnings: function () {},
					};
					{
						var findStrictRoot = function (fiber) {
							var maybeStrictRoot = null;
							var node = fiber;
							while (node !== null) {
								if (node.mode & StrictMode) {
									maybeStrictRoot = node;
								}
								node = node.return;
							}
							return maybeStrictRoot;
						};
						var setToSortedString = function (set3) {
							var array = [];
							set3.forEach(function (value) {
								array.push(value);
							});
							return array.sort().join(", ");
						};
						var pendingComponentWillMountWarnings = [];
						var pendingUNSAFE_ComponentWillMountWarnings = [];
						var pendingComponentWillReceivePropsWarnings = [];
						var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
						var pendingComponentWillUpdateWarnings = [];
						var pendingUNSAFE_ComponentWillUpdateWarnings = [];
						var didWarnAboutUnsafeLifecycles = new Set();
						ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
							if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
								return;
							}
							if (
								typeof instance.componentWillMount === "function" &&
								instance.componentWillMount.__suppressDeprecationWarning !== true
							) {
								pendingComponentWillMountWarnings.push(fiber);
							}
							if (
								fiber.mode & StrictMode &&
								typeof instance.UNSAFE_componentWillMount === "function"
							) {
								pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
							}
							if (
								typeof instance.componentWillReceiveProps === "function" &&
								instance.componentWillReceiveProps.__suppressDeprecationWarning !== true
							) {
								pendingComponentWillReceivePropsWarnings.push(fiber);
							}
							if (
								fiber.mode & StrictMode &&
								typeof instance.UNSAFE_componentWillReceiveProps === "function"
							) {
								pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
							}
							if (
								typeof instance.componentWillUpdate === "function" &&
								instance.componentWillUpdate.__suppressDeprecationWarning !== true
							) {
								pendingComponentWillUpdateWarnings.push(fiber);
							}
							if (
								fiber.mode & StrictMode &&
								typeof instance.UNSAFE_componentWillUpdate === "function"
							) {
								pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
							}
						};
						ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
							var componentWillMountUniqueNames = new Set();
							if (pendingComponentWillMountWarnings.length > 0) {
								pendingComponentWillMountWarnings.forEach(function (fiber) {
									componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
									didWarnAboutUnsafeLifecycles.add(fiber.type);
								});
								pendingComponentWillMountWarnings = [];
							}
							var UNSAFE_componentWillMountUniqueNames = new Set();
							if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
								pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
									UNSAFE_componentWillMountUniqueNames.add(
										getComponentName(fiber.type) || "Component"
									);
									didWarnAboutUnsafeLifecycles.add(fiber.type);
								});
								pendingUNSAFE_ComponentWillMountWarnings = [];
							}
							var componentWillReceivePropsUniqueNames = new Set();
							if (pendingComponentWillReceivePropsWarnings.length > 0) {
								pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
									componentWillReceivePropsUniqueNames.add(
										getComponentName(fiber.type) || "Component"
									);
									didWarnAboutUnsafeLifecycles.add(fiber.type);
								});
								pendingComponentWillReceivePropsWarnings = [];
							}
							var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
							if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
								pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
									UNSAFE_componentWillReceivePropsUniqueNames.add(
										getComponentName(fiber.type) || "Component"
									);
									didWarnAboutUnsafeLifecycles.add(fiber.type);
								});
								pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
							}
							var componentWillUpdateUniqueNames = new Set();
							if (pendingComponentWillUpdateWarnings.length > 0) {
								pendingComponentWillUpdateWarnings.forEach(function (fiber) {
									componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
									didWarnAboutUnsafeLifecycles.add(fiber.type);
								});
								pendingComponentWillUpdateWarnings = [];
							}
							var UNSAFE_componentWillUpdateUniqueNames = new Set();
							if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
								pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
									UNSAFE_componentWillUpdateUniqueNames.add(
										getComponentName(fiber.type) || "Component"
									);
									didWarnAboutUnsafeLifecycles.add(fiber.type);
								});
								pendingUNSAFE_ComponentWillUpdateWarnings = [];
							}
							if (UNSAFE_componentWillMountUniqueNames.size > 0) {
								var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
								error3(
									"Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s",
									sortedNames
								);
							}
							if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
								var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
								error3(
									"Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s",
									_sortedNames
								);
							}
							if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
								var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
								error3(
									"Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s",
									_sortedNames2
								);
							}
							if (componentWillMountUniqueNames.size > 0) {
								var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
								warn2(
									"componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",
									_sortedNames3
								);
							}
							if (componentWillReceivePropsUniqueNames.size > 0) {
								var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
								warn2(
									"componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",
									_sortedNames4
								);
							}
							if (componentWillUpdateUniqueNames.size > 0) {
								var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
								warn2(
									"componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",
									_sortedNames5
								);
							}
						};
						var pendingLegacyContextWarning = new Map();
						var didWarnAboutLegacyContext = new Set();
						ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
							var strictRoot = findStrictRoot(fiber);
							if (strictRoot === null) {
								error3(
									"Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue."
								);
								return;
							}
							if (didWarnAboutLegacyContext.has(fiber.type)) {
								return;
							}
							var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
							if (
								fiber.type.contextTypes != null ||
								fiber.type.childContextTypes != null ||
								(instance !== null && typeof instance.getChildContext === "function")
							) {
								if (warningsForRoot === void 0) {
									warningsForRoot = [];
									pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
								}
								warningsForRoot.push(fiber);
							}
						};
						ReactStrictModeWarnings.flushLegacyContextWarning = function () {
							pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
								if (fiberArray.length === 0) {
									return;
								}
								var firstFiber = fiberArray[0];
								var uniqueNames = new Set();
								fiberArray.forEach(function (fiber) {
									uniqueNames.add(getComponentName(fiber.type) || "Component");
									didWarnAboutLegacyContext.add(fiber.type);
								});
								var sortedNames = setToSortedString(uniqueNames);
								try {
									setCurrentFiber(firstFiber);
									error3(
										"Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context",
										sortedNames
									);
								} finally {
									resetCurrentFiber();
								}
							});
						};
						ReactStrictModeWarnings.discardPendingWarnings = function () {
							pendingComponentWillMountWarnings = [];
							pendingUNSAFE_ComponentWillMountWarnings = [];
							pendingComponentWillReceivePropsWarnings = [];
							pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
							pendingComponentWillUpdateWarnings = [];
							pendingUNSAFE_ComponentWillUpdateWarnings = [];
							pendingLegacyContextWarning = new Map();
						};
					}
					function resolveDefaultProps(Component, baseProps) {
						if (Component && Component.defaultProps) {
							var props = _assign({}, baseProps);
							var defaultProps = Component.defaultProps;
							for (var propName in defaultProps) {
								if (props[propName] === void 0) {
									props[propName] = defaultProps[propName];
								}
							}
							return props;
						}
						return baseProps;
					}
					var MAX_SIGNED_31_BIT_INT = 1073741823;
					var valueCursor = createCursor(null);
					var rendererSigil;
					{
						rendererSigil = {};
					}
					var currentlyRenderingFiber = null;
					var lastContextDependency = null;
					var lastContextWithAllBitsObserved = null;
					var isDisallowedContextReadInDEV = false;
					function resetContextDependencies() {
						currentlyRenderingFiber = null;
						lastContextDependency = null;
						lastContextWithAllBitsObserved = null;
						{
							isDisallowedContextReadInDEV = false;
						}
					}
					function enterDisallowedContextReadInDEV() {
						{
							isDisallowedContextReadInDEV = true;
						}
					}
					function exitDisallowedContextReadInDEV() {
						{
							isDisallowedContextReadInDEV = false;
						}
					}
					function pushProvider(providerFiber, nextValue) {
						var context = providerFiber.type._context;
						{
							push(valueCursor, context._currentValue, providerFiber);
							context._currentValue = nextValue;
							{
								if (
									context._currentRenderer !== void 0 &&
									context._currentRenderer !== null &&
									context._currentRenderer !== rendererSigil
								) {
									error3(
										"Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."
									);
								}
								context._currentRenderer = rendererSigil;
							}
						}
					}
					function popProvider(providerFiber) {
						var currentValue = valueCursor.current;
						pop(valueCursor, providerFiber);
						var context = providerFiber.type._context;
						{
							context._currentValue = currentValue;
						}
					}
					function calculateChangedBits(context, newValue, oldValue) {
						if (objectIs(oldValue, newValue)) {
							return 0;
						} else {
							var changedBits =
								typeof context._calculateChangedBits === "function"
									? context._calculateChangedBits(oldValue, newValue)
									: MAX_SIGNED_31_BIT_INT;
							{
								if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
									error3(
										"calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s",
										changedBits
									);
								}
							}
							return changedBits | 0;
						}
					}
					function scheduleWorkOnParentPath(parent, renderLanes2) {
						var node = parent;
						while (node !== null) {
							var alternate = node.alternate;
							if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
								node.childLanes = mergeLanes(node.childLanes, renderLanes2);
								if (alternate !== null) {
									alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
								}
							} else if (
								alternate !== null &&
								!isSubsetOfLanes(alternate.childLanes, renderLanes2)
							) {
								alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
							} else {
								break;
							}
							node = node.return;
						}
					}
					function propagateContextChange(workInProgress2, context, changedBits, renderLanes2) {
						var fiber = workInProgress2.child;
						if (fiber !== null) {
							fiber.return = workInProgress2;
						}
						while (fiber !== null) {
							var nextFiber = void 0;
							var list = fiber.dependencies;
							if (list !== null) {
								nextFiber = fiber.child;
								var dependency = list.firstContext;
								while (dependency !== null) {
									if (
										dependency.context === context &&
										(dependency.observedBits & changedBits) !== 0
									) {
										if (fiber.tag === ClassComponent) {
											var update2 = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes2));
											update2.tag = ForceUpdate;
											enqueueUpdate(fiber, update2);
										}
										fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
										var alternate = fiber.alternate;
										if (alternate !== null) {
											alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
										}
										scheduleWorkOnParentPath(fiber.return, renderLanes2);
										list.lanes = mergeLanes(list.lanes, renderLanes2);
										break;
									}
									dependency = dependency.next;
								}
							} else if (fiber.tag === ContextProvider) {
								nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
							} else {
								nextFiber = fiber.child;
							}
							if (nextFiber !== null) {
								nextFiber.return = fiber;
							} else {
								nextFiber = fiber;
								while (nextFiber !== null) {
									if (nextFiber === workInProgress2) {
										nextFiber = null;
										break;
									}
									var sibling = nextFiber.sibling;
									if (sibling !== null) {
										sibling.return = nextFiber.return;
										nextFiber = sibling;
										break;
									}
									nextFiber = nextFiber.return;
								}
							}
							fiber = nextFiber;
						}
					}
					function prepareToReadContext(workInProgress2, renderLanes2) {
						currentlyRenderingFiber = workInProgress2;
						lastContextDependency = null;
						lastContextWithAllBitsObserved = null;
						var dependencies2 = workInProgress2.dependencies;
						if (dependencies2 !== null) {
							var firstContext = dependencies2.firstContext;
							if (firstContext !== null) {
								if (includesSomeLane(dependencies2.lanes, renderLanes2)) {
									markWorkInProgressReceivedUpdate();
								}
								dependencies2.firstContext = null;
							}
						}
					}
					function readContext(context, observedBits) {
						{
							if (isDisallowedContextReadInDEV) {
								error3(
									"Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."
								);
							}
						}
						if (lastContextWithAllBitsObserved === context);
						else if (observedBits === false || observedBits === 0);
						else {
							var resolvedObservedBits;
							if (typeof observedBits !== "number" || observedBits === MAX_SIGNED_31_BIT_INT) {
								lastContextWithAllBitsObserved = context;
								resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
							} else {
								resolvedObservedBits = observedBits;
							}
							var contextItem = {
								context,
								observedBits: resolvedObservedBits,
								next: null,
							};
							if (lastContextDependency === null) {
								if (!(currentlyRenderingFiber !== null)) {
									{
										throw Error(
											"Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."
										);
									}
								}
								lastContextDependency = contextItem;
								currentlyRenderingFiber.dependencies = {
									lanes: NoLanes,
									firstContext: contextItem,
									responders: null,
								};
							} else {
								lastContextDependency = lastContextDependency.next = contextItem;
							}
						}
						return context._currentValue;
					}
					var UpdateState = 0;
					var ReplaceState = 1;
					var ForceUpdate = 2;
					var CaptureUpdate = 3;
					var hasForceUpdate = false;
					var didWarnUpdateInsideUpdate;
					var currentlyProcessingQueue;
					{
						didWarnUpdateInsideUpdate = false;
						currentlyProcessingQueue = null;
					}
					function initializeUpdateQueue(fiber) {
						var queue = {
							baseState: fiber.memoizedState,
							firstBaseUpdate: null,
							lastBaseUpdate: null,
							shared: {
								pending: null,
							},
							effects: null,
						};
						fiber.updateQueue = queue;
					}
					function cloneUpdateQueue(current2, workInProgress2) {
						var queue = workInProgress2.updateQueue;
						var currentQueue = current2.updateQueue;
						if (queue === currentQueue) {
							var clone = {
								baseState: currentQueue.baseState,
								firstBaseUpdate: currentQueue.firstBaseUpdate,
								lastBaseUpdate: currentQueue.lastBaseUpdate,
								shared: currentQueue.shared,
								effects: currentQueue.effects,
							};
							workInProgress2.updateQueue = clone;
						}
					}
					function createUpdate(eventTime, lane) {
						var update2 = {
							eventTime,
							lane,
							tag: UpdateState,
							payload: null,
							callback: null,
							next: null,
						};
						return update2;
					}
					function enqueueUpdate(fiber, update2) {
						var updateQueue = fiber.updateQueue;
						if (updateQueue === null) {
							return;
						}
						var sharedQueue = updateQueue.shared;
						var pending = sharedQueue.pending;
						if (pending === null) {
							update2.next = update2;
						} else {
							update2.next = pending.next;
							pending.next = update2;
						}
						sharedQueue.pending = update2;
						{
							if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
								error3(
									"An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback."
								);
								didWarnUpdateInsideUpdate = true;
							}
						}
					}
					function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
						var queue = workInProgress2.updateQueue;
						var current2 = workInProgress2.alternate;
						if (current2 !== null) {
							var currentQueue = current2.updateQueue;
							if (queue === currentQueue) {
								var newFirst = null;
								var newLast = null;
								var firstBaseUpdate = queue.firstBaseUpdate;
								if (firstBaseUpdate !== null) {
									var update2 = firstBaseUpdate;
									do {
										var clone = {
											eventTime: update2.eventTime,
											lane: update2.lane,
											tag: update2.tag,
											payload: update2.payload,
											callback: update2.callback,
											next: null,
										};
										if (newLast === null) {
											newFirst = newLast = clone;
										} else {
											newLast.next = clone;
											newLast = clone;
										}
										update2 = update2.next;
									} while (update2 !== null);
									if (newLast === null) {
										newFirst = newLast = capturedUpdate;
									} else {
										newLast.next = capturedUpdate;
										newLast = capturedUpdate;
									}
								} else {
									newFirst = newLast = capturedUpdate;
								}
								queue = {
									baseState: currentQueue.baseState,
									firstBaseUpdate: newFirst,
									lastBaseUpdate: newLast,
									shared: currentQueue.shared,
									effects: currentQueue.effects,
								};
								workInProgress2.updateQueue = queue;
								return;
							}
						}
						var lastBaseUpdate = queue.lastBaseUpdate;
						if (lastBaseUpdate === null) {
							queue.firstBaseUpdate = capturedUpdate;
						} else {
							lastBaseUpdate.next = capturedUpdate;
						}
						queue.lastBaseUpdate = capturedUpdate;
					}
					function getStateFromUpdate(
						workInProgress2,
						queue,
						update2,
						prevState,
						nextProps,
						instance
					) {
						switch (update2.tag) {
							case ReplaceState: {
								var payload = update2.payload;
								if (typeof payload === "function") {
									{
										enterDisallowedContextReadInDEV();
									}
									var nextState = payload.call(instance, prevState, nextProps);
									{
										if (workInProgress2.mode & StrictMode) {
											disableLogs();
											try {
												payload.call(instance, prevState, nextProps);
											} finally {
												reenableLogs();
											}
										}
										exitDisallowedContextReadInDEV();
									}
									return nextState;
								}
								return payload;
							}
							case CaptureUpdate: {
								workInProgress2.flags = (workInProgress2.flags & ~ShouldCapture) | DidCapture;
							}
							case UpdateState: {
								var _payload = update2.payload;
								var partialState;
								if (typeof _payload === "function") {
									{
										enterDisallowedContextReadInDEV();
									}
									partialState = _payload.call(instance, prevState, nextProps);
									{
										if (workInProgress2.mode & StrictMode) {
											disableLogs();
											try {
												_payload.call(instance, prevState, nextProps);
											} finally {
												reenableLogs();
											}
										}
										exitDisallowedContextReadInDEV();
									}
								} else {
									partialState = _payload;
								}
								if (partialState === null || partialState === void 0) {
									return prevState;
								}
								return _assign({}, prevState, partialState);
							}
							case ForceUpdate: {
								hasForceUpdate = true;
								return prevState;
							}
						}
						return prevState;
					}
					function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
						var queue = workInProgress2.updateQueue;
						hasForceUpdate = false;
						{
							currentlyProcessingQueue = queue.shared;
						}
						var firstBaseUpdate = queue.firstBaseUpdate;
						var lastBaseUpdate = queue.lastBaseUpdate;
						var pendingQueue = queue.shared.pending;
						if (pendingQueue !== null) {
							queue.shared.pending = null;
							var lastPendingUpdate = pendingQueue;
							var firstPendingUpdate = lastPendingUpdate.next;
							lastPendingUpdate.next = null;
							if (lastBaseUpdate === null) {
								firstBaseUpdate = firstPendingUpdate;
							} else {
								lastBaseUpdate.next = firstPendingUpdate;
							}
							lastBaseUpdate = lastPendingUpdate;
							var current2 = workInProgress2.alternate;
							if (current2 !== null) {
								var currentQueue = current2.updateQueue;
								var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
								if (currentLastBaseUpdate !== lastBaseUpdate) {
									if (currentLastBaseUpdate === null) {
										currentQueue.firstBaseUpdate = firstPendingUpdate;
									} else {
										currentLastBaseUpdate.next = firstPendingUpdate;
									}
									currentQueue.lastBaseUpdate = lastPendingUpdate;
								}
							}
						}
						if (firstBaseUpdate !== null) {
							var newState = queue.baseState;
							var newLanes = NoLanes;
							var newBaseState = null;
							var newFirstBaseUpdate = null;
							var newLastBaseUpdate = null;
							var update2 = firstBaseUpdate;
							do {
								var updateLane = update2.lane;
								var updateEventTime = update2.eventTime;
								if (!isSubsetOfLanes(renderLanes2, updateLane)) {
									var clone = {
										eventTime: updateEventTime,
										lane: updateLane,
										tag: update2.tag,
										payload: update2.payload,
										callback: update2.callback,
										next: null,
									};
									if (newLastBaseUpdate === null) {
										newFirstBaseUpdate = newLastBaseUpdate = clone;
										newBaseState = newState;
									} else {
										newLastBaseUpdate = newLastBaseUpdate.next = clone;
									}
									newLanes = mergeLanes(newLanes, updateLane);
								} else {
									if (newLastBaseUpdate !== null) {
										var _clone = {
											eventTime: updateEventTime,
											lane: NoLane,
											tag: update2.tag,
											payload: update2.payload,
											callback: update2.callback,
											next: null,
										};
										newLastBaseUpdate = newLastBaseUpdate.next = _clone;
									}
									newState = getStateFromUpdate(
										workInProgress2,
										queue,
										update2,
										newState,
										props,
										instance
									);
									var callback = update2.callback;
									if (callback !== null) {
										workInProgress2.flags |= Callback;
										var effects = queue.effects;
										if (effects === null) {
											queue.effects = [update2];
										} else {
											effects.push(update2);
										}
									}
								}
								update2 = update2.next;
								if (update2 === null) {
									pendingQueue = queue.shared.pending;
									if (pendingQueue === null) {
										break;
									} else {
										var _lastPendingUpdate = pendingQueue;
										var _firstPendingUpdate = _lastPendingUpdate.next;
										_lastPendingUpdate.next = null;
										update2 = _firstPendingUpdate;
										queue.lastBaseUpdate = _lastPendingUpdate;
										queue.shared.pending = null;
									}
								}
							} while (true);
							if (newLastBaseUpdate === null) {
								newBaseState = newState;
							}
							queue.baseState = newBaseState;
							queue.firstBaseUpdate = newFirstBaseUpdate;
							queue.lastBaseUpdate = newLastBaseUpdate;
							markSkippedUpdateLanes(newLanes);
							workInProgress2.lanes = newLanes;
							workInProgress2.memoizedState = newState;
						}
						{
							currentlyProcessingQueue = null;
						}
					}
					function callCallback(callback, context) {
						if (!(typeof callback === "function")) {
							{
								throw Error(
									"Invalid argument passed as callback. Expected a function. Instead received: " +
										callback
								);
							}
						}
						callback.call(context);
					}
					function resetHasForceUpdateBeforeProcessing() {
						hasForceUpdate = false;
					}
					function checkHasForceUpdateAfterProcessing() {
						return hasForceUpdate;
					}
					function commitUpdateQueue(finishedWork, finishedQueue, instance) {
						var effects = finishedQueue.effects;
						finishedQueue.effects = null;
						if (effects !== null) {
							for (var i = 0; i < effects.length; i++) {
								var effect = effects[i];
								var callback = effect.callback;
								if (callback !== null) {
									effect.callback = null;
									callCallback(callback, instance);
								}
							}
						}
					}
					var fakeInternalInstance = {};
					var isArray2 = Array.isArray;
					var emptyRefsObject = new React27.Component().refs;
					var didWarnAboutStateAssignmentForComponent;
					var didWarnAboutUninitializedState;
					var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
					var didWarnAboutLegacyLifecyclesAndDerivedState;
					var didWarnAboutUndefinedDerivedState;
					var warnOnUndefinedDerivedState;
					var warnOnInvalidCallback;
					var didWarnAboutDirectlyAssigningPropsToState;
					var didWarnAboutContextTypeAndContextTypes;
					var didWarnAboutInvalidateContextType;
					{
						didWarnAboutStateAssignmentForComponent = new Set();
						didWarnAboutUninitializedState = new Set();
						didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
						didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
						didWarnAboutDirectlyAssigningPropsToState = new Set();
						didWarnAboutUndefinedDerivedState = new Set();
						didWarnAboutContextTypeAndContextTypes = new Set();
						didWarnAboutInvalidateContextType = new Set();
						var didWarnOnInvalidCallback = new Set();
						warnOnInvalidCallback = function (callback, callerName) {
							if (callback === null || typeof callback === "function") {
								return;
							}
							var key = callerName + "_" + callback;
							if (!didWarnOnInvalidCallback.has(key)) {
								didWarnOnInvalidCallback.add(key);
								error3(
									"%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.",
									callerName,
									callback
								);
							}
						};
						warnOnUndefinedDerivedState = function (type, partialState) {
							if (partialState === void 0) {
								var componentName = getComponentName(type) || "Component";
								if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
									didWarnAboutUndefinedDerivedState.add(componentName);
									error3(
										"%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.",
										componentName
									);
								}
							}
						};
						Object.defineProperty(fakeInternalInstance, "_processChildContext", {
							enumerable: false,
							value: function () {
								{
									{
										throw Error(
											"_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal)."
										);
									}
								}
							},
						});
						Object.freeze(fakeInternalInstance);
					}
					function applyDerivedStateFromProps(
						workInProgress2,
						ctor,
						getDerivedStateFromProps,
						nextProps
					) {
						var prevState = workInProgress2.memoizedState;
						{
							if (workInProgress2.mode & StrictMode) {
								disableLogs();
								try {
									getDerivedStateFromProps(nextProps, prevState);
								} finally {
									reenableLogs();
								}
							}
						}
						var partialState = getDerivedStateFromProps(nextProps, prevState);
						{
							warnOnUndefinedDerivedState(ctor, partialState);
						}
						var memoizedState =
							partialState === null || partialState === void 0
								? prevState
								: _assign({}, prevState, partialState);
						workInProgress2.memoizedState = memoizedState;
						if (workInProgress2.lanes === NoLanes) {
							var updateQueue = workInProgress2.updateQueue;
							updateQueue.baseState = memoizedState;
						}
					}
					var classComponentUpdater = {
						isMounted,
						enqueueSetState: function (inst, payload, callback) {
							var fiber = get2(inst);
							var eventTime = requestEventTime();
							var lane = requestUpdateLane(fiber);
							var update2 = createUpdate(eventTime, lane);
							update2.payload = payload;
							if (callback !== void 0 && callback !== null) {
								{
									warnOnInvalidCallback(callback, "setState");
								}
								update2.callback = callback;
							}
							enqueueUpdate(fiber, update2);
							scheduleUpdateOnFiber(fiber, lane, eventTime);
						},
						enqueueReplaceState: function (inst, payload, callback) {
							var fiber = get2(inst);
							var eventTime = requestEventTime();
							var lane = requestUpdateLane(fiber);
							var update2 = createUpdate(eventTime, lane);
							update2.tag = ReplaceState;
							update2.payload = payload;
							if (callback !== void 0 && callback !== null) {
								{
									warnOnInvalidCallback(callback, "replaceState");
								}
								update2.callback = callback;
							}
							enqueueUpdate(fiber, update2);
							scheduleUpdateOnFiber(fiber, lane, eventTime);
						},
						enqueueForceUpdate: function (inst, callback) {
							var fiber = get2(inst);
							var eventTime = requestEventTime();
							var lane = requestUpdateLane(fiber);
							var update2 = createUpdate(eventTime, lane);
							update2.tag = ForceUpdate;
							if (callback !== void 0 && callback !== null) {
								{
									warnOnInvalidCallback(callback, "forceUpdate");
								}
								update2.callback = callback;
							}
							enqueueUpdate(fiber, update2);
							scheduleUpdateOnFiber(fiber, lane, eventTime);
						},
					};
					function checkShouldComponentUpdate(
						workInProgress2,
						ctor,
						oldProps,
						newProps,
						oldState,
						newState,
						nextContext
					) {
						var instance = workInProgress2.stateNode;
						if (typeof instance.shouldComponentUpdate === "function") {
							{
								if (workInProgress2.mode & StrictMode) {
									disableLogs();
									try {
										instance.shouldComponentUpdate(newProps, newState, nextContext);
									} finally {
										reenableLogs();
									}
								}
							}
							var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
							{
								if (shouldUpdate === void 0) {
									error3(
										"%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.",
										getComponentName(ctor) || "Component"
									);
								}
							}
							return shouldUpdate;
						}
						if (ctor.prototype && ctor.prototype.isPureReactComponent) {
							return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
						}
						return true;
					}
					function checkClassInstance(workInProgress2, ctor, newProps) {
						var instance = workInProgress2.stateNode;
						{
							var name2 = getComponentName(ctor) || "Component";
							var renderPresent = instance.render;
							if (!renderPresent) {
								if (ctor.prototype && typeof ctor.prototype.render === "function") {
									error3(
										"%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?",
										name2
									);
								} else {
									error3(
										"%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.",
										name2
									);
								}
							}
							if (
								instance.getInitialState &&
								!instance.getInitialState.isReactClassApproved &&
								!instance.state
							) {
								error3(
									"getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?",
									name2
								);
							}
							if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
								error3(
									"getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.",
									name2
								);
							}
							if (instance.propTypes) {
								error3(
									"propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.",
									name2
								);
							}
							if (instance.contextType) {
								error3(
									"contextType was defined as an instance property on %s. Use a static property to define contextType instead.",
									name2
								);
							}
							{
								if (instance.contextTypes) {
									error3(
										"contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.",
										name2
									);
								}
								if (
									ctor.contextType &&
									ctor.contextTypes &&
									!didWarnAboutContextTypeAndContextTypes.has(ctor)
								) {
									didWarnAboutContextTypeAndContextTypes.add(ctor);
									error3(
										"%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.",
										name2
									);
								}
							}
							if (typeof instance.componentShouldUpdate === "function") {
								error3(
									"%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",
									name2
								);
							}
							if (
								ctor.prototype &&
								ctor.prototype.isPureReactComponent &&
								typeof instance.shouldComponentUpdate !== "undefined"
							) {
								error3(
									"%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.",
									getComponentName(ctor) || "A pure component"
								);
							}
							if (typeof instance.componentDidUnmount === "function") {
								error3(
									"%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?",
									name2
								);
							}
							if (typeof instance.componentDidReceiveProps === "function") {
								error3(
									"%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().",
									name2
								);
							}
							if (typeof instance.componentWillRecieveProps === "function") {
								error3(
									"%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?",
									name2
								);
							}
							if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
								error3(
									"%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?",
									name2
								);
							}
							var hasMutatedProps = instance.props !== newProps;
							if (instance.props !== void 0 && hasMutatedProps) {
								error3(
									"%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.",
									name2,
									name2
								);
							}
							if (instance.defaultProps) {
								error3(
									"Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.",
									name2,
									name2
								);
							}
							if (
								typeof instance.getSnapshotBeforeUpdate === "function" &&
								typeof instance.componentDidUpdate !== "function" &&
								!didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)
							) {
								didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
								error3(
									"%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.",
									getComponentName(ctor)
								);
							}
							if (typeof instance.getDerivedStateFromProps === "function") {
								error3(
									"%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.",
									name2
								);
							}
							if (typeof instance.getDerivedStateFromError === "function") {
								error3(
									"%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.",
									name2
								);
							}
							if (typeof ctor.getSnapshotBeforeUpdate === "function") {
								error3(
									"%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.",
									name2
								);
							}
							var _state = instance.state;
							if (_state && (typeof _state !== "object" || isArray2(_state))) {
								error3("%s.state: must be set to an object or null", name2);
							}
							if (
								typeof instance.getChildContext === "function" &&
								typeof ctor.childContextTypes !== "object"
							) {
								error3(
									"%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().",
									name2
								);
							}
						}
					}
					function adoptClassInstance(workInProgress2, instance) {
						instance.updater = classComponentUpdater;
						workInProgress2.stateNode = instance;
						set2(instance, workInProgress2);
						{
							instance._reactInternalInstance = fakeInternalInstance;
						}
					}
					function constructClassInstance(workInProgress2, ctor, props) {
						var isLegacyContextConsumer = false;
						var unmaskedContext = emptyContextObject;
						var context = emptyContextObject;
						var contextType = ctor.contextType;
						{
							if ("contextType" in ctor) {
								var isValid =
									contextType === null ||
									(contextType !== void 0 &&
										contextType.$$typeof === REACT_CONTEXT_TYPE &&
										contextType._context === void 0);
								if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
									didWarnAboutInvalidateContextType.add(ctor);
									var addendum = "";
									if (contextType === void 0) {
										addendum =
											" However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
									} else if (typeof contextType !== "object") {
										addendum = " However, it is set to a " + typeof contextType + ".";
									} else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
										addendum = " Did you accidentally pass the Context.Provider instead?";
									} else if (contextType._context !== void 0) {
										addendum = " Did you accidentally pass the Context.Consumer instead?";
									} else {
										addendum =
											" However, it is set to an object with keys {" +
											Object.keys(contextType).join(", ") +
											"}.";
									}
									error3(
										"%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s",
										getComponentName(ctor) || "Component",
										addendum
									);
								}
							}
						}
						if (typeof contextType === "object" && contextType !== null) {
							context = readContext(contextType);
						} else {
							unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
							var contextTypes = ctor.contextTypes;
							isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
							context = isLegacyContextConsumer
								? getMaskedContext(workInProgress2, unmaskedContext)
								: emptyContextObject;
						}
						{
							if (workInProgress2.mode & StrictMode) {
								disableLogs();
								try {
									new ctor(props, context);
								} finally {
									reenableLogs();
								}
							}
						}
						var instance = new ctor(props, context);
						var state = (workInProgress2.memoizedState =
							instance.state !== null && instance.state !== void 0 ? instance.state : null);
						adoptClassInstance(workInProgress2, instance);
						{
							if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
								var componentName = getComponentName(ctor) || "Component";
								if (!didWarnAboutUninitializedState.has(componentName)) {
									didWarnAboutUninitializedState.add(componentName);
									error3(
										"`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.",
										componentName,
										instance.state === null ? "null" : "undefined",
										componentName
									);
								}
							}
							if (
								typeof ctor.getDerivedStateFromProps === "function" ||
								typeof instance.getSnapshotBeforeUpdate === "function"
							) {
								var foundWillMountName = null;
								var foundWillReceivePropsName = null;
								var foundWillUpdateName = null;
								if (
									typeof instance.componentWillMount === "function" &&
									instance.componentWillMount.__suppressDeprecationWarning !== true
								) {
									foundWillMountName = "componentWillMount";
								} else if (typeof instance.UNSAFE_componentWillMount === "function") {
									foundWillMountName = "UNSAFE_componentWillMount";
								}
								if (
									typeof instance.componentWillReceiveProps === "function" &&
									instance.componentWillReceiveProps.__suppressDeprecationWarning !== true
								) {
									foundWillReceivePropsName = "componentWillReceiveProps";
								} else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
									foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
								}
								if (
									typeof instance.componentWillUpdate === "function" &&
									instance.componentWillUpdate.__suppressDeprecationWarning !== true
								) {
									foundWillUpdateName = "componentWillUpdate";
								} else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
									foundWillUpdateName = "UNSAFE_componentWillUpdate";
								}
								if (
									foundWillMountName !== null ||
									foundWillReceivePropsName !== null ||
									foundWillUpdateName !== null
								) {
									var _componentName = getComponentName(ctor) || "Component";
									var newApiName =
										typeof ctor.getDerivedStateFromProps === "function"
											? "getDerivedStateFromProps()"
											: "getSnapshotBeforeUpdate()";
									if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
										didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
										error3(
											"Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles",
											_componentName,
											newApiName,
											foundWillMountName !== null ? "\n  " + foundWillMountName : "",
											foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "",
											foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : ""
										);
									}
								}
							}
						}
						if (isLegacyContextConsumer) {
							cacheContext(workInProgress2, unmaskedContext, context);
						}
						return instance;
					}
					function callComponentWillMount(workInProgress2, instance) {
						var oldState = instance.state;
						if (typeof instance.componentWillMount === "function") {
							instance.componentWillMount();
						}
						if (typeof instance.UNSAFE_componentWillMount === "function") {
							instance.UNSAFE_componentWillMount();
						}
						if (oldState !== instance.state) {
							{
								error3(
									"%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",
									getComponentName(workInProgress2.type) || "Component"
								);
							}
							classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
						}
					}
					function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
						var oldState = instance.state;
						if (typeof instance.componentWillReceiveProps === "function") {
							instance.componentWillReceiveProps(newProps, nextContext);
						}
						if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
							instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
						}
						if (instance.state !== oldState) {
							{
								var componentName = getComponentName(workInProgress2.type) || "Component";
								if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
									didWarnAboutStateAssignmentForComponent.add(componentName);
									error3(
										"%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",
										componentName
									);
								}
							}
							classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
						}
					}
					function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
						{
							checkClassInstance(workInProgress2, ctor, newProps);
						}
						var instance = workInProgress2.stateNode;
						instance.props = newProps;
						instance.state = workInProgress2.memoizedState;
						instance.refs = emptyRefsObject;
						initializeUpdateQueue(workInProgress2);
						var contextType = ctor.contextType;
						if (typeof contextType === "object" && contextType !== null) {
							instance.context = readContext(contextType);
						} else {
							var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
							instance.context = getMaskedContext(workInProgress2, unmaskedContext);
						}
						{
							if (instance.state === newProps) {
								var componentName = getComponentName(ctor) || "Component";
								if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
									didWarnAboutDirectlyAssigningPropsToState.add(componentName);
									error3(
										"%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.",
										componentName
									);
								}
							}
							if (workInProgress2.mode & StrictMode) {
								ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
							}
							{
								ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
							}
						}
						processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
						instance.state = workInProgress2.memoizedState;
						var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
						if (typeof getDerivedStateFromProps === "function") {
							applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
							instance.state = workInProgress2.memoizedState;
						}
						if (
							typeof ctor.getDerivedStateFromProps !== "function" &&
							typeof instance.getSnapshotBeforeUpdate !== "function" &&
							(typeof instance.UNSAFE_componentWillMount === "function" ||
								typeof instance.componentWillMount === "function")
						) {
							callComponentWillMount(workInProgress2, instance);
							processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
							instance.state = workInProgress2.memoizedState;
						}
						if (typeof instance.componentDidMount === "function") {
							workInProgress2.flags |= Update;
						}
					}
					function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
						var instance = workInProgress2.stateNode;
						var oldProps = workInProgress2.memoizedProps;
						instance.props = oldProps;
						var oldContext = instance.context;
						var contextType = ctor.contextType;
						var nextContext = emptyContextObject;
						if (typeof contextType === "object" && contextType !== null) {
							nextContext = readContext(contextType);
						} else {
							var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
							nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
						}
						var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
						var hasNewLifecycles =
							typeof getDerivedStateFromProps === "function" ||
							typeof instance.getSnapshotBeforeUpdate === "function";
						if (
							!hasNewLifecycles &&
							(typeof instance.UNSAFE_componentWillReceiveProps === "function" ||
								typeof instance.componentWillReceiveProps === "function")
						) {
							if (oldProps !== newProps || oldContext !== nextContext) {
								callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
							}
						}
						resetHasForceUpdateBeforeProcessing();
						var oldState = workInProgress2.memoizedState;
						var newState = (instance.state = oldState);
						processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
						newState = workInProgress2.memoizedState;
						if (
							oldProps === newProps &&
							oldState === newState &&
							!hasContextChanged() &&
							!checkHasForceUpdateAfterProcessing()
						) {
							if (typeof instance.componentDidMount === "function") {
								workInProgress2.flags |= Update;
							}
							return false;
						}
						if (typeof getDerivedStateFromProps === "function") {
							applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
							newState = workInProgress2.memoizedState;
						}
						var shouldUpdate =
							checkHasForceUpdateAfterProcessing() ||
							checkShouldComponentUpdate(
								workInProgress2,
								ctor,
								oldProps,
								newProps,
								oldState,
								newState,
								nextContext
							);
						if (shouldUpdate) {
							if (
								!hasNewLifecycles &&
								(typeof instance.UNSAFE_componentWillMount === "function" ||
									typeof instance.componentWillMount === "function")
							) {
								if (typeof instance.componentWillMount === "function") {
									instance.componentWillMount();
								}
								if (typeof instance.UNSAFE_componentWillMount === "function") {
									instance.UNSAFE_componentWillMount();
								}
							}
							if (typeof instance.componentDidMount === "function") {
								workInProgress2.flags |= Update;
							}
						} else {
							if (typeof instance.componentDidMount === "function") {
								workInProgress2.flags |= Update;
							}
							workInProgress2.memoizedProps = newProps;
							workInProgress2.memoizedState = newState;
						}
						instance.props = newProps;
						instance.state = newState;
						instance.context = nextContext;
						return shouldUpdate;
					}
					function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
						var instance = workInProgress2.stateNode;
						cloneUpdateQueue(current2, workInProgress2);
						var unresolvedOldProps = workInProgress2.memoizedProps;
						var oldProps =
							workInProgress2.type === workInProgress2.elementType
								? unresolvedOldProps
								: resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
						instance.props = oldProps;
						var unresolvedNewProps = workInProgress2.pendingProps;
						var oldContext = instance.context;
						var contextType = ctor.contextType;
						var nextContext = emptyContextObject;
						if (typeof contextType === "object" && contextType !== null) {
							nextContext = readContext(contextType);
						} else {
							var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
							nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
						}
						var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
						var hasNewLifecycles =
							typeof getDerivedStateFromProps === "function" ||
							typeof instance.getSnapshotBeforeUpdate === "function";
						if (
							!hasNewLifecycles &&
							(typeof instance.UNSAFE_componentWillReceiveProps === "function" ||
								typeof instance.componentWillReceiveProps === "function")
						) {
							if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
								callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
							}
						}
						resetHasForceUpdateBeforeProcessing();
						var oldState = workInProgress2.memoizedState;
						var newState = (instance.state = oldState);
						processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
						newState = workInProgress2.memoizedState;
						if (
							unresolvedOldProps === unresolvedNewProps &&
							oldState === newState &&
							!hasContextChanged() &&
							!checkHasForceUpdateAfterProcessing()
						) {
							if (typeof instance.componentDidUpdate === "function") {
								if (
									unresolvedOldProps !== current2.memoizedProps ||
									oldState !== current2.memoizedState
								) {
									workInProgress2.flags |= Update;
								}
							}
							if (typeof instance.getSnapshotBeforeUpdate === "function") {
								if (
									unresolvedOldProps !== current2.memoizedProps ||
									oldState !== current2.memoizedState
								) {
									workInProgress2.flags |= Snapshot;
								}
							}
							return false;
						}
						if (typeof getDerivedStateFromProps === "function") {
							applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
							newState = workInProgress2.memoizedState;
						}
						var shouldUpdate =
							checkHasForceUpdateAfterProcessing() ||
							checkShouldComponentUpdate(
								workInProgress2,
								ctor,
								oldProps,
								newProps,
								oldState,
								newState,
								nextContext
							);
						if (shouldUpdate) {
							if (
								!hasNewLifecycles &&
								(typeof instance.UNSAFE_componentWillUpdate === "function" ||
									typeof instance.componentWillUpdate === "function")
							) {
								if (typeof instance.componentWillUpdate === "function") {
									instance.componentWillUpdate(newProps, newState, nextContext);
								}
								if (typeof instance.UNSAFE_componentWillUpdate === "function") {
									instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
								}
							}
							if (typeof instance.componentDidUpdate === "function") {
								workInProgress2.flags |= Update;
							}
							if (typeof instance.getSnapshotBeforeUpdate === "function") {
								workInProgress2.flags |= Snapshot;
							}
						} else {
							if (typeof instance.componentDidUpdate === "function") {
								if (
									unresolvedOldProps !== current2.memoizedProps ||
									oldState !== current2.memoizedState
								) {
									workInProgress2.flags |= Update;
								}
							}
							if (typeof instance.getSnapshotBeforeUpdate === "function") {
								if (
									unresolvedOldProps !== current2.memoizedProps ||
									oldState !== current2.memoizedState
								) {
									workInProgress2.flags |= Snapshot;
								}
							}
							workInProgress2.memoizedProps = newProps;
							workInProgress2.memoizedState = newState;
						}
						instance.props = newProps;
						instance.state = newState;
						instance.context = nextContext;
						return shouldUpdate;
					}
					var didWarnAboutMaps;
					var didWarnAboutGenerators;
					var didWarnAboutStringRefs;
					var ownerHasKeyUseWarning;
					var ownerHasFunctionTypeWarning;
					var warnForMissingKey = function (child, returnFiber) {};
					{
						didWarnAboutMaps = false;
						didWarnAboutGenerators = false;
						didWarnAboutStringRefs = {};
						ownerHasKeyUseWarning = {};
						ownerHasFunctionTypeWarning = {};
						warnForMissingKey = function (child, returnFiber) {
							if (child === null || typeof child !== "object") {
								return;
							}
							if (!child._store || child._store.validated || child.key != null) {
								return;
							}
							if (!(typeof child._store === "object")) {
								{
									throw Error(
										"React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue."
									);
								}
							}
							child._store.validated = true;
							var componentName = getComponentName(returnFiber.type) || "Component";
							if (ownerHasKeyUseWarning[componentName]) {
								return;
							}
							ownerHasKeyUseWarning[componentName] = true;
							error3(
								'Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.'
							);
						};
					}
					var isArray$1 = Array.isArray;
					function coerceRef(returnFiber, current2, element) {
						var mixedRef = element.ref;
						if (
							mixedRef !== null &&
							typeof mixedRef !== "function" &&
							typeof mixedRef !== "object"
						) {
							{
								if (
									(returnFiber.mode & StrictMode || warnAboutStringRefs) &&
									!(element._owner && element._self && element._owner.stateNode !== element._self)
								) {
									var componentName = getComponentName(returnFiber.type) || "Component";
									if (!didWarnAboutStringRefs[componentName]) {
										{
											error3(
												'A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref',
												mixedRef
											);
										}
										didWarnAboutStringRefs[componentName] = true;
									}
								}
							}
							if (element._owner) {
								var owner = element._owner;
								var inst;
								if (owner) {
									var ownerFiber = owner;
									if (!(ownerFiber.tag === ClassComponent)) {
										{
											throw Error(
												"Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref"
											);
										}
									}
									inst = ownerFiber.stateNode;
								}
								if (!inst) {
									{
										throw Error(
											"Missing owner for string ref " +
												mixedRef +
												". This error is likely caused by a bug in React. Please file an issue."
										);
									}
								}
								var stringRef = "" + mixedRef;
								if (
									current2 !== null &&
									current2.ref !== null &&
									typeof current2.ref === "function" &&
									current2.ref._stringRef === stringRef
								) {
									return current2.ref;
								}
								var ref = function (value) {
									var refs = inst.refs;
									if (refs === emptyRefsObject) {
										refs = inst.refs = {};
									}
									if (value === null) {
										delete refs[stringRef];
									} else {
										refs[stringRef] = value;
									}
								};
								ref._stringRef = stringRef;
								return ref;
							} else {
								if (!(typeof mixedRef === "string")) {
									{
										throw Error(
											"Expected ref to be a function, a string, an object returned by React.createRef(), or null."
										);
									}
								}
								if (!element._owner) {
									{
										throw Error(
											"Element ref was specified as a string (" +
												mixedRef +
												") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information."
										);
									}
								}
							}
						}
						return mixedRef;
					}
					function throwOnInvalidObjectType(returnFiber, newChild) {
						if (returnFiber.type !== "textarea") {
							{
								{
									throw Error(
										"Objects are not valid as a React child (found: " +
											(Object.prototype.toString.call(newChild) === "[object Object]"
												? "object with keys {" + Object.keys(newChild).join(", ") + "}"
												: newChild) +
											"). If you meant to render a collection of children, use an array instead."
									);
								}
							}
						}
					}
					function warnOnFunctionType(returnFiber) {
						{
							var componentName = getComponentName(returnFiber.type) || "Component";
							if (ownerHasFunctionTypeWarning[componentName]) {
								return;
							}
							ownerHasFunctionTypeWarning[componentName] = true;
							error3(
								"Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it."
							);
						}
					}
					function ChildReconciler(shouldTrackSideEffects) {
						function deleteChild(returnFiber, childToDelete) {
							if (!shouldTrackSideEffects) {
								return;
							}
							var last = returnFiber.lastEffect;
							if (last !== null) {
								last.nextEffect = childToDelete;
								returnFiber.lastEffect = childToDelete;
							} else {
								returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
							}
							childToDelete.nextEffect = null;
							childToDelete.flags = Deletion;
						}
						function deleteRemainingChildren(returnFiber, currentFirstChild) {
							if (!shouldTrackSideEffects) {
								return null;
							}
							var childToDelete = currentFirstChild;
							while (childToDelete !== null) {
								deleteChild(returnFiber, childToDelete);
								childToDelete = childToDelete.sibling;
							}
							return null;
						}
						function mapRemainingChildren(returnFiber, currentFirstChild) {
							var existingChildren = new Map();
							var existingChild = currentFirstChild;
							while (existingChild !== null) {
								if (existingChild.key !== null) {
									existingChildren.set(existingChild.key, existingChild);
								} else {
									existingChildren.set(existingChild.index, existingChild);
								}
								existingChild = existingChild.sibling;
							}
							return existingChildren;
						}
						function useFiber(fiber, pendingProps) {
							var clone = createWorkInProgress(fiber, pendingProps);
							clone.index = 0;
							clone.sibling = null;
							return clone;
						}
						function placeChild(newFiber, lastPlacedIndex, newIndex) {
							newFiber.index = newIndex;
							if (!shouldTrackSideEffects) {
								return lastPlacedIndex;
							}
							var current2 = newFiber.alternate;
							if (current2 !== null) {
								var oldIndex = current2.index;
								if (oldIndex < lastPlacedIndex) {
									newFiber.flags = Placement;
									return lastPlacedIndex;
								} else {
									return oldIndex;
								}
							} else {
								newFiber.flags = Placement;
								return lastPlacedIndex;
							}
						}
						function placeSingleChild(newFiber) {
							if (shouldTrackSideEffects && newFiber.alternate === null) {
								newFiber.flags = Placement;
							}
							return newFiber;
						}
						function updateTextNode(returnFiber, current2, textContent, lanes) {
							if (current2 === null || current2.tag !== HostText) {
								var created = createFiberFromText(textContent, returnFiber.mode, lanes);
								created.return = returnFiber;
								return created;
							} else {
								var existing = useFiber(current2, textContent);
								existing.return = returnFiber;
								return existing;
							}
						}
						function updateElement(returnFiber, current2, element, lanes) {
							if (current2 !== null) {
								if (
									current2.elementType === element.type ||
									isCompatibleFamilyForHotReloading(current2, element)
								) {
									var existing = useFiber(current2, element.props);
									existing.ref = coerceRef(returnFiber, current2, element);
									existing.return = returnFiber;
									{
										existing._debugSource = element._source;
										existing._debugOwner = element._owner;
									}
									return existing;
								}
							}
							var created = createFiberFromElement(element, returnFiber.mode, lanes);
							created.ref = coerceRef(returnFiber, current2, element);
							created.return = returnFiber;
							return created;
						}
						function updatePortal(returnFiber, current2, portal, lanes) {
							if (
								current2 === null ||
								current2.tag !== HostPortal ||
								current2.stateNode.containerInfo !== portal.containerInfo ||
								current2.stateNode.implementation !== portal.implementation
							) {
								var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
								created.return = returnFiber;
								return created;
							} else {
								var existing = useFiber(current2, portal.children || []);
								existing.return = returnFiber;
								return existing;
							}
						}
						function updateFragment2(returnFiber, current2, fragment, lanes, key) {
							if (current2 === null || current2.tag !== Fragment) {
								var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
								created.return = returnFiber;
								return created;
							} else {
								var existing = useFiber(current2, fragment);
								existing.return = returnFiber;
								return existing;
							}
						}
						function createChild(returnFiber, newChild, lanes) {
							if (typeof newChild === "string" || typeof newChild === "number") {
								var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
								created.return = returnFiber;
								return created;
							}
							if (typeof newChild === "object" && newChild !== null) {
								switch (newChild.$$typeof) {
									case REACT_ELEMENT_TYPE: {
										var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
										_created.ref = coerceRef(returnFiber, null, newChild);
										_created.return = returnFiber;
										return _created;
									}
									case REACT_PORTAL_TYPE: {
										var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
										_created2.return = returnFiber;
										return _created2;
									}
								}
								if (isArray$1(newChild) || getIteratorFn(newChild)) {
									var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
									_created3.return = returnFiber;
									return _created3;
								}
								throwOnInvalidObjectType(returnFiber, newChild);
							}
							{
								if (typeof newChild === "function") {
									warnOnFunctionType(returnFiber);
								}
							}
							return null;
						}
						function updateSlot(returnFiber, oldFiber, newChild, lanes) {
							var key = oldFiber !== null ? oldFiber.key : null;
							if (typeof newChild === "string" || typeof newChild === "number") {
								if (key !== null) {
									return null;
								}
								return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
							}
							if (typeof newChild === "object" && newChild !== null) {
								switch (newChild.$$typeof) {
									case REACT_ELEMENT_TYPE: {
										if (newChild.key === key) {
											if (newChild.type === REACT_FRAGMENT_TYPE) {
												return updateFragment2(
													returnFiber,
													oldFiber,
													newChild.props.children,
													lanes,
													key
												);
											}
											return updateElement(returnFiber, oldFiber, newChild, lanes);
										} else {
											return null;
										}
									}
									case REACT_PORTAL_TYPE: {
										if (newChild.key === key) {
											return updatePortal(returnFiber, oldFiber, newChild, lanes);
										} else {
											return null;
										}
									}
								}
								if (isArray$1(newChild) || getIteratorFn(newChild)) {
									if (key !== null) {
										return null;
									}
									return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
								}
								throwOnInvalidObjectType(returnFiber, newChild);
							}
							{
								if (typeof newChild === "function") {
									warnOnFunctionType(returnFiber);
								}
							}
							return null;
						}
						function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
							if (typeof newChild === "string" || typeof newChild === "number") {
								var matchedFiber = existingChildren.get(newIdx) || null;
								return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
							}
							if (typeof newChild === "object" && newChild !== null) {
								switch (newChild.$$typeof) {
									case REACT_ELEMENT_TYPE: {
										var _matchedFiber =
											existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
										if (newChild.type === REACT_FRAGMENT_TYPE) {
											return updateFragment2(
												returnFiber,
												_matchedFiber,
												newChild.props.children,
												lanes,
												newChild.key
											);
										}
										return updateElement(returnFiber, _matchedFiber, newChild, lanes);
									}
									case REACT_PORTAL_TYPE: {
										var _matchedFiber2 =
											existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
										return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
									}
								}
								if (isArray$1(newChild) || getIteratorFn(newChild)) {
									var _matchedFiber3 = existingChildren.get(newIdx) || null;
									return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
								}
								throwOnInvalidObjectType(returnFiber, newChild);
							}
							{
								if (typeof newChild === "function") {
									warnOnFunctionType(returnFiber);
								}
							}
							return null;
						}
						function warnOnInvalidKey(child, knownKeys, returnFiber) {
							{
								if (typeof child !== "object" || child === null) {
									return knownKeys;
								}
								switch (child.$$typeof) {
									case REACT_ELEMENT_TYPE:
									case REACT_PORTAL_TYPE:
										warnForMissingKey(child, returnFiber);
										var key = child.key;
										if (typeof key !== "string") {
											break;
										}
										if (knownKeys === null) {
											knownKeys = new Set();
											knownKeys.add(key);
											break;
										}
										if (!knownKeys.has(key)) {
											knownKeys.add(key);
											break;
										}
										error3(
											"Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.",
											key
										);
										break;
								}
							}
							return knownKeys;
						}
						function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
							{
								var knownKeys = null;
								for (var i = 0; i < newChildren.length; i++) {
									var child = newChildren[i];
									knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
								}
							}
							var resultingFirstChild = null;
							var previousNewFiber = null;
							var oldFiber = currentFirstChild;
							var lastPlacedIndex = 0;
							var newIdx = 0;
							var nextOldFiber = null;
							for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
								if (oldFiber.index > newIdx) {
									nextOldFiber = oldFiber;
									oldFiber = null;
								} else {
									nextOldFiber = oldFiber.sibling;
								}
								var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
								if (newFiber === null) {
									if (oldFiber === null) {
										oldFiber = nextOldFiber;
									}
									break;
								}
								if (shouldTrackSideEffects) {
									if (oldFiber && newFiber.alternate === null) {
										deleteChild(returnFiber, oldFiber);
									}
								}
								lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
								if (previousNewFiber === null) {
									resultingFirstChild = newFiber;
								} else {
									previousNewFiber.sibling = newFiber;
								}
								previousNewFiber = newFiber;
								oldFiber = nextOldFiber;
							}
							if (newIdx === newChildren.length) {
								deleteRemainingChildren(returnFiber, oldFiber);
								return resultingFirstChild;
							}
							if (oldFiber === null) {
								for (; newIdx < newChildren.length; newIdx++) {
									var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
									if (_newFiber === null) {
										continue;
									}
									lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
									if (previousNewFiber === null) {
										resultingFirstChild = _newFiber;
									} else {
										previousNewFiber.sibling = _newFiber;
									}
									previousNewFiber = _newFiber;
								}
								return resultingFirstChild;
							}
							var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
							for (; newIdx < newChildren.length; newIdx++) {
								var _newFiber2 = updateFromMap(
									existingChildren,
									returnFiber,
									newIdx,
									newChildren[newIdx],
									lanes
								);
								if (_newFiber2 !== null) {
									if (shouldTrackSideEffects) {
										if (_newFiber2.alternate !== null) {
											existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
										}
									}
									lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
									if (previousNewFiber === null) {
										resultingFirstChild = _newFiber2;
									} else {
										previousNewFiber.sibling = _newFiber2;
									}
									previousNewFiber = _newFiber2;
								}
							}
							if (shouldTrackSideEffects) {
								existingChildren.forEach(function (child2) {
									return deleteChild(returnFiber, child2);
								});
							}
							return resultingFirstChild;
						}
						function reconcileChildrenIterator(
							returnFiber,
							currentFirstChild,
							newChildrenIterable,
							lanes
						) {
							var iteratorFn = getIteratorFn(newChildrenIterable);
							if (!(typeof iteratorFn === "function")) {
								{
									throw Error(
										"An object is not an iterable. This error is likely caused by a bug in React. Please file an issue."
									);
								}
							}
							{
								if (
									typeof Symbol === "function" &&
									newChildrenIterable[Symbol.toStringTag] === "Generator"
								) {
									if (!didWarnAboutGenerators) {
										error3(
											"Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers."
										);
									}
									didWarnAboutGenerators = true;
								}
								if (newChildrenIterable.entries === iteratorFn) {
									if (!didWarnAboutMaps) {
										error3(
											"Using Maps as children is not supported. Use an array of keyed ReactElements instead."
										);
									}
									didWarnAboutMaps = true;
								}
								var _newChildren = iteratorFn.call(newChildrenIterable);
								if (_newChildren) {
									var knownKeys = null;
									var _step = _newChildren.next();
									for (; !_step.done; _step = _newChildren.next()) {
										var child = _step.value;
										knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
									}
								}
							}
							var newChildren = iteratorFn.call(newChildrenIterable);
							if (!(newChildren != null)) {
								{
									throw Error("An iterable object provided no iterator.");
								}
							}
							var resultingFirstChild = null;
							var previousNewFiber = null;
							var oldFiber = currentFirstChild;
							var lastPlacedIndex = 0;
							var newIdx = 0;
							var nextOldFiber = null;
							var step = newChildren.next();
							for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
								if (oldFiber.index > newIdx) {
									nextOldFiber = oldFiber;
									oldFiber = null;
								} else {
									nextOldFiber = oldFiber.sibling;
								}
								var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
								if (newFiber === null) {
									if (oldFiber === null) {
										oldFiber = nextOldFiber;
									}
									break;
								}
								if (shouldTrackSideEffects) {
									if (oldFiber && newFiber.alternate === null) {
										deleteChild(returnFiber, oldFiber);
									}
								}
								lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
								if (previousNewFiber === null) {
									resultingFirstChild = newFiber;
								} else {
									previousNewFiber.sibling = newFiber;
								}
								previousNewFiber = newFiber;
								oldFiber = nextOldFiber;
							}
							if (step.done) {
								deleteRemainingChildren(returnFiber, oldFiber);
								return resultingFirstChild;
							}
							if (oldFiber === null) {
								for (; !step.done; newIdx++, step = newChildren.next()) {
									var _newFiber3 = createChild(returnFiber, step.value, lanes);
									if (_newFiber3 === null) {
										continue;
									}
									lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
									if (previousNewFiber === null) {
										resultingFirstChild = _newFiber3;
									} else {
										previousNewFiber.sibling = _newFiber3;
									}
									previousNewFiber = _newFiber3;
								}
								return resultingFirstChild;
							}
							var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
							for (; !step.done; newIdx++, step = newChildren.next()) {
								var _newFiber4 = updateFromMap(
									existingChildren,
									returnFiber,
									newIdx,
									step.value,
									lanes
								);
								if (_newFiber4 !== null) {
									if (shouldTrackSideEffects) {
										if (_newFiber4.alternate !== null) {
											existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
										}
									}
									lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
									if (previousNewFiber === null) {
										resultingFirstChild = _newFiber4;
									} else {
										previousNewFiber.sibling = _newFiber4;
									}
									previousNewFiber = _newFiber4;
								}
							}
							if (shouldTrackSideEffects) {
								existingChildren.forEach(function (child2) {
									return deleteChild(returnFiber, child2);
								});
							}
							return resultingFirstChild;
						}
						function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
							if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
								deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
								var existing = useFiber(currentFirstChild, textContent);
								existing.return = returnFiber;
								return existing;
							}
							deleteRemainingChildren(returnFiber, currentFirstChild);
							var created = createFiberFromText(textContent, returnFiber.mode, lanes);
							created.return = returnFiber;
							return created;
						}
						function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
							var key = element.key;
							var child = currentFirstChild;
							while (child !== null) {
								if (child.key === key) {
									switch (child.tag) {
										case Fragment: {
											if (element.type === REACT_FRAGMENT_TYPE) {
												deleteRemainingChildren(returnFiber, child.sibling);
												var existing = useFiber(child, element.props.children);
												existing.return = returnFiber;
												{
													existing._debugSource = element._source;
													existing._debugOwner = element._owner;
												}
												return existing;
											}
											break;
										}
										case Block:
										default: {
											if (
												child.elementType === element.type ||
												isCompatibleFamilyForHotReloading(child, element)
											) {
												deleteRemainingChildren(returnFiber, child.sibling);
												var _existing3 = useFiber(child, element.props);
												_existing3.ref = coerceRef(returnFiber, child, element);
												_existing3.return = returnFiber;
												{
													_existing3._debugSource = element._source;
													_existing3._debugOwner = element._owner;
												}
												return _existing3;
											}
											break;
										}
									}
									deleteRemainingChildren(returnFiber, child);
									break;
								} else {
									deleteChild(returnFiber, child);
								}
								child = child.sibling;
							}
							if (element.type === REACT_FRAGMENT_TYPE) {
								var created = createFiberFromFragment(
									element.props.children,
									returnFiber.mode,
									lanes,
									element.key
								);
								created.return = returnFiber;
								return created;
							} else {
								var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
								_created4.ref = coerceRef(returnFiber, currentFirstChild, element);
								_created4.return = returnFiber;
								return _created4;
							}
						}
						function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
							var key = portal.key;
							var child = currentFirstChild;
							while (child !== null) {
								if (child.key === key) {
									if (
										child.tag === HostPortal &&
										child.stateNode.containerInfo === portal.containerInfo &&
										child.stateNode.implementation === portal.implementation
									) {
										deleteRemainingChildren(returnFiber, child.sibling);
										var existing = useFiber(child, portal.children || []);
										existing.return = returnFiber;
										return existing;
									} else {
										deleteRemainingChildren(returnFiber, child);
										break;
									}
								} else {
									deleteChild(returnFiber, child);
								}
								child = child.sibling;
							}
							var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
							created.return = returnFiber;
							return created;
						}
						function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
							var isUnkeyedTopLevelFragment =
								typeof newChild === "object" &&
								newChild !== null &&
								newChild.type === REACT_FRAGMENT_TYPE &&
								newChild.key === null;
							if (isUnkeyedTopLevelFragment) {
								newChild = newChild.props.children;
							}
							var isObject = typeof newChild === "object" && newChild !== null;
							if (isObject) {
								switch (newChild.$$typeof) {
									case REACT_ELEMENT_TYPE:
										return placeSingleChild(
											reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes)
										);
									case REACT_PORTAL_TYPE:
										return placeSingleChild(
											reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes)
										);
								}
							}
							if (typeof newChild === "string" || typeof newChild === "number") {
								return placeSingleChild(
									reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes)
								);
							}
							if (isArray$1(newChild)) {
								return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
							}
							if (getIteratorFn(newChild)) {
								return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
							}
							if (isObject) {
								throwOnInvalidObjectType(returnFiber, newChild);
							}
							{
								if (typeof newChild === "function") {
									warnOnFunctionType(returnFiber);
								}
							}
							if (typeof newChild === "undefined" && !isUnkeyedTopLevelFragment) {
								switch (returnFiber.tag) {
									case ClassComponent: {
										{
											var instance = returnFiber.stateNode;
											if (instance.render._isMockFunction) {
												break;
											}
										}
									}
									case Block:
									case FunctionComponent:
									case ForwardRef:
									case SimpleMemoComponent: {
										{
											{
												throw Error(
													(getComponentName(returnFiber.type) || "Component") +
														"(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null."
												);
											}
										}
									}
								}
							}
							return deleteRemainingChildren(returnFiber, currentFirstChild);
						}
						return reconcileChildFibers2;
					}
					var reconcileChildFibers = ChildReconciler(true);
					var mountChildFibers = ChildReconciler(false);
					function cloneChildFibers(current2, workInProgress2) {
						if (!(current2 === null || workInProgress2.child === current2.child)) {
							{
								throw Error("Resuming work not yet implemented.");
							}
						}
						if (workInProgress2.child === null) {
							return;
						}
						var currentChild = workInProgress2.child;
						var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
						workInProgress2.child = newChild;
						newChild.return = workInProgress2;
						while (currentChild.sibling !== null) {
							currentChild = currentChild.sibling;
							newChild = newChild.sibling = createWorkInProgress(
								currentChild,
								currentChild.pendingProps
							);
							newChild.return = workInProgress2;
						}
						newChild.sibling = null;
					}
					function resetChildFibers(workInProgress2, lanes) {
						var child = workInProgress2.child;
						while (child !== null) {
							resetWorkInProgress(child, lanes);
							child = child.sibling;
						}
					}
					var NO_CONTEXT = {};
					var contextStackCursor$1 = createCursor(NO_CONTEXT);
					var contextFiberStackCursor = createCursor(NO_CONTEXT);
					var rootInstanceStackCursor = createCursor(NO_CONTEXT);
					function requiredContext(c20) {
						if (!(c20 !== NO_CONTEXT)) {
							{
								throw Error(
									"Expected host context to exist. This error is likely caused by a bug in React. Please file an issue."
								);
							}
						}
						return c20;
					}
					function getRootHostContainer() {
						var rootInstance = requiredContext(rootInstanceStackCursor.current);
						return rootInstance;
					}
					function pushHostContainer(fiber, nextRootInstance) {
						push(rootInstanceStackCursor, nextRootInstance, fiber);
						push(contextFiberStackCursor, fiber, fiber);
						push(contextStackCursor$1, NO_CONTEXT, fiber);
						var nextRootContext = getRootHostContext(nextRootInstance);
						pop(contextStackCursor$1, fiber);
						push(contextStackCursor$1, nextRootContext, fiber);
					}
					function popHostContainer(fiber) {
						pop(contextStackCursor$1, fiber);
						pop(contextFiberStackCursor, fiber);
						pop(rootInstanceStackCursor, fiber);
					}
					function getHostContext() {
						var context = requiredContext(contextStackCursor$1.current);
						return context;
					}
					function pushHostContext(fiber) {
						var rootInstance = requiredContext(rootInstanceStackCursor.current);
						var context = requiredContext(contextStackCursor$1.current);
						var nextContext = getChildHostContext(context, fiber.type);
						if (context === nextContext) {
							return;
						}
						push(contextFiberStackCursor, fiber, fiber);
						push(contextStackCursor$1, nextContext, fiber);
					}
					function popHostContext(fiber) {
						if (contextFiberStackCursor.current !== fiber) {
							return;
						}
						pop(contextStackCursor$1, fiber);
						pop(contextFiberStackCursor, fiber);
					}
					var DefaultSuspenseContext = 0;
					var SubtreeSuspenseContextMask = 1;
					var InvisibleParentSuspenseContext = 1;
					var ForceSuspenseFallback = 2;
					var suspenseStackCursor = createCursor(DefaultSuspenseContext);
					function hasSuspenseContext(parentContext, flag) {
						return (parentContext & flag) !== 0;
					}
					function setDefaultShallowSuspenseContext(parentContext) {
						return parentContext & SubtreeSuspenseContextMask;
					}
					function setShallowSuspenseContext(parentContext, shallowContext) {
						return (parentContext & SubtreeSuspenseContextMask) | shallowContext;
					}
					function addSubtreeSuspenseContext(parentContext, subtreeContext) {
						return parentContext | subtreeContext;
					}
					function pushSuspenseContext(fiber, newContext) {
						push(suspenseStackCursor, newContext, fiber);
					}
					function popSuspenseContext(fiber) {
						pop(suspenseStackCursor, fiber);
					}
					function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
						var nextState = workInProgress2.memoizedState;
						if (nextState !== null) {
							if (nextState.dehydrated !== null) {
								return true;
							}
							return false;
						}
						var props = workInProgress2.memoizedProps;
						if (props.fallback === void 0) {
							return false;
						}
						if (props.unstable_avoidThisFallback !== true) {
							return true;
						}
						if (hasInvisibleParent) {
							return false;
						}
						return true;
					}
					function findFirstSuspended(row) {
						var node = row;
						while (node !== null) {
							if (node.tag === SuspenseComponent) {
								var state = node.memoizedState;
								if (state !== null) {
									var dehydrated = state.dehydrated;
									if (
										dehydrated === null ||
										isSuspenseInstancePending(dehydrated) ||
										isSuspenseInstanceFallback(dehydrated)
									) {
										return node;
									}
								}
							} else if (
								node.tag === SuspenseListComponent &&
								node.memoizedProps.revealOrder !== void 0
							) {
								var didSuspend = (node.flags & DidCapture) !== NoFlags;
								if (didSuspend) {
									return node;
								}
							} else if (node.child !== null) {
								node.child.return = node;
								node = node.child;
								continue;
							}
							if (node === row) {
								return null;
							}
							while (node.sibling === null) {
								if (node.return === null || node.return === row) {
									return null;
								}
								node = node.return;
							}
							node.sibling.return = node.return;
							node = node.sibling;
						}
						return null;
					}
					var NoFlags$1 = 0;
					var HasEffect = 1;
					var Layout = 2;
					var Passive$1 = 4;
					var hydrationParentFiber = null;
					var nextHydratableInstance = null;
					var isHydrating = false;
					function enterHydrationState(fiber) {
						var parentInstance = fiber.stateNode.containerInfo;
						nextHydratableInstance = getFirstHydratableChild(parentInstance);
						hydrationParentFiber = fiber;
						isHydrating = true;
						return true;
					}
					function deleteHydratableInstance(returnFiber, instance) {
						{
							switch (returnFiber.tag) {
								case HostRoot:
									didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
									break;
								case HostComponent:
									didNotHydrateInstance(
										returnFiber.type,
										returnFiber.memoizedProps,
										returnFiber.stateNode,
										instance
									);
									break;
							}
						}
						var childToDelete = createFiberFromHostInstanceForDeletion();
						childToDelete.stateNode = instance;
						childToDelete.return = returnFiber;
						childToDelete.flags = Deletion;
						if (returnFiber.lastEffect !== null) {
							returnFiber.lastEffect.nextEffect = childToDelete;
							returnFiber.lastEffect = childToDelete;
						} else {
							returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
						}
					}
					function insertNonHydratedInstance(returnFiber, fiber) {
						fiber.flags = (fiber.flags & ~Hydrating) | Placement;
						{
							switch (returnFiber.tag) {
								case HostRoot: {
									var parentContainer = returnFiber.stateNode.containerInfo;
									switch (fiber.tag) {
										case HostComponent:
											var type = fiber.type;
											var props = fiber.pendingProps;
											didNotFindHydratableContainerInstance(parentContainer, type);
											break;
										case HostText:
											var text = fiber.pendingProps;
											didNotFindHydratableContainerTextInstance(parentContainer, text);
											break;
									}
									break;
								}
								case HostComponent: {
									var parentType = returnFiber.type;
									var parentProps = returnFiber.memoizedProps;
									var parentInstance = returnFiber.stateNode;
									switch (fiber.tag) {
										case HostComponent:
											var _type = fiber.type;
											var _props = fiber.pendingProps;
											didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
											break;
										case HostText:
											var _text = fiber.pendingProps;
											didNotFindHydratableTextInstance(
												parentType,
												parentProps,
												parentInstance,
												_text
											);
											break;
										case SuspenseComponent:
											didNotFindHydratableSuspenseInstance(parentType, parentProps);
											break;
									}
									break;
								}
								default:
									return;
							}
						}
					}
					function tryHydrate(fiber, nextInstance) {
						switch (fiber.tag) {
							case HostComponent: {
								var type = fiber.type;
								var props = fiber.pendingProps;
								var instance = canHydrateInstance(nextInstance, type);
								if (instance !== null) {
									fiber.stateNode = instance;
									return true;
								}
								return false;
							}
							case HostText: {
								var text = fiber.pendingProps;
								var textInstance = canHydrateTextInstance(nextInstance, text);
								if (textInstance !== null) {
									fiber.stateNode = textInstance;
									return true;
								}
								return false;
							}
							case SuspenseComponent: {
								return false;
							}
							default:
								return false;
						}
					}
					function tryToClaimNextHydratableInstance(fiber) {
						if (!isHydrating) {
							return;
						}
						var nextInstance = nextHydratableInstance;
						if (!nextInstance) {
							insertNonHydratedInstance(hydrationParentFiber, fiber);
							isHydrating = false;
							hydrationParentFiber = fiber;
							return;
						}
						var firstAttemptedInstance = nextInstance;
						if (!tryHydrate(fiber, nextInstance)) {
							nextInstance = getNextHydratableSibling(firstAttemptedInstance);
							if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
								insertNonHydratedInstance(hydrationParentFiber, fiber);
								isHydrating = false;
								hydrationParentFiber = fiber;
								return;
							}
							deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
						}
						hydrationParentFiber = fiber;
						nextHydratableInstance = getFirstHydratableChild(nextInstance);
					}
					function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
						var instance = fiber.stateNode;
						var updatePayload = hydrateInstance(
							instance,
							fiber.type,
							fiber.memoizedProps,
							rootContainerInstance,
							hostContext,
							fiber
						);
						fiber.updateQueue = updatePayload;
						if (updatePayload !== null) {
							return true;
						}
						return false;
					}
					function prepareToHydrateHostTextInstance(fiber) {
						var textInstance = fiber.stateNode;
						var textContent = fiber.memoizedProps;
						var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
						{
							if (shouldUpdate) {
								var returnFiber = hydrationParentFiber;
								if (returnFiber !== null) {
									switch (returnFiber.tag) {
										case HostRoot: {
											var parentContainer = returnFiber.stateNode.containerInfo;
											didNotMatchHydratedContainerTextInstance(
												parentContainer,
												textInstance,
												textContent
											);
											break;
										}
										case HostComponent: {
											var parentType = returnFiber.type;
											var parentProps = returnFiber.memoizedProps;
											var parentInstance = returnFiber.stateNode;
											didNotMatchHydratedTextInstance(
												parentType,
												parentProps,
												parentInstance,
												textInstance,
												textContent
											);
											break;
										}
									}
								}
							}
						}
						return shouldUpdate;
					}
					function skipPastDehydratedSuspenseInstance(fiber) {
						var suspenseState = fiber.memoizedState;
						var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
						if (!suspenseInstance) {
							{
								throw Error(
									"Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue."
								);
							}
						}
						return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
					}
					function popToNextHostParent(fiber) {
						var parent = fiber.return;
						while (
							parent !== null &&
							parent.tag !== HostComponent &&
							parent.tag !== HostRoot &&
							parent.tag !== SuspenseComponent
						) {
							parent = parent.return;
						}
						hydrationParentFiber = parent;
					}
					function popHydrationState(fiber) {
						if (fiber !== hydrationParentFiber) {
							return false;
						}
						if (!isHydrating) {
							popToNextHostParent(fiber);
							isHydrating = true;
							return false;
						}
						var type = fiber.type;
						if (
							fiber.tag !== HostComponent ||
							(type !== "head" &&
								type !== "body" &&
								!shouldSetTextContent(type, fiber.memoizedProps))
						) {
							var nextInstance = nextHydratableInstance;
							while (nextInstance) {
								deleteHydratableInstance(fiber, nextInstance);
								nextInstance = getNextHydratableSibling(nextInstance);
							}
						}
						popToNextHostParent(fiber);
						if (fiber.tag === SuspenseComponent) {
							nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
						} else {
							nextHydratableInstance = hydrationParentFiber
								? getNextHydratableSibling(fiber.stateNode)
								: null;
						}
						return true;
					}
					function resetHydrationState() {
						hydrationParentFiber = null;
						nextHydratableInstance = null;
						isHydrating = false;
					}
					function getIsHydrating() {
						return isHydrating;
					}
					var workInProgressSources = [];
					var rendererSigil$1;
					{
						rendererSigil$1 = {};
					}
					function markSourceAsDirty(mutableSource) {
						workInProgressSources.push(mutableSource);
					}
					function resetWorkInProgressVersions() {
						for (var i = 0; i < workInProgressSources.length; i++) {
							var mutableSource = workInProgressSources[i];
							{
								mutableSource._workInProgressVersionPrimary = null;
							}
						}
						workInProgressSources.length = 0;
					}
					function getWorkInProgressVersion(mutableSource) {
						{
							return mutableSource._workInProgressVersionPrimary;
						}
					}
					function setWorkInProgressVersion(mutableSource, version4) {
						{
							mutableSource._workInProgressVersionPrimary = version4;
						}
						workInProgressSources.push(mutableSource);
					}
					function warnAboutMultipleRenderersDEV(mutableSource) {
						{
							{
								if (mutableSource._currentPrimaryRenderer == null) {
									mutableSource._currentPrimaryRenderer = rendererSigil$1;
								} else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) {
									error3(
										"Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported."
									);
								}
							}
						}
					}
					var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
						ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
					var didWarnAboutMismatchedHooksForComponent;
					var didWarnAboutUseOpaqueIdentifier;
					{
						didWarnAboutUseOpaqueIdentifier = {};
						didWarnAboutMismatchedHooksForComponent = new Set();
					}
					var renderLanes = NoLanes;
					var currentlyRenderingFiber$1 = null;
					var currentHook = null;
					var workInProgressHook = null;
					var didScheduleRenderPhaseUpdate = false;
					var didScheduleRenderPhaseUpdateDuringThisPass = false;
					var RE_RENDER_LIMIT = 25;
					var currentHookNameInDev = null;
					var hookTypesDev = null;
					var hookTypesUpdateIndexDev = -1;
					var ignorePreviousDependencies = false;
					function mountHookTypesDev() {
						{
							var hookName = currentHookNameInDev;
							if (hookTypesDev === null) {
								hookTypesDev = [hookName];
							} else {
								hookTypesDev.push(hookName);
							}
						}
					}
					function updateHookTypesDev() {
						{
							var hookName = currentHookNameInDev;
							if (hookTypesDev !== null) {
								hookTypesUpdateIndexDev++;
								if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
									warnOnHookMismatchInDev(hookName);
								}
							}
						}
					}
					function checkDepsAreArrayDev(deps) {
						{
							if (deps !== void 0 && deps !== null && !Array.isArray(deps)) {
								error3(
									"%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.",
									currentHookNameInDev,
									typeof deps
								);
							}
						}
					}
					function warnOnHookMismatchInDev(currentHookName) {
						{
							var componentName = getComponentName(currentlyRenderingFiber$1.type);
							if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
								didWarnAboutMismatchedHooksForComponent.add(componentName);
								if (hookTypesDev !== null) {
									var table = "";
									var secondColumnStart = 30;
									for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
										var oldHookName = hookTypesDev[i];
										var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
										var row = i + 1 + ". " + oldHookName;
										while (row.length < secondColumnStart) {
											row += " ";
										}
										row += newHookName + "\n";
										table += row;
									}
									error3(
										"React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
										componentName,
										table
									);
								}
							}
						}
					}
					function throwInvalidHookError() {
						{
							{
								throw Error(
									"Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem."
								);
							}
						}
					}
					function areHookInputsEqual(nextDeps, prevDeps) {
						{
							if (ignorePreviousDependencies) {
								return false;
							}
						}
						if (prevDeps === null) {
							{
								error3(
									"%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.",
									currentHookNameInDev
								);
							}
							return false;
						}
						{
							if (nextDeps.length !== prevDeps.length) {
								error3(
									"The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s",
									currentHookNameInDev,
									"[" + prevDeps.join(", ") + "]",
									"[" + nextDeps.join(", ") + "]"
								);
							}
						}
						for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
							if (objectIs(nextDeps[i], prevDeps[i])) {
								continue;
							}
							return false;
						}
						return true;
					}
					function renderWithHooks(
						current2,
						workInProgress2,
						Component,
						props,
						secondArg,
						nextRenderLanes
					) {
						renderLanes = nextRenderLanes;
						currentlyRenderingFiber$1 = workInProgress2;
						{
							hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
							hookTypesUpdateIndexDev = -1;
							ignorePreviousDependencies =
								current2 !== null && current2.type !== workInProgress2.type;
						}
						workInProgress2.memoizedState = null;
						workInProgress2.updateQueue = null;
						workInProgress2.lanes = NoLanes;
						{
							if (current2 !== null && current2.memoizedState !== null) {
								ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
							} else if (hookTypesDev !== null) {
								ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
							} else {
								ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
							}
						}
						var children2 = Component(props, secondArg);
						if (didScheduleRenderPhaseUpdateDuringThisPass) {
							var numberOfReRenders = 0;
							do {
								didScheduleRenderPhaseUpdateDuringThisPass = false;
								if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
									{
										throw Error(
											"Too many re-renders. React limits the number of renders to prevent an infinite loop."
										);
									}
								}
								numberOfReRenders += 1;
								{
									ignorePreviousDependencies = false;
								}
								currentHook = null;
								workInProgressHook = null;
								workInProgress2.updateQueue = null;
								{
									hookTypesUpdateIndexDev = -1;
								}
								ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
								children2 = Component(props, secondArg);
							} while (didScheduleRenderPhaseUpdateDuringThisPass);
						}
						ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
						{
							workInProgress2._debugHookTypes = hookTypesDev;
						}
						var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
						renderLanes = NoLanes;
						currentlyRenderingFiber$1 = null;
						currentHook = null;
						workInProgressHook = null;
						{
							currentHookNameInDev = null;
							hookTypesDev = null;
							hookTypesUpdateIndexDev = -1;
						}
						didScheduleRenderPhaseUpdate = false;
						if (!!didRenderTooFewHooks) {
							{
								throw Error(
									"Rendered fewer hooks than expected. This may be caused by an accidental early return statement."
								);
							}
						}
						return children2;
					}
					function bailoutHooks(current2, workInProgress2, lanes) {
						workInProgress2.updateQueue = current2.updateQueue;
						workInProgress2.flags &= ~(Passive | Update);
						current2.lanes = removeLanes(current2.lanes, lanes);
					}
					function resetHooksAfterThrow() {
						ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
						if (didScheduleRenderPhaseUpdate) {
							var hook = currentlyRenderingFiber$1.memoizedState;
							while (hook !== null) {
								var queue = hook.queue;
								if (queue !== null) {
									queue.pending = null;
								}
								hook = hook.next;
							}
							didScheduleRenderPhaseUpdate = false;
						}
						renderLanes = NoLanes;
						currentlyRenderingFiber$1 = null;
						currentHook = null;
						workInProgressHook = null;
						{
							hookTypesDev = null;
							hookTypesUpdateIndexDev = -1;
							currentHookNameInDev = null;
							isUpdatingOpaqueValueInRenderPhase = false;
						}
						didScheduleRenderPhaseUpdateDuringThisPass = false;
					}
					function mountWorkInProgressHook() {
						var hook = {
							memoizedState: null,
							baseState: null,
							baseQueue: null,
							queue: null,
							next: null,
						};
						if (workInProgressHook === null) {
							currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
						} else {
							workInProgressHook = workInProgressHook.next = hook;
						}
						return workInProgressHook;
					}
					function updateWorkInProgressHook() {
						var nextCurrentHook;
						if (currentHook === null) {
							var current2 = currentlyRenderingFiber$1.alternate;
							if (current2 !== null) {
								nextCurrentHook = current2.memoizedState;
							} else {
								nextCurrentHook = null;
							}
						} else {
							nextCurrentHook = currentHook.next;
						}
						var nextWorkInProgressHook;
						if (workInProgressHook === null) {
							nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
						} else {
							nextWorkInProgressHook = workInProgressHook.next;
						}
						if (nextWorkInProgressHook !== null) {
							workInProgressHook = nextWorkInProgressHook;
							nextWorkInProgressHook = workInProgressHook.next;
							currentHook = nextCurrentHook;
						} else {
							if (!(nextCurrentHook !== null)) {
								{
									throw Error("Rendered more hooks than during the previous render.");
								}
							}
							currentHook = nextCurrentHook;
							var newHook = {
								memoizedState: currentHook.memoizedState,
								baseState: currentHook.baseState,
								baseQueue: currentHook.baseQueue,
								queue: currentHook.queue,
								next: null,
							};
							if (workInProgressHook === null) {
								currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
							} else {
								workInProgressHook = workInProgressHook.next = newHook;
							}
						}
						return workInProgressHook;
					}
					function createFunctionComponentUpdateQueue() {
						return {
							lastEffect: null,
						};
					}
					function basicStateReducer(state, action) {
						return typeof action === "function" ? action(state) : action;
					}
					function mountReducer(reducer, initialArg, init2) {
						var hook = mountWorkInProgressHook();
						var initialState;
						if (init2 !== void 0) {
							initialState = init2(initialArg);
						} else {
							initialState = initialArg;
						}
						hook.memoizedState = hook.baseState = initialState;
						var queue = (hook.queue = {
							pending: null,
							dispatch: null,
							lastRenderedReducer: reducer,
							lastRenderedState: initialState,
						});
						var dispatch = (queue.dispatch = dispatchAction.bind(
							null,
							currentlyRenderingFiber$1,
							queue
						));
						return [hook.memoizedState, dispatch];
					}
					function updateReducer(reducer, initialArg, init2) {
						var hook = updateWorkInProgressHook();
						var queue = hook.queue;
						if (!(queue !== null)) {
							{
								throw Error(
									"Should have a queue. This is likely a bug in React. Please file an issue."
								);
							}
						}
						queue.lastRenderedReducer = reducer;
						var current2 = currentHook;
						var baseQueue = current2.baseQueue;
						var pendingQueue = queue.pending;
						if (pendingQueue !== null) {
							if (baseQueue !== null) {
								var baseFirst = baseQueue.next;
								var pendingFirst = pendingQueue.next;
								baseQueue.next = pendingFirst;
								pendingQueue.next = baseFirst;
							}
							{
								if (current2.baseQueue !== baseQueue) {
									error3(
										"Internal error: Expected work-in-progress queue to be a clone. This is a bug in React."
									);
								}
							}
							current2.baseQueue = baseQueue = pendingQueue;
							queue.pending = null;
						}
						if (baseQueue !== null) {
							var first = baseQueue.next;
							var newState = current2.baseState;
							var newBaseState = null;
							var newBaseQueueFirst = null;
							var newBaseQueueLast = null;
							var update2 = first;
							do {
								var updateLane = update2.lane;
								if (!isSubsetOfLanes(renderLanes, updateLane)) {
									var clone = {
										lane: updateLane,
										action: update2.action,
										eagerReducer: update2.eagerReducer,
										eagerState: update2.eagerState,
										next: null,
									};
									if (newBaseQueueLast === null) {
										newBaseQueueFirst = newBaseQueueLast = clone;
										newBaseState = newState;
									} else {
										newBaseQueueLast = newBaseQueueLast.next = clone;
									}
									currentlyRenderingFiber$1.lanes = mergeLanes(
										currentlyRenderingFiber$1.lanes,
										updateLane
									);
									markSkippedUpdateLanes(updateLane);
								} else {
									if (newBaseQueueLast !== null) {
										var _clone = {
											lane: NoLane,
											action: update2.action,
											eagerReducer: update2.eagerReducer,
											eagerState: update2.eagerState,
											next: null,
										};
										newBaseQueueLast = newBaseQueueLast.next = _clone;
									}
									if (update2.eagerReducer === reducer) {
										newState = update2.eagerState;
									} else {
										var action = update2.action;
										newState = reducer(newState, action);
									}
								}
								update2 = update2.next;
							} while (update2 !== null && update2 !== first);
							if (newBaseQueueLast === null) {
								newBaseState = newState;
							} else {
								newBaseQueueLast.next = newBaseQueueFirst;
							}
							if (!objectIs(newState, hook.memoizedState)) {
								markWorkInProgressReceivedUpdate();
							}
							hook.memoizedState = newState;
							hook.baseState = newBaseState;
							hook.baseQueue = newBaseQueueLast;
							queue.lastRenderedState = newState;
						}
						var dispatch = queue.dispatch;
						return [hook.memoizedState, dispatch];
					}
					function rerenderReducer(reducer, initialArg, init2) {
						var hook = updateWorkInProgressHook();
						var queue = hook.queue;
						if (!(queue !== null)) {
							{
								throw Error(
									"Should have a queue. This is likely a bug in React. Please file an issue."
								);
							}
						}
						queue.lastRenderedReducer = reducer;
						var dispatch = queue.dispatch;
						var lastRenderPhaseUpdate = queue.pending;
						var newState = hook.memoizedState;
						if (lastRenderPhaseUpdate !== null) {
							queue.pending = null;
							var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
							var update2 = firstRenderPhaseUpdate;
							do {
								var action = update2.action;
								newState = reducer(newState, action);
								update2 = update2.next;
							} while (update2 !== firstRenderPhaseUpdate);
							if (!objectIs(newState, hook.memoizedState)) {
								markWorkInProgressReceivedUpdate();
							}
							hook.memoizedState = newState;
							if (hook.baseQueue === null) {
								hook.baseState = newState;
							}
							queue.lastRenderedState = newState;
						}
						return [newState, dispatch];
					}
					function readFromUnsubcribedMutableSource(root2, source, getSnapshot) {
						{
							warnAboutMultipleRenderersDEV(source);
						}
						var getVersion = source._getVersion;
						var version4 = getVersion(source._source);
						var isSafeToReadFromSource = false;
						var currentRenderVersion = getWorkInProgressVersion(source);
						if (currentRenderVersion !== null) {
							isSafeToReadFromSource = currentRenderVersion === version4;
						} else {
							isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root2.mutableReadLanes);
							if (isSafeToReadFromSource) {
								setWorkInProgressVersion(source, version4);
							}
						}
						if (isSafeToReadFromSource) {
							var snapshot = getSnapshot(source._source);
							{
								if (typeof snapshot === "function") {
									error3(
										"Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing."
									);
								}
							}
							return snapshot;
						} else {
							markSourceAsDirty(source);
							{
								{
									throw Error(
										"Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue."
									);
								}
							}
						}
					}
					function useMutableSource(hook, source, getSnapshot, subscribe) {
						var root2 = getWorkInProgressRoot();
						if (!(root2 !== null)) {
							{
								throw Error(
									"Expected a work-in-progress root. This is a bug in React. Please file an issue."
								);
							}
						}
						var getVersion = source._getVersion;
						var version4 = getVersion(source._source);
						var dispatcher = ReactCurrentDispatcher$1.current;
						var _dispatcher$useState = dispatcher.useState(function () {
								return readFromUnsubcribedMutableSource(root2, source, getSnapshot);
							}),
							currentSnapshot = _dispatcher$useState[0],
							setSnapshot = _dispatcher$useState[1];
						var snapshot = currentSnapshot;
						var stateHook = workInProgressHook;
						var memoizedState = hook.memoizedState;
						var refs = memoizedState.refs;
						var prevGetSnapshot = refs.getSnapshot;
						var prevSource = memoizedState.source;
						var prevSubscribe = memoizedState.subscribe;
						var fiber = currentlyRenderingFiber$1;
						hook.memoizedState = {
							refs,
							source,
							subscribe,
						};
						dispatcher.useEffect(
							function () {
								refs.getSnapshot = getSnapshot;
								refs.setSnapshot = setSnapshot;
								var maybeNewVersion = getVersion(source._source);
								if (!objectIs(version4, maybeNewVersion)) {
									var maybeNewSnapshot = getSnapshot(source._source);
									{
										if (typeof maybeNewSnapshot === "function") {
											error3(
												"Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing."
											);
										}
									}
									if (!objectIs(snapshot, maybeNewSnapshot)) {
										setSnapshot(maybeNewSnapshot);
										var lane = requestUpdateLane(fiber);
										markRootMutableRead(root2, lane);
									}
									markRootEntangled(root2, root2.mutableReadLanes);
								}
							},
							[getSnapshot, source, subscribe]
						);
						dispatcher.useEffect(
							function () {
								var handleChange = function () {
									var latestGetSnapshot = refs.getSnapshot;
									var latestSetSnapshot = refs.setSnapshot;
									try {
										latestSetSnapshot(latestGetSnapshot(source._source));
										var lane = requestUpdateLane(fiber);
										markRootMutableRead(root2, lane);
									} catch (error4) {
										latestSetSnapshot(function () {
											throw error4;
										});
									}
								};
								var unsubscribe = subscribe(source._source, handleChange);
								{
									if (typeof unsubscribe !== "function") {
										error3(
											"Mutable source subscribe function must return an unsubscribe function."
										);
									}
								}
								return unsubscribe;
							},
							[source, subscribe]
						);
						if (
							!objectIs(prevGetSnapshot, getSnapshot) ||
							!objectIs(prevSource, source) ||
							!objectIs(prevSubscribe, subscribe)
						) {
							var newQueue = {
								pending: null,
								dispatch: null,
								lastRenderedReducer: basicStateReducer,
								lastRenderedState: snapshot,
							};
							newQueue.dispatch = setSnapshot = dispatchAction.bind(
								null,
								currentlyRenderingFiber$1,
								newQueue
							);
							stateHook.queue = newQueue;
							stateHook.baseQueue = null;
							snapshot = readFromUnsubcribedMutableSource(root2, source, getSnapshot);
							stateHook.memoizedState = stateHook.baseState = snapshot;
						}
						return snapshot;
					}
					function mountMutableSource(source, getSnapshot, subscribe) {
						var hook = mountWorkInProgressHook();
						hook.memoizedState = {
							refs: {
								getSnapshot,
								setSnapshot: null,
							},
							source,
							subscribe,
						};
						return useMutableSource(hook, source, getSnapshot, subscribe);
					}
					function updateMutableSource(source, getSnapshot, subscribe) {
						var hook = updateWorkInProgressHook();
						return useMutableSource(hook, source, getSnapshot, subscribe);
					}
					function mountState(initialState) {
						var hook = mountWorkInProgressHook();
						if (typeof initialState === "function") {
							initialState = initialState();
						}
						hook.memoizedState = hook.baseState = initialState;
						var queue = (hook.queue = {
							pending: null,
							dispatch: null,
							lastRenderedReducer: basicStateReducer,
							lastRenderedState: initialState,
						});
						var dispatch = (queue.dispatch = dispatchAction.bind(
							null,
							currentlyRenderingFiber$1,
							queue
						));
						return [hook.memoizedState, dispatch];
					}
					function updateState(initialState) {
						return updateReducer(basicStateReducer);
					}
					function rerenderState(initialState) {
						return rerenderReducer(basicStateReducer);
					}
					function pushEffect(tag, create, destroy, deps) {
						var effect = {
							tag,
							create,
							destroy,
							deps,
							next: null,
						};
						var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
						if (componentUpdateQueue === null) {
							componentUpdateQueue = createFunctionComponentUpdateQueue();
							currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
							componentUpdateQueue.lastEffect = effect.next = effect;
						} else {
							var lastEffect = componentUpdateQueue.lastEffect;
							if (lastEffect === null) {
								componentUpdateQueue.lastEffect = effect.next = effect;
							} else {
								var firstEffect = lastEffect.next;
								lastEffect.next = effect;
								effect.next = firstEffect;
								componentUpdateQueue.lastEffect = effect;
							}
						}
						return effect;
					}
					function mountRef(initialValue) {
						var hook = mountWorkInProgressHook();
						var ref = {
							current: initialValue,
						};
						{
							Object.seal(ref);
						}
						hook.memoizedState = ref;
						return ref;
					}
					function updateRef(initialValue) {
						var hook = updateWorkInProgressHook();
						return hook.memoizedState;
					}
					function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
						var hook = mountWorkInProgressHook();
						var nextDeps = deps === void 0 ? null : deps;
						currentlyRenderingFiber$1.flags |= fiberFlags;
						hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
					}
					function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
						var hook = updateWorkInProgressHook();
						var nextDeps = deps === void 0 ? null : deps;
						var destroy = void 0;
						if (currentHook !== null) {
							var prevEffect = currentHook.memoizedState;
							destroy = prevEffect.destroy;
							if (nextDeps !== null) {
								var prevDeps = prevEffect.deps;
								if (areHookInputsEqual(nextDeps, prevDeps)) {
									pushEffect(hookFlags, create, destroy, nextDeps);
									return;
								}
							}
						}
						currentlyRenderingFiber$1.flags |= fiberFlags;
						hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
					}
					function mountEffect(create, deps) {
						{
							if (typeof jest !== "undefined") {
								warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
							}
						}
						return mountEffectImpl(Update | Passive, Passive$1, create, deps);
					}
					function updateEffect(create, deps) {
						{
							if (typeof jest !== "undefined") {
								warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
							}
						}
						return updateEffectImpl(Update | Passive, Passive$1, create, deps);
					}
					function mountLayoutEffect(create, deps) {
						return mountEffectImpl(Update, Layout, create, deps);
					}
					function updateLayoutEffect(create, deps) {
						return updateEffectImpl(Update, Layout, create, deps);
					}
					function imperativeHandleEffect(create, ref) {
						if (typeof ref === "function") {
							var refCallback = ref;
							var _inst = create();
							refCallback(_inst);
							return function () {
								refCallback(null);
							};
						} else if (ref !== null && ref !== void 0) {
							var refObject = ref;
							{
								if (!refObject.hasOwnProperty("current")) {
									error3(
										"Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.",
										"an object with keys {" + Object.keys(refObject).join(", ") + "}"
									);
								}
							}
							var _inst2 = create();
							refObject.current = _inst2;
							return function () {
								refObject.current = null;
							};
						}
					}
					function mountImperativeHandle(ref, create, deps) {
						{
							if (typeof create !== "function") {
								error3(
									"Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.",
									create !== null ? typeof create : "null"
								);
							}
						}
						var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
						return mountEffectImpl(
							Update,
							Layout,
							imperativeHandleEffect.bind(null, create, ref),
							effectDeps
						);
					}
					function updateImperativeHandle(ref, create, deps) {
						{
							if (typeof create !== "function") {
								error3(
									"Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.",
									create !== null ? typeof create : "null"
								);
							}
						}
						var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
						return updateEffectImpl(
							Update,
							Layout,
							imperativeHandleEffect.bind(null, create, ref),
							effectDeps
						);
					}
					function mountDebugValue(value, formatterFn) {}
					var updateDebugValue = mountDebugValue;
					function mountCallback(callback, deps) {
						var hook = mountWorkInProgressHook();
						var nextDeps = deps === void 0 ? null : deps;
						hook.memoizedState = [callback, nextDeps];
						return callback;
					}
					function updateCallback(callback, deps) {
						var hook = updateWorkInProgressHook();
						var nextDeps = deps === void 0 ? null : deps;
						var prevState = hook.memoizedState;
						if (prevState !== null) {
							if (nextDeps !== null) {
								var prevDeps = prevState[1];
								if (areHookInputsEqual(nextDeps, prevDeps)) {
									return prevState[0];
								}
							}
						}
						hook.memoizedState = [callback, nextDeps];
						return callback;
					}
					function mountMemo(nextCreate, deps) {
						var hook = mountWorkInProgressHook();
						var nextDeps = deps === void 0 ? null : deps;
						var nextValue = nextCreate();
						hook.memoizedState = [nextValue, nextDeps];
						return nextValue;
					}
					function updateMemo(nextCreate, deps) {
						var hook = updateWorkInProgressHook();
						var nextDeps = deps === void 0 ? null : deps;
						var prevState = hook.memoizedState;
						if (prevState !== null) {
							if (nextDeps !== null) {
								var prevDeps = prevState[1];
								if (areHookInputsEqual(nextDeps, prevDeps)) {
									return prevState[0];
								}
							}
						}
						var nextValue = nextCreate();
						hook.memoizedState = [nextValue, nextDeps];
						return nextValue;
					}
					function mountDeferredValue(value) {
						var _mountState = mountState(value),
							prevValue = _mountState[0],
							setValue = _mountState[1];
						mountEffect(
							function () {
								var prevTransition = ReactCurrentBatchConfig$1.transition;
								ReactCurrentBatchConfig$1.transition = 1;
								try {
									setValue(value);
								} finally {
									ReactCurrentBatchConfig$1.transition = prevTransition;
								}
							},
							[value]
						);
						return prevValue;
					}
					function updateDeferredValue(value) {
						var _updateState = updateState(),
							prevValue = _updateState[0],
							setValue = _updateState[1];
						updateEffect(
							function () {
								var prevTransition = ReactCurrentBatchConfig$1.transition;
								ReactCurrentBatchConfig$1.transition = 1;
								try {
									setValue(value);
								} finally {
									ReactCurrentBatchConfig$1.transition = prevTransition;
								}
							},
							[value]
						);
						return prevValue;
					}
					function rerenderDeferredValue(value) {
						var _rerenderState = rerenderState(),
							prevValue = _rerenderState[0],
							setValue = _rerenderState[1];
						updateEffect(
							function () {
								var prevTransition = ReactCurrentBatchConfig$1.transition;
								ReactCurrentBatchConfig$1.transition = 1;
								try {
									setValue(value);
								} finally {
									ReactCurrentBatchConfig$1.transition = prevTransition;
								}
							},
							[value]
						);
						return prevValue;
					}
					function startTransition(setPending, callback) {
						var priorityLevel = getCurrentPriorityLevel();
						{
							runWithPriority$1(
								priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel,
								function () {
									setPending(true);
								}
							);
							runWithPriority$1(
								priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel,
								function () {
									var prevTransition = ReactCurrentBatchConfig$1.transition;
									ReactCurrentBatchConfig$1.transition = 1;
									try {
										setPending(false);
										callback();
									} finally {
										ReactCurrentBatchConfig$1.transition = prevTransition;
									}
								}
							);
						}
					}
					function mountTransition() {
						var _mountState2 = mountState(false),
							isPending = _mountState2[0],
							setPending = _mountState2[1];
						var start3 = startTransition.bind(null, setPending);
						mountRef(start3);
						return [start3, isPending];
					}
					function updateTransition() {
						var _updateState2 = updateState(),
							isPending = _updateState2[0];
						var startRef = updateRef();
						var start3 = startRef.current;
						return [start3, isPending];
					}
					function rerenderTransition() {
						var _rerenderState2 = rerenderState(),
							isPending = _rerenderState2[0];
						var startRef = updateRef();
						var start3 = startRef.current;
						return [start3, isPending];
					}
					var isUpdatingOpaqueValueInRenderPhase = false;
					function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
						{
							return isUpdatingOpaqueValueInRenderPhase;
						}
					}
					function warnOnOpaqueIdentifierAccessInDEV(fiber) {
						{
							var name2 = getComponentName(fiber.type) || "Unknown";
							if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name2]) {
								error3(
									"The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly."
								);
								didWarnAboutUseOpaqueIdentifier[name2] = true;
							}
						}
					}
					function mountOpaqueIdentifier() {
						var makeId = makeClientIdInDEV.bind(
							null,
							warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1)
						);
						if (getIsHydrating()) {
							var didUpgrade = false;
							var fiber = currentlyRenderingFiber$1;
							var readValue = function () {
								if (!didUpgrade) {
									didUpgrade = true;
									{
										isUpdatingOpaqueValueInRenderPhase = true;
										setId(makeId());
										isUpdatingOpaqueValueInRenderPhase = false;
										warnOnOpaqueIdentifierAccessInDEV(fiber);
									}
								}
								{
									{
										throw Error(
											"The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly."
										);
									}
								}
							};
							var id = makeOpaqueHydratingObject(readValue);
							var setId = mountState(id)[1];
							if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
								currentlyRenderingFiber$1.flags |= Update | Passive;
								pushEffect(
									HasEffect | Passive$1,
									function () {
										setId(makeId());
									},
									void 0,
									null
								);
							}
							return id;
						} else {
							var _id = makeId();
							mountState(_id);
							return _id;
						}
					}
					function updateOpaqueIdentifier() {
						var id = updateState()[0];
						return id;
					}
					function rerenderOpaqueIdentifier() {
						var id = rerenderState()[0];
						return id;
					}
					function dispatchAction(fiber, queue, action) {
						{
							if (typeof arguments[3] === "function") {
								error3(
									"State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect()."
								);
							}
						}
						var eventTime = requestEventTime();
						var lane = requestUpdateLane(fiber);
						var update2 = {
							lane,
							action,
							eagerReducer: null,
							eagerState: null,
							next: null,
						};
						var pending = queue.pending;
						if (pending === null) {
							update2.next = update2;
						} else {
							update2.next = pending.next;
							pending.next = update2;
						}
						queue.pending = update2;
						var alternate = fiber.alternate;
						if (
							fiber === currentlyRenderingFiber$1 ||
							(alternate !== null && alternate === currentlyRenderingFiber$1)
						) {
							didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
						} else {
							if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
								var lastRenderedReducer = queue.lastRenderedReducer;
								if (lastRenderedReducer !== null) {
									var prevDispatcher;
									{
										prevDispatcher = ReactCurrentDispatcher$1.current;
										ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
									}
									try {
										var currentState = queue.lastRenderedState;
										var eagerState = lastRenderedReducer(currentState, action);
										update2.eagerReducer = lastRenderedReducer;
										update2.eagerState = eagerState;
										if (objectIs(eagerState, currentState)) {
											return;
										}
									} catch (error4) {
									} finally {
										{
											ReactCurrentDispatcher$1.current = prevDispatcher;
										}
									}
								}
							}
							{
								if (typeof jest !== "undefined") {
									warnIfNotScopedWithMatchingAct(fiber);
									warnIfNotCurrentlyActingUpdatesInDev(fiber);
								}
							}
							scheduleUpdateOnFiber(fiber, lane, eventTime);
						}
					}
					var ContextOnlyDispatcher = {
						readContext,
						useCallback: throwInvalidHookError,
						useContext: throwInvalidHookError,
						useEffect: throwInvalidHookError,
						useImperativeHandle: throwInvalidHookError,
						useLayoutEffect: throwInvalidHookError,
						useMemo: throwInvalidHookError,
						useReducer: throwInvalidHookError,
						useRef: throwInvalidHookError,
						useState: throwInvalidHookError,
						useDebugValue: throwInvalidHookError,
						useDeferredValue: throwInvalidHookError,
						useTransition: throwInvalidHookError,
						useMutableSource: throwInvalidHookError,
						useOpaqueIdentifier: throwInvalidHookError,
						unstable_isNewReconciler: enableNewReconciler,
					};
					var HooksDispatcherOnMountInDEV = null;
					var HooksDispatcherOnMountWithHookTypesInDEV = null;
					var HooksDispatcherOnUpdateInDEV = null;
					var HooksDispatcherOnRerenderInDEV = null;
					var InvalidNestedHooksDispatcherOnMountInDEV = null;
					var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
					var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
					{
						var warnInvalidContextAccess = function () {
							error3(
								"Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."
							);
						};
						var warnInvalidHookAccess = function () {
							error3(
								"Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks"
							);
						};
						HooksDispatcherOnMountInDEV = {
							readContext: function (context, observedBits) {
								return readContext(context, observedBits);
							},
							useCallback: function (callback, deps) {
								currentHookNameInDev = "useCallback";
								mountHookTypesDev();
								checkDepsAreArrayDev(deps);
								return mountCallback(callback, deps);
							},
							useContext: function (context, observedBits) {
								currentHookNameInDev = "useContext";
								mountHookTypesDev();
								return readContext(context, observedBits);
							},
							useEffect: function (create, deps) {
								currentHookNameInDev = "useEffect";
								mountHookTypesDev();
								checkDepsAreArrayDev(deps);
								return mountEffect(create, deps);
							},
							useImperativeHandle: function (ref, create, deps) {
								currentHookNameInDev = "useImperativeHandle";
								mountHookTypesDev();
								checkDepsAreArrayDev(deps);
								return mountImperativeHandle(ref, create, deps);
							},
							useLayoutEffect: function (create, deps) {
								currentHookNameInDev = "useLayoutEffect";
								mountHookTypesDev();
								checkDepsAreArrayDev(deps);
								return mountLayoutEffect(create, deps);
							},
							useMemo: function (create, deps) {
								currentHookNameInDev = "useMemo";
								mountHookTypesDev();
								checkDepsAreArrayDev(deps);
								var prevDispatcher = ReactCurrentDispatcher$1.current;
								ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
								try {
									return mountMemo(create, deps);
								} finally {
									ReactCurrentDispatcher$1.current = prevDispatcher;
								}
							},
							useReducer: function (reducer, initialArg, init2) {
								currentHookNameInDev = "useReducer";
								mountHookTypesDev();
								var prevDispatcher = ReactCurrentDispatcher$1.current;
								ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
								try {
									return mountReducer(reducer, initialArg, init2);
								} finally {
									ReactCurrentDispatcher$1.current = prevDispatcher;
								}
							},
							useRef: function (initialValue) {
								currentHookNameInDev = "useRef";
								mountHookTypesDev();
								return mountRef(initialValue);
							},
							useState: function (initialState) {
								currentHookNameInDev = "useState";
								mountHookTypesDev();
								var prevDispatcher = ReactCurrentDispatcher$1.current;
								ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
								try {
									return mountState(initialState);
								} finally {
									ReactCurrentDispatcher$1.current = prevDispatcher;
								}
							},
							useDebugValue: function (value, formatterFn) {
								currentHookNameInDev = "useDebugValue";
								mountHookTypesDev();
								return mountDebugValue();
							},
							useDeferredValue: function (value) {
								currentHookNameInDev = "useDeferredValue";
								mountHookTypesDev();
								return mountDeferredValue(value);
							},
							useTransition: function () {
								currentHookNameInDev = "useTransition";
								mountHookTypesDev();
								return mountTransition();
							},
							useMutableSource: function (source, getSnapshot, subscribe) {
								currentHookNameInDev = "useMutableSource";
								mountHookTypesDev();
								return mountMutableSource(source, getSnapshot, subscribe);
							},
							useOpaqueIdentifier: function () {
								currentHookNameInDev = "useOpaqueIdentifier";
								mountHookTypesDev();
								return mountOpaqueIdentifier();
							},
							unstable_isNewReconciler: enableNewReconciler,
						};
						HooksDispatcherOnMountWithHookTypesInDEV = {
							readContext: function (context, observedBits) {
								return readContext(context, observedBits);
							},
							useCallback: function (callback, deps) {
								currentHookNameInDev = "useCallback";
								updateHookTypesDev();
								return mountCallback(callback, deps);
							},
							useContext: function (context, observedBits) {
								currentHookNameInDev = "useContext";
								updateHookTypesDev();
								return readContext(context, observedBits);
							},
							useEffect: function (create, deps) {
								currentHookNameInDev = "useEffect";
								updateHookTypesDev();
								return mountEffect(create, deps);
							},
							useImperativeHandle: function (ref, create, deps) {
								currentHookNameInDev = "useImperativeHandle";
								updateHookTypesDev();
								return mountImperativeHandle(ref, create, deps);
							},
							useLayoutEffect: function (create, deps) {
								currentHookNameInDev = "useLayoutEffect";
								updateHookTypesDev();
								return mountLayoutEffect(create, deps);
							},
							useMemo: function (create, deps) {
								currentHookNameInDev = "useMemo";
								updateHookTypesDev();
								var prevDispatcher = ReactCurrentDispatcher$1.current;
								ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
								try {
									return mountMemo(create, deps);
								} finally {
									ReactCurrentDispatcher$1.current = prevDispatcher;
								}
							},
							useReducer: function (reducer, initialArg, init2) {
								currentHookNameInDev = "useReducer";
								updateHookTypesDev();
								var prevDispatcher = ReactCurrentDispatcher$1.current;
								ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
								try {
									return mountReducer(reducer, initialArg, init2);
								} finally {
									ReactCurrentDispatcher$1.current = prevDispatcher;
								}
							},
							useRef: function (initialValue) {
								currentHookNameInDev = "useRef";
								updateHookTypesDev();
								return mountRef(initialValue);
							},
							useState: function (initialState) {
								currentHookNameInDev = "useState";
								updateHookTypesDev();
								var prevDispatcher = ReactCurrentDispatcher$1.current;
								ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
								try {
									return mountState(initialState);
								} finally {
									ReactCurrentDispatcher$1.current = prevDispatcher;
								}
							},
							useDebugValue: function (value, formatterFn) {
								currentHookNameInDev = "useDebugValue";
								updateHookTypesDev();
								return mountDebugValue();
							},
							useDeferredValue: function (value) {
								currentHookNameInDev = "useDeferredValue";
								updateHookTypesDev();
								return mountDeferredValue(value);
							},
							useTransition: function () {
								currentHookNameInDev = "useTransition";
								updateHookTypesDev();
								return mountTransition();
							},
							useMutableSource: function (source, getSnapshot, subscribe) {
								currentHookNameInDev = "useMutableSource";
								updateHookTypesDev();
								return mountMutableSource(source, getSnapshot, subscribe);
							},
							useOpaqueIdentifier: function () {
								currentHookNameInDev = "useOpaqueIdentifier";
								updateHookTypesDev();
								return mountOpaqueIdentifier();
							},
							unstable_isNewReconciler: enableNewReconciler,
						};
						HooksDispatcherOnUpdateInDEV = {
							readContext: function (context, observedBits) {
								return readContext(context, observedBits);
							},
							useCallback: function (callback, deps) {
								currentHookNameInDev = "useCallback";
								updateHookTypesDev();
								return updateCallback(callback, deps);
							},
							useContext: function (context, observedBits) {
								currentHookNameInDev = "useContext";
								updateHookTypesDev();
								return readContext(context, observedBits);
							},
							useEffect: function (create, deps) {
								currentHookNameInDev = "useEffect";
								updateHookTypesDev();
								return updateEffect(create, deps);
							},
							useImperativeHandle: function (ref, create, deps) {
								currentHookNameInDev = "useImperativeHandle";
								updateHookTypesDev();
								return updateImperativeHandle(ref, create, deps);
							},
							useLayoutEffect: function (create, deps) {
								currentHookNameInDev = "useLayoutEffect";
								updateHookTypesDev();
								return updateLayoutEffect(create, deps);
							},
							useMemo: function (create, deps) {
								currentHookNameInDev = "useMemo";
								updateHookTypesDev();
								var prevDispatcher = ReactCurrentDispatcher$1.current;
								ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
								try {
									return updateMemo(create, deps);
								} finally {
									ReactCurrentDispatcher$1.current = prevDispatcher;
								}
							},
							useReducer: function (reducer, initialArg, init2) {
								currentHookNameInDev = "useReducer";
								updateHookTypesDev();
								var prevDispatcher = ReactCurrentDispatcher$1.current;
								ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
								try {
									return updateReducer(reducer, initialArg, init2);
								} finally {
									ReactCurrentDispatcher$1.current = prevDispatcher;
								}
							},
							useRef: function (initialValue) {
								currentHookNameInDev = "useRef";
								updateHookTypesDev();
								return updateRef();
							},
							useState: function (initialState) {
								currentHookNameInDev = "useState";
								updateHookTypesDev();
								var prevDispatcher = ReactCurrentDispatcher$1.current;
								ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
								try {
									return updateState(initialState);
								} finally {
									ReactCurrentDispatcher$1.current = prevDispatcher;
								}
							},
							useDebugValue: function (value, formatterFn) {
								currentHookNameInDev = "useDebugValue";
								updateHookTypesDev();
								return updateDebugValue();
							},
							useDeferredValue: function (value) {
								currentHookNameInDev = "useDeferredValue";
								updateHookTypesDev();
								return updateDeferredValue(value);
							},
							useTransition: function () {
								currentHookNameInDev = "useTransition";
								updateHookTypesDev();
								return updateTransition();
							},
							useMutableSource: function (source, getSnapshot, subscribe) {
								currentHookNameInDev = "useMutableSource";
								updateHookTypesDev();
								return updateMutableSource(source, getSnapshot, subscribe);
							},
							useOpaqueIdentifier: function () {
								currentHookNameInDev = "useOpaqueIdentifier";
								updateHookTypesDev();
								return updateOpaqueIdentifier();
							},
							unstable_isNewReconciler: enableNewReconciler,
						};
						HooksDispatcherOnRerenderInDEV = {
							readContext: function (context, observedBits) {
								return readContext(context, observedBits);
							},
							useCallback: function (callback, deps) {
								currentHookNameInDev = "useCallback";
								updateHookTypesDev();
								return updateCallback(callback, deps);
							},
							useContext: function (context, observedBits) {
								currentHookNameInDev = "useContext";
								updateHookTypesDev();
								return readContext(context, observedBits);
							},
							useEffect: function (create, deps) {
								currentHookNameInDev = "useEffect";
								updateHookTypesDev();
								return updateEffect(create, deps);
							},
							useImperativeHandle: function (ref, create, deps) {
								currentHookNameInDev = "useImperativeHandle";
								updateHookTypesDev();
								return updateImperativeHandle(ref, create, deps);
							},
							useLayoutEffect: function (create, deps) {
								currentHookNameInDev = "useLayoutEffect";
								updateHookTypesDev();
								return updateLayoutEffect(create, deps);
							},
							useMemo: function (create, deps) {
								currentHookNameInDev = "useMemo";
								updateHookTypesDev();
								var prevDispatcher = ReactCurrentDispatcher$1.current;
								ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
								try {
									return updateMemo(create, deps);
								} finally {
									ReactCurrentDispatcher$1.current = prevDispatcher;
								}
							},
							useReducer: function (reducer, initialArg, init2) {
								currentHookNameInDev = "useReducer";
								updateHookTypesDev();
								var prevDispatcher = ReactCurrentDispatcher$1.current;
								ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
								try {
									return rerenderReducer(reducer, initialArg, init2);
								} finally {
									ReactCurrentDispatcher$1.current = prevDispatcher;
								}
							},
							useRef: function (initialValue) {
								currentHookNameInDev = "useRef";
								updateHookTypesDev();
								return updateRef();
							},
							useState: function (initialState) {
								currentHookNameInDev = "useState";
								updateHookTypesDev();
								var prevDispatcher = ReactCurrentDispatcher$1.current;
								ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
								try {
									return rerenderState(initialState);
								} finally {
									ReactCurrentDispatcher$1.current = prevDispatcher;
								}
							},
							useDebugValue: function (value, formatterFn) {
								currentHookNameInDev = "useDebugValue";
								updateHookTypesDev();
								return updateDebugValue();
							},
							useDeferredValue: function (value) {
								currentHookNameInDev = "useDeferredValue";
								updateHookTypesDev();
								return rerenderDeferredValue(value);
							},
							useTransition: function () {
								currentHookNameInDev = "useTransition";
								updateHookTypesDev();
								return rerenderTransition();
							},
							useMutableSource: function (source, getSnapshot, subscribe) {
								currentHookNameInDev = "useMutableSource";
								updateHookTypesDev();
								return updateMutableSource(source, getSnapshot, subscribe);
							},
							useOpaqueIdentifier: function () {
								currentHookNameInDev = "useOpaqueIdentifier";
								updateHookTypesDev();
								return rerenderOpaqueIdentifier();
							},
							unstable_isNewReconciler: enableNewReconciler,
						};
						InvalidNestedHooksDispatcherOnMountInDEV = {
							readContext: function (context, observedBits) {
								warnInvalidContextAccess();
								return readContext(context, observedBits);
							},
							useCallback: function (callback, deps) {
								currentHookNameInDev = "useCallback";
								warnInvalidHookAccess();
								mountHookTypesDev();
								return mountCallback(callback, deps);
							},
							useContext: function (context, observedBits) {
								currentHookNameInDev = "useContext";
								warnInvalidHookAccess();
								mountHookTypesDev();
								return readContext(context, observedBits);
							},
							useEffect: function (create, deps) {
								currentHookNameInDev = "useEffect";
								warnInvalidHookAccess();
								mountHookTypesDev();
								return mountEffect(create, deps);
							},
							useImperativeHandle: function (ref, create, deps) {
								currentHookNameInDev = "useImperativeHandle";
								warnInvalidHookAccess();
								mountHookTypesDev();
								return mountImperativeHandle(ref, create, deps);
							},
							useLayoutEffect: function (create, deps) {
								currentHookNameInDev = "useLayoutEffect";
								warnInvalidHookAccess();
								mountHookTypesDev();
								return mountLayoutEffect(create, deps);
							},
							useMemo: function (create, deps) {
								currentHookNameInDev = "useMemo";
								warnInvalidHookAccess();
								mountHookTypesDev();
								var prevDispatcher = ReactCurrentDispatcher$1.current;
								ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
								try {
									return mountMemo(create, deps);
								} finally {
									ReactCurrentDispatcher$1.current = prevDispatcher;
								}
							},
							useReducer: function (reducer, initialArg, init2) {
								currentHookNameInDev = "useReducer";
								warnInvalidHookAccess();
								mountHookTypesDev();
								var prevDispatcher = ReactCurrentDispatcher$1.current;
								ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
								try {
									return mountReducer(reducer, initialArg, init2);
								} finally {
									ReactCurrentDispatcher$1.current = prevDispatcher;
								}
							},
							useRef: function (initialValue) {
								currentHookNameInDev = "useRef";
								warnInvalidHookAccess();
								mountHookTypesDev();
								return mountRef(initialValue);
							},
							useState: function (initialState) {
								currentHookNameInDev = "useState";
								warnInvalidHookAccess();
								mountHookTypesDev();
								var prevDispatcher = ReactCurrentDispatcher$1.current;
								ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
								try {
									return mountState(initialState);
								} finally {
									ReactCurrentDispatcher$1.current = prevDispatcher;
								}
							},
							useDebugValue: function (value, formatterFn) {
								currentHookNameInDev = "useDebugValue";
								warnInvalidHookAccess();
								mountHookTypesDev();
								return mountDebugValue();
							},
							useDeferredValue: function (value) {
								currentHookNameInDev = "useDeferredValue";
								warnInvalidHookAccess();
								mountHookTypesDev();
								return mountDeferredValue(value);
							},
							useTransition: function () {
								currentHookNameInDev = "useTransition";
								warnInvalidHookAccess();
								mountHookTypesDev();
								return mountTransition();
							},
							useMutableSource: function (source, getSnapshot, subscribe) {
								currentHookNameInDev = "useMutableSource";
								warnInvalidHookAccess();
								mountHookTypesDev();
								return mountMutableSource(source, getSnapshot, subscribe);
							},
							useOpaqueIdentifier: function () {
								currentHookNameInDev = "useOpaqueIdentifier";
								warnInvalidHookAccess();
								mountHookTypesDev();
								return mountOpaqueIdentifier();
							},
							unstable_isNewReconciler: enableNewReconciler,
						};
						InvalidNestedHooksDispatcherOnUpdateInDEV = {
							readContext: function (context, observedBits) {
								warnInvalidContextAccess();
								return readContext(context, observedBits);
							},
							useCallback: function (callback, deps) {
								currentHookNameInDev = "useCallback";
								warnInvalidHookAccess();
								updateHookTypesDev();
								return updateCallback(callback, deps);
							},
							useContext: function (context, observedBits) {
								currentHookNameInDev = "useContext";
								warnInvalidHookAccess();
								updateHookTypesDev();
								return readContext(context, observedBits);
							},
							useEffect: function (create, deps) {
								currentHookNameInDev = "useEffect";
								warnInvalidHookAccess();
								updateHookTypesDev();
								return updateEffect(create, deps);
							},
							useImperativeHandle: function (ref, create, deps) {
								currentHookNameInDev = "useImperativeHandle";
								warnInvalidHookAccess();
								updateHookTypesDev();
								return updateImperativeHandle(ref, create, deps);
							},
							useLayoutEffect: function (create, deps) {
								currentHookNameInDev = "useLayoutEffect";
								warnInvalidHookAccess();
								updateHookTypesDev();
								return updateLayoutEffect(create, deps);
							},
							useMemo: function (create, deps) {
								currentHookNameInDev = "useMemo";
								warnInvalidHookAccess();
								updateHookTypesDev();
								var prevDispatcher = ReactCurrentDispatcher$1.current;
								ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
								try {
									return updateMemo(create, deps);
								} finally {
									ReactCurrentDispatcher$1.current = prevDispatcher;
								}
							},
							useReducer: function (reducer, initialArg, init2) {
								currentHookNameInDev = "useReducer";
								warnInvalidHookAccess();
								updateHookTypesDev();
								var prevDispatcher = ReactCurrentDispatcher$1.current;
								ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
								try {
									return updateReducer(reducer, initialArg, init2);
								} finally {
									ReactCurrentDispatcher$1.current = prevDispatcher;
								}
							},
							useRef: function (initialValue) {
								currentHookNameInDev = "useRef";
								warnInvalidHookAccess();
								updateHookTypesDev();
								return updateRef();
							},
							useState: function (initialState) {
								currentHookNameInDev = "useState";
								warnInvalidHookAccess();
								updateHookTypesDev();
								var prevDispatcher = ReactCurrentDispatcher$1.current;
								ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
								try {
									return updateState(initialState);
								} finally {
									ReactCurrentDispatcher$1.current = prevDispatcher;
								}
							},
							useDebugValue: function (value, formatterFn) {
								currentHookNameInDev = "useDebugValue";
								warnInvalidHookAccess();
								updateHookTypesDev();
								return updateDebugValue();
							},
							useDeferredValue: function (value) {
								currentHookNameInDev = "useDeferredValue";
								warnInvalidHookAccess();
								updateHookTypesDev();
								return updateDeferredValue(value);
							},
							useTransition: function () {
								currentHookNameInDev = "useTransition";
								warnInvalidHookAccess();
								updateHookTypesDev();
								return updateTransition();
							},
							useMutableSource: function (source, getSnapshot, subscribe) {
								currentHookNameInDev = "useMutableSource";
								warnInvalidHookAccess();
								updateHookTypesDev();
								return updateMutableSource(source, getSnapshot, subscribe);
							},
							useOpaqueIdentifier: function () {
								currentHookNameInDev = "useOpaqueIdentifier";
								warnInvalidHookAccess();
								updateHookTypesDev();
								return updateOpaqueIdentifier();
							},
							unstable_isNewReconciler: enableNewReconciler,
						};
						InvalidNestedHooksDispatcherOnRerenderInDEV = {
							readContext: function (context, observedBits) {
								warnInvalidContextAccess();
								return readContext(context, observedBits);
							},
							useCallback: function (callback, deps) {
								currentHookNameInDev = "useCallback";
								warnInvalidHookAccess();
								updateHookTypesDev();
								return updateCallback(callback, deps);
							},
							useContext: function (context, observedBits) {
								currentHookNameInDev = "useContext";
								warnInvalidHookAccess();
								updateHookTypesDev();
								return readContext(context, observedBits);
							},
							useEffect: function (create, deps) {
								currentHookNameInDev = "useEffect";
								warnInvalidHookAccess();
								updateHookTypesDev();
								return updateEffect(create, deps);
							},
							useImperativeHandle: function (ref, create, deps) {
								currentHookNameInDev = "useImperativeHandle";
								warnInvalidHookAccess();
								updateHookTypesDev();
								return updateImperativeHandle(ref, create, deps);
							},
							useLayoutEffect: function (create, deps) {
								currentHookNameInDev = "useLayoutEffect";
								warnInvalidHookAccess();
								updateHookTypesDev();
								return updateLayoutEffect(create, deps);
							},
							useMemo: function (create, deps) {
								currentHookNameInDev = "useMemo";
								warnInvalidHookAccess();
								updateHookTypesDev();
								var prevDispatcher = ReactCurrentDispatcher$1.current;
								ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
								try {
									return updateMemo(create, deps);
								} finally {
									ReactCurrentDispatcher$1.current = prevDispatcher;
								}
							},
							useReducer: function (reducer, initialArg, init2) {
								currentHookNameInDev = "useReducer";
								warnInvalidHookAccess();
								updateHookTypesDev();
								var prevDispatcher = ReactCurrentDispatcher$1.current;
								ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
								try {
									return rerenderReducer(reducer, initialArg, init2);
								} finally {
									ReactCurrentDispatcher$1.current = prevDispatcher;
								}
							},
							useRef: function (initialValue) {
								currentHookNameInDev = "useRef";
								warnInvalidHookAccess();
								updateHookTypesDev();
								return updateRef();
							},
							useState: function (initialState) {
								currentHookNameInDev = "useState";
								warnInvalidHookAccess();
								updateHookTypesDev();
								var prevDispatcher = ReactCurrentDispatcher$1.current;
								ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
								try {
									return rerenderState(initialState);
								} finally {
									ReactCurrentDispatcher$1.current = prevDispatcher;
								}
							},
							useDebugValue: function (value, formatterFn) {
								currentHookNameInDev = "useDebugValue";
								warnInvalidHookAccess();
								updateHookTypesDev();
								return updateDebugValue();
							},
							useDeferredValue: function (value) {
								currentHookNameInDev = "useDeferredValue";
								warnInvalidHookAccess();
								updateHookTypesDev();
								return rerenderDeferredValue(value);
							},
							useTransition: function () {
								currentHookNameInDev = "useTransition";
								warnInvalidHookAccess();
								updateHookTypesDev();
								return rerenderTransition();
							},
							useMutableSource: function (source, getSnapshot, subscribe) {
								currentHookNameInDev = "useMutableSource";
								warnInvalidHookAccess();
								updateHookTypesDev();
								return updateMutableSource(source, getSnapshot, subscribe);
							},
							useOpaqueIdentifier: function () {
								currentHookNameInDev = "useOpaqueIdentifier";
								warnInvalidHookAccess();
								updateHookTypesDev();
								return rerenderOpaqueIdentifier();
							},
							unstable_isNewReconciler: enableNewReconciler,
						};
					}
					var now$1 = Scheduler2.unstable_now;
					var commitTime = 0;
					var profilerStartTime = -1;
					function getCommitTime() {
						return commitTime;
					}
					function recordCommitTime() {
						commitTime = now$1();
					}
					function startProfilerTimer(fiber) {
						profilerStartTime = now$1();
						if (fiber.actualStartTime < 0) {
							fiber.actualStartTime = now$1();
						}
					}
					function stopProfilerTimerIfRunning(fiber) {
						profilerStartTime = -1;
					}
					function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
						if (profilerStartTime >= 0) {
							var elapsedTime = now$1() - profilerStartTime;
							fiber.actualDuration += elapsedTime;
							if (overrideBaseTime) {
								fiber.selfBaseDuration = elapsedTime;
							}
							profilerStartTime = -1;
						}
					}
					function transferActualDuration(fiber) {
						var child = fiber.child;
						while (child) {
							fiber.actualDuration += child.actualDuration;
							child = child.sibling;
						}
					}
					var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
					var didReceiveUpdate = false;
					var didWarnAboutBadClass;
					var didWarnAboutModulePatternComponent;
					var didWarnAboutContextTypeOnFunctionComponent;
					var didWarnAboutGetDerivedStateOnFunctionComponent;
					var didWarnAboutFunctionRefs;
					var didWarnAboutReassigningProps;
					var didWarnAboutRevealOrder;
					var didWarnAboutTailOptions;
					{
						didWarnAboutBadClass = {};
						didWarnAboutModulePatternComponent = {};
						didWarnAboutContextTypeOnFunctionComponent = {};
						didWarnAboutGetDerivedStateOnFunctionComponent = {};
						didWarnAboutFunctionRefs = {};
						didWarnAboutReassigningProps = false;
						didWarnAboutRevealOrder = {};
						didWarnAboutTailOptions = {};
					}
					function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
						if (current2 === null) {
							workInProgress2.child = mountChildFibers(
								workInProgress2,
								null,
								nextChildren,
								renderLanes2
							);
						} else {
							workInProgress2.child = reconcileChildFibers(
								workInProgress2,
								current2.child,
								nextChildren,
								renderLanes2
							);
						}
					}
					function forceUnmountCurrentAndReconcile(
						current2,
						workInProgress2,
						nextChildren,
						renderLanes2
					) {
						workInProgress2.child = reconcileChildFibers(
							workInProgress2,
							current2.child,
							null,
							renderLanes2
						);
						workInProgress2.child = reconcileChildFibers(
							workInProgress2,
							null,
							nextChildren,
							renderLanes2
						);
					}
					function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
						{
							if (workInProgress2.type !== workInProgress2.elementType) {
								var innerPropTypes = Component.propTypes;
								if (innerPropTypes) {
									checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
								}
							}
						}
						var render2 = Component.render;
						var ref = workInProgress2.ref;
						var nextChildren;
						prepareToReadContext(workInProgress2, renderLanes2);
						{
							ReactCurrentOwner$1.current = workInProgress2;
							setIsRendering(true);
							nextChildren = renderWithHooks(
								current2,
								workInProgress2,
								render2,
								nextProps,
								ref,
								renderLanes2
							);
							if (workInProgress2.mode & StrictMode) {
								disableLogs();
								try {
									nextChildren = renderWithHooks(
										current2,
										workInProgress2,
										render2,
										nextProps,
										ref,
										renderLanes2
									);
								} finally {
									reenableLogs();
								}
							}
							setIsRendering(false);
						}
						if (current2 !== null && !didReceiveUpdate) {
							bailoutHooks(current2, workInProgress2, renderLanes2);
							return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
						}
						workInProgress2.flags |= PerformedWork;
						reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
						return workInProgress2.child;
					}
					function updateMemoComponent(
						current2,
						workInProgress2,
						Component,
						nextProps,
						updateLanes,
						renderLanes2
					) {
						if (current2 === null) {
							var type = Component.type;
							if (
								isSimpleFunctionComponent(type) &&
								Component.compare === null &&
								Component.defaultProps === void 0
							) {
								var resolvedType = type;
								{
									resolvedType = resolveFunctionForHotReloading(type);
								}
								workInProgress2.tag = SimpleMemoComponent;
								workInProgress2.type = resolvedType;
								{
									validateFunctionComponentInDev(workInProgress2, type);
								}
								return updateSimpleMemoComponent(
									current2,
									workInProgress2,
									resolvedType,
									nextProps,
									updateLanes,
									renderLanes2
								);
							}
							{
								var innerPropTypes = type.propTypes;
								if (innerPropTypes) {
									checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(type));
								}
							}
							var child = createFiberFromTypeAndProps(
								Component.type,
								null,
								nextProps,
								workInProgress2,
								workInProgress2.mode,
								renderLanes2
							);
							child.ref = workInProgress2.ref;
							child.return = workInProgress2;
							workInProgress2.child = child;
							return child;
						}
						{
							var _type = Component.type;
							var _innerPropTypes = _type.propTypes;
							if (_innerPropTypes) {
								checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentName(_type));
							}
						}
						var currentChild = current2.child;
						if (!includesSomeLane(updateLanes, renderLanes2)) {
							var prevProps = currentChild.memoizedProps;
							var compare = Component.compare;
							compare = compare !== null ? compare : shallowEqual;
							if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
								return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
							}
						}
						workInProgress2.flags |= PerformedWork;
						var newChild = createWorkInProgress(currentChild, nextProps);
						newChild.ref = workInProgress2.ref;
						newChild.return = workInProgress2;
						workInProgress2.child = newChild;
						return newChild;
					}
					function updateSimpleMemoComponent(
						current2,
						workInProgress2,
						Component,
						nextProps,
						updateLanes,
						renderLanes2
					) {
						{
							if (workInProgress2.type !== workInProgress2.elementType) {
								var outerMemoType = workInProgress2.elementType;
								if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
									var lazyComponent = outerMemoType;
									var payload = lazyComponent._payload;
									var init2 = lazyComponent._init;
									try {
										outerMemoType = init2(payload);
									} catch (x) {
										outerMemoType = null;
									}
									var outerPropTypes = outerMemoType && outerMemoType.propTypes;
									if (outerPropTypes) {
										checkPropTypes(
											outerPropTypes,
											nextProps,
											"prop",
											getComponentName(outerMemoType)
										);
									}
								}
							}
						}
						if (current2 !== null) {
							var prevProps = current2.memoizedProps;
							if (
								shallowEqual(prevProps, nextProps) &&
								current2.ref === workInProgress2.ref &&
								workInProgress2.type === current2.type
							) {
								didReceiveUpdate = false;
								if (!includesSomeLane(renderLanes2, updateLanes)) {
									workInProgress2.lanes = current2.lanes;
									return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
								} else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
									didReceiveUpdate = true;
								}
							}
						}
						return updateFunctionComponent(
							current2,
							workInProgress2,
							Component,
							nextProps,
							renderLanes2
						);
					}
					function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
						var nextProps = workInProgress2.pendingProps;
						var nextChildren = nextProps.children;
						var prevState = current2 !== null ? current2.memoizedState : null;
						if (nextProps.mode === "hidden" || nextProps.mode === "unstable-defer-without-hiding") {
							if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
								var nextState = {
									baseLanes: NoLanes,
								};
								workInProgress2.memoizedState = nextState;
								pushRenderLanes(workInProgress2, renderLanes2);
							} else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
								var nextBaseLanes;
								if (prevState !== null) {
									var prevBaseLanes = prevState.baseLanes;
									nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
								} else {
									nextBaseLanes = renderLanes2;
								}
								{
									markSpawnedWork(OffscreenLane);
								}
								workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
								var _nextState = {
									baseLanes: nextBaseLanes,
								};
								workInProgress2.memoizedState = _nextState;
								pushRenderLanes(workInProgress2, nextBaseLanes);
								return null;
							} else {
								var _nextState2 = {
									baseLanes: NoLanes,
								};
								workInProgress2.memoizedState = _nextState2;
								var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
								pushRenderLanes(workInProgress2, subtreeRenderLanes2);
							}
						} else {
							var _subtreeRenderLanes;
							if (prevState !== null) {
								_subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
								workInProgress2.memoizedState = null;
							} else {
								_subtreeRenderLanes = renderLanes2;
							}
							pushRenderLanes(workInProgress2, _subtreeRenderLanes);
						}
						reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
						return workInProgress2.child;
					}
					var updateLegacyHiddenComponent = updateOffscreenComponent;
					function updateFragment(current2, workInProgress2, renderLanes2) {
						var nextChildren = workInProgress2.pendingProps;
						reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
						return workInProgress2.child;
					}
					function updateMode(current2, workInProgress2, renderLanes2) {
						var nextChildren = workInProgress2.pendingProps.children;
						reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
						return workInProgress2.child;
					}
					function updateProfiler(current2, workInProgress2, renderLanes2) {
						{
							workInProgress2.flags |= Update;
							var stateNode = workInProgress2.stateNode;
							stateNode.effectDuration = 0;
							stateNode.passiveEffectDuration = 0;
						}
						var nextProps = workInProgress2.pendingProps;
						var nextChildren = nextProps.children;
						reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
						return workInProgress2.child;
					}
					function markRef(current2, workInProgress2) {
						var ref = workInProgress2.ref;
						if (
							(current2 === null && ref !== null) ||
							(current2 !== null && current2.ref !== ref)
						) {
							workInProgress2.flags |= Ref;
						}
					}
					function updateFunctionComponent(
						current2,
						workInProgress2,
						Component,
						nextProps,
						renderLanes2
					) {
						{
							if (workInProgress2.type !== workInProgress2.elementType) {
								var innerPropTypes = Component.propTypes;
								if (innerPropTypes) {
									checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
								}
							}
						}
						var context;
						{
							var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
							context = getMaskedContext(workInProgress2, unmaskedContext);
						}
						var nextChildren;
						prepareToReadContext(workInProgress2, renderLanes2);
						{
							ReactCurrentOwner$1.current = workInProgress2;
							setIsRendering(true);
							nextChildren = renderWithHooks(
								current2,
								workInProgress2,
								Component,
								nextProps,
								context,
								renderLanes2
							);
							if (workInProgress2.mode & StrictMode) {
								disableLogs();
								try {
									nextChildren = renderWithHooks(
										current2,
										workInProgress2,
										Component,
										nextProps,
										context,
										renderLanes2
									);
								} finally {
									reenableLogs();
								}
							}
							setIsRendering(false);
						}
						if (current2 !== null && !didReceiveUpdate) {
							bailoutHooks(current2, workInProgress2, renderLanes2);
							return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
						}
						workInProgress2.flags |= PerformedWork;
						reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
						return workInProgress2.child;
					}
					function updateClassComponent(
						current2,
						workInProgress2,
						Component,
						nextProps,
						renderLanes2
					) {
						{
							if (workInProgress2.type !== workInProgress2.elementType) {
								var innerPropTypes = Component.propTypes;
								if (innerPropTypes) {
									checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
								}
							}
						}
						var hasContext;
						if (isContextProvider(Component)) {
							hasContext = true;
							pushContextProvider(workInProgress2);
						} else {
							hasContext = false;
						}
						prepareToReadContext(workInProgress2, renderLanes2);
						var instance = workInProgress2.stateNode;
						var shouldUpdate;
						if (instance === null) {
							if (current2 !== null) {
								current2.alternate = null;
								workInProgress2.alternate = null;
								workInProgress2.flags |= Placement;
							}
							constructClassInstance(workInProgress2, Component, nextProps);
							mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
							shouldUpdate = true;
						} else if (current2 === null) {
							shouldUpdate = resumeMountClassInstance(
								workInProgress2,
								Component,
								nextProps,
								renderLanes2
							);
						} else {
							shouldUpdate = updateClassInstance(
								current2,
								workInProgress2,
								Component,
								nextProps,
								renderLanes2
							);
						}
						var nextUnitOfWork = finishClassComponent(
							current2,
							workInProgress2,
							Component,
							shouldUpdate,
							hasContext,
							renderLanes2
						);
						{
							var inst = workInProgress2.stateNode;
							if (shouldUpdate && inst.props !== nextProps) {
								if (!didWarnAboutReassigningProps) {
									error3(
										"It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.",
										getComponentName(workInProgress2.type) || "a component"
									);
								}
								didWarnAboutReassigningProps = true;
							}
						}
						return nextUnitOfWork;
					}
					function finishClassComponent(
						current2,
						workInProgress2,
						Component,
						shouldUpdate,
						hasContext,
						renderLanes2
					) {
						markRef(current2, workInProgress2);
						var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
						if (!shouldUpdate && !didCaptureError) {
							if (hasContext) {
								invalidateContextProvider(workInProgress2, Component, false);
							}
							return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
						}
						var instance = workInProgress2.stateNode;
						ReactCurrentOwner$1.current = workInProgress2;
						var nextChildren;
						if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
							nextChildren = null;
							{
								stopProfilerTimerIfRunning();
							}
						} else {
							{
								setIsRendering(true);
								nextChildren = instance.render();
								if (workInProgress2.mode & StrictMode) {
									disableLogs();
									try {
										instance.render();
									} finally {
										reenableLogs();
									}
								}
								setIsRendering(false);
							}
						}
						workInProgress2.flags |= PerformedWork;
						if (current2 !== null && didCaptureError) {
							forceUnmountCurrentAndReconcile(
								current2,
								workInProgress2,
								nextChildren,
								renderLanes2
							);
						} else {
							reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
						}
						workInProgress2.memoizedState = instance.state;
						if (hasContext) {
							invalidateContextProvider(workInProgress2, Component, true);
						}
						return workInProgress2.child;
					}
					function pushHostRootContext(workInProgress2) {
						var root2 = workInProgress2.stateNode;
						if (root2.pendingContext) {
							pushTopLevelContextObject(
								workInProgress2,
								root2.pendingContext,
								root2.pendingContext !== root2.context
							);
						} else if (root2.context) {
							pushTopLevelContextObject(workInProgress2, root2.context, false);
						}
						pushHostContainer(workInProgress2, root2.containerInfo);
					}
					function updateHostRoot(current2, workInProgress2, renderLanes2) {
						pushHostRootContext(workInProgress2);
						var updateQueue = workInProgress2.updateQueue;
						if (!(current2 !== null && updateQueue !== null)) {
							{
								throw Error(
									"If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue."
								);
							}
						}
						var nextProps = workInProgress2.pendingProps;
						var prevState = workInProgress2.memoizedState;
						var prevChildren = prevState !== null ? prevState.element : null;
						cloneUpdateQueue(current2, workInProgress2);
						processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
						var nextState = workInProgress2.memoizedState;
						var nextChildren = nextState.element;
						if (nextChildren === prevChildren) {
							resetHydrationState();
							return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
						}
						var root2 = workInProgress2.stateNode;
						if (root2.hydrate && enterHydrationState(workInProgress2)) {
							{
								var mutableSourceEagerHydrationData = root2.mutableSourceEagerHydrationData;
								if (mutableSourceEagerHydrationData != null) {
									for (var i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {
										var mutableSource = mutableSourceEagerHydrationData[i];
										var version4 = mutableSourceEagerHydrationData[i + 1];
										setWorkInProgressVersion(mutableSource, version4);
									}
								}
							}
							var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
							workInProgress2.child = child;
							var node = child;
							while (node) {
								node.flags = (node.flags & ~Placement) | Hydrating;
								node = node.sibling;
							}
						} else {
							reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
							resetHydrationState();
						}
						return workInProgress2.child;
					}
					function updateHostComponent(current2, workInProgress2, renderLanes2) {
						pushHostContext(workInProgress2);
						if (current2 === null) {
							tryToClaimNextHydratableInstance(workInProgress2);
						}
						var type = workInProgress2.type;
						var nextProps = workInProgress2.pendingProps;
						var prevProps = current2 !== null ? current2.memoizedProps : null;
						var nextChildren = nextProps.children;
						var isDirectTextChild = shouldSetTextContent(type, nextProps);
						if (isDirectTextChild) {
							nextChildren = null;
						} else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
							workInProgress2.flags |= ContentReset;
						}
						markRef(current2, workInProgress2);
						reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
						return workInProgress2.child;
					}
					function updateHostText(current2, workInProgress2) {
						if (current2 === null) {
							tryToClaimNextHydratableInstance(workInProgress2);
						}
						return null;
					}
					function mountLazyComponent(
						_current,
						workInProgress2,
						elementType,
						updateLanes,
						renderLanes2
					) {
						if (_current !== null) {
							_current.alternate = null;
							workInProgress2.alternate = null;
							workInProgress2.flags |= Placement;
						}
						var props = workInProgress2.pendingProps;
						var lazyComponent = elementType;
						var payload = lazyComponent._payload;
						var init2 = lazyComponent._init;
						var Component = init2(payload);
						workInProgress2.type = Component;
						var resolvedTag = (workInProgress2.tag = resolveLazyComponentTag(Component));
						var resolvedProps = resolveDefaultProps(Component, props);
						var child;
						switch (resolvedTag) {
							case FunctionComponent: {
								{
									validateFunctionComponentInDev(workInProgress2, Component);
									workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
								}
								child = updateFunctionComponent(
									null,
									workInProgress2,
									Component,
									resolvedProps,
									renderLanes2
								);
								return child;
							}
							case ClassComponent: {
								{
									workInProgress2.type = Component = resolveClassForHotReloading(Component);
								}
								child = updateClassComponent(
									null,
									workInProgress2,
									Component,
									resolvedProps,
									renderLanes2
								);
								return child;
							}
							case ForwardRef: {
								{
									workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
								}
								child = updateForwardRef(
									null,
									workInProgress2,
									Component,
									resolvedProps,
									renderLanes2
								);
								return child;
							}
							case MemoComponent: {
								{
									if (workInProgress2.type !== workInProgress2.elementType) {
										var outerPropTypes = Component.propTypes;
										if (outerPropTypes) {
											checkPropTypes(
												outerPropTypes,
												resolvedProps,
												"prop",
												getComponentName(Component)
											);
										}
									}
								}
								child = updateMemoComponent(
									null,
									workInProgress2,
									Component,
									resolveDefaultProps(Component.type, resolvedProps),
									updateLanes,
									renderLanes2
								);
								return child;
							}
						}
						var hint = "";
						{
							if (
								Component !== null &&
								typeof Component === "object" &&
								Component.$$typeof === REACT_LAZY_TYPE
							) {
								hint = " Did you wrap a component in React.lazy() more than once?";
							}
						}
						{
							{
								throw Error(
									"Element type is invalid. Received a promise that resolves to: " +
										Component +
										". Lazy element type must resolve to a class or function." +
										hint
								);
							}
						}
					}
					function mountIncompleteClassComponent(
						_current,
						workInProgress2,
						Component,
						nextProps,
						renderLanes2
					) {
						if (_current !== null) {
							_current.alternate = null;
							workInProgress2.alternate = null;
							workInProgress2.flags |= Placement;
						}
						workInProgress2.tag = ClassComponent;
						var hasContext;
						if (isContextProvider(Component)) {
							hasContext = true;
							pushContextProvider(workInProgress2);
						} else {
							hasContext = false;
						}
						prepareToReadContext(workInProgress2, renderLanes2);
						constructClassInstance(workInProgress2, Component, nextProps);
						mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
						return finishClassComponent(
							null,
							workInProgress2,
							Component,
							true,
							hasContext,
							renderLanes2
						);
					}
					function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
						if (_current !== null) {
							_current.alternate = null;
							workInProgress2.alternate = null;
							workInProgress2.flags |= Placement;
						}
						var props = workInProgress2.pendingProps;
						var context;
						{
							var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
							context = getMaskedContext(workInProgress2, unmaskedContext);
						}
						prepareToReadContext(workInProgress2, renderLanes2);
						var value;
						{
							if (Component.prototype && typeof Component.prototype.render === "function") {
								var componentName = getComponentName(Component) || "Unknown";
								if (!didWarnAboutBadClass[componentName]) {
									error3(
										"The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.",
										componentName,
										componentName
									);
									didWarnAboutBadClass[componentName] = true;
								}
							}
							if (workInProgress2.mode & StrictMode) {
								ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
							}
							setIsRendering(true);
							ReactCurrentOwner$1.current = workInProgress2;
							value = renderWithHooks(
								null,
								workInProgress2,
								Component,
								props,
								context,
								renderLanes2
							);
							setIsRendering(false);
						}
						workInProgress2.flags |= PerformedWork;
						{
							if (
								typeof value === "object" &&
								value !== null &&
								typeof value.render === "function" &&
								value.$$typeof === void 0
							) {
								var _componentName = getComponentName(Component) || "Unknown";
								if (!didWarnAboutModulePatternComponent[_componentName]) {
									error3(
										"The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.",
										_componentName,
										_componentName,
										_componentName
									);
									didWarnAboutModulePatternComponent[_componentName] = true;
								}
							}
						}
						if (
							typeof value === "object" &&
							value !== null &&
							typeof value.render === "function" &&
							value.$$typeof === void 0
						) {
							{
								var _componentName2 = getComponentName(Component) || "Unknown";
								if (!didWarnAboutModulePatternComponent[_componentName2]) {
									error3(
										"The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.",
										_componentName2,
										_componentName2,
										_componentName2
									);
									didWarnAboutModulePatternComponent[_componentName2] = true;
								}
							}
							workInProgress2.tag = ClassComponent;
							workInProgress2.memoizedState = null;
							workInProgress2.updateQueue = null;
							var hasContext = false;
							if (isContextProvider(Component)) {
								hasContext = true;
								pushContextProvider(workInProgress2);
							} else {
								hasContext = false;
							}
							workInProgress2.memoizedState =
								value.state !== null && value.state !== void 0 ? value.state : null;
							initializeUpdateQueue(workInProgress2);
							var getDerivedStateFromProps = Component.getDerivedStateFromProps;
							if (typeof getDerivedStateFromProps === "function") {
								applyDerivedStateFromProps(
									workInProgress2,
									Component,
									getDerivedStateFromProps,
									props
								);
							}
							adoptClassInstance(workInProgress2, value);
							mountClassInstance(workInProgress2, Component, props, renderLanes2);
							return finishClassComponent(
								null,
								workInProgress2,
								Component,
								true,
								hasContext,
								renderLanes2
							);
						} else {
							workInProgress2.tag = FunctionComponent;
							{
								if (workInProgress2.mode & StrictMode) {
									disableLogs();
									try {
										value = renderWithHooks(
											null,
											workInProgress2,
											Component,
											props,
											context,
											renderLanes2
										);
									} finally {
										reenableLogs();
									}
								}
							}
							reconcileChildren(null, workInProgress2, value, renderLanes2);
							{
								validateFunctionComponentInDev(workInProgress2, Component);
							}
							return workInProgress2.child;
						}
					}
					function validateFunctionComponentInDev(workInProgress2, Component) {
						{
							if (Component) {
								if (Component.childContextTypes) {
									error3(
										"%s(...): childContextTypes cannot be defined on a function component.",
										Component.displayName || Component.name || "Component"
									);
								}
							}
							if (workInProgress2.ref !== null) {
								var info = "";
								var ownerName = getCurrentFiberOwnerNameInDevOrNull();
								if (ownerName) {
									info += "\n\nCheck the render method of `" + ownerName + "`.";
								}
								var warningKey = ownerName || workInProgress2._debugID || "";
								var debugSource = workInProgress2._debugSource;
								if (debugSource) {
									warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
								}
								if (!didWarnAboutFunctionRefs[warningKey]) {
									didWarnAboutFunctionRefs[warningKey] = true;
									error3(
										"Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s",
										info
									);
								}
							}
							if (typeof Component.getDerivedStateFromProps === "function") {
								var _componentName3 = getComponentName(Component) || "Unknown";
								if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
									error3(
										"%s: Function components do not support getDerivedStateFromProps.",
										_componentName3
									);
									didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
								}
							}
							if (typeof Component.contextType === "object" && Component.contextType !== null) {
								var _componentName4 = getComponentName(Component) || "Unknown";
								if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
									error3("%s: Function components do not support contextType.", _componentName4);
									didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
								}
							}
						}
					}
					var SUSPENDED_MARKER = {
						dehydrated: null,
						retryLane: NoLane,
					};
					function mountSuspenseOffscreenState(renderLanes2) {
						return {
							baseLanes: renderLanes2,
						};
					}
					function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
						return {
							baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
						};
					}
					function shouldRemainOnFallback(
						suspenseContext,
						current2,
						workInProgress2,
						renderLanes2
					) {
						if (current2 !== null) {
							var suspenseState = current2.memoizedState;
							if (suspenseState === null) {
								return false;
							}
						}
						return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
					}
					function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
						return removeLanes(current2.childLanes, renderLanes2);
					}
					function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
						var nextProps = workInProgress2.pendingProps;
						{
							if (shouldSuspend(workInProgress2)) {
								workInProgress2.flags |= DidCapture;
							}
						}
						var suspenseContext = suspenseStackCursor.current;
						var showFallback = false;
						var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
						if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
							showFallback = true;
							workInProgress2.flags &= ~DidCapture;
						} else {
							if (current2 === null || current2.memoizedState !== null) {
								if (
									nextProps.fallback !== void 0 &&
									nextProps.unstable_avoidThisFallback !== true
								) {
									suspenseContext = addSubtreeSuspenseContext(
										suspenseContext,
										InvisibleParentSuspenseContext
									);
								}
							}
						}
						suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
						pushSuspenseContext(workInProgress2, suspenseContext);
						if (current2 === null) {
							if (nextProps.fallback !== void 0) {
								tryToClaimNextHydratableInstance(workInProgress2);
							}
							var nextPrimaryChildren = nextProps.children;
							var nextFallbackChildren = nextProps.fallback;
							if (showFallback) {
								var fallbackFragment = mountSuspenseFallbackChildren(
									workInProgress2,
									nextPrimaryChildren,
									nextFallbackChildren,
									renderLanes2
								);
								var primaryChildFragment = workInProgress2.child;
								primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
								workInProgress2.memoizedState = SUSPENDED_MARKER;
								return fallbackFragment;
							} else if (typeof nextProps.unstable_expectedLoadTime === "number") {
								var _fallbackFragment = mountSuspenseFallbackChildren(
									workInProgress2,
									nextPrimaryChildren,
									nextFallbackChildren,
									renderLanes2
								);
								var _primaryChildFragment = workInProgress2.child;
								_primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
								workInProgress2.memoizedState = SUSPENDED_MARKER;
								workInProgress2.lanes = SomeRetryLane;
								{
									markSpawnedWork(SomeRetryLane);
								}
								return _fallbackFragment;
							} else {
								return mountSuspensePrimaryChildren(
									workInProgress2,
									nextPrimaryChildren,
									renderLanes2
								);
							}
						} else {
							var prevState = current2.memoizedState;
							if (prevState !== null) {
								if (showFallback) {
									var _nextFallbackChildren2 = nextProps.fallback;
									var _nextPrimaryChildren2 = nextProps.children;
									var _fallbackChildFragment = updateSuspenseFallbackChildren(
										current2,
										workInProgress2,
										_nextPrimaryChildren2,
										_nextFallbackChildren2,
										renderLanes2
									);
									var _primaryChildFragment3 = workInProgress2.child;
									var prevOffscreenState = current2.child.memoizedState;
									_primaryChildFragment3.memoizedState =
										prevOffscreenState === null
											? mountSuspenseOffscreenState(renderLanes2)
											: updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
									_primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(
										current2,
										renderLanes2
									);
									workInProgress2.memoizedState = SUSPENDED_MARKER;
									return _fallbackChildFragment;
								} else {
									var _nextPrimaryChildren3 = nextProps.children;
									var _primaryChildFragment4 = updateSuspensePrimaryChildren(
										current2,
										workInProgress2,
										_nextPrimaryChildren3,
										renderLanes2
									);
									workInProgress2.memoizedState = null;
									return _primaryChildFragment4;
								}
							} else {
								if (showFallback) {
									var _nextFallbackChildren3 = nextProps.fallback;
									var _nextPrimaryChildren4 = nextProps.children;
									var _fallbackChildFragment2 = updateSuspenseFallbackChildren(
										current2,
										workInProgress2,
										_nextPrimaryChildren4,
										_nextFallbackChildren3,
										renderLanes2
									);
									var _primaryChildFragment5 = workInProgress2.child;
									var _prevOffscreenState = current2.child.memoizedState;
									_primaryChildFragment5.memoizedState =
										_prevOffscreenState === null
											? mountSuspenseOffscreenState(renderLanes2)
											: updateSuspenseOffscreenState(_prevOffscreenState, renderLanes2);
									_primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(
										current2,
										renderLanes2
									);
									workInProgress2.memoizedState = SUSPENDED_MARKER;
									return _fallbackChildFragment2;
								} else {
									var _nextPrimaryChildren5 = nextProps.children;
									var _primaryChildFragment6 = updateSuspensePrimaryChildren(
										current2,
										workInProgress2,
										_nextPrimaryChildren5,
										renderLanes2
									);
									workInProgress2.memoizedState = null;
									return _primaryChildFragment6;
								}
							}
						}
					}
					function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
						var mode = workInProgress2.mode;
						var primaryChildProps = {
							mode: "visible",
							children: primaryChildren,
						};
						var primaryChildFragment = createFiberFromOffscreen(
							primaryChildProps,
							mode,
							renderLanes2,
							null
						);
						primaryChildFragment.return = workInProgress2;
						workInProgress2.child = primaryChildFragment;
						return primaryChildFragment;
					}
					function mountSuspenseFallbackChildren(
						workInProgress2,
						primaryChildren,
						fallbackChildren,
						renderLanes2
					) {
						var mode = workInProgress2.mode;
						var progressedPrimaryFragment = workInProgress2.child;
						var primaryChildProps = {
							mode: "hidden",
							children: primaryChildren,
						};
						var primaryChildFragment;
						var fallbackChildFragment;
						if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
							primaryChildFragment = progressedPrimaryFragment;
							primaryChildFragment.childLanes = NoLanes;
							primaryChildFragment.pendingProps = primaryChildProps;
							if (workInProgress2.mode & ProfileMode) {
								primaryChildFragment.actualDuration = 0;
								primaryChildFragment.actualStartTime = -1;
								primaryChildFragment.selfBaseDuration = 0;
								primaryChildFragment.treeBaseDuration = 0;
							}
							fallbackChildFragment = createFiberFromFragment(
								fallbackChildren,
								mode,
								renderLanes2,
								null
							);
						} else {
							primaryChildFragment = createFiberFromOffscreen(
								primaryChildProps,
								mode,
								NoLanes,
								null
							);
							fallbackChildFragment = createFiberFromFragment(
								fallbackChildren,
								mode,
								renderLanes2,
								null
							);
						}
						primaryChildFragment.return = workInProgress2;
						fallbackChildFragment.return = workInProgress2;
						primaryChildFragment.sibling = fallbackChildFragment;
						workInProgress2.child = primaryChildFragment;
						return fallbackChildFragment;
					}
					function createWorkInProgressOffscreenFiber(current2, offscreenProps) {
						return createWorkInProgress(current2, offscreenProps);
					}
					function updateSuspensePrimaryChildren(
						current2,
						workInProgress2,
						primaryChildren,
						renderLanes2
					) {
						var currentPrimaryChildFragment = current2.child;
						var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
						var primaryChildFragment = createWorkInProgressOffscreenFiber(
							currentPrimaryChildFragment,
							{
								mode: "visible",
								children: primaryChildren,
							}
						);
						if ((workInProgress2.mode & BlockingMode) === NoMode) {
							primaryChildFragment.lanes = renderLanes2;
						}
						primaryChildFragment.return = workInProgress2;
						primaryChildFragment.sibling = null;
						if (currentFallbackChildFragment !== null) {
							currentFallbackChildFragment.nextEffect = null;
							currentFallbackChildFragment.flags = Deletion;
							workInProgress2.firstEffect = workInProgress2.lastEffect =
								currentFallbackChildFragment;
						}
						workInProgress2.child = primaryChildFragment;
						return primaryChildFragment;
					}
					function updateSuspenseFallbackChildren(
						current2,
						workInProgress2,
						primaryChildren,
						fallbackChildren,
						renderLanes2
					) {
						var mode = workInProgress2.mode;
						var currentPrimaryChildFragment = current2.child;
						var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
						var primaryChildProps = {
							mode: "hidden",
							children: primaryChildren,
						};
						var primaryChildFragment;
						if (
							(mode & BlockingMode) === NoMode &&
							workInProgress2.child !== currentPrimaryChildFragment
						) {
							var progressedPrimaryFragment = workInProgress2.child;
							primaryChildFragment = progressedPrimaryFragment;
							primaryChildFragment.childLanes = NoLanes;
							primaryChildFragment.pendingProps = primaryChildProps;
							if (workInProgress2.mode & ProfileMode) {
								primaryChildFragment.actualDuration = 0;
								primaryChildFragment.actualStartTime = -1;
								primaryChildFragment.selfBaseDuration =
									currentPrimaryChildFragment.selfBaseDuration;
								primaryChildFragment.treeBaseDuration =
									currentPrimaryChildFragment.treeBaseDuration;
							}
							var progressedLastEffect = primaryChildFragment.lastEffect;
							if (progressedLastEffect !== null) {
								workInProgress2.firstEffect = primaryChildFragment.firstEffect;
								workInProgress2.lastEffect = progressedLastEffect;
								progressedLastEffect.nextEffect = null;
							} else {
								workInProgress2.firstEffect = workInProgress2.lastEffect = null;
							}
						} else {
							primaryChildFragment = createWorkInProgressOffscreenFiber(
								currentPrimaryChildFragment,
								primaryChildProps
							);
						}
						var fallbackChildFragment;
						if (currentFallbackChildFragment !== null) {
							fallbackChildFragment = createWorkInProgress(
								currentFallbackChildFragment,
								fallbackChildren
							);
						} else {
							fallbackChildFragment = createFiberFromFragment(
								fallbackChildren,
								mode,
								renderLanes2,
								null
							);
							fallbackChildFragment.flags |= Placement;
						}
						fallbackChildFragment.return = workInProgress2;
						primaryChildFragment.return = workInProgress2;
						primaryChildFragment.sibling = fallbackChildFragment;
						workInProgress2.child = primaryChildFragment;
						return fallbackChildFragment;
					}
					function scheduleWorkOnFiber(fiber, renderLanes2) {
						fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
						var alternate = fiber.alternate;
						if (alternate !== null) {
							alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
						}
						scheduleWorkOnParentPath(fiber.return, renderLanes2);
					}
					function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
						var node = firstChild;
						while (node !== null) {
							if (node.tag === SuspenseComponent) {
								var state = node.memoizedState;
								if (state !== null) {
									scheduleWorkOnFiber(node, renderLanes2);
								}
							} else if (node.tag === SuspenseListComponent) {
								scheduleWorkOnFiber(node, renderLanes2);
							} else if (node.child !== null) {
								node.child.return = node;
								node = node.child;
								continue;
							}
							if (node === workInProgress2) {
								return;
							}
							while (node.sibling === null) {
								if (node.return === null || node.return === workInProgress2) {
									return;
								}
								node = node.return;
							}
							node.sibling.return = node.return;
							node = node.sibling;
						}
					}
					function findLastContentRow(firstChild) {
						var row = firstChild;
						var lastContentRow = null;
						while (row !== null) {
							var currentRow = row.alternate;
							if (currentRow !== null && findFirstSuspended(currentRow) === null) {
								lastContentRow = row;
							}
							row = row.sibling;
						}
						return lastContentRow;
					}
					function validateRevealOrder(revealOrder) {
						{
							if (
								revealOrder !== void 0 &&
								revealOrder !== "forwards" &&
								revealOrder !== "backwards" &&
								revealOrder !== "together" &&
								!didWarnAboutRevealOrder[revealOrder]
							) {
								didWarnAboutRevealOrder[revealOrder] = true;
								if (typeof revealOrder === "string") {
									switch (revealOrder.toLowerCase()) {
										case "together":
										case "forwards":
										case "backwards": {
											error3(
												'"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.',
												revealOrder,
												revealOrder.toLowerCase()
											);
											break;
										}
										case "forward":
										case "backward": {
											error3(
												'"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.',
												revealOrder,
												revealOrder.toLowerCase()
											);
											break;
										}
										default:
											error3(
												'"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?',
												revealOrder
											);
											break;
									}
								} else {
									error3(
										'%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?',
										revealOrder
									);
								}
							}
						}
					}
					function validateTailOptions(tailMode, revealOrder) {
						{
							if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
								if (tailMode !== "collapsed" && tailMode !== "hidden") {
									didWarnAboutTailOptions[tailMode] = true;
									error3(
										'"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?',
										tailMode
									);
								} else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
									didWarnAboutTailOptions[tailMode] = true;
									error3(
										'<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?',
										tailMode
									);
								}
							}
						}
					}
					function validateSuspenseListNestedChild(childSlot, index3) {
						{
							var isArray3 = Array.isArray(childSlot);
							var isIterable = !isArray3 && typeof getIteratorFn(childSlot) === "function";
							if (isArray3 || isIterable) {
								var type = isArray3 ? "array" : "iterable";
								error3(
									"A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>",
									type,
									index3,
									type
								);
								return false;
							}
						}
						return true;
					}
					function validateSuspenseListChildren(children2, revealOrder) {
						{
							if (
								(revealOrder === "forwards" || revealOrder === "backwards") &&
								children2 !== void 0 &&
								children2 !== null &&
								children2 !== false
							) {
								if (Array.isArray(children2)) {
									for (var i = 0; i < children2.length; i++) {
										if (!validateSuspenseListNestedChild(children2[i], i)) {
											return;
										}
									}
								} else {
									var iteratorFn = getIteratorFn(children2);
									if (typeof iteratorFn === "function") {
										var childrenIterator = iteratorFn.call(children2);
										if (childrenIterator) {
											var step = childrenIterator.next();
											var _i = 0;
											for (; !step.done; step = childrenIterator.next()) {
												if (!validateSuspenseListNestedChild(step.value, _i)) {
													return;
												}
												_i++;
											}
										}
									} else {
										error3(
											'A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?',
											revealOrder
										);
									}
								}
							}
						}
					}
					function initSuspenseListRenderState(
						workInProgress2,
						isBackwards,
						tail,
						lastContentRow,
						tailMode,
						lastEffectBeforeRendering
					) {
						var renderState = workInProgress2.memoizedState;
						if (renderState === null) {
							workInProgress2.memoizedState = {
								isBackwards,
								rendering: null,
								renderingStartTime: 0,
								last: lastContentRow,
								tail,
								tailMode,
								lastEffect: lastEffectBeforeRendering,
							};
						} else {
							renderState.isBackwards = isBackwards;
							renderState.rendering = null;
							renderState.renderingStartTime = 0;
							renderState.last = lastContentRow;
							renderState.tail = tail;
							renderState.tailMode = tailMode;
							renderState.lastEffect = lastEffectBeforeRendering;
						}
					}
					function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
						var nextProps = workInProgress2.pendingProps;
						var revealOrder = nextProps.revealOrder;
						var tailMode = nextProps.tail;
						var newChildren = nextProps.children;
						validateRevealOrder(revealOrder);
						validateTailOptions(tailMode, revealOrder);
						validateSuspenseListChildren(newChildren, revealOrder);
						reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
						var suspenseContext = suspenseStackCursor.current;
						var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
						if (shouldForceFallback) {
							suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
							workInProgress2.flags |= DidCapture;
						} else {
							var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
							if (didSuspendBefore) {
								propagateSuspenseContextChange(
									workInProgress2,
									workInProgress2.child,
									renderLanes2
								);
							}
							suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
						}
						pushSuspenseContext(workInProgress2, suspenseContext);
						if ((workInProgress2.mode & BlockingMode) === NoMode) {
							workInProgress2.memoizedState = null;
						} else {
							switch (revealOrder) {
								case "forwards": {
									var lastContentRow = findLastContentRow(workInProgress2.child);
									var tail;
									if (lastContentRow === null) {
										tail = workInProgress2.child;
										workInProgress2.child = null;
									} else {
										tail = lastContentRow.sibling;
										lastContentRow.sibling = null;
									}
									initSuspenseListRenderState(
										workInProgress2,
										false,
										tail,
										lastContentRow,
										tailMode,
										workInProgress2.lastEffect
									);
									break;
								}
								case "backwards": {
									var _tail = null;
									var row = workInProgress2.child;
									workInProgress2.child = null;
									while (row !== null) {
										var currentRow = row.alternate;
										if (currentRow !== null && findFirstSuspended(currentRow) === null) {
											workInProgress2.child = row;
											break;
										}
										var nextRow = row.sibling;
										row.sibling = _tail;
										_tail = row;
										row = nextRow;
									}
									initSuspenseListRenderState(
										workInProgress2,
										true,
										_tail,
										null,
										tailMode,
										workInProgress2.lastEffect
									);
									break;
								}
								case "together": {
									initSuspenseListRenderState(
										workInProgress2,
										false,
										null,
										null,
										void 0,
										workInProgress2.lastEffect
									);
									break;
								}
								default: {
									workInProgress2.memoizedState = null;
								}
							}
						}
						return workInProgress2.child;
					}
					function updatePortalComponent(current2, workInProgress2, renderLanes2) {
						pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
						var nextChildren = workInProgress2.pendingProps;
						if (current2 === null) {
							workInProgress2.child = reconcileChildFibers(
								workInProgress2,
								null,
								nextChildren,
								renderLanes2
							);
						} else {
							reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
						}
						return workInProgress2.child;
					}
					var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
					function updateContextProvider(current2, workInProgress2, renderLanes2) {
						var providerType = workInProgress2.type;
						var context = providerType._context;
						var newProps = workInProgress2.pendingProps;
						var oldProps = workInProgress2.memoizedProps;
						var newValue = newProps.value;
						{
							if (!("value" in newProps)) {
								if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
									hasWarnedAboutUsingNoValuePropOnContextProvider = true;
									error3(
										"The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?"
									);
								}
							}
							var providerPropTypes = workInProgress2.type.propTypes;
							if (providerPropTypes) {
								checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
							}
						}
						pushProvider(workInProgress2, newValue);
						if (oldProps !== null) {
							var oldValue = oldProps.value;
							var changedBits = calculateChangedBits(context, newValue, oldValue);
							if (changedBits === 0) {
								if (oldProps.children === newProps.children && !hasContextChanged()) {
									return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
								}
							} else {
								propagateContextChange(workInProgress2, context, changedBits, renderLanes2);
							}
						}
						var newChildren = newProps.children;
						reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
						return workInProgress2.child;
					}
					var hasWarnedAboutUsingContextAsConsumer = false;
					function updateContextConsumer(current2, workInProgress2, renderLanes2) {
						var context = workInProgress2.type;
						{
							if (context._context === void 0) {
								if (context !== context.Consumer) {
									if (!hasWarnedAboutUsingContextAsConsumer) {
										hasWarnedAboutUsingContextAsConsumer = true;
										error3(
											"Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?"
										);
									}
								}
							} else {
								context = context._context;
							}
						}
						var newProps = workInProgress2.pendingProps;
						var render2 = newProps.children;
						{
							if (typeof render2 !== "function") {
								error3(
									"A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it."
								);
							}
						}
						prepareToReadContext(workInProgress2, renderLanes2);
						var newValue = readContext(context, newProps.unstable_observedBits);
						var newChildren;
						{
							ReactCurrentOwner$1.current = workInProgress2;
							setIsRendering(true);
							newChildren = render2(newValue);
							setIsRendering(false);
						}
						workInProgress2.flags |= PerformedWork;
						reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
						return workInProgress2.child;
					}
					function markWorkInProgressReceivedUpdate() {
						didReceiveUpdate = true;
					}
					function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
						if (current2 !== null) {
							workInProgress2.dependencies = current2.dependencies;
						}
						{
							stopProfilerTimerIfRunning();
						}
						markSkippedUpdateLanes(workInProgress2.lanes);
						if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
							return null;
						} else {
							cloneChildFibers(current2, workInProgress2);
							return workInProgress2.child;
						}
					}
					function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
						{
							var returnFiber = oldWorkInProgress.return;
							if (returnFiber === null) {
								throw new Error("Cannot swap the root fiber.");
							}
							current2.alternate = null;
							oldWorkInProgress.alternate = null;
							newWorkInProgress.index = oldWorkInProgress.index;
							newWorkInProgress.sibling = oldWorkInProgress.sibling;
							newWorkInProgress.return = oldWorkInProgress.return;
							newWorkInProgress.ref = oldWorkInProgress.ref;
							if (oldWorkInProgress === returnFiber.child) {
								returnFiber.child = newWorkInProgress;
							} else {
								var prevSibling = returnFiber.child;
								if (prevSibling === null) {
									throw new Error("Expected parent to have a child.");
								}
								while (prevSibling.sibling !== oldWorkInProgress) {
									prevSibling = prevSibling.sibling;
									if (prevSibling === null) {
										throw new Error("Expected to find the previous sibling.");
									}
								}
								prevSibling.sibling = newWorkInProgress;
							}
							var last = returnFiber.lastEffect;
							if (last !== null) {
								last.nextEffect = current2;
								returnFiber.lastEffect = current2;
							} else {
								returnFiber.firstEffect = returnFiber.lastEffect = current2;
							}
							current2.nextEffect = null;
							current2.flags = Deletion;
							newWorkInProgress.flags |= Placement;
							return newWorkInProgress;
						}
					}
					function beginWork(current2, workInProgress2, renderLanes2) {
						var updateLanes = workInProgress2.lanes;
						{
							if (workInProgress2._debugNeedsRemount && current2 !== null) {
								return remountFiber(
									current2,
									workInProgress2,
									createFiberFromTypeAndProps(
										workInProgress2.type,
										workInProgress2.key,
										workInProgress2.pendingProps,
										workInProgress2._debugOwner || null,
										workInProgress2.mode,
										workInProgress2.lanes
									)
								);
							}
						}
						if (current2 !== null) {
							var oldProps = current2.memoizedProps;
							var newProps = workInProgress2.pendingProps;
							if (
								oldProps !== newProps ||
								hasContextChanged() ||
								workInProgress2.type !== current2.type
							) {
								didReceiveUpdate = true;
							} else if (!includesSomeLane(renderLanes2, updateLanes)) {
								didReceiveUpdate = false;
								switch (workInProgress2.tag) {
									case HostRoot:
										pushHostRootContext(workInProgress2);
										resetHydrationState();
										break;
									case HostComponent:
										pushHostContext(workInProgress2);
										break;
									case ClassComponent: {
										var Component = workInProgress2.type;
										if (isContextProvider(Component)) {
											pushContextProvider(workInProgress2);
										}
										break;
									}
									case HostPortal:
										pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
										break;
									case ContextProvider: {
										var newValue = workInProgress2.memoizedProps.value;
										pushProvider(workInProgress2, newValue);
										break;
									}
									case Profiler:
										{
											var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
											if (hasChildWork) {
												workInProgress2.flags |= Update;
											}
											var stateNode = workInProgress2.stateNode;
											stateNode.effectDuration = 0;
											stateNode.passiveEffectDuration = 0;
										}
										break;
									case SuspenseComponent: {
										var state = workInProgress2.memoizedState;
										if (state !== null) {
											var primaryChildFragment = workInProgress2.child;
											var primaryChildLanes = primaryChildFragment.childLanes;
											if (includesSomeLane(renderLanes2, primaryChildLanes)) {
												return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
											} else {
												pushSuspenseContext(
													workInProgress2,
													setDefaultShallowSuspenseContext(suspenseStackCursor.current)
												);
												var child = bailoutOnAlreadyFinishedWork(
													current2,
													workInProgress2,
													renderLanes2
												);
												if (child !== null) {
													return child.sibling;
												} else {
													return null;
												}
											}
										} else {
											pushSuspenseContext(
												workInProgress2,
												setDefaultShallowSuspenseContext(suspenseStackCursor.current)
											);
										}
										break;
									}
									case SuspenseListComponent: {
										var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
										var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
										if (didSuspendBefore) {
											if (_hasChildWork) {
												return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
											}
											workInProgress2.flags |= DidCapture;
										}
										var renderState = workInProgress2.memoizedState;
										if (renderState !== null) {
											renderState.rendering = null;
											renderState.tail = null;
											renderState.lastEffect = null;
										}
										pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
										if (_hasChildWork) {
											break;
										} else {
											return null;
										}
									}
									case OffscreenComponent:
									case LegacyHiddenComponent: {
										workInProgress2.lanes = NoLanes;
										return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
									}
								}
								return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
							} else {
								if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
									didReceiveUpdate = true;
								} else {
									didReceiveUpdate = false;
								}
							}
						} else {
							didReceiveUpdate = false;
						}
						workInProgress2.lanes = NoLanes;
						switch (workInProgress2.tag) {
							case IndeterminateComponent: {
								return mountIndeterminateComponent(
									current2,
									workInProgress2,
									workInProgress2.type,
									renderLanes2
								);
							}
							case LazyComponent: {
								var elementType = workInProgress2.elementType;
								return mountLazyComponent(
									current2,
									workInProgress2,
									elementType,
									updateLanes,
									renderLanes2
								);
							}
							case FunctionComponent: {
								var _Component = workInProgress2.type;
								var unresolvedProps = workInProgress2.pendingProps;
								var resolvedProps =
									workInProgress2.elementType === _Component
										? unresolvedProps
										: resolveDefaultProps(_Component, unresolvedProps);
								return updateFunctionComponent(
									current2,
									workInProgress2,
									_Component,
									resolvedProps,
									renderLanes2
								);
							}
							case ClassComponent: {
								var _Component2 = workInProgress2.type;
								var _unresolvedProps = workInProgress2.pendingProps;
								var _resolvedProps =
									workInProgress2.elementType === _Component2
										? _unresolvedProps
										: resolveDefaultProps(_Component2, _unresolvedProps);
								return updateClassComponent(
									current2,
									workInProgress2,
									_Component2,
									_resolvedProps,
									renderLanes2
								);
							}
							case HostRoot:
								return updateHostRoot(current2, workInProgress2, renderLanes2);
							case HostComponent:
								return updateHostComponent(current2, workInProgress2, renderLanes2);
							case HostText:
								return updateHostText(current2, workInProgress2);
							case SuspenseComponent:
								return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
							case HostPortal:
								return updatePortalComponent(current2, workInProgress2, renderLanes2);
							case ForwardRef: {
								var type = workInProgress2.type;
								var _unresolvedProps2 = workInProgress2.pendingProps;
								var _resolvedProps2 =
									workInProgress2.elementType === type
										? _unresolvedProps2
										: resolveDefaultProps(type, _unresolvedProps2);
								return updateForwardRef(
									current2,
									workInProgress2,
									type,
									_resolvedProps2,
									renderLanes2
								);
							}
							case Fragment:
								return updateFragment(current2, workInProgress2, renderLanes2);
							case Mode:
								return updateMode(current2, workInProgress2, renderLanes2);
							case Profiler:
								return updateProfiler(current2, workInProgress2, renderLanes2);
							case ContextProvider:
								return updateContextProvider(current2, workInProgress2, renderLanes2);
							case ContextConsumer:
								return updateContextConsumer(current2, workInProgress2, renderLanes2);
							case MemoComponent: {
								var _type2 = workInProgress2.type;
								var _unresolvedProps3 = workInProgress2.pendingProps;
								var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
								{
									if (workInProgress2.type !== workInProgress2.elementType) {
										var outerPropTypes = _type2.propTypes;
										if (outerPropTypes) {
											checkPropTypes(
												outerPropTypes,
												_resolvedProps3,
												"prop",
												getComponentName(_type2)
											);
										}
									}
								}
								_resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
								return updateMemoComponent(
									current2,
									workInProgress2,
									_type2,
									_resolvedProps3,
									updateLanes,
									renderLanes2
								);
							}
							case SimpleMemoComponent: {
								return updateSimpleMemoComponent(
									current2,
									workInProgress2,
									workInProgress2.type,
									workInProgress2.pendingProps,
									updateLanes,
									renderLanes2
								);
							}
							case IncompleteClassComponent: {
								var _Component3 = workInProgress2.type;
								var _unresolvedProps4 = workInProgress2.pendingProps;
								var _resolvedProps4 =
									workInProgress2.elementType === _Component3
										? _unresolvedProps4
										: resolveDefaultProps(_Component3, _unresolvedProps4);
								return mountIncompleteClassComponent(
									current2,
									workInProgress2,
									_Component3,
									_resolvedProps4,
									renderLanes2
								);
							}
							case SuspenseListComponent: {
								return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
							}
							case FundamentalComponent: {
								break;
							}
							case ScopeComponent: {
								break;
							}
							case Block: {
								break;
							}
							case OffscreenComponent: {
								return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
							}
							case LegacyHiddenComponent: {
								return updateLegacyHiddenComponent(current2, workInProgress2, renderLanes2);
							}
						}
						{
							{
								throw Error(
									"Unknown unit of work tag (" +
										workInProgress2.tag +
										"). This error is likely caused by a bug in React. Please file an issue."
								);
							}
						}
					}
					function markUpdate(workInProgress2) {
						workInProgress2.flags |= Update;
					}
					function markRef$1(workInProgress2) {
						workInProgress2.flags |= Ref;
					}
					var appendAllChildren;
					var updateHostContainer;
					var updateHostComponent$1;
					var updateHostText$1;
					{
						appendAllChildren = function (
							parent,
							workInProgress2,
							needsVisibilityToggle,
							isHidden
						) {
							var node = workInProgress2.child;
							while (node !== null) {
								if (node.tag === HostComponent || node.tag === HostText) {
									appendInitialChild(parent, node.stateNode);
								} else if (node.tag === HostPortal);
								else if (node.child !== null) {
									node.child.return = node;
									node = node.child;
									continue;
								}
								if (node === workInProgress2) {
									return;
								}
								while (node.sibling === null) {
									if (node.return === null || node.return === workInProgress2) {
										return;
									}
									node = node.return;
								}
								node.sibling.return = node.return;
								node = node.sibling;
							}
						};
						updateHostContainer = function (workInProgress2) {};
						updateHostComponent$1 = function (
							current2,
							workInProgress2,
							type,
							newProps,
							rootContainerInstance
						) {
							var oldProps = current2.memoizedProps;
							if (oldProps === newProps) {
								return;
							}
							var instance = workInProgress2.stateNode;
							var currentHostContext = getHostContext();
							var updatePayload = prepareUpdate(
								instance,
								type,
								oldProps,
								newProps,
								rootContainerInstance,
								currentHostContext
							);
							workInProgress2.updateQueue = updatePayload;
							if (updatePayload) {
								markUpdate(workInProgress2);
							}
						};
						updateHostText$1 = function (current2, workInProgress2, oldText, newText) {
							if (oldText !== newText) {
								markUpdate(workInProgress2);
							}
						};
					}
					function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
						if (getIsHydrating()) {
							return;
						}
						switch (renderState.tailMode) {
							case "hidden": {
								var tailNode = renderState.tail;
								var lastTailNode = null;
								while (tailNode !== null) {
									if (tailNode.alternate !== null) {
										lastTailNode = tailNode;
									}
									tailNode = tailNode.sibling;
								}
								if (lastTailNode === null) {
									renderState.tail = null;
								} else {
									lastTailNode.sibling = null;
								}
								break;
							}
							case "collapsed": {
								var _tailNode = renderState.tail;
								var _lastTailNode = null;
								while (_tailNode !== null) {
									if (_tailNode.alternate !== null) {
										_lastTailNode = _tailNode;
									}
									_tailNode = _tailNode.sibling;
								}
								if (_lastTailNode === null) {
									if (!hasRenderedATailFallback && renderState.tail !== null) {
										renderState.tail.sibling = null;
									} else {
										renderState.tail = null;
									}
								} else {
									_lastTailNode.sibling = null;
								}
								break;
							}
						}
					}
					function completeWork(current2, workInProgress2, renderLanes2) {
						var newProps = workInProgress2.pendingProps;
						switch (workInProgress2.tag) {
							case IndeterminateComponent:
							case LazyComponent:
							case SimpleMemoComponent:
							case FunctionComponent:
							case ForwardRef:
							case Fragment:
							case Mode:
							case Profiler:
							case ContextConsumer:
							case MemoComponent:
								return null;
							case ClassComponent: {
								var Component = workInProgress2.type;
								if (isContextProvider(Component)) {
									popContext(workInProgress2);
								}
								return null;
							}
							case HostRoot: {
								popHostContainer(workInProgress2);
								popTopLevelContextObject(workInProgress2);
								resetWorkInProgressVersions();
								var fiberRoot = workInProgress2.stateNode;
								if (fiberRoot.pendingContext) {
									fiberRoot.context = fiberRoot.pendingContext;
									fiberRoot.pendingContext = null;
								}
								if (current2 === null || current2.child === null) {
									var wasHydrated = popHydrationState(workInProgress2);
									if (wasHydrated) {
										markUpdate(workInProgress2);
									} else if (!fiberRoot.hydrate) {
										workInProgress2.flags |= Snapshot;
									}
								}
								updateHostContainer(workInProgress2);
								return null;
							}
							case HostComponent: {
								popHostContext(workInProgress2);
								var rootContainerInstance = getRootHostContainer();
								var type = workInProgress2.type;
								if (current2 !== null && workInProgress2.stateNode != null) {
									updateHostComponent$1(
										current2,
										workInProgress2,
										type,
										newProps,
										rootContainerInstance
									);
									if (current2.ref !== workInProgress2.ref) {
										markRef$1(workInProgress2);
									}
								} else {
									if (!newProps) {
										if (!(workInProgress2.stateNode !== null)) {
											{
												throw Error(
													"We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."
												);
											}
										}
										return null;
									}
									var currentHostContext = getHostContext();
									var _wasHydrated = popHydrationState(workInProgress2);
									if (_wasHydrated) {
										if (
											prepareToHydrateHostInstance(
												workInProgress2,
												rootContainerInstance,
												currentHostContext
											)
										) {
											markUpdate(workInProgress2);
										}
									} else {
										var instance = createInstance(
											type,
											newProps,
											rootContainerInstance,
											currentHostContext,
											workInProgress2
										);
										appendAllChildren(instance, workInProgress2, false, false);
										workInProgress2.stateNode = instance;
										if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
											markUpdate(workInProgress2);
										}
									}
									if (workInProgress2.ref !== null) {
										markRef$1(workInProgress2);
									}
								}
								return null;
							}
							case HostText: {
								var newText = newProps;
								if (current2 && workInProgress2.stateNode != null) {
									var oldText = current2.memoizedProps;
									updateHostText$1(current2, workInProgress2, oldText, newText);
								} else {
									if (typeof newText !== "string") {
										if (!(workInProgress2.stateNode !== null)) {
											{
												throw Error(
													"We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."
												);
											}
										}
									}
									var _rootContainerInstance = getRootHostContainer();
									var _currentHostContext = getHostContext();
									var _wasHydrated2 = popHydrationState(workInProgress2);
									if (_wasHydrated2) {
										if (prepareToHydrateHostTextInstance(workInProgress2)) {
											markUpdate(workInProgress2);
										}
									} else {
										workInProgress2.stateNode = createTextInstance(
											newText,
											_rootContainerInstance,
											_currentHostContext,
											workInProgress2
										);
									}
								}
								return null;
							}
							case SuspenseComponent: {
								popSuspenseContext(workInProgress2);
								var nextState = workInProgress2.memoizedState;
								if ((workInProgress2.flags & DidCapture) !== NoFlags) {
									workInProgress2.lanes = renderLanes2;
									if ((workInProgress2.mode & ProfileMode) !== NoMode) {
										transferActualDuration(workInProgress2);
									}
									return workInProgress2;
								}
								var nextDidTimeout = nextState !== null;
								var prevDidTimeout = false;
								if (current2 === null) {
									if (workInProgress2.memoizedProps.fallback !== void 0) {
										popHydrationState(workInProgress2);
									}
								} else {
									var prevState = current2.memoizedState;
									prevDidTimeout = prevState !== null;
								}
								if (nextDidTimeout && !prevDidTimeout) {
									if ((workInProgress2.mode & BlockingMode) !== NoMode) {
										var hasInvisibleChildContext =
											current2 === null &&
											workInProgress2.memoizedProps.unstable_avoidThisFallback !== true;
										if (
											hasInvisibleChildContext ||
											hasSuspenseContext(
												suspenseStackCursor.current,
												InvisibleParentSuspenseContext
											)
										) {
											renderDidSuspend();
										} else {
											renderDidSuspendDelayIfPossible();
										}
									}
								}
								{
									if (nextDidTimeout || prevDidTimeout) {
										workInProgress2.flags |= Update;
									}
								}
								return null;
							}
							case HostPortal:
								popHostContainer(workInProgress2);
								updateHostContainer(workInProgress2);
								if (current2 === null) {
									preparePortalMount(workInProgress2.stateNode.containerInfo);
								}
								return null;
							case ContextProvider:
								popProvider(workInProgress2);
								return null;
							case IncompleteClassComponent: {
								var _Component = workInProgress2.type;
								if (isContextProvider(_Component)) {
									popContext(workInProgress2);
								}
								return null;
							}
							case SuspenseListComponent: {
								popSuspenseContext(workInProgress2);
								var renderState = workInProgress2.memoizedState;
								if (renderState === null) {
									return null;
								}
								var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
								var renderedTail = renderState.rendering;
								if (renderedTail === null) {
									if (!didSuspendAlready) {
										var cannotBeSuspended =
											renderHasNotSuspendedYet() &&
											(current2 === null || (current2.flags & DidCapture) === NoFlags);
										if (!cannotBeSuspended) {
											var row = workInProgress2.child;
											while (row !== null) {
												var suspended = findFirstSuspended(row);
												if (suspended !== null) {
													didSuspendAlready = true;
													workInProgress2.flags |= DidCapture;
													cutOffTailIfNeeded(renderState, false);
													var newThennables = suspended.updateQueue;
													if (newThennables !== null) {
														workInProgress2.updateQueue = newThennables;
														workInProgress2.flags |= Update;
													}
													if (renderState.lastEffect === null) {
														workInProgress2.firstEffect = null;
													}
													workInProgress2.lastEffect = renderState.lastEffect;
													resetChildFibers(workInProgress2, renderLanes2);
													pushSuspenseContext(
														workInProgress2,
														setShallowSuspenseContext(
															suspenseStackCursor.current,
															ForceSuspenseFallback
														)
													);
													return workInProgress2.child;
												}
												row = row.sibling;
											}
										}
										if (renderState.tail !== null && now() > getRenderTargetTime()) {
											workInProgress2.flags |= DidCapture;
											didSuspendAlready = true;
											cutOffTailIfNeeded(renderState, false);
											workInProgress2.lanes = SomeRetryLane;
											{
												markSpawnedWork(SomeRetryLane);
											}
										}
									} else {
										cutOffTailIfNeeded(renderState, false);
									}
								} else {
									if (!didSuspendAlready) {
										var _suspended = findFirstSuspended(renderedTail);
										if (_suspended !== null) {
											workInProgress2.flags |= DidCapture;
											didSuspendAlready = true;
											var _newThennables = _suspended.updateQueue;
											if (_newThennables !== null) {
												workInProgress2.updateQueue = _newThennables;
												workInProgress2.flags |= Update;
											}
											cutOffTailIfNeeded(renderState, true);
											if (
												renderState.tail === null &&
												renderState.tailMode === "hidden" &&
												!renderedTail.alternate &&
												!getIsHydrating()
											) {
												var lastEffect = (workInProgress2.lastEffect = renderState.lastEffect);
												if (lastEffect !== null) {
													lastEffect.nextEffect = null;
												}
												return null;
											}
										} else if (
											now() * 2 - renderState.renderingStartTime > getRenderTargetTime() &&
											renderLanes2 !== OffscreenLane
										) {
											workInProgress2.flags |= DidCapture;
											didSuspendAlready = true;
											cutOffTailIfNeeded(renderState, false);
											workInProgress2.lanes = SomeRetryLane;
											{
												markSpawnedWork(SomeRetryLane);
											}
										}
									}
									if (renderState.isBackwards) {
										renderedTail.sibling = workInProgress2.child;
										workInProgress2.child = renderedTail;
									} else {
										var previousSibling = renderState.last;
										if (previousSibling !== null) {
											previousSibling.sibling = renderedTail;
										} else {
											workInProgress2.child = renderedTail;
										}
										renderState.last = renderedTail;
									}
								}
								if (renderState.tail !== null) {
									var next = renderState.tail;
									renderState.rendering = next;
									renderState.tail = next.sibling;
									renderState.lastEffect = workInProgress2.lastEffect;
									renderState.renderingStartTime = now();
									next.sibling = null;
									var suspenseContext = suspenseStackCursor.current;
									if (didSuspendAlready) {
										suspenseContext = setShallowSuspenseContext(
											suspenseContext,
											ForceSuspenseFallback
										);
									} else {
										suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
									}
									pushSuspenseContext(workInProgress2, suspenseContext);
									return next;
								}
								return null;
							}
							case FundamentalComponent: {
								break;
							}
							case ScopeComponent: {
								break;
							}
							case Block:
								break;
							case OffscreenComponent:
							case LegacyHiddenComponent: {
								popRenderLanes(workInProgress2);
								if (current2 !== null) {
									var _nextState = workInProgress2.memoizedState;
									var _prevState = current2.memoizedState;
									var prevIsHidden = _prevState !== null;
									var nextIsHidden = _nextState !== null;
									if (
										prevIsHidden !== nextIsHidden &&
										newProps.mode !== "unstable-defer-without-hiding"
									) {
										workInProgress2.flags |= Update;
									}
								}
								return null;
							}
						}
						{
							{
								throw Error(
									"Unknown unit of work tag (" +
										workInProgress2.tag +
										"). This error is likely caused by a bug in React. Please file an issue."
								);
							}
						}
					}
					function unwindWork(workInProgress2, renderLanes2) {
						switch (workInProgress2.tag) {
							case ClassComponent: {
								var Component = workInProgress2.type;
								if (isContextProvider(Component)) {
									popContext(workInProgress2);
								}
								var flags = workInProgress2.flags;
								if (flags & ShouldCapture) {
									workInProgress2.flags = (flags & ~ShouldCapture) | DidCapture;
									if ((workInProgress2.mode & ProfileMode) !== NoMode) {
										transferActualDuration(workInProgress2);
									}
									return workInProgress2;
								}
								return null;
							}
							case HostRoot: {
								popHostContainer(workInProgress2);
								popTopLevelContextObject(workInProgress2);
								resetWorkInProgressVersions();
								var _flags = workInProgress2.flags;
								if (!((_flags & DidCapture) === NoFlags)) {
									{
										throw Error(
											"The root failed to unmount after an error. This is likely a bug in React. Please file an issue."
										);
									}
								}
								workInProgress2.flags = (_flags & ~ShouldCapture) | DidCapture;
								return workInProgress2;
							}
							case HostComponent: {
								popHostContext(workInProgress2);
								return null;
							}
							case SuspenseComponent: {
								popSuspenseContext(workInProgress2);
								var _flags2 = workInProgress2.flags;
								if (_flags2 & ShouldCapture) {
									workInProgress2.flags = (_flags2 & ~ShouldCapture) | DidCapture;
									if ((workInProgress2.mode & ProfileMode) !== NoMode) {
										transferActualDuration(workInProgress2);
									}
									return workInProgress2;
								}
								return null;
							}
							case SuspenseListComponent: {
								popSuspenseContext(workInProgress2);
								return null;
							}
							case HostPortal:
								popHostContainer(workInProgress2);
								return null;
							case ContextProvider:
								popProvider(workInProgress2);
								return null;
							case OffscreenComponent:
							case LegacyHiddenComponent:
								popRenderLanes(workInProgress2);
								return null;
							default:
								return null;
						}
					}
					function unwindInterruptedWork(interruptedWork) {
						switch (interruptedWork.tag) {
							case ClassComponent: {
								var childContextTypes = interruptedWork.type.childContextTypes;
								if (childContextTypes !== null && childContextTypes !== void 0) {
									popContext(interruptedWork);
								}
								break;
							}
							case HostRoot: {
								popHostContainer(interruptedWork);
								popTopLevelContextObject(interruptedWork);
								resetWorkInProgressVersions();
								break;
							}
							case HostComponent: {
								popHostContext(interruptedWork);
								break;
							}
							case HostPortal:
								popHostContainer(interruptedWork);
								break;
							case SuspenseComponent:
								popSuspenseContext(interruptedWork);
								break;
							case SuspenseListComponent:
								popSuspenseContext(interruptedWork);
								break;
							case ContextProvider:
								popProvider(interruptedWork);
								break;
							case OffscreenComponent:
							case LegacyHiddenComponent:
								popRenderLanes(interruptedWork);
								break;
						}
					}
					function createCapturedValue(value, source) {
						return {
							value,
							source,
							stack: getStackByFiberInDevAndProd(source),
						};
					}
					function showErrorDialog(boundary, errorInfo) {
						return true;
					}
					function logCapturedError(boundary, errorInfo) {
						try {
							var logError = showErrorDialog(boundary, errorInfo);
							if (logError === false) {
								return;
							}
							var error4 = errorInfo.value;
							if (true) {
								var source = errorInfo.source;
								var stack = errorInfo.stack;
								var componentStack = stack !== null ? stack : "";
								if (error4 != null && error4._suppressLogging) {
									if (boundary.tag === ClassComponent) {
										return;
									}
									console["error"](error4);
								}
								var componentName = source ? getComponentName(source.type) : null;
								var componentNameMessage = componentName
									? "The above error occurred in the <" + componentName + "> component:"
									: "The above error occurred in one of your React components:";
								var errorBoundaryMessage;
								var errorBoundaryName = getComponentName(boundary.type);
								if (errorBoundaryName) {
									errorBoundaryMessage =
										"React will try to recreate this component tree from scratch " +
										("using the error boundary you provided, " + errorBoundaryName + ".");
								} else {
									errorBoundaryMessage =
										"Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
								}
								var combinedMessage =
									componentNameMessage +
									"\n" +
									componentStack +
									"\n\n" +
									("" + errorBoundaryMessage);
								console["error"](combinedMessage);
							} else {
								console["error"](error4);
							}
						} catch (e) {
							setTimeout(function () {
								throw e;
							});
						}
					}
					var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
					function createRootErrorUpdate(fiber, errorInfo, lane) {
						var update2 = createUpdate(NoTimestamp, lane);
						update2.tag = CaptureUpdate;
						update2.payload = {
							element: null,
						};
						var error4 = errorInfo.value;
						update2.callback = function () {
							onUncaughtError(error4);
							logCapturedError(fiber, errorInfo);
						};
						return update2;
					}
					function createClassErrorUpdate(fiber, errorInfo, lane) {
						var update2 = createUpdate(NoTimestamp, lane);
						update2.tag = CaptureUpdate;
						var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
						if (typeof getDerivedStateFromError === "function") {
							var error$1 = errorInfo.value;
							update2.payload = function () {
								logCapturedError(fiber, errorInfo);
								return getDerivedStateFromError(error$1);
							};
						}
						var inst = fiber.stateNode;
						if (inst !== null && typeof inst.componentDidCatch === "function") {
							update2.callback = function callback() {
								{
									markFailedErrorBoundaryForHotReloading(fiber);
								}
								if (typeof getDerivedStateFromError !== "function") {
									markLegacyErrorBoundaryAsFailed(this);
									logCapturedError(fiber, errorInfo);
								}
								var error$12 = errorInfo.value;
								var stack = errorInfo.stack;
								this.componentDidCatch(error$12, {
									componentStack: stack !== null ? stack : "",
								});
								{
									if (typeof getDerivedStateFromError !== "function") {
										if (!includesSomeLane(fiber.lanes, SyncLane)) {
											error3(
												"%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.",
												getComponentName(fiber.type) || "Unknown"
											);
										}
									}
								}
							};
						} else {
							update2.callback = function () {
								markFailedErrorBoundaryForHotReloading(fiber);
							};
						}
						return update2;
					}
					function attachPingListener(root2, wakeable, lanes) {
						var pingCache = root2.pingCache;
						var threadIDs;
						if (pingCache === null) {
							pingCache = root2.pingCache = new PossiblyWeakMap$1();
							threadIDs = new Set();
							pingCache.set(wakeable, threadIDs);
						} else {
							threadIDs = pingCache.get(wakeable);
							if (threadIDs === void 0) {
								threadIDs = new Set();
								pingCache.set(wakeable, threadIDs);
							}
						}
						if (!threadIDs.has(lanes)) {
							threadIDs.add(lanes);
							var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
							wakeable.then(ping, ping);
						}
					}
					function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
						sourceFiber.flags |= Incomplete;
						sourceFiber.firstEffect = sourceFiber.lastEffect = null;
						if (value !== null && typeof value === "object" && typeof value.then === "function") {
							var wakeable = value;
							if ((sourceFiber.mode & BlockingMode) === NoMode) {
								var currentSource = sourceFiber.alternate;
								if (currentSource) {
									sourceFiber.updateQueue = currentSource.updateQueue;
									sourceFiber.memoizedState = currentSource.memoizedState;
									sourceFiber.lanes = currentSource.lanes;
								} else {
									sourceFiber.updateQueue = null;
									sourceFiber.memoizedState = null;
								}
							}
							var hasInvisibleParentBoundary = hasSuspenseContext(
								suspenseStackCursor.current,
								InvisibleParentSuspenseContext
							);
							var _workInProgress = returnFiber;
							do {
								if (
									_workInProgress.tag === SuspenseComponent &&
									shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)
								) {
									var wakeables = _workInProgress.updateQueue;
									if (wakeables === null) {
										var updateQueue = new Set();
										updateQueue.add(wakeable);
										_workInProgress.updateQueue = updateQueue;
									} else {
										wakeables.add(wakeable);
									}
									if ((_workInProgress.mode & BlockingMode) === NoMode) {
										_workInProgress.flags |= DidCapture;
										sourceFiber.flags |= ForceUpdateForLegacySuspense;
										sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
										if (sourceFiber.tag === ClassComponent) {
											var currentSourceFiber = sourceFiber.alternate;
											if (currentSourceFiber === null) {
												sourceFiber.tag = IncompleteClassComponent;
											} else {
												var update2 = createUpdate(NoTimestamp, SyncLane);
												update2.tag = ForceUpdate;
												enqueueUpdate(sourceFiber, update2);
											}
										}
										sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
										return;
									}
									attachPingListener(root2, wakeable, rootRenderLanes);
									_workInProgress.flags |= ShouldCapture;
									_workInProgress.lanes = rootRenderLanes;
									return;
								}
								_workInProgress = _workInProgress.return;
							} while (_workInProgress !== null);
							value = new Error(
								(getComponentName(sourceFiber.type) || "A React component") +
									" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."
							);
						}
						renderDidError();
						value = createCapturedValue(value, sourceFiber);
						var workInProgress2 = returnFiber;
						do {
							switch (workInProgress2.tag) {
								case HostRoot: {
									var _errorInfo = value;
									workInProgress2.flags |= ShouldCapture;
									var lane = pickArbitraryLane(rootRenderLanes);
									workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
									var _update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
									enqueueCapturedUpdate(workInProgress2, _update);
									return;
								}
								case ClassComponent:
									var errorInfo = value;
									var ctor = workInProgress2.type;
									var instance = workInProgress2.stateNode;
									if (
										(workInProgress2.flags & DidCapture) === NoFlags &&
										(typeof ctor.getDerivedStateFromError === "function" ||
											(instance !== null &&
												typeof instance.componentDidCatch === "function" &&
												!isAlreadyFailedLegacyErrorBoundary(instance)))
									) {
										workInProgress2.flags |= ShouldCapture;
										var _lane = pickArbitraryLane(rootRenderLanes);
										workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
										var _update2 = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
										enqueueCapturedUpdate(workInProgress2, _update2);
										return;
									}
									break;
							}
							workInProgress2 = workInProgress2.return;
						} while (workInProgress2 !== null);
					}
					var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
					{
						didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
					}
					var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
					var callComponentWillUnmountWithTimer = function (current2, instance) {
						instance.props = current2.memoizedProps;
						instance.state = current2.memoizedState;
						{
							instance.componentWillUnmount();
						}
					};
					function safelyCallComponentWillUnmount(current2, instance) {
						{
							invokeGuardedCallback(
								null,
								callComponentWillUnmountWithTimer,
								null,
								current2,
								instance
							);
							if (hasCaughtError()) {
								var unmountError = clearCaughtError();
								captureCommitPhaseError(current2, unmountError);
							}
						}
					}
					function safelyDetachRef(current2) {
						var ref = current2.ref;
						if (ref !== null) {
							if (typeof ref === "function") {
								{
									invokeGuardedCallback(null, ref, null, null);
									if (hasCaughtError()) {
										var refError = clearCaughtError();
										captureCommitPhaseError(current2, refError);
									}
								}
							} else {
								ref.current = null;
							}
						}
					}
					function safelyCallDestroy(current2, destroy) {
						{
							invokeGuardedCallback(null, destroy, null);
							if (hasCaughtError()) {
								var error4 = clearCaughtError();
								captureCommitPhaseError(current2, error4);
							}
						}
					}
					function commitBeforeMutationLifeCycles(current2, finishedWork) {
						switch (finishedWork.tag) {
							case FunctionComponent:
							case ForwardRef:
							case SimpleMemoComponent:
							case Block: {
								return;
							}
							case ClassComponent: {
								if (finishedWork.flags & Snapshot) {
									if (current2 !== null) {
										var prevProps = current2.memoizedProps;
										var prevState = current2.memoizedState;
										var instance = finishedWork.stateNode;
										{
											if (
												finishedWork.type === finishedWork.elementType &&
												!didWarnAboutReassigningProps
											) {
												if (instance.props !== finishedWork.memoizedProps) {
													error3(
														"Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
														getComponentName(finishedWork.type) || "instance"
													);
												}
												if (instance.state !== finishedWork.memoizedState) {
													error3(
														"Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
														getComponentName(finishedWork.type) || "instance"
													);
												}
											}
										}
										var snapshot = instance.getSnapshotBeforeUpdate(
											finishedWork.elementType === finishedWork.type
												? prevProps
												: resolveDefaultProps(finishedWork.type, prevProps),
											prevState
										);
										{
											var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
											if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
												didWarnSet.add(finishedWork.type);
												error3(
													"%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.",
													getComponentName(finishedWork.type)
												);
											}
										}
										instance.__reactInternalSnapshotBeforeUpdate = snapshot;
									}
								}
								return;
							}
							case HostRoot: {
								{
									if (finishedWork.flags & Snapshot) {
										var root2 = finishedWork.stateNode;
										clearContainer(root2.containerInfo);
									}
								}
								return;
							}
							case HostComponent:
							case HostText:
							case HostPortal:
							case IncompleteClassComponent:
								return;
						}
						{
							{
								throw Error(
									"This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."
								);
							}
						}
					}
					function commitHookEffectListUnmount(tag, finishedWork) {
						var updateQueue = finishedWork.updateQueue;
						var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
						if (lastEffect !== null) {
							var firstEffect = lastEffect.next;
							var effect = firstEffect;
							do {
								if ((effect.tag & tag) === tag) {
									var destroy = effect.destroy;
									effect.destroy = void 0;
									if (destroy !== void 0) {
										destroy();
									}
								}
								effect = effect.next;
							} while (effect !== firstEffect);
						}
					}
					function commitHookEffectListMount(tag, finishedWork) {
						var updateQueue = finishedWork.updateQueue;
						var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
						if (lastEffect !== null) {
							var firstEffect = lastEffect.next;
							var effect = firstEffect;
							do {
								if ((effect.tag & tag) === tag) {
									var create = effect.create;
									effect.destroy = create();
									{
										var destroy = effect.destroy;
										if (destroy !== void 0 && typeof destroy !== "function") {
											var addendum = void 0;
											if (destroy === null) {
												addendum =
													" You returned null. If your effect does not require clean up, return undefined (or nothing).";
											} else if (typeof destroy.then === "function") {
												addendum =
													"\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
											} else {
												addendum = " You returned: " + destroy;
											}
											error3(
												"An effect function must not return anything besides a function, which is used for clean-up.%s",
												addendum
											);
										}
									}
								}
								effect = effect.next;
							} while (effect !== firstEffect);
						}
					}
					function schedulePassiveEffects(finishedWork) {
						var updateQueue = finishedWork.updateQueue;
						var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
						if (lastEffect !== null) {
							var firstEffect = lastEffect.next;
							var effect = firstEffect;
							do {
								var _effect = effect,
									next = _effect.next,
									tag = _effect.tag;
								if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
									enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
									enqueuePendingPassiveHookEffectMount(finishedWork, effect);
								}
								effect = next;
							} while (effect !== firstEffect);
						}
					}
					function commitLifeCycles(finishedRoot, current2, finishedWork, committedLanes) {
						switch (finishedWork.tag) {
							case FunctionComponent:
							case ForwardRef:
							case SimpleMemoComponent:
							case Block: {
								{
									commitHookEffectListMount(Layout | HasEffect, finishedWork);
								}
								schedulePassiveEffects(finishedWork);
								return;
							}
							case ClassComponent: {
								var instance = finishedWork.stateNode;
								if (finishedWork.flags & Update) {
									if (current2 === null) {
										{
											if (
												finishedWork.type === finishedWork.elementType &&
												!didWarnAboutReassigningProps
											) {
												if (instance.props !== finishedWork.memoizedProps) {
													error3(
														"Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
														getComponentName(finishedWork.type) || "instance"
													);
												}
												if (instance.state !== finishedWork.memoizedState) {
													error3(
														"Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
														getComponentName(finishedWork.type) || "instance"
													);
												}
											}
										}
										{
											instance.componentDidMount();
										}
									} else {
										var prevProps =
											finishedWork.elementType === finishedWork.type
												? current2.memoizedProps
												: resolveDefaultProps(finishedWork.type, current2.memoizedProps);
										var prevState = current2.memoizedState;
										{
											if (
												finishedWork.type === finishedWork.elementType &&
												!didWarnAboutReassigningProps
											) {
												if (instance.props !== finishedWork.memoizedProps) {
													error3(
														"Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
														getComponentName(finishedWork.type) || "instance"
													);
												}
												if (instance.state !== finishedWork.memoizedState) {
													error3(
														"Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
														getComponentName(finishedWork.type) || "instance"
													);
												}
											}
										}
										{
											instance.componentDidUpdate(
												prevProps,
												prevState,
												instance.__reactInternalSnapshotBeforeUpdate
											);
										}
									}
								}
								var updateQueue = finishedWork.updateQueue;
								if (updateQueue !== null) {
									{
										if (
											finishedWork.type === finishedWork.elementType &&
											!didWarnAboutReassigningProps
										) {
											if (instance.props !== finishedWork.memoizedProps) {
												error3(
													"Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
													getComponentName(finishedWork.type) || "instance"
												);
											}
											if (instance.state !== finishedWork.memoizedState) {
												error3(
													"Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
													getComponentName(finishedWork.type) || "instance"
												);
											}
										}
									}
									commitUpdateQueue(finishedWork, updateQueue, instance);
								}
								return;
							}
							case HostRoot: {
								var _updateQueue = finishedWork.updateQueue;
								if (_updateQueue !== null) {
									var _instance = null;
									if (finishedWork.child !== null) {
										switch (finishedWork.child.tag) {
											case HostComponent:
												_instance = getPublicInstance(finishedWork.child.stateNode);
												break;
											case ClassComponent:
												_instance = finishedWork.child.stateNode;
												break;
										}
									}
									commitUpdateQueue(finishedWork, _updateQueue, _instance);
								}
								return;
							}
							case HostComponent: {
								var _instance2 = finishedWork.stateNode;
								if (current2 === null && finishedWork.flags & Update) {
									var type = finishedWork.type;
									var props = finishedWork.memoizedProps;
									commitMount(_instance2, type, props);
								}
								return;
							}
							case HostText: {
								return;
							}
							case HostPortal: {
								return;
							}
							case Profiler: {
								{
									var _finishedWork$memoize2 = finishedWork.memoizedProps,
										onCommit = _finishedWork$memoize2.onCommit,
										onRender = _finishedWork$memoize2.onRender;
									var effectDuration = finishedWork.stateNode.effectDuration;
									var commitTime2 = getCommitTime();
									if (typeof onRender === "function") {
										{
											onRender(
												finishedWork.memoizedProps.id,
												current2 === null ? "mount" : "update",
												finishedWork.actualDuration,
												finishedWork.treeBaseDuration,
												finishedWork.actualStartTime,
												commitTime2,
												finishedRoot.memoizedInteractions
											);
										}
									}
								}
								return;
							}
							case SuspenseComponent: {
								commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
								return;
							}
							case SuspenseListComponent:
							case IncompleteClassComponent:
							case FundamentalComponent:
							case ScopeComponent:
							case OffscreenComponent:
							case LegacyHiddenComponent:
								return;
						}
						{
							{
								throw Error(
									"This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."
								);
							}
						}
					}
					function hideOrUnhideAllChildren(finishedWork, isHidden) {
						{
							var node = finishedWork;
							while (true) {
								if (node.tag === HostComponent) {
									var instance = node.stateNode;
									if (isHidden) {
										hideInstance(instance);
									} else {
										unhideInstance(node.stateNode, node.memoizedProps);
									}
								} else if (node.tag === HostText) {
									var _instance3 = node.stateNode;
									if (isHidden) {
										hideTextInstance(_instance3);
									} else {
										unhideTextInstance(_instance3, node.memoizedProps);
									}
								} else if (
									(node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) &&
									node.memoizedState !== null &&
									node !== finishedWork
								);
								else if (node.child !== null) {
									node.child.return = node;
									node = node.child;
									continue;
								}
								if (node === finishedWork) {
									return;
								}
								while (node.sibling === null) {
									if (node.return === null || node.return === finishedWork) {
										return;
									}
									node = node.return;
								}
								node.sibling.return = node.return;
								node = node.sibling;
							}
						}
					}
					function commitAttachRef(finishedWork) {
						var ref = finishedWork.ref;
						if (ref !== null) {
							var instance = finishedWork.stateNode;
							var instanceToUse;
							switch (finishedWork.tag) {
								case HostComponent:
									instanceToUse = getPublicInstance(instance);
									break;
								default:
									instanceToUse = instance;
							}
							if (typeof ref === "function") {
								ref(instanceToUse);
							} else {
								{
									if (!ref.hasOwnProperty("current")) {
										error3(
											"Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().",
											getComponentName(finishedWork.type)
										);
									}
								}
								ref.current = instanceToUse;
							}
						}
					}
					function commitDetachRef(current2) {
						var currentRef = current2.ref;
						if (currentRef !== null) {
							if (typeof currentRef === "function") {
								currentRef(null);
							} else {
								currentRef.current = null;
							}
						}
					}
					function commitUnmount(finishedRoot, current2, renderPriorityLevel) {
						onCommitUnmount(current2);
						switch (current2.tag) {
							case FunctionComponent:
							case ForwardRef:
							case MemoComponent:
							case SimpleMemoComponent:
							case Block: {
								var updateQueue = current2.updateQueue;
								if (updateQueue !== null) {
									var lastEffect = updateQueue.lastEffect;
									if (lastEffect !== null) {
										var firstEffect = lastEffect.next;
										var effect = firstEffect;
										do {
											var _effect2 = effect,
												destroy = _effect2.destroy,
												tag = _effect2.tag;
											if (destroy !== void 0) {
												if ((tag & Passive$1) !== NoFlags$1) {
													enqueuePendingPassiveHookEffectUnmount(current2, effect);
												} else {
													{
														safelyCallDestroy(current2, destroy);
													}
												}
											}
											effect = effect.next;
										} while (effect !== firstEffect);
									}
								}
								return;
							}
							case ClassComponent: {
								safelyDetachRef(current2);
								var instance = current2.stateNode;
								if (typeof instance.componentWillUnmount === "function") {
									safelyCallComponentWillUnmount(current2, instance);
								}
								return;
							}
							case HostComponent: {
								safelyDetachRef(current2);
								return;
							}
							case HostPortal: {
								{
									unmountHostComponents(finishedRoot, current2);
								}
								return;
							}
							case FundamentalComponent: {
								return;
							}
							case DehydratedFragment: {
								return;
							}
							case ScopeComponent: {
								return;
							}
						}
					}
					function commitNestedUnmounts(finishedRoot, root2, renderPriorityLevel) {
						var node = root2;
						while (true) {
							commitUnmount(finishedRoot, node);
							if (node.child !== null && node.tag !== HostPortal) {
								node.child.return = node;
								node = node.child;
								continue;
							}
							if (node === root2) {
								return;
							}
							while (node.sibling === null) {
								if (node.return === null || node.return === root2) {
									return;
								}
								node = node.return;
							}
							node.sibling.return = node.return;
							node = node.sibling;
						}
					}
					function detachFiberMutation(fiber) {
						fiber.alternate = null;
						fiber.child = null;
						fiber.dependencies = null;
						fiber.firstEffect = null;
						fiber.lastEffect = null;
						fiber.memoizedProps = null;
						fiber.memoizedState = null;
						fiber.pendingProps = null;
						fiber.return = null;
						fiber.updateQueue = null;
						{
							fiber._debugOwner = null;
						}
					}
					function getHostParentFiber(fiber) {
						var parent = fiber.return;
						while (parent !== null) {
							if (isHostParent(parent)) {
								return parent;
							}
							parent = parent.return;
						}
						{
							{
								throw Error(
									"Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue."
								);
							}
						}
					}
					function isHostParent(fiber) {
						return (
							fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal
						);
					}
					function getHostSibling(fiber) {
						var node = fiber;
						siblings: while (true) {
							while (node.sibling === null) {
								if (node.return === null || isHostParent(node.return)) {
									return null;
								}
								node = node.return;
							}
							node.sibling.return = node.return;
							node = node.sibling;
							while (
								node.tag !== HostComponent &&
								node.tag !== HostText &&
								node.tag !== DehydratedFragment
							) {
								if (node.flags & Placement) {
									continue siblings;
								}
								if (node.child === null || node.tag === HostPortal) {
									continue siblings;
								} else {
									node.child.return = node;
									node = node.child;
								}
							}
							if (!(node.flags & Placement)) {
								return node.stateNode;
							}
						}
					}
					function commitPlacement(finishedWork) {
						var parentFiber = getHostParentFiber(finishedWork);
						var parent;
						var isContainer;
						var parentStateNode = parentFiber.stateNode;
						switch (parentFiber.tag) {
							case HostComponent:
								parent = parentStateNode;
								isContainer = false;
								break;
							case HostRoot:
								parent = parentStateNode.containerInfo;
								isContainer = true;
								break;
							case HostPortal:
								parent = parentStateNode.containerInfo;
								isContainer = true;
								break;
							case FundamentalComponent:
							default: {
								{
									throw Error(
										"Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue."
									);
								}
							}
						}
						if (parentFiber.flags & ContentReset) {
							resetTextContent(parent);
							parentFiber.flags &= ~ContentReset;
						}
						var before = getHostSibling(finishedWork);
						if (isContainer) {
							insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
						} else {
							insertOrAppendPlacementNode(finishedWork, before, parent);
						}
					}
					function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
						var tag = node.tag;
						var isHost = tag === HostComponent || tag === HostText;
						if (isHost || enableFundamentalAPI) {
							var stateNode = isHost ? node.stateNode : node.stateNode.instance;
							if (before) {
								insertInContainerBefore(parent, stateNode, before);
							} else {
								appendChildToContainer(parent, stateNode);
							}
						} else if (tag === HostPortal);
						else {
							var child = node.child;
							if (child !== null) {
								insertOrAppendPlacementNodeIntoContainer(child, before, parent);
								var sibling = child.sibling;
								while (sibling !== null) {
									insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
									sibling = sibling.sibling;
								}
							}
						}
					}
					function insertOrAppendPlacementNode(node, before, parent) {
						var tag = node.tag;
						var isHost = tag === HostComponent || tag === HostText;
						if (isHost || enableFundamentalAPI) {
							var stateNode = isHost ? node.stateNode : node.stateNode.instance;
							if (before) {
								insertBefore(parent, stateNode, before);
							} else {
								appendChild(parent, stateNode);
							}
						} else if (tag === HostPortal);
						else {
							var child = node.child;
							if (child !== null) {
								insertOrAppendPlacementNode(child, before, parent);
								var sibling = child.sibling;
								while (sibling !== null) {
									insertOrAppendPlacementNode(sibling, before, parent);
									sibling = sibling.sibling;
								}
							}
						}
					}
					function unmountHostComponents(finishedRoot, current2, renderPriorityLevel) {
						var node = current2;
						var currentParentIsValid = false;
						var currentParent;
						var currentParentIsContainer;
						while (true) {
							if (!currentParentIsValid) {
								var parent = node.return;
								findParent: while (true) {
									if (!(parent !== null)) {
										{
											throw Error(
												"Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue."
											);
										}
									}
									var parentStateNode = parent.stateNode;
									switch (parent.tag) {
										case HostComponent:
											currentParent = parentStateNode;
											currentParentIsContainer = false;
											break findParent;
										case HostRoot:
											currentParent = parentStateNode.containerInfo;
											currentParentIsContainer = true;
											break findParent;
										case HostPortal:
											currentParent = parentStateNode.containerInfo;
											currentParentIsContainer = true;
											break findParent;
									}
									parent = parent.return;
								}
								currentParentIsValid = true;
							}
							if (node.tag === HostComponent || node.tag === HostText) {
								commitNestedUnmounts(finishedRoot, node);
								if (currentParentIsContainer) {
									removeChildFromContainer(currentParent, node.stateNode);
								} else {
									removeChild(currentParent, node.stateNode);
								}
							} else if (node.tag === HostPortal) {
								if (node.child !== null) {
									currentParent = node.stateNode.containerInfo;
									currentParentIsContainer = true;
									node.child.return = node;
									node = node.child;
									continue;
								}
							} else {
								commitUnmount(finishedRoot, node);
								if (node.child !== null) {
									node.child.return = node;
									node = node.child;
									continue;
								}
							}
							if (node === current2) {
								return;
							}
							while (node.sibling === null) {
								if (node.return === null || node.return === current2) {
									return;
								}
								node = node.return;
								if (node.tag === HostPortal) {
									currentParentIsValid = false;
								}
							}
							node.sibling.return = node.return;
							node = node.sibling;
						}
					}
					function commitDeletion(finishedRoot, current2, renderPriorityLevel) {
						{
							unmountHostComponents(finishedRoot, current2);
						}
						var alternate = current2.alternate;
						detachFiberMutation(current2);
						if (alternate !== null) {
							detachFiberMutation(alternate);
						}
					}
					function commitWork(current2, finishedWork) {
						switch (finishedWork.tag) {
							case FunctionComponent:
							case ForwardRef:
							case MemoComponent:
							case SimpleMemoComponent:
							case Block: {
								{
									commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
								}
								return;
							}
							case ClassComponent: {
								return;
							}
							case HostComponent: {
								var instance = finishedWork.stateNode;
								if (instance != null) {
									var newProps = finishedWork.memoizedProps;
									var oldProps = current2 !== null ? current2.memoizedProps : newProps;
									var type = finishedWork.type;
									var updatePayload = finishedWork.updateQueue;
									finishedWork.updateQueue = null;
									if (updatePayload !== null) {
										commitUpdate(instance, updatePayload, type, oldProps, newProps);
									}
								}
								return;
							}
							case HostText: {
								if (!(finishedWork.stateNode !== null)) {
									{
										throw Error(
											"This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue."
										);
									}
								}
								var textInstance = finishedWork.stateNode;
								var newText = finishedWork.memoizedProps;
								var oldText = current2 !== null ? current2.memoizedProps : newText;
								commitTextUpdate(textInstance, oldText, newText);
								return;
							}
							case HostRoot: {
								{
									var _root = finishedWork.stateNode;
									if (_root.hydrate) {
										_root.hydrate = false;
										commitHydratedContainer(_root.containerInfo);
									}
								}
								return;
							}
							case Profiler: {
								return;
							}
							case SuspenseComponent: {
								commitSuspenseComponent(finishedWork);
								attachSuspenseRetryListeners(finishedWork);
								return;
							}
							case SuspenseListComponent: {
								attachSuspenseRetryListeners(finishedWork);
								return;
							}
							case IncompleteClassComponent: {
								return;
							}
							case FundamentalComponent: {
								break;
							}
							case ScopeComponent: {
								break;
							}
							case OffscreenComponent:
							case LegacyHiddenComponent: {
								var newState = finishedWork.memoizedState;
								var isHidden = newState !== null;
								hideOrUnhideAllChildren(finishedWork, isHidden);
								return;
							}
						}
						{
							{
								throw Error(
									"This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."
								);
							}
						}
					}
					function commitSuspenseComponent(finishedWork) {
						var newState = finishedWork.memoizedState;
						if (newState !== null) {
							markCommitTimeOfFallback();
							{
								var primaryChildParent = finishedWork.child;
								hideOrUnhideAllChildren(primaryChildParent, true);
							}
						}
					}
					function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
						var newState = finishedWork.memoizedState;
						if (newState === null) {
							var current2 = finishedWork.alternate;
							if (current2 !== null) {
								var prevState = current2.memoizedState;
								if (prevState !== null) {
									var suspenseInstance = prevState.dehydrated;
									if (suspenseInstance !== null) {
										commitHydratedSuspenseInstance(suspenseInstance);
									}
								}
							}
						}
					}
					function attachSuspenseRetryListeners(finishedWork) {
						var wakeables = finishedWork.updateQueue;
						if (wakeables !== null) {
							finishedWork.updateQueue = null;
							var retryCache = finishedWork.stateNode;
							if (retryCache === null) {
								retryCache = finishedWork.stateNode = new PossiblyWeakSet();
							}
							wakeables.forEach(function (wakeable) {
								var retry3 = resolveRetryWakeable.bind(null, finishedWork, wakeable);
								if (!retryCache.has(wakeable)) {
									{
										if (wakeable.__reactDoNotTraceInteractions !== true) {
											retry3 = tracing.unstable_wrap(retry3);
										}
									}
									retryCache.add(wakeable);
									wakeable.then(retry3, retry3);
								}
							});
						}
					}
					function isSuspenseBoundaryBeingHidden(current2, finishedWork) {
						if (current2 !== null) {
							var oldState = current2.memoizedState;
							if (oldState === null || oldState.dehydrated !== null) {
								var newState = finishedWork.memoizedState;
								return newState !== null && newState.dehydrated === null;
							}
						}
						return false;
					}
					function commitResetTextContent(current2) {
						resetTextContent(current2.stateNode);
					}
					var COMPONENT_TYPE = 0;
					var HAS_PSEUDO_CLASS_TYPE = 1;
					var ROLE_TYPE = 2;
					var TEST_NAME_TYPE = 3;
					var TEXT_TYPE = 4;
					if (typeof Symbol === "function" && Symbol.for) {
						var symbolFor$1 = Symbol.for;
						COMPONENT_TYPE = symbolFor$1("selector.component");
						HAS_PSEUDO_CLASS_TYPE = symbolFor$1("selector.has_pseudo_class");
						ROLE_TYPE = symbolFor$1("selector.role");
						TEST_NAME_TYPE = symbolFor$1("selector.test_id");
						TEXT_TYPE = symbolFor$1("selector.text");
					}
					var commitHooks = [];
					function onCommitRoot$1() {
						{
							commitHooks.forEach(function (commitHook) {
								return commitHook();
							});
						}
					}
					var ceil = Math.ceil;
					var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher,
						ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
						IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
					var NoContext = 0;
					var BatchedContext = 1;
					var EventContext = 2;
					var DiscreteEventContext = 4;
					var LegacyUnbatchedContext = 8;
					var RenderContext = 16;
					var CommitContext = 32;
					var RetryAfterError = 64;
					var RootIncomplete = 0;
					var RootFatalErrored = 1;
					var RootErrored = 2;
					var RootSuspended = 3;
					var RootSuspendedWithDelay = 4;
					var RootCompleted = 5;
					var executionContext = NoContext;
					var workInProgressRoot = null;
					var workInProgress = null;
					var workInProgressRootRenderLanes = NoLanes;
					var subtreeRenderLanes = NoLanes;
					var subtreeRenderLanesCursor = createCursor(NoLanes);
					var workInProgressRootExitStatus = RootIncomplete;
					var workInProgressRootFatalError = null;
					var workInProgressRootIncludedLanes = NoLanes;
					var workInProgressRootSkippedLanes = NoLanes;
					var workInProgressRootUpdatedLanes = NoLanes;
					var workInProgressRootPingedLanes = NoLanes;
					var mostRecentlyUpdatedRoot = null;
					var globalMostRecentFallbackTime = 0;
					var FALLBACK_THROTTLE_MS = 500;
					var workInProgressRootRenderTargetTime = Infinity;
					var RENDER_TIMEOUT_MS = 500;
					function resetRenderTimer() {
						workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
					}
					function getRenderTargetTime() {
						return workInProgressRootRenderTargetTime;
					}
					var nextEffect = null;
					var hasUncaughtError = false;
					var firstUncaughtError = null;
					var legacyErrorBoundariesThatAlreadyFailed = null;
					var rootDoesHavePassiveEffects = false;
					var rootWithPendingPassiveEffects = null;
					var pendingPassiveEffectsRenderPriority = NoPriority$1;
					var pendingPassiveEffectsLanes = NoLanes;
					var pendingPassiveHookEffectsMount = [];
					var pendingPassiveHookEffectsUnmount = [];
					var rootsWithPendingDiscreteUpdates = null;
					var NESTED_UPDATE_LIMIT = 50;
					var nestedUpdateCount = 0;
					var rootWithNestedUpdates = null;
					var NESTED_PASSIVE_UPDATE_LIMIT = 50;
					var nestedPassiveUpdateCount = 0;
					var spawnedWorkDuringRender = null;
					var currentEventTime = NoTimestamp;
					var currentEventWipLanes = NoLanes;
					var currentEventPendingLanes = NoLanes;
					var isFlushingPassiveEffects = false;
					var focusedInstanceHandle = null;
					var shouldFireAfterActiveInstanceBlur = false;
					function getWorkInProgressRoot() {
						return workInProgressRoot;
					}
					function requestEventTime() {
						if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
							return now();
						}
						if (currentEventTime !== NoTimestamp) {
							return currentEventTime;
						}
						currentEventTime = now();
						return currentEventTime;
					}
					function requestUpdateLane(fiber) {
						var mode = fiber.mode;
						if ((mode & BlockingMode) === NoMode) {
							return SyncLane;
						} else if ((mode & ConcurrentMode) === NoMode) {
							return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
						}
						if (currentEventWipLanes === NoLanes) {
							currentEventWipLanes = workInProgressRootIncludedLanes;
						}
						var isTransition = requestCurrentTransition() !== NoTransition;
						if (isTransition) {
							if (currentEventPendingLanes !== NoLanes) {
								currentEventPendingLanes =
									mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
							}
							return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
						}
						var schedulerPriority = getCurrentPriorityLevel();
						var lane;
						if (
							(executionContext & DiscreteEventContext) !== NoContext &&
							schedulerPriority === UserBlockingPriority$2
						) {
							lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
						} else {
							var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
							lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
						}
						return lane;
					}
					function requestRetryLane(fiber) {
						var mode = fiber.mode;
						if ((mode & BlockingMode) === NoMode) {
							return SyncLane;
						} else if ((mode & ConcurrentMode) === NoMode) {
							return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
						}
						if (currentEventWipLanes === NoLanes) {
							currentEventWipLanes = workInProgressRootIncludedLanes;
						}
						return findRetryLane(currentEventWipLanes);
					}
					function scheduleUpdateOnFiber(fiber, lane, eventTime) {
						checkForNestedUpdates();
						warnAboutRenderPhaseUpdatesInDEV(fiber);
						var root2 = markUpdateLaneFromFiberToRoot(fiber, lane);
						if (root2 === null) {
							warnAboutUpdateOnUnmountedFiberInDEV(fiber);
							return null;
						}
						markRootUpdated(root2, lane, eventTime);
						if (root2 === workInProgressRoot) {
							{
								workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
							}
							if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
								markRootSuspended$1(root2, workInProgressRootRenderLanes);
							}
						}
						var priorityLevel = getCurrentPriorityLevel();
						if (lane === SyncLane) {
							if (
								(executionContext & LegacyUnbatchedContext) !== NoContext &&
								(executionContext & (RenderContext | CommitContext)) === NoContext
							) {
								schedulePendingInteractions(root2, lane);
								performSyncWorkOnRoot(root2);
							} else {
								ensureRootIsScheduled(root2, eventTime);
								schedulePendingInteractions(root2, lane);
								if (executionContext === NoContext) {
									resetRenderTimer();
									flushSyncCallbackQueue();
								}
							}
						} else {
							if (
								(executionContext & DiscreteEventContext) !== NoContext &&
								(priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)
							) {
								if (rootsWithPendingDiscreteUpdates === null) {
									rootsWithPendingDiscreteUpdates = new Set([root2]);
								} else {
									rootsWithPendingDiscreteUpdates.add(root2);
								}
							}
							ensureRootIsScheduled(root2, eventTime);
							schedulePendingInteractions(root2, lane);
						}
						mostRecentlyUpdatedRoot = root2;
					}
					function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
						sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
						var alternate = sourceFiber.alternate;
						if (alternate !== null) {
							alternate.lanes = mergeLanes(alternate.lanes, lane);
						}
						{
							if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
								warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
							}
						}
						var node = sourceFiber;
						var parent = sourceFiber.return;
						while (parent !== null) {
							parent.childLanes = mergeLanes(parent.childLanes, lane);
							alternate = parent.alternate;
							if (alternate !== null) {
								alternate.childLanes = mergeLanes(alternate.childLanes, lane);
							} else {
								{
									if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
										warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
									}
								}
							}
							node = parent;
							parent = parent.return;
						}
						if (node.tag === HostRoot) {
							var root2 = node.stateNode;
							return root2;
						} else {
							return null;
						}
					}
					function ensureRootIsScheduled(root2, currentTime) {
						var existingCallbackNode = root2.callbackNode;
						markStarvedLanesAsExpired(root2, currentTime);
						var nextLanes = getNextLanes(
							root2,
							root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes
						);
						var newCallbackPriority = returnNextLanesPriority();
						if (nextLanes === NoLanes) {
							if (existingCallbackNode !== null) {
								cancelCallback(existingCallbackNode);
								root2.callbackNode = null;
								root2.callbackPriority = NoLanePriority;
							}
							return;
						}
						if (existingCallbackNode !== null) {
							var existingCallbackPriority = root2.callbackPriority;
							if (existingCallbackPriority === newCallbackPriority) {
								return;
							}
							cancelCallback(existingCallbackNode);
						}
						var newCallbackNode;
						if (newCallbackPriority === SyncLanePriority) {
							newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
						} else if (newCallbackPriority === SyncBatchedLanePriority) {
							newCallbackNode = scheduleCallback(
								ImmediatePriority$1,
								performSyncWorkOnRoot.bind(null, root2)
							);
						} else {
							var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
							newCallbackNode = scheduleCallback(
								schedulerPriorityLevel,
								performConcurrentWorkOnRoot.bind(null, root2)
							);
						}
						root2.callbackPriority = newCallbackPriority;
						root2.callbackNode = newCallbackNode;
					}
					function performConcurrentWorkOnRoot(root2) {
						currentEventTime = NoTimestamp;
						currentEventWipLanes = NoLanes;
						currentEventPendingLanes = NoLanes;
						if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
							{
								throw Error("Should not already be working.");
							}
						}
						var originalCallbackNode = root2.callbackNode;
						var didFlushPassiveEffects = flushPassiveEffects();
						if (didFlushPassiveEffects) {
							if (root2.callbackNode !== originalCallbackNode) {
								return null;
							}
						}
						var lanes = getNextLanes(
							root2,
							root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes
						);
						if (lanes === NoLanes) {
							return null;
						}
						var exitStatus = renderRootConcurrent(root2, lanes);
						if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
							prepareFreshStack(root2, NoLanes);
						} else if (exitStatus !== RootIncomplete) {
							if (exitStatus === RootErrored) {
								executionContext |= RetryAfterError;
								if (root2.hydrate) {
									root2.hydrate = false;
									clearContainer(root2.containerInfo);
								}
								lanes = getLanesToRetrySynchronouslyOnError(root2);
								if (lanes !== NoLanes) {
									exitStatus = renderRootSync(root2, lanes);
								}
							}
							if (exitStatus === RootFatalErrored) {
								var fatalError = workInProgressRootFatalError;
								prepareFreshStack(root2, NoLanes);
								markRootSuspended$1(root2, lanes);
								ensureRootIsScheduled(root2, now());
								throw fatalError;
							}
							var finishedWork = root2.current.alternate;
							root2.finishedWork = finishedWork;
							root2.finishedLanes = lanes;
							finishConcurrentRender(root2, exitStatus, lanes);
						}
						ensureRootIsScheduled(root2, now());
						if (root2.callbackNode === originalCallbackNode) {
							return performConcurrentWorkOnRoot.bind(null, root2);
						}
						return null;
					}
					function finishConcurrentRender(root2, exitStatus, lanes) {
						switch (exitStatus) {
							case RootIncomplete:
							case RootFatalErrored: {
								{
									{
										throw Error("Root did not complete. This is a bug in React.");
									}
								}
							}
							case RootErrored: {
								commitRoot(root2);
								break;
							}
							case RootSuspended: {
								markRootSuspended$1(root2, lanes);
								if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
									var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
									if (msUntilTimeout > 10) {
										var nextLanes = getNextLanes(root2, NoLanes);
										if (nextLanes !== NoLanes) {
											break;
										}
										var suspendedLanes = root2.suspendedLanes;
										if (!isSubsetOfLanes(suspendedLanes, lanes)) {
											var eventTime = requestEventTime();
											markRootPinged(root2, suspendedLanes);
											break;
										}
										root2.timeoutHandle = scheduleTimeout(
											commitRoot.bind(null, root2),
											msUntilTimeout
										);
										break;
									}
								}
								commitRoot(root2);
								break;
							}
							case RootSuspendedWithDelay: {
								markRootSuspended$1(root2, lanes);
								if (includesOnlyTransitions(lanes)) {
									break;
								}
								if (!shouldForceFlushFallbacksInDEV()) {
									var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
									var eventTimeMs = mostRecentEventTime;
									var timeElapsedMs = now() - eventTimeMs;
									var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
									if (_msUntilTimeout > 10) {
										root2.timeoutHandle = scheduleTimeout(
											commitRoot.bind(null, root2),
											_msUntilTimeout
										);
										break;
									}
								}
								commitRoot(root2);
								break;
							}
							case RootCompleted: {
								commitRoot(root2);
								break;
							}
							default: {
								{
									{
										throw Error("Unknown root exit status.");
									}
								}
							}
						}
					}
					function markRootSuspended$1(root2, suspendedLanes) {
						suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
						suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
						markRootSuspended(root2, suspendedLanes);
					}
					function performSyncWorkOnRoot(root2) {
						if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
							{
								throw Error("Should not already be working.");
							}
						}
						flushPassiveEffects();
						var lanes;
						var exitStatus;
						if (
							root2 === workInProgressRoot &&
							includesSomeLane(root2.expiredLanes, workInProgressRootRenderLanes)
						) {
							lanes = workInProgressRootRenderLanes;
							exitStatus = renderRootSync(root2, lanes);
							if (
								includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)
							) {
								lanes = getNextLanes(root2, lanes);
								exitStatus = renderRootSync(root2, lanes);
							}
						} else {
							lanes = getNextLanes(root2, NoLanes);
							exitStatus = renderRootSync(root2, lanes);
						}
						if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
							executionContext |= RetryAfterError;
							if (root2.hydrate) {
								root2.hydrate = false;
								clearContainer(root2.containerInfo);
							}
							lanes = getLanesToRetrySynchronouslyOnError(root2);
							if (lanes !== NoLanes) {
								exitStatus = renderRootSync(root2, lanes);
							}
						}
						if (exitStatus === RootFatalErrored) {
							var fatalError = workInProgressRootFatalError;
							prepareFreshStack(root2, NoLanes);
							markRootSuspended$1(root2, lanes);
							ensureRootIsScheduled(root2, now());
							throw fatalError;
						}
						var finishedWork = root2.current.alternate;
						root2.finishedWork = finishedWork;
						root2.finishedLanes = lanes;
						commitRoot(root2);
						ensureRootIsScheduled(root2, now());
						return null;
					}
					function flushDiscreteUpdates() {
						if (
							(executionContext & (BatchedContext | RenderContext | CommitContext)) !==
							NoContext
						) {
							{
								if ((executionContext & RenderContext) !== NoContext) {
									error3(
										"unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering."
									);
								}
							}
							return;
						}
						flushPendingDiscreteUpdates();
						flushPassiveEffects();
					}
					function flushPendingDiscreteUpdates() {
						if (rootsWithPendingDiscreteUpdates !== null) {
							var roots = rootsWithPendingDiscreteUpdates;
							rootsWithPendingDiscreteUpdates = null;
							roots.forEach(function (root2) {
								markDiscreteUpdatesExpired(root2);
								ensureRootIsScheduled(root2, now());
							});
						}
						flushSyncCallbackQueue();
					}
					function batchedUpdates$1(fn, a) {
						var prevExecutionContext = executionContext;
						executionContext |= BatchedContext;
						try {
							return fn(a);
						} finally {
							executionContext = prevExecutionContext;
							if (executionContext === NoContext) {
								resetRenderTimer();
								flushSyncCallbackQueue();
							}
						}
					}
					function batchedEventUpdates$1(fn, a) {
						var prevExecutionContext = executionContext;
						executionContext |= EventContext;
						try {
							return fn(a);
						} finally {
							executionContext = prevExecutionContext;
							if (executionContext === NoContext) {
								resetRenderTimer();
								flushSyncCallbackQueue();
							}
						}
					}
					function discreteUpdates$1(fn, a, b, c20, d) {
						var prevExecutionContext = executionContext;
						executionContext |= DiscreteEventContext;
						{
							try {
								return runWithPriority$1(UserBlockingPriority$2, fn.bind(null, a, b, c20, d));
							} finally {
								executionContext = prevExecutionContext;
								if (executionContext === NoContext) {
									resetRenderTimer();
									flushSyncCallbackQueue();
								}
							}
						}
					}
					function unbatchedUpdates(fn, a) {
						var prevExecutionContext = executionContext;
						executionContext &= ~BatchedContext;
						executionContext |= LegacyUnbatchedContext;
						try {
							return fn(a);
						} finally {
							executionContext = prevExecutionContext;
							if (executionContext === NoContext) {
								resetRenderTimer();
								flushSyncCallbackQueue();
							}
						}
					}
					function flushSync(fn, a) {
						var prevExecutionContext = executionContext;
						if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
							{
								error3(
									"flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task."
								);
							}
							return fn(a);
						}
						executionContext |= BatchedContext;
						{
							try {
								if (fn) {
									return runWithPriority$1(ImmediatePriority$1, fn.bind(null, a));
								} else {
									return void 0;
								}
							} finally {
								executionContext = prevExecutionContext;
								flushSyncCallbackQueue();
							}
						}
					}
					function pushRenderLanes(fiber, lanes) {
						push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
						subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
						workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
					}
					function popRenderLanes(fiber) {
						subtreeRenderLanes = subtreeRenderLanesCursor.current;
						pop(subtreeRenderLanesCursor, fiber);
					}
					function prepareFreshStack(root2, lanes) {
						root2.finishedWork = null;
						root2.finishedLanes = NoLanes;
						var timeoutHandle = root2.timeoutHandle;
						if (timeoutHandle !== noTimeout) {
							root2.timeoutHandle = noTimeout;
							cancelTimeout(timeoutHandle);
						}
						if (workInProgress !== null) {
							var interruptedWork = workInProgress.return;
							while (interruptedWork !== null) {
								unwindInterruptedWork(interruptedWork);
								interruptedWork = interruptedWork.return;
							}
						}
						workInProgressRoot = root2;
						workInProgress = createWorkInProgress(root2.current, null);
						workInProgressRootRenderLanes =
							subtreeRenderLanes =
							workInProgressRootIncludedLanes =
								lanes;
						workInProgressRootExitStatus = RootIncomplete;
						workInProgressRootFatalError = null;
						workInProgressRootSkippedLanes = NoLanes;
						workInProgressRootUpdatedLanes = NoLanes;
						workInProgressRootPingedLanes = NoLanes;
						{
							spawnedWorkDuringRender = null;
						}
						{
							ReactStrictModeWarnings.discardPendingWarnings();
						}
					}
					function handleError(root2, thrownValue) {
						do {
							var erroredWork = workInProgress;
							try {
								resetContextDependencies();
								resetHooksAfterThrow();
								resetCurrentFiber();
								ReactCurrentOwner$2.current = null;
								if (erroredWork === null || erroredWork.return === null) {
									workInProgressRootExitStatus = RootFatalErrored;
									workInProgressRootFatalError = thrownValue;
									workInProgress = null;
									return;
								}
								if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
									stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
								}
								throwException(
									root2,
									erroredWork.return,
									erroredWork,
									thrownValue,
									workInProgressRootRenderLanes
								);
								completeUnitOfWork(erroredWork);
							} catch (yetAnotherThrownValue) {
								thrownValue = yetAnotherThrownValue;
								if (workInProgress === erroredWork && erroredWork !== null) {
									erroredWork = erroredWork.return;
									workInProgress = erroredWork;
								} else {
									erroredWork = workInProgress;
								}
								continue;
							}
							return;
						} while (true);
					}
					function pushDispatcher() {
						var prevDispatcher = ReactCurrentDispatcher$2.current;
						ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
						if (prevDispatcher === null) {
							return ContextOnlyDispatcher;
						} else {
							return prevDispatcher;
						}
					}
					function popDispatcher(prevDispatcher) {
						ReactCurrentDispatcher$2.current = prevDispatcher;
					}
					function pushInteractions(root2) {
						{
							var prevInteractions = tracing.__interactionsRef.current;
							tracing.__interactionsRef.current = root2.memoizedInteractions;
							return prevInteractions;
						}
					}
					function popInteractions(prevInteractions) {
						{
							tracing.__interactionsRef.current = prevInteractions;
						}
					}
					function markCommitTimeOfFallback() {
						globalMostRecentFallbackTime = now();
					}
					function markSkippedUpdateLanes(lane) {
						workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
					}
					function renderDidSuspend() {
						if (workInProgressRootExitStatus === RootIncomplete) {
							workInProgressRootExitStatus = RootSuspended;
						}
					}
					function renderDidSuspendDelayIfPossible() {
						if (
							workInProgressRootExitStatus === RootIncomplete ||
							workInProgressRootExitStatus === RootSuspended
						) {
							workInProgressRootExitStatus = RootSuspendedWithDelay;
						}
						if (
							workInProgressRoot !== null &&
							(includesNonIdleWork(workInProgressRootSkippedLanes) ||
								includesNonIdleWork(workInProgressRootUpdatedLanes))
						) {
							markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
						}
					}
					function renderDidError() {
						if (workInProgressRootExitStatus !== RootCompleted) {
							workInProgressRootExitStatus = RootErrored;
						}
					}
					function renderHasNotSuspendedYet() {
						return workInProgressRootExitStatus === RootIncomplete;
					}
					function renderRootSync(root2, lanes) {
						var prevExecutionContext = executionContext;
						executionContext |= RenderContext;
						var prevDispatcher = pushDispatcher();
						if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
							prepareFreshStack(root2, lanes);
							startWorkOnPendingInteractions(root2, lanes);
						}
						var prevInteractions = pushInteractions(root2);
						do {
							try {
								workLoopSync();
								break;
							} catch (thrownValue) {
								handleError(root2, thrownValue);
							}
						} while (true);
						resetContextDependencies();
						{
							popInteractions(prevInteractions);
						}
						executionContext = prevExecutionContext;
						popDispatcher(prevDispatcher);
						if (workInProgress !== null) {
							{
								{
									throw Error(
										"Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue."
									);
								}
							}
						}
						workInProgressRoot = null;
						workInProgressRootRenderLanes = NoLanes;
						return workInProgressRootExitStatus;
					}
					function workLoopSync() {
						while (workInProgress !== null) {
							performUnitOfWork(workInProgress);
						}
					}
					function renderRootConcurrent(root2, lanes) {
						var prevExecutionContext = executionContext;
						executionContext |= RenderContext;
						var prevDispatcher = pushDispatcher();
						if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
							resetRenderTimer();
							prepareFreshStack(root2, lanes);
							startWorkOnPendingInteractions(root2, lanes);
						}
						var prevInteractions = pushInteractions(root2);
						do {
							try {
								workLoopConcurrent();
								break;
							} catch (thrownValue) {
								handleError(root2, thrownValue);
							}
						} while (true);
						resetContextDependencies();
						{
							popInteractions(prevInteractions);
						}
						popDispatcher(prevDispatcher);
						executionContext = prevExecutionContext;
						if (workInProgress !== null) {
							return RootIncomplete;
						} else {
							workInProgressRoot = null;
							workInProgressRootRenderLanes = NoLanes;
							return workInProgressRootExitStatus;
						}
					}
					function workLoopConcurrent() {
						while (workInProgress !== null && !shouldYield()) {
							performUnitOfWork(workInProgress);
						}
					}
					function performUnitOfWork(unitOfWork) {
						var current2 = unitOfWork.alternate;
						setCurrentFiber(unitOfWork);
						var next;
						if ((unitOfWork.mode & ProfileMode) !== NoMode) {
							startProfilerTimer(unitOfWork);
							next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
							stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
						} else {
							next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
						}
						resetCurrentFiber();
						unitOfWork.memoizedProps = unitOfWork.pendingProps;
						if (next === null) {
							completeUnitOfWork(unitOfWork);
						} else {
							workInProgress = next;
						}
						ReactCurrentOwner$2.current = null;
					}
					function completeUnitOfWork(unitOfWork) {
						var completedWork = unitOfWork;
						do {
							var current2 = completedWork.alternate;
							var returnFiber = completedWork.return;
							if ((completedWork.flags & Incomplete) === NoFlags) {
								setCurrentFiber(completedWork);
								var next = void 0;
								if ((completedWork.mode & ProfileMode) === NoMode) {
									next = completeWork(current2, completedWork, subtreeRenderLanes);
								} else {
									startProfilerTimer(completedWork);
									next = completeWork(current2, completedWork, subtreeRenderLanes);
									stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
								}
								resetCurrentFiber();
								if (next !== null) {
									workInProgress = next;
									return;
								}
								resetChildLanes(completedWork);
								if (returnFiber !== null && (returnFiber.flags & Incomplete) === NoFlags) {
									if (returnFiber.firstEffect === null) {
										returnFiber.firstEffect = completedWork.firstEffect;
									}
									if (completedWork.lastEffect !== null) {
										if (returnFiber.lastEffect !== null) {
											returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
										}
										returnFiber.lastEffect = completedWork.lastEffect;
									}
									var flags = completedWork.flags;
									if (flags > PerformedWork) {
										if (returnFiber.lastEffect !== null) {
											returnFiber.lastEffect.nextEffect = completedWork;
										} else {
											returnFiber.firstEffect = completedWork;
										}
										returnFiber.lastEffect = completedWork;
									}
								}
							} else {
								var _next = unwindWork(completedWork);
								if (_next !== null) {
									_next.flags &= HostEffectMask;
									workInProgress = _next;
									return;
								}
								if ((completedWork.mode & ProfileMode) !== NoMode) {
									stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
									var actualDuration = completedWork.actualDuration;
									var child = completedWork.child;
									while (child !== null) {
										actualDuration += child.actualDuration;
										child = child.sibling;
									}
									completedWork.actualDuration = actualDuration;
								}
								if (returnFiber !== null) {
									returnFiber.firstEffect = returnFiber.lastEffect = null;
									returnFiber.flags |= Incomplete;
								}
							}
							var siblingFiber = completedWork.sibling;
							if (siblingFiber !== null) {
								workInProgress = siblingFiber;
								return;
							}
							completedWork = returnFiber;
							workInProgress = completedWork;
						} while (completedWork !== null);
						if (workInProgressRootExitStatus === RootIncomplete) {
							workInProgressRootExitStatus = RootCompleted;
						}
					}
					function resetChildLanes(completedWork) {
						if (
							(completedWork.tag === LegacyHiddenComponent ||
								completedWork.tag === OffscreenComponent) &&
							completedWork.memoizedState !== null &&
							!includesSomeLane(subtreeRenderLanes, OffscreenLane) &&
							(completedWork.mode & ConcurrentMode) !== NoLanes
						) {
							return;
						}
						var newChildLanes = NoLanes;
						if ((completedWork.mode & ProfileMode) !== NoMode) {
							var actualDuration = completedWork.actualDuration;
							var treeBaseDuration = completedWork.selfBaseDuration;
							var shouldBubbleActualDurations =
								completedWork.alternate === null ||
								completedWork.child !== completedWork.alternate.child;
							var child = completedWork.child;
							while (child !== null) {
								newChildLanes = mergeLanes(
									newChildLanes,
									mergeLanes(child.lanes, child.childLanes)
								);
								if (shouldBubbleActualDurations) {
									actualDuration += child.actualDuration;
								}
								treeBaseDuration += child.treeBaseDuration;
								child = child.sibling;
							}
							var isTimedOutSuspense =
								completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;
							if (isTimedOutSuspense) {
								var primaryChildFragment = completedWork.child;
								if (primaryChildFragment !== null) {
									treeBaseDuration -= primaryChildFragment.treeBaseDuration;
								}
							}
							completedWork.actualDuration = actualDuration;
							completedWork.treeBaseDuration = treeBaseDuration;
						} else {
							var _child = completedWork.child;
							while (_child !== null) {
								newChildLanes = mergeLanes(
									newChildLanes,
									mergeLanes(_child.lanes, _child.childLanes)
								);
								_child = _child.sibling;
							}
						}
						completedWork.childLanes = newChildLanes;
					}
					function commitRoot(root2) {
						var renderPriorityLevel = getCurrentPriorityLevel();
						runWithPriority$1(
							ImmediatePriority$1,
							commitRootImpl.bind(null, root2, renderPriorityLevel)
						);
						return null;
					}
					function commitRootImpl(root2, renderPriorityLevel) {
						do {
							flushPassiveEffects();
						} while (rootWithPendingPassiveEffects !== null);
						flushRenderPhaseStrictModeWarningsInDEV();
						if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
							{
								throw Error("Should not already be working.");
							}
						}
						var finishedWork = root2.finishedWork;
						var lanes = root2.finishedLanes;
						if (finishedWork === null) {
							return null;
						}
						root2.finishedWork = null;
						root2.finishedLanes = NoLanes;
						if (!(finishedWork !== root2.current)) {
							{
								throw Error(
									"Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue."
								);
							}
						}
						root2.callbackNode = null;
						var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
						markRootFinished(root2, remainingLanes);
						if (rootsWithPendingDiscreteUpdates !== null) {
							if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root2)) {
								rootsWithPendingDiscreteUpdates.delete(root2);
							}
						}
						if (root2 === workInProgressRoot) {
							workInProgressRoot = null;
							workInProgress = null;
							workInProgressRootRenderLanes = NoLanes;
						}
						var firstEffect;
						if (finishedWork.flags > PerformedWork) {
							if (finishedWork.lastEffect !== null) {
								finishedWork.lastEffect.nextEffect = finishedWork;
								firstEffect = finishedWork.firstEffect;
							} else {
								firstEffect = finishedWork;
							}
						} else {
							firstEffect = finishedWork.firstEffect;
						}
						if (firstEffect !== null) {
							var prevExecutionContext = executionContext;
							executionContext |= CommitContext;
							var prevInteractions = pushInteractions(root2);
							ReactCurrentOwner$2.current = null;
							focusedInstanceHandle = prepareForCommit(root2.containerInfo);
							shouldFireAfterActiveInstanceBlur = false;
							nextEffect = firstEffect;
							do {
								{
									invokeGuardedCallback(null, commitBeforeMutationEffects, null);
									if (hasCaughtError()) {
										if (!(nextEffect !== null)) {
											{
												throw Error("Should be working on an effect.");
											}
										}
										var error4 = clearCaughtError();
										captureCommitPhaseError(nextEffect, error4);
										nextEffect = nextEffect.nextEffect;
									}
								}
							} while (nextEffect !== null);
							focusedInstanceHandle = null;
							{
								recordCommitTime();
							}
							nextEffect = firstEffect;
							do {
								{
									invokeGuardedCallback(
										null,
										commitMutationEffects,
										null,
										root2,
										renderPriorityLevel
									);
									if (hasCaughtError()) {
										if (!(nextEffect !== null)) {
											{
												throw Error("Should be working on an effect.");
											}
										}
										var _error = clearCaughtError();
										captureCommitPhaseError(nextEffect, _error);
										nextEffect = nextEffect.nextEffect;
									}
								}
							} while (nextEffect !== null);
							resetAfterCommit(root2.containerInfo);
							root2.current = finishedWork;
							nextEffect = firstEffect;
							do {
								{
									invokeGuardedCallback(null, commitLayoutEffects, null, root2, lanes);
									if (hasCaughtError()) {
										if (!(nextEffect !== null)) {
											{
												throw Error("Should be working on an effect.");
											}
										}
										var _error2 = clearCaughtError();
										captureCommitPhaseError(nextEffect, _error2);
										nextEffect = nextEffect.nextEffect;
									}
								}
							} while (nextEffect !== null);
							nextEffect = null;
							requestPaint();
							{
								popInteractions(prevInteractions);
							}
							executionContext = prevExecutionContext;
						} else {
							root2.current = finishedWork;
							{
								recordCommitTime();
							}
						}
						var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
						if (rootDoesHavePassiveEffects) {
							rootDoesHavePassiveEffects = false;
							rootWithPendingPassiveEffects = root2;
							pendingPassiveEffectsLanes = lanes;
							pendingPassiveEffectsRenderPriority = renderPriorityLevel;
						} else {
							nextEffect = firstEffect;
							while (nextEffect !== null) {
								var nextNextEffect = nextEffect.nextEffect;
								nextEffect.nextEffect = null;
								if (nextEffect.flags & Deletion) {
									detachFiberAfterEffects(nextEffect);
								}
								nextEffect = nextNextEffect;
							}
						}
						remainingLanes = root2.pendingLanes;
						if (remainingLanes !== NoLanes) {
							{
								if (spawnedWorkDuringRender !== null) {
									var expirationTimes = spawnedWorkDuringRender;
									spawnedWorkDuringRender = null;
									for (var i = 0; i < expirationTimes.length; i++) {
										scheduleInteractions(root2, expirationTimes[i], root2.memoizedInteractions);
									}
								}
								schedulePendingInteractions(root2, remainingLanes);
							}
						} else {
							legacyErrorBoundariesThatAlreadyFailed = null;
						}
						{
							if (!rootDidHavePassiveEffects) {
								finishPendingInteractions(root2, lanes);
							}
						}
						if (remainingLanes === SyncLane) {
							if (root2 === rootWithNestedUpdates) {
								nestedUpdateCount++;
							} else {
								nestedUpdateCount = 0;
								rootWithNestedUpdates = root2;
							}
						} else {
							nestedUpdateCount = 0;
						}
						onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
						{
							onCommitRoot$1();
						}
						ensureRootIsScheduled(root2, now());
						if (hasUncaughtError) {
							hasUncaughtError = false;
							var _error3 = firstUncaughtError;
							firstUncaughtError = null;
							throw _error3;
						}
						if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
							return null;
						}
						flushSyncCallbackQueue();
						return null;
					}
					function commitBeforeMutationEffects() {
						while (nextEffect !== null) {
							var current2 = nextEffect.alternate;
							if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
								if ((nextEffect.flags & Deletion) !== NoFlags) {
									if (doesFiberContain(nextEffect, focusedInstanceHandle)) {
										shouldFireAfterActiveInstanceBlur = true;
									}
								} else {
									if (
										nextEffect.tag === SuspenseComponent &&
										isSuspenseBoundaryBeingHidden(current2, nextEffect) &&
										doesFiberContain(nextEffect, focusedInstanceHandle)
									) {
										shouldFireAfterActiveInstanceBlur = true;
									}
								}
							}
							var flags = nextEffect.flags;
							if ((flags & Snapshot) !== NoFlags) {
								setCurrentFiber(nextEffect);
								commitBeforeMutationLifeCycles(current2, nextEffect);
								resetCurrentFiber();
							}
							if ((flags & Passive) !== NoFlags) {
								if (!rootDoesHavePassiveEffects) {
									rootDoesHavePassiveEffects = true;
									scheduleCallback(NormalPriority$1, function () {
										flushPassiveEffects();
										return null;
									});
								}
							}
							nextEffect = nextEffect.nextEffect;
						}
					}
					function commitMutationEffects(root2, renderPriorityLevel) {
						while (nextEffect !== null) {
							setCurrentFiber(nextEffect);
							var flags = nextEffect.flags;
							if (flags & ContentReset) {
								commitResetTextContent(nextEffect);
							}
							if (flags & Ref) {
								var current2 = nextEffect.alternate;
								if (current2 !== null) {
									commitDetachRef(current2);
								}
							}
							var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);
							switch (primaryFlags) {
								case Placement: {
									commitPlacement(nextEffect);
									nextEffect.flags &= ~Placement;
									break;
								}
								case PlacementAndUpdate: {
									commitPlacement(nextEffect);
									nextEffect.flags &= ~Placement;
									var _current = nextEffect.alternate;
									commitWork(_current, nextEffect);
									break;
								}
								case Hydrating: {
									nextEffect.flags &= ~Hydrating;
									break;
								}
								case HydratingAndUpdate: {
									nextEffect.flags &= ~Hydrating;
									var _current2 = nextEffect.alternate;
									commitWork(_current2, nextEffect);
									break;
								}
								case Update: {
									var _current3 = nextEffect.alternate;
									commitWork(_current3, nextEffect);
									break;
								}
								case Deletion: {
									commitDeletion(root2, nextEffect);
									break;
								}
							}
							resetCurrentFiber();
							nextEffect = nextEffect.nextEffect;
						}
					}
					function commitLayoutEffects(root2, committedLanes) {
						while (nextEffect !== null) {
							setCurrentFiber(nextEffect);
							var flags = nextEffect.flags;
							if (flags & (Update | Callback)) {
								var current2 = nextEffect.alternate;
								commitLifeCycles(root2, current2, nextEffect);
							}
							{
								if (flags & Ref) {
									commitAttachRef(nextEffect);
								}
							}
							resetCurrentFiber();
							nextEffect = nextEffect.nextEffect;
						}
					}
					function flushPassiveEffects() {
						if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
							var priorityLevel =
								pendingPassiveEffectsRenderPriority > NormalPriority$1
									? NormalPriority$1
									: pendingPassiveEffectsRenderPriority;
							pendingPassiveEffectsRenderPriority = NoPriority$1;
							{
								return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
							}
						}
						return false;
					}
					function enqueuePendingPassiveHookEffectMount(fiber, effect) {
						pendingPassiveHookEffectsMount.push(effect, fiber);
						if (!rootDoesHavePassiveEffects) {
							rootDoesHavePassiveEffects = true;
							scheduleCallback(NormalPriority$1, function () {
								flushPassiveEffects();
								return null;
							});
						}
					}
					function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
						pendingPassiveHookEffectsUnmount.push(effect, fiber);
						{
							fiber.flags |= PassiveUnmountPendingDev;
							var alternate = fiber.alternate;
							if (alternate !== null) {
								alternate.flags |= PassiveUnmountPendingDev;
							}
						}
						if (!rootDoesHavePassiveEffects) {
							rootDoesHavePassiveEffects = true;
							scheduleCallback(NormalPriority$1, function () {
								flushPassiveEffects();
								return null;
							});
						}
					}
					function invokePassiveEffectCreate(effect) {
						var create = effect.create;
						effect.destroy = create();
					}
					function flushPassiveEffectsImpl() {
						if (rootWithPendingPassiveEffects === null) {
							return false;
						}
						var root2 = rootWithPendingPassiveEffects;
						var lanes = pendingPassiveEffectsLanes;
						rootWithPendingPassiveEffects = null;
						pendingPassiveEffectsLanes = NoLanes;
						if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
							{
								throw Error("Cannot flush passive effects while already rendering.");
							}
						}
						{
							isFlushingPassiveEffects = true;
						}
						var prevExecutionContext = executionContext;
						executionContext |= CommitContext;
						var prevInteractions = pushInteractions(root2);
						var unmountEffects = pendingPassiveHookEffectsUnmount;
						pendingPassiveHookEffectsUnmount = [];
						for (var i = 0; i < unmountEffects.length; i += 2) {
							var _effect = unmountEffects[i];
							var fiber = unmountEffects[i + 1];
							var destroy = _effect.destroy;
							_effect.destroy = void 0;
							{
								fiber.flags &= ~PassiveUnmountPendingDev;
								var alternate = fiber.alternate;
								if (alternate !== null) {
									alternate.flags &= ~PassiveUnmountPendingDev;
								}
							}
							if (typeof destroy === "function") {
								{
									setCurrentFiber(fiber);
									{
										invokeGuardedCallback(null, destroy, null);
									}
									if (hasCaughtError()) {
										if (!(fiber !== null)) {
											{
												throw Error("Should be working on an effect.");
											}
										}
										var error4 = clearCaughtError();
										captureCommitPhaseError(fiber, error4);
									}
									resetCurrentFiber();
								}
							}
						}
						var mountEffects = pendingPassiveHookEffectsMount;
						pendingPassiveHookEffectsMount = [];
						for (var _i = 0; _i < mountEffects.length; _i += 2) {
							var _effect2 = mountEffects[_i];
							var _fiber = mountEffects[_i + 1];
							{
								setCurrentFiber(_fiber);
								{
									invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
								}
								if (hasCaughtError()) {
									if (!(_fiber !== null)) {
										{
											throw Error("Should be working on an effect.");
										}
									}
									var _error4 = clearCaughtError();
									captureCommitPhaseError(_fiber, _error4);
								}
								resetCurrentFiber();
							}
						}
						var effect = root2.current.firstEffect;
						while (effect !== null) {
							var nextNextEffect = effect.nextEffect;
							effect.nextEffect = null;
							if (effect.flags & Deletion) {
								detachFiberAfterEffects(effect);
							}
							effect = nextNextEffect;
						}
						{
							popInteractions(prevInteractions);
							finishPendingInteractions(root2, lanes);
						}
						{
							isFlushingPassiveEffects = false;
						}
						executionContext = prevExecutionContext;
						flushSyncCallbackQueue();
						nestedPassiveUpdateCount =
							rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
						return true;
					}
					function isAlreadyFailedLegacyErrorBoundary(instance) {
						return (
							legacyErrorBoundariesThatAlreadyFailed !== null &&
							legacyErrorBoundariesThatAlreadyFailed.has(instance)
						);
					}
					function markLegacyErrorBoundaryAsFailed(instance) {
						if (legacyErrorBoundariesThatAlreadyFailed === null) {
							legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
						} else {
							legacyErrorBoundariesThatAlreadyFailed.add(instance);
						}
					}
					function prepareToThrowUncaughtError(error4) {
						if (!hasUncaughtError) {
							hasUncaughtError = true;
							firstUncaughtError = error4;
						}
					}
					var onUncaughtError = prepareToThrowUncaughtError;
					function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error4) {
						var errorInfo = createCapturedValue(error4, sourceFiber);
						var update2 = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
						enqueueUpdate(rootFiber, update2);
						var eventTime = requestEventTime();
						var root2 = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
						if (root2 !== null) {
							markRootUpdated(root2, SyncLane, eventTime);
							ensureRootIsScheduled(root2, eventTime);
							schedulePendingInteractions(root2, SyncLane);
						}
					}
					function captureCommitPhaseError(sourceFiber, error4) {
						if (sourceFiber.tag === HostRoot) {
							captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error4);
							return;
						}
						var fiber = sourceFiber.return;
						while (fiber !== null) {
							if (fiber.tag === HostRoot) {
								captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error4);
								return;
							} else if (fiber.tag === ClassComponent) {
								var ctor = fiber.type;
								var instance = fiber.stateNode;
								if (
									typeof ctor.getDerivedStateFromError === "function" ||
									(typeof instance.componentDidCatch === "function" &&
										!isAlreadyFailedLegacyErrorBoundary(instance))
								) {
									var errorInfo = createCapturedValue(error4, sourceFiber);
									var update2 = createClassErrorUpdate(fiber, errorInfo, SyncLane);
									enqueueUpdate(fiber, update2);
									var eventTime = requestEventTime();
									var root2 = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
									if (root2 !== null) {
										markRootUpdated(root2, SyncLane, eventTime);
										ensureRootIsScheduled(root2, eventTime);
										schedulePendingInteractions(root2, SyncLane);
									} else {
										if (
											typeof instance.componentDidCatch === "function" &&
											!isAlreadyFailedLegacyErrorBoundary(instance)
										) {
											try {
												instance.componentDidCatch(error4, errorInfo);
											} catch (errorToIgnore) {}
										}
									}
									return;
								}
							}
							fiber = fiber.return;
						}
					}
					function pingSuspendedRoot(root2, wakeable, pingedLanes) {
						var pingCache = root2.pingCache;
						if (pingCache !== null) {
							pingCache.delete(wakeable);
						}
						var eventTime = requestEventTime();
						markRootPinged(root2, pingedLanes);
						if (
							workInProgressRoot === root2 &&
							isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)
						) {
							if (
								workInProgressRootExitStatus === RootSuspendedWithDelay ||
								(workInProgressRootExitStatus === RootSuspended &&
									includesOnlyRetries(workInProgressRootRenderLanes) &&
									now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS)
							) {
								prepareFreshStack(root2, NoLanes);
							} else {
								workInProgressRootPingedLanes = mergeLanes(
									workInProgressRootPingedLanes,
									pingedLanes
								);
							}
						}
						ensureRootIsScheduled(root2, eventTime);
						schedulePendingInteractions(root2, pingedLanes);
					}
					function retryTimedOutBoundary(boundaryFiber, retryLane) {
						if (retryLane === NoLane) {
							retryLane = requestRetryLane(boundaryFiber);
						}
						var eventTime = requestEventTime();
						var root2 = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
						if (root2 !== null) {
							markRootUpdated(root2, retryLane, eventTime);
							ensureRootIsScheduled(root2, eventTime);
							schedulePendingInteractions(root2, retryLane);
						}
					}
					function resolveRetryWakeable(boundaryFiber, wakeable) {
						var retryLane = NoLane;
						var retryCache;
						{
							retryCache = boundaryFiber.stateNode;
						}
						if (retryCache !== null) {
							retryCache.delete(wakeable);
						}
						retryTimedOutBoundary(boundaryFiber, retryLane);
					}
					function jnd(timeElapsed) {
						return timeElapsed < 120
							? 120
							: timeElapsed < 480
							? 480
							: timeElapsed < 1080
							? 1080
							: timeElapsed < 1920
							? 1920
							: timeElapsed < 3e3
							? 3e3
							: timeElapsed < 4320
							? 4320
							: ceil(timeElapsed / 1960) * 1960;
					}
					function checkForNestedUpdates() {
						if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
							nestedUpdateCount = 0;
							rootWithNestedUpdates = null;
							{
								{
									throw Error(
										"Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops."
									);
								}
							}
						}
						{
							if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
								nestedPassiveUpdateCount = 0;
								error3(
									"Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render."
								);
							}
						}
					}
					function flushRenderPhaseStrictModeWarningsInDEV() {
						{
							ReactStrictModeWarnings.flushLegacyContextWarning();
							{
								ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
							}
						}
					}
					var didWarnStateUpdateForNotYetMountedComponent = null;
					function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
						{
							if ((executionContext & RenderContext) !== NoContext) {
								return;
							}
							if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {
								return;
							}
							var tag = fiber.tag;
							if (
								tag !== IndeterminateComponent &&
								tag !== HostRoot &&
								tag !== ClassComponent &&
								tag !== FunctionComponent &&
								tag !== ForwardRef &&
								tag !== MemoComponent &&
								tag !== SimpleMemoComponent &&
								tag !== Block
							) {
								return;
							}
							var componentName = getComponentName(fiber.type) || "ReactComponent";
							if (didWarnStateUpdateForNotYetMountedComponent !== null) {
								if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
									return;
								}
								didWarnStateUpdateForNotYetMountedComponent.add(componentName);
							} else {
								didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
							}
							var previousFiber = current;
							try {
								setCurrentFiber(fiber);
								error3(
									"Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead."
								);
							} finally {
								if (previousFiber) {
									setCurrentFiber(fiber);
								} else {
									resetCurrentFiber();
								}
							}
						}
					}
					var didWarnStateUpdateForUnmountedComponent = null;
					function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
						{
							var tag = fiber.tag;
							if (
								tag !== HostRoot &&
								tag !== ClassComponent &&
								tag !== FunctionComponent &&
								tag !== ForwardRef &&
								tag !== MemoComponent &&
								tag !== SimpleMemoComponent &&
								tag !== Block
							) {
								return;
							}
							if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {
								return;
							}
							var componentName = getComponentName(fiber.type) || "ReactComponent";
							if (didWarnStateUpdateForUnmountedComponent !== null) {
								if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
									return;
								}
								didWarnStateUpdateForUnmountedComponent.add(componentName);
							} else {
								didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
							}
							if (isFlushingPassiveEffects);
							else {
								var previousFiber = current;
								try {
									setCurrentFiber(fiber);
									error3(
										"Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.",
										tag === ClassComponent
											? "the componentWillUnmount method"
											: "a useEffect cleanup function"
									);
								} finally {
									if (previousFiber) {
										setCurrentFiber(fiber);
									} else {
										resetCurrentFiber();
									}
								}
							}
						}
					}
					var beginWork$1;
					{
						var dummyFiber = null;
						beginWork$1 = function (current2, unitOfWork, lanes) {
							var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
							try {
								return beginWork(current2, unitOfWork, lanes);
							} catch (originalError) {
								if (
									originalError !== null &&
									typeof originalError === "object" &&
									typeof originalError.then === "function"
								) {
									throw originalError;
								}
								resetContextDependencies();
								resetHooksAfterThrow();
								unwindInterruptedWork(unitOfWork);
								assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
								if (unitOfWork.mode & ProfileMode) {
									startProfilerTimer(unitOfWork);
								}
								invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
								if (hasCaughtError()) {
									var replayError = clearCaughtError();
									throw replayError;
								} else {
									throw originalError;
								}
							}
						};
					}
					var didWarnAboutUpdateInRender = false;
					var didWarnAboutUpdateInRenderForAnotherComponent;
					{
						didWarnAboutUpdateInRenderForAnotherComponent = new Set();
					}
					function warnAboutRenderPhaseUpdatesInDEV(fiber) {
						{
							if (
								isRendering &&
								(executionContext & RenderContext) !== NoContext &&
								!getIsUpdatingOpaqueValueInRenderPhaseInDEV()
							) {
								switch (fiber.tag) {
									case FunctionComponent:
									case ForwardRef:
									case SimpleMemoComponent: {
										var renderingComponentName =
											(workInProgress && getComponentName(workInProgress.type)) || "Unknown";
										var dedupeKey = renderingComponentName;
										if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
											didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
											var setStateComponentName = getComponentName(fiber.type) || "Unknown";
											error3(
												"Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render",
												setStateComponentName,
												renderingComponentName,
												renderingComponentName
											);
										}
										break;
									}
									case ClassComponent: {
										if (!didWarnAboutUpdateInRender) {
											error3(
												"Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state."
											);
											didWarnAboutUpdateInRender = true;
										}
										break;
									}
								}
							}
						}
					}
					var IsThisRendererActing = {
						current: false,
					};
					function warnIfNotScopedWithMatchingAct(fiber) {
						{
							if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
								var previousFiber = current;
								try {
									setCurrentFiber(fiber);
									error3(
										"It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);"
									);
								} finally {
									if (previousFiber) {
										setCurrentFiber(fiber);
									} else {
										resetCurrentFiber();
									}
								}
							}
						}
					}
					function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
						{
							if (
								(fiber.mode & StrictMode) !== NoMode &&
								IsSomeRendererActing.current === false &&
								IsThisRendererActing.current === false
							) {
								error3(
									"An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act",
									getComponentName(fiber.type)
								);
							}
						}
					}
					function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
						{
							if (
								executionContext === NoContext &&
								IsSomeRendererActing.current === false &&
								IsThisRendererActing.current === false
							) {
								var previousFiber = current;
								try {
									setCurrentFiber(fiber);
									error3(
										"An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act",
										getComponentName(fiber.type)
									);
								} finally {
									if (previousFiber) {
										setCurrentFiber(fiber);
									} else {
										resetCurrentFiber();
									}
								}
							}
						}
					}
					var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
					var didWarnAboutUnmockedScheduler = false;
					function warnIfUnmockedScheduler(fiber) {
						{
							if (
								didWarnAboutUnmockedScheduler === false &&
								Scheduler2.unstable_flushAllWithoutAsserting === void 0
							) {
								if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
									didWarnAboutUnmockedScheduler = true;
									error3(`In Concurrent or Sync modes, the "scheduler" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: 
jest.mock('scheduler', () => require('scheduler/unstable_mock'));

For more info, visit https://reactjs.org/link/mock-scheduler`);
								}
							}
						}
					}
					function computeThreadID(root2, lane) {
						return lane * 1e3 + root2.interactionThreadID;
					}
					function markSpawnedWork(lane) {
						if (spawnedWorkDuringRender === null) {
							spawnedWorkDuringRender = [lane];
						} else {
							spawnedWorkDuringRender.push(lane);
						}
					}
					function scheduleInteractions(root2, lane, interactions) {
						if (interactions.size > 0) {
							var pendingInteractionMap = root2.pendingInteractionMap;
							var pendingInteractions = pendingInteractionMap.get(lane);
							if (pendingInteractions != null) {
								interactions.forEach(function (interaction) {
									if (!pendingInteractions.has(interaction)) {
										interaction.__count++;
									}
									pendingInteractions.add(interaction);
								});
							} else {
								pendingInteractionMap.set(lane, new Set(interactions));
								interactions.forEach(function (interaction) {
									interaction.__count++;
								});
							}
							var subscriber = tracing.__subscriberRef.current;
							if (subscriber !== null) {
								var threadID = computeThreadID(root2, lane);
								subscriber.onWorkScheduled(interactions, threadID);
							}
						}
					}
					function schedulePendingInteractions(root2, lane) {
						scheduleInteractions(root2, lane, tracing.__interactionsRef.current);
					}
					function startWorkOnPendingInteractions(root2, lanes) {
						var interactions = new Set();
						root2.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledLane) {
							if (includesSomeLane(lanes, scheduledLane)) {
								scheduledInteractions.forEach(function (interaction) {
									return interactions.add(interaction);
								});
							}
						});
						root2.memoizedInteractions = interactions;
						if (interactions.size > 0) {
							var subscriber = tracing.__subscriberRef.current;
							if (subscriber !== null) {
								var threadID = computeThreadID(root2, lanes);
								try {
									subscriber.onWorkStarted(interactions, threadID);
								} catch (error4) {
									scheduleCallback(ImmediatePriority$1, function () {
										throw error4;
									});
								}
							}
						}
					}
					function finishPendingInteractions(root2, committedLanes) {
						var remainingLanesAfterCommit = root2.pendingLanes;
						var subscriber;
						try {
							subscriber = tracing.__subscriberRef.current;
							if (subscriber !== null && root2.memoizedInteractions.size > 0) {
								var threadID = computeThreadID(root2, committedLanes);
								subscriber.onWorkStopped(root2.memoizedInteractions, threadID);
							}
						} catch (error4) {
							scheduleCallback(ImmediatePriority$1, function () {
								throw error4;
							});
						} finally {
							var pendingInteractionMap = root2.pendingInteractionMap;
							pendingInteractionMap.forEach(function (scheduledInteractions, lane) {
								if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
									pendingInteractionMap.delete(lane);
									scheduledInteractions.forEach(function (interaction) {
										interaction.__count--;
										if (subscriber !== null && interaction.__count === 0) {
											try {
												subscriber.onInteractionScheduledWorkCompleted(interaction);
											} catch (error4) {
												scheduleCallback(ImmediatePriority$1, function () {
													throw error4;
												});
											}
										}
									});
								}
							});
						}
					}
					function shouldForceFlushFallbacksInDEV() {
						return actingUpdatesScopeDepth > 0;
					}
					var actingUpdatesScopeDepth = 0;
					function detachFiberAfterEffects(fiber) {
						fiber.sibling = null;
						fiber.stateNode = null;
					}
					var resolveFamily = null;
					var failedBoundaries = null;
					var setRefreshHandler = function (handler) {
						{
							resolveFamily = handler;
						}
					};
					function resolveFunctionForHotReloading(type) {
						{
							if (resolveFamily === null) {
								return type;
							}
							var family = resolveFamily(type);
							if (family === void 0) {
								return type;
							}
							return family.current;
						}
					}
					function resolveClassForHotReloading(type) {
						return resolveFunctionForHotReloading(type);
					}
					function resolveForwardRefForHotReloading(type) {
						{
							if (resolveFamily === null) {
								return type;
							}
							var family = resolveFamily(type);
							if (family === void 0) {
								if (type !== null && type !== void 0 && typeof type.render === "function") {
									var currentRender = resolveFunctionForHotReloading(type.render);
									if (type.render !== currentRender) {
										var syntheticType = {
											$$typeof: REACT_FORWARD_REF_TYPE,
											render: currentRender,
										};
										if (type.displayName !== void 0) {
											syntheticType.displayName = type.displayName;
										}
										return syntheticType;
									}
								}
								return type;
							}
							return family.current;
						}
					}
					function isCompatibleFamilyForHotReloading(fiber, element) {
						{
							if (resolveFamily === null) {
								return false;
							}
							var prevType = fiber.elementType;
							var nextType = element.type;
							var needsCompareFamilies = false;
							var $$typeofNextType =
								typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
							switch (fiber.tag) {
								case ClassComponent: {
									if (typeof nextType === "function") {
										needsCompareFamilies = true;
									}
									break;
								}
								case FunctionComponent: {
									if (typeof nextType === "function") {
										needsCompareFamilies = true;
									} else if ($$typeofNextType === REACT_LAZY_TYPE) {
										needsCompareFamilies = true;
									}
									break;
								}
								case ForwardRef: {
									if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
										needsCompareFamilies = true;
									} else if ($$typeofNextType === REACT_LAZY_TYPE) {
										needsCompareFamilies = true;
									}
									break;
								}
								case MemoComponent:
								case SimpleMemoComponent: {
									if ($$typeofNextType === REACT_MEMO_TYPE) {
										needsCompareFamilies = true;
									} else if ($$typeofNextType === REACT_LAZY_TYPE) {
										needsCompareFamilies = true;
									}
									break;
								}
								default:
									return false;
							}
							if (needsCompareFamilies) {
								var prevFamily = resolveFamily(prevType);
								if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
									return true;
								}
							}
							return false;
						}
					}
					function markFailedErrorBoundaryForHotReloading(fiber) {
						{
							if (resolveFamily === null) {
								return;
							}
							if (typeof WeakSet !== "function") {
								return;
							}
							if (failedBoundaries === null) {
								failedBoundaries = new WeakSet();
							}
							failedBoundaries.add(fiber);
						}
					}
					var scheduleRefresh = function (root2, update2) {
						{
							if (resolveFamily === null) {
								return;
							}
							var staleFamilies = update2.staleFamilies,
								updatedFamilies = update2.updatedFamilies;
							flushPassiveEffects();
							flushSync(function () {
								scheduleFibersWithFamiliesRecursively(
									root2.current,
									updatedFamilies,
									staleFamilies
								);
							});
						}
					};
					var scheduleRoot = function (root2, element) {
						{
							if (root2.context !== emptyContextObject) {
								return;
							}
							flushPassiveEffects();
							flushSync(function () {
								updateContainer(element, root2, null, null);
							});
						}
					};
					function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
						{
							var alternate = fiber.alternate,
								child = fiber.child,
								sibling = fiber.sibling,
								tag = fiber.tag,
								type = fiber.type;
							var candidateType = null;
							switch (tag) {
								case FunctionComponent:
								case SimpleMemoComponent:
								case ClassComponent:
									candidateType = type;
									break;
								case ForwardRef:
									candidateType = type.render;
									break;
							}
							if (resolveFamily === null) {
								throw new Error("Expected resolveFamily to be set during hot reload.");
							}
							var needsRender = false;
							var needsRemount = false;
							if (candidateType !== null) {
								var family = resolveFamily(candidateType);
								if (family !== void 0) {
									if (staleFamilies.has(family)) {
										needsRemount = true;
									} else if (updatedFamilies.has(family)) {
										if (tag === ClassComponent) {
											needsRemount = true;
										} else {
											needsRender = true;
										}
									}
								}
							}
							if (failedBoundaries !== null) {
								if (
									failedBoundaries.has(fiber) ||
									(alternate !== null && failedBoundaries.has(alternate))
								) {
									needsRemount = true;
								}
							}
							if (needsRemount) {
								fiber._debugNeedsRemount = true;
							}
							if (needsRemount || needsRender) {
								scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
							}
							if (child !== null && !needsRemount) {
								scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
							}
							if (sibling !== null) {
								scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
							}
						}
					}
					var findHostInstancesForRefresh = function (root2, families) {
						{
							var hostInstances = new Set();
							var types2 = new Set(
								families.map(function (family) {
									return family.current;
								})
							);
							findHostInstancesForMatchingFibersRecursively(root2.current, types2, hostInstances);
							return hostInstances;
						}
					};
					function findHostInstancesForMatchingFibersRecursively(fiber, types2, hostInstances) {
						{
							var child = fiber.child,
								sibling = fiber.sibling,
								tag = fiber.tag,
								type = fiber.type;
							var candidateType = null;
							switch (tag) {
								case FunctionComponent:
								case SimpleMemoComponent:
								case ClassComponent:
									candidateType = type;
									break;
								case ForwardRef:
									candidateType = type.render;
									break;
							}
							var didMatch = false;
							if (candidateType !== null) {
								if (types2.has(candidateType)) {
									didMatch = true;
								}
							}
							if (didMatch) {
								findHostInstancesForFiberShallowly(fiber, hostInstances);
							} else {
								if (child !== null) {
									findHostInstancesForMatchingFibersRecursively(child, types2, hostInstances);
								}
							}
							if (sibling !== null) {
								findHostInstancesForMatchingFibersRecursively(sibling, types2, hostInstances);
							}
						}
					}
					function findHostInstancesForFiberShallowly(fiber, hostInstances) {
						{
							var foundHostInstances = findChildHostInstancesForFiberShallowly(
								fiber,
								hostInstances
							);
							if (foundHostInstances) {
								return;
							}
							var node = fiber;
							while (true) {
								switch (node.tag) {
									case HostComponent:
										hostInstances.add(node.stateNode);
										return;
									case HostPortal:
										hostInstances.add(node.stateNode.containerInfo);
										return;
									case HostRoot:
										hostInstances.add(node.stateNode.containerInfo);
										return;
								}
								if (node.return === null) {
									throw new Error("Expected to reach root first.");
								}
								node = node.return;
							}
						}
					}
					function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
						{
							var node = fiber;
							var foundHostInstances = false;
							while (true) {
								if (node.tag === HostComponent) {
									foundHostInstances = true;
									hostInstances.add(node.stateNode);
								} else if (node.child !== null) {
									node.child.return = node;
									node = node.child;
									continue;
								}
								if (node === fiber) {
									return foundHostInstances;
								}
								while (node.sibling === null) {
									if (node.return === null || node.return === fiber) {
										return foundHostInstances;
									}
									node = node.return;
								}
								node.sibling.return = node.return;
								node = node.sibling;
							}
						}
						return false;
					}
					var hasBadMapPolyfill;
					{
						hasBadMapPolyfill = false;
						try {
							var nonExtensibleObject = Object.preventExtensions({});
							new Map([[nonExtensibleObject, null]]);
							new Set([nonExtensibleObject]);
						} catch (e) {
							hasBadMapPolyfill = true;
						}
					}
					var debugCounter = 1;
					function FiberNode(tag, pendingProps, key, mode) {
						this.tag = tag;
						this.key = key;
						this.elementType = null;
						this.type = null;
						this.stateNode = null;
						this.return = null;
						this.child = null;
						this.sibling = null;
						this.index = 0;
						this.ref = null;
						this.pendingProps = pendingProps;
						this.memoizedProps = null;
						this.updateQueue = null;
						this.memoizedState = null;
						this.dependencies = null;
						this.mode = mode;
						this.flags = NoFlags;
						this.nextEffect = null;
						this.firstEffect = null;
						this.lastEffect = null;
						this.lanes = NoLanes;
						this.childLanes = NoLanes;
						this.alternate = null;
						{
							this.actualDuration = Number.NaN;
							this.actualStartTime = Number.NaN;
							this.selfBaseDuration = Number.NaN;
							this.treeBaseDuration = Number.NaN;
							this.actualDuration = 0;
							this.actualStartTime = -1;
							this.selfBaseDuration = 0;
							this.treeBaseDuration = 0;
						}
						{
							this._debugID = debugCounter++;
							this._debugSource = null;
							this._debugOwner = null;
							this._debugNeedsRemount = false;
							this._debugHookTypes = null;
							if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
								Object.preventExtensions(this);
							}
						}
					}
					var createFiber = function (tag, pendingProps, key, mode) {
						return new FiberNode(tag, pendingProps, key, mode);
					};
					function shouldConstruct$1(Component) {
						var prototype = Component.prototype;
						return !!(prototype && prototype.isReactComponent);
					}
					function isSimpleFunctionComponent(type) {
						return (
							typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0
						);
					}
					function resolveLazyComponentTag(Component) {
						if (typeof Component === "function") {
							return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
						} else if (Component !== void 0 && Component !== null) {
							var $$typeof = Component.$$typeof;
							if ($$typeof === REACT_FORWARD_REF_TYPE) {
								return ForwardRef;
							}
							if ($$typeof === REACT_MEMO_TYPE) {
								return MemoComponent;
							}
						}
						return IndeterminateComponent;
					}
					function createWorkInProgress(current2, pendingProps) {
						var workInProgress2 = current2.alternate;
						if (workInProgress2 === null) {
							workInProgress2 = createFiber(
								current2.tag,
								pendingProps,
								current2.key,
								current2.mode
							);
							workInProgress2.elementType = current2.elementType;
							workInProgress2.type = current2.type;
							workInProgress2.stateNode = current2.stateNode;
							{
								workInProgress2._debugID = current2._debugID;
								workInProgress2._debugSource = current2._debugSource;
								workInProgress2._debugOwner = current2._debugOwner;
								workInProgress2._debugHookTypes = current2._debugHookTypes;
							}
							workInProgress2.alternate = current2;
							current2.alternate = workInProgress2;
						} else {
							workInProgress2.pendingProps = pendingProps;
							workInProgress2.type = current2.type;
							workInProgress2.flags = NoFlags;
							workInProgress2.nextEffect = null;
							workInProgress2.firstEffect = null;
							workInProgress2.lastEffect = null;
							{
								workInProgress2.actualDuration = 0;
								workInProgress2.actualStartTime = -1;
							}
						}
						workInProgress2.childLanes = current2.childLanes;
						workInProgress2.lanes = current2.lanes;
						workInProgress2.child = current2.child;
						workInProgress2.memoizedProps = current2.memoizedProps;
						workInProgress2.memoizedState = current2.memoizedState;
						workInProgress2.updateQueue = current2.updateQueue;
						var currentDependencies = current2.dependencies;
						workInProgress2.dependencies =
							currentDependencies === null
								? null
								: {
										lanes: currentDependencies.lanes,
										firstContext: currentDependencies.firstContext,
								  };
						workInProgress2.sibling = current2.sibling;
						workInProgress2.index = current2.index;
						workInProgress2.ref = current2.ref;
						{
							workInProgress2.selfBaseDuration = current2.selfBaseDuration;
							workInProgress2.treeBaseDuration = current2.treeBaseDuration;
						}
						{
							workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
							switch (workInProgress2.tag) {
								case IndeterminateComponent:
								case FunctionComponent:
								case SimpleMemoComponent:
									workInProgress2.type = resolveFunctionForHotReloading(current2.type);
									break;
								case ClassComponent:
									workInProgress2.type = resolveClassForHotReloading(current2.type);
									break;
								case ForwardRef:
									workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
									break;
							}
						}
						return workInProgress2;
					}
					function resetWorkInProgress(workInProgress2, renderLanes2) {
						workInProgress2.flags &= Placement;
						workInProgress2.nextEffect = null;
						workInProgress2.firstEffect = null;
						workInProgress2.lastEffect = null;
						var current2 = workInProgress2.alternate;
						if (current2 === null) {
							workInProgress2.childLanes = NoLanes;
							workInProgress2.lanes = renderLanes2;
							workInProgress2.child = null;
							workInProgress2.memoizedProps = null;
							workInProgress2.memoizedState = null;
							workInProgress2.updateQueue = null;
							workInProgress2.dependencies = null;
							workInProgress2.stateNode = null;
							{
								workInProgress2.selfBaseDuration = 0;
								workInProgress2.treeBaseDuration = 0;
							}
						} else {
							workInProgress2.childLanes = current2.childLanes;
							workInProgress2.lanes = current2.lanes;
							workInProgress2.child = current2.child;
							workInProgress2.memoizedProps = current2.memoizedProps;
							workInProgress2.memoizedState = current2.memoizedState;
							workInProgress2.updateQueue = current2.updateQueue;
							workInProgress2.type = current2.type;
							var currentDependencies = current2.dependencies;
							workInProgress2.dependencies =
								currentDependencies === null
									? null
									: {
											lanes: currentDependencies.lanes,
											firstContext: currentDependencies.firstContext,
									  };
							{
								workInProgress2.selfBaseDuration = current2.selfBaseDuration;
								workInProgress2.treeBaseDuration = current2.treeBaseDuration;
							}
						}
						return workInProgress2;
					}
					function createHostRootFiber(tag) {
						var mode;
						if (tag === ConcurrentRoot) {
							mode = ConcurrentMode | BlockingMode | StrictMode;
						} else if (tag === BlockingRoot) {
							mode = BlockingMode | StrictMode;
						} else {
							mode = NoMode;
						}
						if (isDevToolsPresent) {
							mode |= ProfileMode;
						}
						return createFiber(HostRoot, null, null, mode);
					}
					function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
						var fiberTag = IndeterminateComponent;
						var resolvedType = type;
						if (typeof type === "function") {
							if (shouldConstruct$1(type)) {
								fiberTag = ClassComponent;
								{
									resolvedType = resolveClassForHotReloading(resolvedType);
								}
							} else {
								{
									resolvedType = resolveFunctionForHotReloading(resolvedType);
								}
							}
						} else if (typeof type === "string") {
							fiberTag = HostComponent;
						} else {
							getTag: switch (type) {
								case REACT_FRAGMENT_TYPE:
									return createFiberFromFragment(pendingProps.children, mode, lanes, key);
								case REACT_DEBUG_TRACING_MODE_TYPE:
									fiberTag = Mode;
									mode |= DebugTracingMode;
									break;
								case REACT_STRICT_MODE_TYPE:
									fiberTag = Mode;
									mode |= StrictMode;
									break;
								case REACT_PROFILER_TYPE:
									return createFiberFromProfiler(pendingProps, mode, lanes, key);
								case REACT_SUSPENSE_TYPE:
									return createFiberFromSuspense(pendingProps, mode, lanes, key);
								case REACT_SUSPENSE_LIST_TYPE:
									return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
								case REACT_OFFSCREEN_TYPE:
									return createFiberFromOffscreen(pendingProps, mode, lanes, key);
								case REACT_LEGACY_HIDDEN_TYPE:
									return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);
								case REACT_SCOPE_TYPE:
								default: {
									if (typeof type === "object" && type !== null) {
										switch (type.$$typeof) {
											case REACT_PROVIDER_TYPE:
												fiberTag = ContextProvider;
												break getTag;
											case REACT_CONTEXT_TYPE:
												fiberTag = ContextConsumer;
												break getTag;
											case REACT_FORWARD_REF_TYPE:
												fiberTag = ForwardRef;
												{
													resolvedType = resolveForwardRefForHotReloading(resolvedType);
												}
												break getTag;
											case REACT_MEMO_TYPE:
												fiberTag = MemoComponent;
												break getTag;
											case REACT_LAZY_TYPE:
												fiberTag = LazyComponent;
												resolvedType = null;
												break getTag;
											case REACT_BLOCK_TYPE:
												fiberTag = Block;
												break getTag;
										}
									}
									var info = "";
									{
										if (
											type === void 0 ||
											(typeof type === "object" && type !== null && Object.keys(type).length === 0)
										) {
											info +=
												" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
										}
										var ownerName = owner ? getComponentName(owner.type) : null;
										if (ownerName) {
											info += "\n\nCheck the render method of `" + ownerName + "`.";
										}
									}
									{
										{
											throw Error(
												"Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " +
													(type == null ? type : typeof type) +
													"." +
													info
											);
										}
									}
								}
							}
						}
						var fiber = createFiber(fiberTag, pendingProps, key, mode);
						fiber.elementType = type;
						fiber.type = resolvedType;
						fiber.lanes = lanes;
						{
							fiber._debugOwner = owner;
						}
						return fiber;
					}
					function createFiberFromElement(element, mode, lanes) {
						var owner = null;
						{
							owner = element._owner;
						}
						var type = element.type;
						var key = element.key;
						var pendingProps = element.props;
						var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
						{
							fiber._debugSource = element._source;
							fiber._debugOwner = element._owner;
						}
						return fiber;
					}
					function createFiberFromFragment(elements, mode, lanes, key) {
						var fiber = createFiber(Fragment, elements, key, mode);
						fiber.lanes = lanes;
						return fiber;
					}
					function createFiberFromProfiler(pendingProps, mode, lanes, key) {
						{
							if (typeof pendingProps.id !== "string") {
								error3('Profiler must specify an "id" as a prop');
							}
						}
						var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
						fiber.elementType = REACT_PROFILER_TYPE;
						fiber.type = REACT_PROFILER_TYPE;
						fiber.lanes = lanes;
						{
							fiber.stateNode = {
								effectDuration: 0,
								passiveEffectDuration: 0,
							};
						}
						return fiber;
					}
					function createFiberFromSuspense(pendingProps, mode, lanes, key) {
						var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
						fiber.type = REACT_SUSPENSE_TYPE;
						fiber.elementType = REACT_SUSPENSE_TYPE;
						fiber.lanes = lanes;
						return fiber;
					}
					function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
						var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
						{
							fiber.type = REACT_SUSPENSE_LIST_TYPE;
						}
						fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
						fiber.lanes = lanes;
						return fiber;
					}
					function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
						var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
						{
							fiber.type = REACT_OFFSCREEN_TYPE;
						}
						fiber.elementType = REACT_OFFSCREEN_TYPE;
						fiber.lanes = lanes;
						return fiber;
					}
					function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
						var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);
						{
							fiber.type = REACT_LEGACY_HIDDEN_TYPE;
						}
						fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
						fiber.lanes = lanes;
						return fiber;
					}
					function createFiberFromText(content, mode, lanes) {
						var fiber = createFiber(HostText, content, null, mode);
						fiber.lanes = lanes;
						return fiber;
					}
					function createFiberFromHostInstanceForDeletion() {
						var fiber = createFiber(HostComponent, null, null, NoMode);
						fiber.elementType = "DELETED";
						fiber.type = "DELETED";
						return fiber;
					}
					function createFiberFromPortal(portal, mode, lanes) {
						var pendingProps = portal.children !== null ? portal.children : [];
						var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
						fiber.lanes = lanes;
						fiber.stateNode = {
							containerInfo: portal.containerInfo,
							pendingChildren: null,
							implementation: portal.implementation,
						};
						return fiber;
					}
					function assignFiberPropertiesInDEV(target, source) {
						if (target === null) {
							target = createFiber(IndeterminateComponent, null, null, NoMode);
						}
						target.tag = source.tag;
						target.key = source.key;
						target.elementType = source.elementType;
						target.type = source.type;
						target.stateNode = source.stateNode;
						target.return = source.return;
						target.child = source.child;
						target.sibling = source.sibling;
						target.index = source.index;
						target.ref = source.ref;
						target.pendingProps = source.pendingProps;
						target.memoizedProps = source.memoizedProps;
						target.updateQueue = source.updateQueue;
						target.memoizedState = source.memoizedState;
						target.dependencies = source.dependencies;
						target.mode = source.mode;
						target.flags = source.flags;
						target.nextEffect = source.nextEffect;
						target.firstEffect = source.firstEffect;
						target.lastEffect = source.lastEffect;
						target.lanes = source.lanes;
						target.childLanes = source.childLanes;
						target.alternate = source.alternate;
						{
							target.actualDuration = source.actualDuration;
							target.actualStartTime = source.actualStartTime;
							target.selfBaseDuration = source.selfBaseDuration;
							target.treeBaseDuration = source.treeBaseDuration;
						}
						target._debugID = source._debugID;
						target._debugSource = source._debugSource;
						target._debugOwner = source._debugOwner;
						target._debugNeedsRemount = source._debugNeedsRemount;
						target._debugHookTypes = source._debugHookTypes;
						return target;
					}
					function FiberRootNode(containerInfo, tag, hydrate2) {
						this.tag = tag;
						this.containerInfo = containerInfo;
						this.pendingChildren = null;
						this.current = null;
						this.pingCache = null;
						this.finishedWork = null;
						this.timeoutHandle = noTimeout;
						this.context = null;
						this.pendingContext = null;
						this.hydrate = hydrate2;
						this.callbackNode = null;
						this.callbackPriority = NoLanePriority;
						this.eventTimes = createLaneMap(NoLanes);
						this.expirationTimes = createLaneMap(NoTimestamp);
						this.pendingLanes = NoLanes;
						this.suspendedLanes = NoLanes;
						this.pingedLanes = NoLanes;
						this.expiredLanes = NoLanes;
						this.mutableReadLanes = NoLanes;
						this.finishedLanes = NoLanes;
						this.entangledLanes = NoLanes;
						this.entanglements = createLaneMap(NoLanes);
						{
							this.mutableSourceEagerHydrationData = null;
						}
						{
							this.interactionThreadID = tracing.unstable_getThreadID();
							this.memoizedInteractions = new Set();
							this.pendingInteractionMap = new Map();
						}
						{
							switch (tag) {
								case BlockingRoot:
									this._debugRootType = "createBlockingRoot()";
									break;
								case ConcurrentRoot:
									this._debugRootType = "createRoot()";
									break;
								case LegacyRoot:
									this._debugRootType = "createLegacyRoot()";
									break;
							}
						}
					}
					function createFiberRoot(containerInfo, tag, hydrate2, hydrationCallbacks) {
						var root2 = new FiberRootNode(containerInfo, tag, hydrate2);
						var uninitializedFiber = createHostRootFiber(tag);
						root2.current = uninitializedFiber;
						uninitializedFiber.stateNode = root2;
						initializeUpdateQueue(uninitializedFiber);
						return root2;
					}
					function registerMutableSourceForHydration(root2, mutableSource) {
						var getVersion = mutableSource._getVersion;
						var version4 = getVersion(mutableSource._source);
						if (root2.mutableSourceEagerHydrationData == null) {
							root2.mutableSourceEagerHydrationData = [mutableSource, version4];
						} else {
							root2.mutableSourceEagerHydrationData.push(mutableSource, version4);
						}
					}
					function createPortal(children2, containerInfo, implementation) {
						var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
						return {
							$$typeof: REACT_PORTAL_TYPE,
							key: key == null ? null : "" + key,
							children: children2,
							containerInfo,
							implementation,
						};
					}
					var didWarnAboutNestedUpdates;
					var didWarnAboutFindNodeInStrictMode;
					{
						didWarnAboutNestedUpdates = false;
						didWarnAboutFindNodeInStrictMode = {};
					}
					function getContextForSubtree(parentComponent) {
						if (!parentComponent) {
							return emptyContextObject;
						}
						var fiber = get2(parentComponent);
						var parentContext = findCurrentUnmaskedContext(fiber);
						if (fiber.tag === ClassComponent) {
							var Component = fiber.type;
							if (isContextProvider(Component)) {
								return processChildContext(fiber, Component, parentContext);
							}
						}
						return parentContext;
					}
					function findHostInstanceWithWarning(component, methodName) {
						{
							var fiber = get2(component);
							if (fiber === void 0) {
								if (typeof component.render === "function") {
									{
										{
											throw Error("Unable to find node on an unmounted component.");
										}
									}
								} else {
									{
										{
											throw Error(
												"Argument appears to not be a ReactComponent. Keys: " +
													Object.keys(component)
											);
										}
									}
								}
							}
							var hostFiber = findCurrentHostFiber(fiber);
							if (hostFiber === null) {
								return null;
							}
							if (hostFiber.mode & StrictMode) {
								var componentName = getComponentName(fiber.type) || "Component";
								if (!didWarnAboutFindNodeInStrictMode[componentName]) {
									didWarnAboutFindNodeInStrictMode[componentName] = true;
									var previousFiber = current;
									try {
										setCurrentFiber(hostFiber);
										if (fiber.mode & StrictMode) {
											error3(
												"%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node",
												methodName,
												methodName,
												componentName
											);
										} else {
											error3(
												"%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node",
												methodName,
												methodName,
												componentName
											);
										}
									} finally {
										if (previousFiber) {
											setCurrentFiber(previousFiber);
										} else {
											resetCurrentFiber();
										}
									}
								}
							}
							return hostFiber.stateNode;
						}
					}
					function createContainer(containerInfo, tag, hydrate2, hydrationCallbacks) {
						return createFiberRoot(containerInfo, tag, hydrate2);
					}
					function updateContainer(element, container, parentComponent, callback) {
						{
							onScheduleRoot(container, element);
						}
						var current$1 = container.current;
						var eventTime = requestEventTime();
						{
							if (typeof jest !== "undefined") {
								warnIfUnmockedScheduler(current$1);
								warnIfNotScopedWithMatchingAct(current$1);
							}
						}
						var lane = requestUpdateLane(current$1);
						var context = getContextForSubtree(parentComponent);
						if (container.context === null) {
							container.context = context;
						} else {
							container.pendingContext = context;
						}
						{
							if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
								didWarnAboutNestedUpdates = true;
								error3(
									"Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.",
									getComponentName(current.type) || "Unknown"
								);
							}
						}
						var update2 = createUpdate(eventTime, lane);
						update2.payload = {
							element,
						};
						callback = callback === void 0 ? null : callback;
						if (callback !== null) {
							{
								if (typeof callback !== "function") {
									error3(
										"render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.",
										callback
									);
								}
							}
							update2.callback = callback;
						}
						enqueueUpdate(current$1, update2);
						scheduleUpdateOnFiber(current$1, lane, eventTime);
						return lane;
					}
					function getPublicRootInstance(container) {
						var containerFiber = container.current;
						if (!containerFiber.child) {
							return null;
						}
						switch (containerFiber.child.tag) {
							case HostComponent:
								return getPublicInstance(containerFiber.child.stateNode);
							default:
								return containerFiber.child.stateNode;
						}
					}
					function markRetryLaneImpl(fiber, retryLane) {
						var suspenseState = fiber.memoizedState;
						if (suspenseState !== null && suspenseState.dehydrated !== null) {
							suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
						}
					}
					function markRetryLaneIfNotHydrated(fiber, retryLane) {
						markRetryLaneImpl(fiber, retryLane);
						var alternate = fiber.alternate;
						if (alternate) {
							markRetryLaneImpl(alternate, retryLane);
						}
					}
					function attemptUserBlockingHydration$1(fiber) {
						if (fiber.tag !== SuspenseComponent) {
							return;
						}
						var eventTime = requestEventTime();
						var lane = InputDiscreteHydrationLane;
						scheduleUpdateOnFiber(fiber, lane, eventTime);
						markRetryLaneIfNotHydrated(fiber, lane);
					}
					function attemptContinuousHydration$1(fiber) {
						if (fiber.tag !== SuspenseComponent) {
							return;
						}
						var eventTime = requestEventTime();
						var lane = SelectiveHydrationLane;
						scheduleUpdateOnFiber(fiber, lane, eventTime);
						markRetryLaneIfNotHydrated(fiber, lane);
					}
					function attemptHydrationAtCurrentPriority$1(fiber) {
						if (fiber.tag !== SuspenseComponent) {
							return;
						}
						var eventTime = requestEventTime();
						var lane = requestUpdateLane(fiber);
						scheduleUpdateOnFiber(fiber, lane, eventTime);
						markRetryLaneIfNotHydrated(fiber, lane);
					}
					function runWithPriority$2(priority, fn) {
						try {
							setCurrentUpdateLanePriority(priority);
							return fn();
						} finally {
						}
					}
					function findHostInstanceWithNoPortals(fiber) {
						var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
						if (hostFiber === null) {
							return null;
						}
						if (hostFiber.tag === FundamentalComponent) {
							return hostFiber.stateNode.instance;
						}
						return hostFiber.stateNode;
					}
					var shouldSuspendImpl = function (fiber) {
						return false;
					};
					function shouldSuspend(fiber) {
						return shouldSuspendImpl(fiber);
					}
					var overrideHookState = null;
					var overrideHookStateDeletePath = null;
					var overrideHookStateRenamePath = null;
					var overrideProps = null;
					var overridePropsDeletePath = null;
					var overridePropsRenamePath = null;
					var scheduleUpdate = null;
					var setSuspenseHandler = null;
					{
						var copyWithDeleteImpl = function (obj, path2, index3) {
							var key = path2[index3];
							var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
							if (index3 + 1 === path2.length) {
								if (Array.isArray(updated)) {
									updated.splice(key, 1);
								} else {
									delete updated[key];
								}
								return updated;
							}
							updated[key] = copyWithDeleteImpl(obj[key], path2, index3 + 1);
							return updated;
						};
						var copyWithDelete = function (obj, path2) {
							return copyWithDeleteImpl(obj, path2, 0);
						};
						var copyWithRenameImpl = function (obj, oldPath, newPath, index3) {
							var oldKey = oldPath[index3];
							var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
							if (index3 + 1 === oldPath.length) {
								var newKey = newPath[index3];
								updated[newKey] = updated[oldKey];
								if (Array.isArray(updated)) {
									updated.splice(oldKey, 1);
								} else {
									delete updated[oldKey];
								}
							} else {
								updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index3 + 1);
							}
							return updated;
						};
						var copyWithRename = function (obj, oldPath, newPath) {
							if (oldPath.length !== newPath.length) {
								warn2("copyWithRename() expects paths of the same length");
								return;
							} else {
								for (var i = 0; i < newPath.length - 1; i++) {
									if (oldPath[i] !== newPath[i]) {
										warn2(
											"copyWithRename() expects paths to be the same except for the deepest key"
										);
										return;
									}
								}
							}
							return copyWithRenameImpl(obj, oldPath, newPath, 0);
						};
						var copyWithSetImpl = function (obj, path2, index3, value) {
							if (index3 >= path2.length) {
								return value;
							}
							var key = path2[index3];
							var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
							updated[key] = copyWithSetImpl(obj[key], path2, index3 + 1, value);
							return updated;
						};
						var copyWithSet = function (obj, path2, value) {
							return copyWithSetImpl(obj, path2, 0, value);
						};
						var findHook = function (fiber, id) {
							var currentHook2 = fiber.memoizedState;
							while (currentHook2 !== null && id > 0) {
								currentHook2 = currentHook2.next;
								id--;
							}
							return currentHook2;
						};
						overrideHookState = function (fiber, id, path2, value) {
							var hook = findHook(fiber, id);
							if (hook !== null) {
								var newState = copyWithSet(hook.memoizedState, path2, value);
								hook.memoizedState = newState;
								hook.baseState = newState;
								fiber.memoizedProps = _assign({}, fiber.memoizedProps);
								scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
							}
						};
						overrideHookStateDeletePath = function (fiber, id, path2) {
							var hook = findHook(fiber, id);
							if (hook !== null) {
								var newState = copyWithDelete(hook.memoizedState, path2);
								hook.memoizedState = newState;
								hook.baseState = newState;
								fiber.memoizedProps = _assign({}, fiber.memoizedProps);
								scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
							}
						};
						overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {
							var hook = findHook(fiber, id);
							if (hook !== null) {
								var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
								hook.memoizedState = newState;
								hook.baseState = newState;
								fiber.memoizedProps = _assign({}, fiber.memoizedProps);
								scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
							}
						};
						overrideProps = function (fiber, path2, value) {
							fiber.pendingProps = copyWithSet(fiber.memoizedProps, path2, value);
							if (fiber.alternate) {
								fiber.alternate.pendingProps = fiber.pendingProps;
							}
							scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
						};
						overridePropsDeletePath = function (fiber, path2) {
							fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path2);
							if (fiber.alternate) {
								fiber.alternate.pendingProps = fiber.pendingProps;
							}
							scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
						};
						overridePropsRenamePath = function (fiber, oldPath, newPath) {
							fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
							if (fiber.alternate) {
								fiber.alternate.pendingProps = fiber.pendingProps;
							}
							scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
						};
						scheduleUpdate = function (fiber) {
							scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
						};
						setSuspenseHandler = function (newShouldSuspendImpl) {
							shouldSuspendImpl = newShouldSuspendImpl;
						};
					}
					function findHostInstanceByFiber(fiber) {
						var hostFiber = findCurrentHostFiber(fiber);
						if (hostFiber === null) {
							return null;
						}
						return hostFiber.stateNode;
					}
					function emptyFindFiberByHostInstance(instance) {
						return null;
					}
					function getCurrentFiberForDevTools() {
						return current;
					}
					function injectIntoDevTools(devToolsConfig) {
						var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
						var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
						return injectInternals({
							bundleType: devToolsConfig.bundleType,
							version: devToolsConfig.version,
							rendererPackageName: devToolsConfig.rendererPackageName,
							rendererConfig: devToolsConfig.rendererConfig,
							overrideHookState,
							overrideHookStateDeletePath,
							overrideHookStateRenamePath,
							overrideProps,
							overridePropsDeletePath,
							overridePropsRenamePath,
							setSuspenseHandler,
							scheduleUpdate,
							currentDispatcherRef: ReactCurrentDispatcher2,
							findHostInstanceByFiber,
							findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
							findHostInstancesForRefresh,
							scheduleRefresh,
							scheduleRoot,
							setRefreshHandler,
							getCurrentFiber: getCurrentFiberForDevTools,
						});
					}
					function ReactDOMRoot(container, options2) {
						this._internalRoot = createRootImpl(container, ConcurrentRoot, options2);
					}
					function ReactDOMBlockingRoot(container, tag, options2) {
						this._internalRoot = createRootImpl(container, tag, options2);
					}
					ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function (
						children2
					) {
						var root2 = this._internalRoot;
						{
							if (typeof arguments[1] === "function") {
								error3(
									"render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect()."
								);
							}
							var container = root2.containerInfo;
							if (container.nodeType !== COMMENT_NODE) {
								var hostInstance = findHostInstanceWithNoPortals(root2.current);
								if (hostInstance) {
									if (hostInstance.parentNode !== container) {
										error3(
											"render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container."
										);
									}
								}
							}
						}
						updateContainer(children2, root2, null, null);
					};
					ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function () {
						{
							if (typeof arguments[0] === "function") {
								error3(
									"unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect()."
								);
							}
						}
						var root2 = this._internalRoot;
						var container = root2.containerInfo;
						updateContainer(null, root2, null, function () {
							unmarkContainerAsRoot(container);
						});
					};
					function createRootImpl(container, tag, options2) {
						var hydrate2 = options2 != null && options2.hydrate === true;
						var hydrationCallbacks = (options2 != null && options2.hydrationOptions) || null;
						var mutableSources =
							(options2 != null &&
								options2.hydrationOptions != null &&
								options2.hydrationOptions.mutableSources) ||
							null;
						var root2 = createContainer(container, tag, hydrate2);
						markContainerAsRoot(root2.current, container);
						var containerNodeType = container.nodeType;
						{
							var rootContainerElement =
								container.nodeType === COMMENT_NODE ? container.parentNode : container;
							listenToAllSupportedEvents(rootContainerElement);
						}
						if (mutableSources) {
							for (var i = 0; i < mutableSources.length; i++) {
								var mutableSource = mutableSources[i];
								registerMutableSourceForHydration(root2, mutableSource);
							}
						}
						return root2;
					}
					function createLegacyRoot(container, options2) {
						return new ReactDOMBlockingRoot(container, LegacyRoot, options2);
					}
					function isValidContainer(node) {
						return !!(
							node &&
							(node.nodeType === ELEMENT_NODE ||
								node.nodeType === DOCUMENT_NODE ||
								node.nodeType === DOCUMENT_FRAGMENT_NODE ||
								(node.nodeType === COMMENT_NODE &&
									node.nodeValue === " react-mount-point-unstable "))
						);
					}
					var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
					var topLevelUpdateWarnings;
					var warnedAboutHydrateAPI = false;
					{
						topLevelUpdateWarnings = function (container) {
							if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
								var hostInstance = findHostInstanceWithNoPortals(
									container._reactRootContainer._internalRoot.current
								);
								if (hostInstance) {
									if (hostInstance.parentNode !== container) {
										error3(
											"render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container."
										);
									}
								}
							}
							var isRootRenderedBySomeReact = !!container._reactRootContainer;
							var rootEl = getReactRootElementInContainer(container);
							var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
							if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
								error3(
									"render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render."
								);
							}
							if (
								container.nodeType === ELEMENT_NODE &&
								container.tagName &&
								container.tagName.toUpperCase() === "BODY"
							) {
								error3(
									"render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app."
								);
							}
						};
					}
					function getReactRootElementInContainer(container) {
						if (!container) {
							return null;
						}
						if (container.nodeType === DOCUMENT_NODE) {
							return container.documentElement;
						} else {
							return container.firstChild;
						}
					}
					function shouldHydrateDueToLegacyHeuristic(container) {
						var rootElement = getReactRootElementInContainer(container);
						return !!(
							rootElement &&
							rootElement.nodeType === ELEMENT_NODE &&
							rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME)
						);
					}
					function legacyCreateRootFromDOMContainer(container, forceHydrate) {
						var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
						if (!shouldHydrate) {
							var warned = false;
							var rootSibling;
							while ((rootSibling = container.lastChild)) {
								{
									if (
										!warned &&
										rootSibling.nodeType === ELEMENT_NODE &&
										rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)
									) {
										warned = true;
										error3(
											"render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup."
										);
									}
								}
								container.removeChild(rootSibling);
							}
						}
						{
							if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
								warnedAboutHydrateAPI = true;
								warn2(
									"render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v18. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML."
								);
							}
						}
						return createLegacyRoot(
							container,
							shouldHydrate
								? {
										hydrate: true,
								  }
								: void 0
						);
					}
					function warnOnInvalidCallback$1(callback, callerName) {
						{
							if (callback !== null && typeof callback !== "function") {
								error3(
									"%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.",
									callerName,
									callback
								);
							}
						}
					}
					function legacyRenderSubtreeIntoContainer(
						parentComponent,
						children2,
						container,
						forceHydrate,
						callback
					) {
						{
							topLevelUpdateWarnings(container);
							warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
						}
						var root2 = container._reactRootContainer;
						var fiberRoot;
						if (!root2) {
							root2 = container._reactRootContainer = legacyCreateRootFromDOMContainer(
								container,
								forceHydrate
							);
							fiberRoot = root2._internalRoot;
							if (typeof callback === "function") {
								var originalCallback = callback;
								callback = function () {
									var instance = getPublicRootInstance(fiberRoot);
									originalCallback.call(instance);
								};
							}
							unbatchedUpdates(function () {
								updateContainer(children2, fiberRoot, parentComponent, callback);
							});
						} else {
							fiberRoot = root2._internalRoot;
							if (typeof callback === "function") {
								var _originalCallback = callback;
								callback = function () {
									var instance = getPublicRootInstance(fiberRoot);
									_originalCallback.call(instance);
								};
							}
							updateContainer(children2, fiberRoot, parentComponent, callback);
						}
						return getPublicRootInstance(fiberRoot);
					}
					function findDOMNode(componentOrElement) {
						{
							var owner = ReactCurrentOwner$3.current;
							if (owner !== null && owner.stateNode !== null) {
								var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
								if (!warnedAboutRefsInRender) {
									error3(
										"%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.",
										getComponentName(owner.type) || "A component"
									);
								}
								owner.stateNode._warnedAboutRefsInRender = true;
							}
						}
						if (componentOrElement == null) {
							return null;
						}
						if (componentOrElement.nodeType === ELEMENT_NODE) {
							return componentOrElement;
						}
						{
							return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
						}
					}
					function hydrate(element, container, callback) {
						if (!isValidContainer(container)) {
							{
								throw Error("Target container is not a DOM element.");
							}
						}
						{
							var isModernRoot =
								isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
							if (isModernRoot) {
								error3(
									"You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?"
								);
							}
						}
						return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
					}
					function render(element, container, callback) {
						if (!isValidContainer(container)) {
							{
								throw Error("Target container is not a DOM element.");
							}
						}
						{
							var isModernRoot =
								isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
							if (isModernRoot) {
								error3(
									"You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?"
								);
							}
						}
						return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
					}
					function unstable_renderSubtreeIntoContainer(
						parentComponent,
						element,
						containerNode,
						callback
					) {
						if (!isValidContainer(containerNode)) {
							{
								throw Error("Target container is not a DOM element.");
							}
						}
						if (!(parentComponent != null && has2(parentComponent))) {
							{
								throw Error("parentComponent must be a valid React Component");
							}
						}
						return legacyRenderSubtreeIntoContainer(
							parentComponent,
							element,
							containerNode,
							false,
							callback
						);
					}
					function unmountComponentAtNode(container) {
						if (!isValidContainer(container)) {
							{
								throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
							}
						}
						{
							var isModernRoot =
								isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
							if (isModernRoot) {
								error3(
									"You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?"
								);
							}
						}
						if (container._reactRootContainer) {
							{
								var rootEl = getReactRootElementInContainer(container);
								var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
								if (renderedByDifferentReact) {
									error3(
										"unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React."
									);
								}
							}
							unbatchedUpdates(function () {
								legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
									container._reactRootContainer = null;
									unmarkContainerAsRoot(container);
								});
							});
							return true;
						} else {
							{
								var _rootEl = getReactRootElementInContainer(container);
								var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
								var isContainerReactRoot =
									container.nodeType === ELEMENT_NODE &&
									isValidContainer(container.parentNode) &&
									!!container.parentNode._reactRootContainer;
								if (hasNonRootReactChild) {
									error3(
										"unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s",
										isContainerReactRoot
											? "You may have accidentally passed in a React root node instead of its container."
											: "Instead, have the parent component update its state and rerender in order to remove this component."
									);
								}
							}
							return false;
						}
					}
					setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
					setAttemptContinuousHydration(attemptContinuousHydration$1);
					setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
					setAttemptHydrationAtPriority(runWithPriority$2);
					var didWarnAboutUnstableCreatePortal = false;
					{
						if (
							typeof Map !== "function" ||
							Map.prototype == null ||
							typeof Map.prototype.forEach !== "function" ||
							typeof Set !== "function" ||
							Set.prototype == null ||
							typeof Set.prototype.clear !== "function" ||
							typeof Set.prototype.forEach !== "function"
						) {
							error3(
								"React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"
							);
						}
					}
					setRestoreImplementation(restoreControlledState$3);
					setBatchingImplementation(
						batchedUpdates$1,
						discreteUpdates$1,
						flushDiscreteUpdates,
						batchedEventUpdates$1
					);
					function createPortal$1(children2, container) {
						var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
						if (!isValidContainer(container)) {
							{
								throw Error("Target container is not a DOM element.");
							}
						}
						return createPortal(children2, container, null, key);
					}
					function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
						return unstable_renderSubtreeIntoContainer(
							parentComponent,
							element,
							containerNode,
							callback
						);
					}
					function unstable_createPortal(children2, container) {
						var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
						{
							if (!didWarnAboutUnstableCreatePortal) {
								didWarnAboutUnstableCreatePortal = true;
								warn2(
									'The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 18+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the "unstable_" prefix.'
								);
							}
						}
						return createPortal$1(children2, container, key);
					}
					var Internals = {
						Events: [
							getInstanceFromNode,
							getNodeFromInstance,
							getFiberCurrentPropsFromNode,
							enqueueStateRestore,
							restoreStateIfNeeded,
							flushPassiveEffects,
							IsThisRendererActing,
						],
					};
					var foundDevTools = injectIntoDevTools({
						findFiberByHostInstance: getClosestInstanceFromNode,
						bundleType: 1,
						version: ReactVersion,
						rendererPackageName: "react-dom",
					});
					{
						if (!foundDevTools && canUseDOM && window.top === window.self) {
							if (
								(navigator.userAgent.indexOf("Chrome") > -1 &&
									navigator.userAgent.indexOf("Edge") === -1) ||
								navigator.userAgent.indexOf("Firefox") > -1
							) {
								var protocol = window.location.protocol;
								if (/^(https?|file):$/.test(protocol)) {
									console.info(
										"%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" +
											(protocol === "file:"
												? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq"
												: ""),
										"font-weight:bold"
									);
								}
							}
						}
					}
					exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
					exports.createPortal = createPortal$1;
					exports.findDOMNode = findDOMNode;
					exports.flushSync = flushSync;
					exports.hydrate = hydrate;
					exports.render = render;
					exports.unmountComponentAtNode = unmountComponentAtNode;
					exports.unstable_batchedUpdates = batchedUpdates$1;
					exports.unstable_createPortal = unstable_createPortal;
					exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
					exports.version = ReactVersion;
				})();
			}
		},
	});

	// ../../node_modules/react-dom/index.js
	var require_react_dom = __commonJS({
		"../../node_modules/react-dom/index.js"(exports, module2) {
			"use strict";
			if (false) {
				checkDCE();
				module2.exports = null;
			} else {
				module2.exports = require_react_dom_development();
			}
		},
	});

	// ../../node_modules/xstate/lib/_virtual/_tslib.js
	var require_tslib = __commonJS({
		"../../node_modules/xstate/lib/_virtual/_tslib.js"(exports) {
			"use strict";
			Object.defineProperty(exports, "__esModule", { value: true });
			exports.__assign = function () {
				exports.__assign =
					Object.assign ||
					function __assign12(t) {
						for (var s, i = 1, n = arguments.length; i < n; i++) {
							s = arguments[i];
							for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
						}
						return t;
					};
				return exports.__assign.apply(this, arguments);
			};
			function __rest5(s, e) {
				var t = {};
				for (var p in s)
					if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
				if (s != null && typeof Object.getOwnPropertySymbols === "function")
					for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
						if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
							t[p[i]] = s[p[i]];
					}
				return t;
			}
			function __values6(o) {
				var s = typeof Symbol === "function" && Symbol.iterator,
					m = s && o[s],
					i = 0;
				if (m) return m.call(o);
				if (o && typeof o.length === "number")
					return {
						next: function () {
							if (o && i >= o.length) o = void 0;
							return { value: o && o[i++], done: !o };
						},
					};
				throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
			}
			function __read14(o, n) {
				var m = typeof Symbol === "function" && o[Symbol.iterator];
				if (!m) return o;
				var i = m.call(o),
					r,
					ar = [],
					e;
				try {
					while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
				} catch (error3) {
					e = { error: error3 };
				} finally {
					try {
						if (r && !r.done && (m = i["return"])) m.call(i);
					} finally {
						if (e) throw e.error;
					}
				}
				return ar;
			}
			function __spreadArray4(to, from) {
				for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];
				return to;
			}
			exports.__read = __read14;
			exports.__rest = __rest5;
			exports.__spreadArray = __spreadArray4;
			exports.__values = __values6;
		},
	});

	// ../../node_modules/xstate/lib/constants.js
	var require_constants = __commonJS({
		"../../node_modules/xstate/lib/constants.js"(exports) {
			"use strict";
			Object.defineProperty(exports, "__esModule", { value: true });
			var STATE_DELIMITER2 = ".";
			var EMPTY_ACTIVITY_MAP2 = {};
			var DEFAULT_GUARD_TYPE2 = "xstate.guard";
			var TARGETLESS_KEY2 = "";
			exports.DEFAULT_GUARD_TYPE = DEFAULT_GUARD_TYPE2;
			exports.EMPTY_ACTIVITY_MAP = EMPTY_ACTIVITY_MAP2;
			exports.STATE_DELIMITER = STATE_DELIMITER2;
			exports.TARGETLESS_KEY = TARGETLESS_KEY2;
		},
	});

	// ../../node_modules/xstate/lib/environment.js
	var require_environment = __commonJS({
		"../../node_modules/xstate/lib/environment.js"(exports) {
			"use strict";
			Object.defineProperty(exports, "__esModule", { value: true });
			var IS_PRODUCTION2 = false;
			exports.IS_PRODUCTION = IS_PRODUCTION2;
		},
	});

	// ../../node_modules/xstate/lib/utils.js
	var require_utils = __commonJS({
		"../../node_modules/xstate/lib/utils.js"(exports) {
			"use strict";
			Object.defineProperty(exports, "__esModule", { value: true });
			var _tslib = require_tslib();
			var constants = require_constants();
			var environment = require_environment();
			function keys2(value) {
				return Object.keys(value);
			}
			function matchesState2(parentStateId, childStateId, delimiter) {
				if (delimiter === void 0) {
					delimiter = constants.STATE_DELIMITER;
				}
				var parentStateValue = toStateValue2(parentStateId, delimiter);
				var childStateValue = toStateValue2(childStateId, delimiter);
				if (isString2(childStateValue)) {
					if (isString2(parentStateValue)) {
						return childStateValue === parentStateValue;
					}
					return false;
				}
				if (isString2(parentStateValue)) {
					return parentStateValue in childStateValue;
				}
				return keys2(parentStateValue).every(function (key) {
					if (!(key in childStateValue)) {
						return false;
					}
					return matchesState2(parentStateValue[key], childStateValue[key]);
				});
			}
			function getEventType2(event2) {
				try {
					return isString2(event2) || typeof event2 === "number" ? "" + event2 : event2.type;
				} catch (e) {
					throw new Error("Events must be strings or objects with a string event.type property.");
				}
			}
			function toStatePath2(stateId, delimiter) {
				try {
					if (isArray2(stateId)) {
						return stateId;
					}
					return stateId.toString().split(delimiter);
				} catch (e) {
					throw new Error("'" + stateId + "' is not a valid state path.");
				}
			}
			function isStateLike2(state) {
				return (
					typeof state === "object" &&
					"value" in state &&
					"context" in state &&
					"event" in state &&
					"_event" in state
				);
			}
			function toStateValue2(stateValue, delimiter) {
				if (isStateLike2(stateValue)) {
					return stateValue.value;
				}
				if (isArray2(stateValue)) {
					return pathToStateValue2(stateValue);
				}
				if (typeof stateValue !== "string") {
					return stateValue;
				}
				var statePath = toStatePath2(stateValue, delimiter);
				return pathToStateValue2(statePath);
			}
			function pathToStateValue2(statePath) {
				if (statePath.length === 1) {
					return statePath[0];
				}
				var value = {};
				var marker = value;
				for (var i = 0; i < statePath.length - 1; i++) {
					if (i === statePath.length - 2) {
						marker[statePath[i]] = statePath[i + 1];
					} else {
						marker[statePath[i]] = {};
						marker = marker[statePath[i]];
					}
				}
				return value;
			}
			function mapValues2(collection, iteratee) {
				var result = {};
				var collectionKeys = keys2(collection);
				for (var i = 0; i < collectionKeys.length; i++) {
					var key = collectionKeys[i];
					result[key] = iteratee(collection[key], key, collection, i);
				}
				return result;
			}
			function mapFilterValues2(collection, iteratee, predicate) {
				var e_1, _a;
				var result = {};
				try {
					for (
						var _b = _tslib.__values(keys2(collection)), _c = _b.next();
						!_c.done;
						_c = _b.next()
					) {
						var key = _c.value;
						var item = collection[key];
						if (!predicate(item)) {
							continue;
						}
						result[key] = iteratee(item, key, collection);
					}
				} catch (e_1_1) {
					e_1 = {
						error: e_1_1,
					};
				} finally {
					try {
						if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
					} finally {
						if (e_1) throw e_1.error;
					}
				}
				return result;
			}
			var path2 = function (props) {
				return function (object) {
					var e_2, _a;
					var result = object;
					try {
						for (
							var props_1 = _tslib.__values(props), props_1_1 = props_1.next();
							!props_1_1.done;
							props_1_1 = props_1.next()
						) {
							var prop = props_1_1.value;
							result = result[prop];
						}
					} catch (e_2_1) {
						e_2 = {
							error: e_2_1,
						};
					} finally {
						try {
							if (props_1_1 && !props_1_1.done && (_a = props_1.return)) _a.call(props_1);
						} finally {
							if (e_2) throw e_2.error;
						}
					}
					return result;
				};
			};
			function nestedPath2(props, accessorProp) {
				return function (object) {
					var e_3, _a;
					var result = object;
					try {
						for (
							var props_2 = _tslib.__values(props), props_2_1 = props_2.next();
							!props_2_1.done;
							props_2_1 = props_2.next()
						) {
							var prop = props_2_1.value;
							result = result[accessorProp][prop];
						}
					} catch (e_3_1) {
						e_3 = {
							error: e_3_1,
						};
					} finally {
						try {
							if (props_2_1 && !props_2_1.done && (_a = props_2.return)) _a.call(props_2);
						} finally {
							if (e_3) throw e_3.error;
						}
					}
					return result;
				};
			}
			function toStatePaths2(stateValue) {
				if (!stateValue) {
					return [[]];
				}
				if (isString2(stateValue)) {
					return [[stateValue]];
				}
				var result = flatten2(
					keys2(stateValue).map(function (key) {
						var subStateValue = stateValue[key];
						if (
							typeof subStateValue !== "string" &&
							(!subStateValue || !Object.keys(subStateValue).length)
						) {
							return [[key]];
						}
						return toStatePaths2(stateValue[key]).map(function (subPath) {
							return [key].concat(subPath);
						});
					})
				);
				return result;
			}
			function flatten2(array) {
				var _a;
				return (_a = []).concat.apply(_a, _tslib.__spreadArray([], _tslib.__read(array)));
			}
			function toArrayStrict2(value) {
				if (isArray2(value)) {
					return value;
				}
				return [value];
			}
			function toArray2(value) {
				if (value === void 0) {
					return [];
				}
				return toArrayStrict2(value);
			}
			function mapContext2(mapper, context, _event) {
				var e_5, _a;
				if (isFunction2(mapper)) {
					return mapper(context, _event.data);
				}
				var result = {};
				try {
					for (
						var _b = _tslib.__values(Object.keys(mapper)), _c = _b.next();
						!_c.done;
						_c = _b.next()
					) {
						var key = _c.value;
						var subMapper = mapper[key];
						if (isFunction2(subMapper)) {
							result[key] = subMapper(context, _event.data);
						} else {
							result[key] = subMapper;
						}
					}
				} catch (e_5_1) {
					e_5 = {
						error: e_5_1,
					};
				} finally {
					try {
						if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
					} finally {
						if (e_5) throw e_5.error;
					}
				}
				return result;
			}
			function isBuiltInEvent2(eventType) {
				return /^(done|error)\./.test(eventType);
			}
			function isPromiseLike2(value) {
				if (value instanceof Promise) {
					return true;
				}
				if (
					value !== null &&
					(isFunction2(value) || typeof value === "object") &&
					isFunction2(value.then)
				) {
					return true;
				}
				return false;
			}
			function isBehavior2(value) {
				return (
					value !== null &&
					typeof value === "object" &&
					"transition" in value &&
					typeof value.transition === "function"
				);
			}
			function partition3(items, predicate) {
				var e_6, _a;
				var _b = _tslib.__read([[], []], 2),
					truthy = _b[0],
					falsy = _b[1];
				try {
					for (
						var items_1 = _tslib.__values(items), items_1_1 = items_1.next();
						!items_1_1.done;
						items_1_1 = items_1.next()
					) {
						var item = items_1_1.value;
						if (predicate(item)) {
							truthy.push(item);
						} else {
							falsy.push(item);
						}
					}
				} catch (e_6_1) {
					e_6 = {
						error: e_6_1,
					};
				} finally {
					try {
						if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);
					} finally {
						if (e_6) throw e_6.error;
					}
				}
				return [truthy, falsy];
			}
			function updateHistoryStates2(hist, stateValue) {
				return mapValues2(hist.states, function (subHist, key) {
					if (!subHist) {
						return void 0;
					}
					var subStateValue =
						(isString2(stateValue) ? void 0 : stateValue[key]) ||
						(subHist ? subHist.current : void 0);
					if (!subStateValue) {
						return void 0;
					}
					return {
						current: subStateValue,
						states: updateHistoryStates2(subHist, subStateValue),
					};
				});
			}
			function updateHistoryValue2(hist, stateValue) {
				return {
					current: stateValue,
					states: updateHistoryStates2(hist, stateValue),
				};
			}
			function updateContext2(context, _event, assignActions, state) {
				if (!environment.IS_PRODUCTION) {
					exports.warn(!!context, "Attempting to update undefined context");
				}
				var updatedContext = context
					? assignActions.reduce(function (acc, assignAction) {
							var e_7, _a;
							var assignment = assignAction.assignment;
							var meta = {
								state,
								action: assignAction,
								_event,
							};
							var partialUpdate = {};
							if (isFunction2(assignment)) {
								partialUpdate = assignment(acc, _event.data, meta);
							} else {
								try {
									for (
										var _b = _tslib.__values(keys2(assignment)), _c = _b.next();
										!_c.done;
										_c = _b.next()
									) {
										var key = _c.value;
										var propAssignment = assignment[key];
										partialUpdate[key] = isFunction2(propAssignment)
											? propAssignment(acc, _event.data, meta)
											: propAssignment;
									}
								} catch (e_7_1) {
									e_7 = {
										error: e_7_1,
									};
								} finally {
									try {
										if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
									} finally {
										if (e_7) throw e_7.error;
									}
								}
							}
							return Object.assign({}, acc, partialUpdate);
					  }, context)
					: context;
				return updatedContext;
			}
			exports.warn = function () {};
			if (!environment.IS_PRODUCTION) {
				exports.warn = function (condition, message) {
					var error3 = condition instanceof Error ? condition : void 0;
					if (!error3 && condition) {
						return;
					}
					if (console !== void 0) {
						var args = ["Warning: " + message];
						if (error3) {
							args.push(error3);
						}
						console.warn.apply(console, args);
					}
				};
			}
			function isArray2(value) {
				return Array.isArray(value);
			}
			function isFunction2(value) {
				return typeof value === "function";
			}
			function isString2(value) {
				return typeof value === "string";
			}
			function toGuard2(condition, guardMap) {
				if (!condition) {
					return void 0;
				}
				if (isString2(condition)) {
					return {
						type: constants.DEFAULT_GUARD_TYPE,
						name: condition,
						predicate: guardMap ? guardMap[condition] : void 0,
					};
				}
				if (isFunction2(condition)) {
					return {
						type: constants.DEFAULT_GUARD_TYPE,
						name: condition.name,
						predicate: condition,
					};
				}
				return condition;
			}
			function isObservable2(value) {
				try {
					return "subscribe" in value && isFunction2(value.subscribe);
				} catch (e) {
					return false;
				}
			}
			var symbolObservable2 = /* @__PURE__ */ (function () {
				return (typeof Symbol === "function" && Symbol.observable) || "@@observable";
			})();
			function isMachine2(value) {
				try {
					return "__xstatenode" in value;
				} catch (e) {
					return false;
				}
			}
			function isActor3(value) {
				return !!value && typeof value.send === "function";
			}
			var uniqueId2 = /* @__PURE__ */ (function () {
				var currentId = 0;
				return function () {
					currentId++;
					return currentId.toString(16);
				};
			})();
			function toEventObject3(event2, payload) {
				if (isString2(event2) || typeof event2 === "number") {
					return _tslib.__assign(
						{
							type: event2,
						},
						payload
					);
				}
				return event2;
			}
			function toSCXMLEvent3(event2, scxmlEvent) {
				if (!isString2(event2) && "$$type" in event2 && event2.$$type === "scxml") {
					return event2;
				}
				var eventObject = toEventObject3(event2);
				return _tslib.__assign(
					{
						name: eventObject.type,
						data: eventObject,
						$$type: "scxml",
						type: "external",
					},
					scxmlEvent
				);
			}
			function toTransitionConfigArray2(event2, configLike) {
				var transitions = toArrayStrict2(configLike).map(function (transitionLike) {
					if (
						typeof transitionLike === "undefined" ||
						typeof transitionLike === "string" ||
						isMachine2(transitionLike)
					) {
						return {
							target: transitionLike,
							event: event2,
						};
					}
					return _tslib.__assign(_tslib.__assign({}, transitionLike), {
						event: event2,
					});
				});
				return transitions;
			}
			function normalizeTarget2(target) {
				if (target === void 0 || target === constants.TARGETLESS_KEY) {
					return void 0;
				}
				return toArray2(target);
			}
			function reportUnhandledExceptionOnInvocation2(originalError, currentError, id) {
				if (!environment.IS_PRODUCTION) {
					var originalStackTrace = originalError.stack
						? " Stacktrace was '" + originalError.stack + "'"
						: "";
					if (originalError === currentError) {
						console.error(
							"Missing onError handler for invocation '" +
								id +
								"', error was '" +
								originalError +
								"'." +
								originalStackTrace
						);
					} else {
						var stackTrace = currentError.stack
							? " Stacktrace was '" + currentError.stack + "'"
							: "";
						console.error(
							"Missing onError handler and/or unhandled exception/promise rejection for invocation '" +
								id +
								"'. " +
								("Original error: '" +
									originalError +
									"'. " +
									originalStackTrace +
									" Current error is '" +
									currentError +
									"'." +
									stackTrace)
						);
					}
				}
			}
			function evaluateGuard2(machine2, guard, context, _event, state) {
				var guards = machine2.options.guards;
				var guardMeta = {
					state,
					cond: guard,
					_event,
				};
				if (guard.type === constants.DEFAULT_GUARD_TYPE) {
					return guard.predicate(context, _event.data, guardMeta);
				}
				var condFn = guards[guard.type];
				if (!condFn) {
					throw new Error(
						"Guard '" + guard.type + "' is not implemented on machine '" + machine2.id + "'."
					);
				}
				return condFn(context, _event.data, guardMeta);
			}
			function toInvokeSource3(src) {
				if (typeof src === "string") {
					return {
						type: src,
					};
				}
				return src;
			}
			function toObserver4(nextHandler, errorHandler, completionHandler) {
				if (typeof nextHandler === "object") {
					return nextHandler;
				}
				var noop = function () {
					return void 0;
				};
				return {
					next: nextHandler,
					error: errorHandler || noop,
					complete: completionHandler || noop,
				};
			}
			exports.evaluateGuard = evaluateGuard2;
			exports.flatten = flatten2;
			exports.getEventType = getEventType2;
			exports.isActor = isActor3;
			exports.isArray = isArray2;
			exports.isBehavior = isBehavior2;
			exports.isBuiltInEvent = isBuiltInEvent2;
			exports.isFunction = isFunction2;
			exports.isMachine = isMachine2;
			exports.isObservable = isObservable2;
			exports.isPromiseLike = isPromiseLike2;
			exports.isStateLike = isStateLike2;
			exports.isString = isString2;
			exports.keys = keys2;
			exports.mapContext = mapContext2;
			exports.mapFilterValues = mapFilterValues2;
			exports.mapValues = mapValues2;
			exports.matchesState = matchesState2;
			exports.nestedPath = nestedPath2;
			exports.normalizeTarget = normalizeTarget2;
			exports.partition = partition3;
			exports.path = path2;
			exports.pathToStateValue = pathToStateValue2;
			exports.reportUnhandledExceptionOnInvocation = reportUnhandledExceptionOnInvocation2;
			exports.symbolObservable = symbolObservable2;
			exports.toArray = toArray2;
			exports.toArrayStrict = toArrayStrict2;
			exports.toEventObject = toEventObject3;
			exports.toGuard = toGuard2;
			exports.toInvokeSource = toInvokeSource3;
			exports.toObserver = toObserver4;
			exports.toSCXMLEvent = toSCXMLEvent3;
			exports.toStatePath = toStatePath2;
			exports.toStatePaths = toStatePaths2;
			exports.toStateValue = toStateValue2;
			exports.toTransitionConfigArray = toTransitionConfigArray2;
			exports.uniqueId = uniqueId2;
			exports.updateContext = updateContext2;
			exports.updateHistoryStates = updateHistoryStates2;
			exports.updateHistoryValue = updateHistoryValue2;
		},
	});

	// ../../node_modules/fast-safe-stringify/index.js
	var require_fast_safe_stringify = __commonJS({
		"../../node_modules/fast-safe-stringify/index.js"(exports, module2) {
			module2.exports = stringify2;
			stringify2.default = stringify2;
			stringify2.stable = deterministicStringify;
			stringify2.stableStringify = deterministicStringify;
			var arr = [];
			var replacerStack = [];
			function stringify2(obj, replacer, spacer) {
				decirc(obj, "", [], void 0);
				var res;
				try {
					if (replacerStack.length === 0) {
						res = JSON.stringify(obj, replacer, spacer);
					} else {
						res = JSON.stringify(obj, replaceGetterValues(replacer), spacer);
					}
				} catch (_) {
					return JSON.stringify(
						"[unable to serialize, circular reference is too complex to analyze]"
					);
				} finally {
					while (arr.length !== 0) {
						var part = arr.pop();
						if (part.length === 4) {
							Object.defineProperty(part[0], part[1], part[3]);
						} else {
							part[0][part[1]] = part[2];
						}
					}
				}
				return res;
			}
			function decirc(val, k, stack, parent) {
				var i;
				if (typeof val === "object" && val !== null) {
					for (i = 0; i < stack.length; i++) {
						if (stack[i] === val) {
							var propertyDescriptor = Object.getOwnPropertyDescriptor(parent, k);
							if (propertyDescriptor.get !== void 0) {
								if (propertyDescriptor.configurable) {
									Object.defineProperty(parent, k, { value: "[Circular]" });
									arr.push([parent, k, val, propertyDescriptor]);
								} else {
									replacerStack.push([val, k]);
								}
							} else {
								parent[k] = "[Circular]";
								arr.push([parent, k, val]);
							}
							return;
						}
					}
					stack.push(val);
					if (Array.isArray(val)) {
						for (i = 0; i < val.length; i++) {
							decirc(val[i], i, stack, val);
						}
					} else {
						var keys2 = Object.keys(val);
						for (i = 0; i < keys2.length; i++) {
							var key = keys2[i];
							decirc(val[key], key, stack, val);
						}
					}
					stack.pop();
				}
			}
			function compareFunction(a, b) {
				if (a < b) {
					return -1;
				}
				if (a > b) {
					return 1;
				}
				return 0;
			}
			function deterministicStringify(obj, replacer, spacer) {
				var tmp = deterministicDecirc(obj, "", [], void 0) || obj;
				var res;
				try {
					if (replacerStack.length === 0) {
						res = JSON.stringify(tmp, replacer, spacer);
					} else {
						res = JSON.stringify(tmp, replaceGetterValues(replacer), spacer);
					}
				} catch (_) {
					return JSON.stringify(
						"[unable to serialize, circular reference is too complex to analyze]"
					);
				} finally {
					while (arr.length !== 0) {
						var part = arr.pop();
						if (part.length === 4) {
							Object.defineProperty(part[0], part[1], part[3]);
						} else {
							part[0][part[1]] = part[2];
						}
					}
				}
				return res;
			}
			function deterministicDecirc(val, k, stack, parent) {
				var i;
				if (typeof val === "object" && val !== null) {
					for (i = 0; i < stack.length; i++) {
						if (stack[i] === val) {
							var propertyDescriptor = Object.getOwnPropertyDescriptor(parent, k);
							if (propertyDescriptor.get !== void 0) {
								if (propertyDescriptor.configurable) {
									Object.defineProperty(parent, k, { value: "[Circular]" });
									arr.push([parent, k, val, propertyDescriptor]);
								} else {
									replacerStack.push([val, k]);
								}
							} else {
								parent[k] = "[Circular]";
								arr.push([parent, k, val]);
							}
							return;
						}
					}
					try {
						if (typeof val.toJSON === "function") {
							return;
						}
					} catch (_) {
						return;
					}
					stack.push(val);
					if (Array.isArray(val)) {
						for (i = 0; i < val.length; i++) {
							deterministicDecirc(val[i], i, stack, val);
						}
					} else {
						var tmp = {};
						var keys2 = Object.keys(val).sort(compareFunction);
						for (i = 0; i < keys2.length; i++) {
							var key = keys2[i];
							deterministicDecirc(val[key], key, stack, val);
							tmp[key] = val[key];
						}
						if (parent !== void 0) {
							arr.push([parent, k, val]);
							parent[k] = tmp;
						} else {
							return tmp;
						}
					}
					stack.pop();
				}
			}
			function replaceGetterValues(replacer) {
				replacer =
					replacer !== void 0
						? replacer
						: function (k, v) {
								return v;
						  };
				return function (key, val) {
					if (replacerStack.length > 0) {
						for (var i = 0; i < replacerStack.length; i++) {
							var part = replacerStack[i];
							if (part[1] === key && part[0] === val) {
								val = "[Circular]";
								replacerStack.splice(i, 1);
								break;
							}
						}
					}
					return replacer.call(this, key, val);
				};
			}
		},
	});

	// ../../node_modules/classnames/index.js
	var require_classnames = __commonJS({
		"../../node_modules/classnames/index.js"(exports, module2) {
			(function () {
				"use strict";
				var hasOwn = {}.hasOwnProperty;
				function classNames() {
					var classes = [];
					for (var i = 0; i < arguments.length; i++) {
						var arg = arguments[i];
						if (!arg) continue;
						var argType = typeof arg;
						if (argType === "string" || argType === "number") {
							classes.push(arg);
						} else if (Array.isArray(arg)) {
							if (arg.length) {
								var inner = classNames.apply(null, arg);
								if (inner) {
									classes.push(inner);
								}
							}
						} else if (argType === "object") {
							if (arg.toString === Object.prototype.toString) {
								for (var key in arg) {
									if (hasOwn.call(arg, key) && arg[key]) {
										classes.push(key);
									}
								}
							} else {
								classes.push(arg.toString());
							}
						}
					}
					return classes.join(" ");
				}
				if (typeof module2 !== "undefined" && module2.exports) {
					classNames.default = classNames;
					module2.exports = classNames;
				} else if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
					define("classnames", [], function () {
						return classNames;
					});
				} else {
					window.classNames = classNames;
				}
			})();
		},
	});

	// ../../node_modules/xstate/lib/types.js
	var require_types = __commonJS({
		"../../node_modules/xstate/lib/types.js"(exports) {
			"use strict";
			Object.defineProperty(exports, "__esModule", { value: true });
			(function (ActionTypes2) {
				ActionTypes2["Start"] = "xstate.start";
				ActionTypes2["Stop"] = "xstate.stop";
				ActionTypes2["Raise"] = "xstate.raise";
				ActionTypes2["Send"] = "xstate.send";
				ActionTypes2["Cancel"] = "xstate.cancel";
				ActionTypes2["NullEvent"] = "";
				ActionTypes2["Assign"] = "xstate.assign";
				ActionTypes2["After"] = "xstate.after";
				ActionTypes2["DoneState"] = "done.state";
				ActionTypes2["DoneInvoke"] = "done.invoke";
				ActionTypes2["Log"] = "xstate.log";
				ActionTypes2["Init"] = "xstate.init";
				ActionTypes2["Invoke"] = "xstate.invoke";
				ActionTypes2["ErrorExecution"] = "error.execution";
				ActionTypes2["ErrorCommunication"] = "error.communication";
				ActionTypes2["ErrorPlatform"] = "error.platform";
				ActionTypes2["ErrorCustom"] = "xstate.error";
				ActionTypes2["Update"] = "xstate.update";
				ActionTypes2["Pure"] = "xstate.pure";
				ActionTypes2["Choose"] = "xstate.choose";
			})(exports.ActionTypes || (exports.ActionTypes = {}));
			(function (SpecialTargets2) {
				SpecialTargets2["Parent"] = "#_parent";
				SpecialTargets2["Internal"] = "#_internal";
			})(exports.SpecialTargets || (exports.SpecialTargets = {}));
		},
	});

	// ../../node_modules/xstate/lib/actionTypes.js
	var require_actionTypes = __commonJS({
		"../../node_modules/xstate/lib/actionTypes.js"(exports) {
			"use strict";
			Object.defineProperty(exports, "__esModule", { value: true });
			var types2 = require_types();
			var start3 = types2.ActionTypes.Start;
			var stop3 = types2.ActionTypes.Stop;
			var raise3 = types2.ActionTypes.Raise;
			var send3 = types2.ActionTypes.Send;
			var cancel3 = types2.ActionTypes.Cancel;
			var nullEvent2 = types2.ActionTypes.NullEvent;
			var assign3 = types2.ActionTypes.Assign;
			var after3 = types2.ActionTypes.After;
			var doneState2 = types2.ActionTypes.DoneState;
			var log2 = types2.ActionTypes.Log;
			var init2 = types2.ActionTypes.Init;
			var invoke2 = types2.ActionTypes.Invoke;
			var errorExecution2 = types2.ActionTypes.ErrorExecution;
			var errorPlatform2 = types2.ActionTypes.ErrorPlatform;
			var error3 = types2.ActionTypes.ErrorCustom;
			var update2 = types2.ActionTypes.Update;
			var choose2 = types2.ActionTypes.Choose;
			var pure2 = types2.ActionTypes.Pure;
			exports.after = after3;
			exports.assign = assign3;
			exports.cancel = cancel3;
			exports.choose = choose2;
			exports.doneState = doneState2;
			exports.error = error3;
			exports.errorExecution = errorExecution2;
			exports.errorPlatform = errorPlatform2;
			exports.init = init2;
			exports.invoke = invoke2;
			exports.log = log2;
			exports.nullEvent = nullEvent2;
			exports.pure = pure2;
			exports.raise = raise3;
			exports.send = send3;
			exports.start = start3;
			exports.stop = stop3;
			exports.update = update2;
		},
	});

	// ../../node_modules/xstate/lib/actions.js
	var require_actions = __commonJS({
		"../../node_modules/xstate/lib/actions.js"(exports) {
			"use strict";
			Object.defineProperty(exports, "__esModule", { value: true });
			var _tslib = require_tslib();
			var environment = require_environment();
			var utils = require_utils();
			var types2 = require_types();
			var actionTypes = require_actionTypes();
			var initEvent2 = /* @__PURE__ */ utils.toSCXMLEvent({
				type: actionTypes.init,
			});
			function getActionFunction2(actionType, actionFunctionMap) {
				return actionFunctionMap ? actionFunctionMap[actionType] || void 0 : void 0;
			}
			function toActionObject2(action, actionFunctionMap) {
				var actionObject;
				if (utils.isString(action) || typeof action === "number") {
					var exec = getActionFunction2(action, actionFunctionMap);
					if (utils.isFunction(exec)) {
						actionObject = {
							type: action,
							exec,
						};
					} else if (exec) {
						actionObject = exec;
					} else {
						actionObject = {
							type: action,
							exec: void 0,
						};
					}
				} else if (utils.isFunction(action)) {
					actionObject = {
						type: action.name || action.toString(),
						exec: action,
					};
				} else {
					var exec = getActionFunction2(action.type, actionFunctionMap);
					if (utils.isFunction(exec)) {
						actionObject = _tslib.__assign(_tslib.__assign({}, action), {
							exec,
						});
					} else if (exec) {
						var actionType = exec.type || action.type;
						actionObject = _tslib.__assign(_tslib.__assign(_tslib.__assign({}, exec), action), {
							type: actionType,
						});
					} else {
						actionObject = action;
					}
				}
				Object.defineProperty(actionObject, "toString", {
					value: function () {
						return actionObject.type;
					},
					enumerable: false,
					configurable: true,
				});
				return actionObject;
			}
			var toActionObjects2 = function (action, actionFunctionMap) {
				if (!action) {
					return [];
				}
				var actions = utils.isArray(action) ? action : [action];
				return actions.map(function (subAction) {
					return toActionObject2(subAction, actionFunctionMap);
				});
			};
			function toActivityDefinition2(action) {
				var actionObject = toActionObject2(action);
				return _tslib.__assign(
					_tslib.__assign(
						{
							id: utils.isString(action) ? action : actionObject.id,
						},
						actionObject
					),
					{
						type: actionObject.type,
					}
				);
			}
			function raise3(event2) {
				if (!utils.isString(event2)) {
					return send3(event2, {
						to: types2.SpecialTargets.Internal,
					});
				}
				return {
					type: actionTypes.raise,
					event: event2,
				};
			}
			function resolveRaise2(action) {
				return {
					type: actionTypes.raise,
					_event: utils.toSCXMLEvent(action.event),
				};
			}
			function send3(event2, options) {
				return {
					to: options ? options.to : void 0,
					type: actionTypes.send,
					event: utils.isFunction(event2) ? event2 : utils.toEventObject(event2),
					delay: options ? options.delay : void 0,
					id:
						options && options.id !== void 0
							? options.id
							: utils.isFunction(event2)
							? event2.name
							: utils.getEventType(event2),
				};
			}
			function resolveSend2(action, ctx, _event, delaysMap) {
				var meta = {
					_event,
				};
				var resolvedEvent = utils.toSCXMLEvent(
					utils.isFunction(action.event) ? action.event(ctx, _event.data, meta) : action.event
				);
				var resolvedDelay;
				if (utils.isString(action.delay)) {
					var configDelay = delaysMap && delaysMap[action.delay];
					resolvedDelay = utils.isFunction(configDelay)
						? configDelay(ctx, _event.data, meta)
						: configDelay;
				} else {
					resolvedDelay = utils.isFunction(action.delay)
						? action.delay(ctx, _event.data, meta)
						: action.delay;
				}
				var resolvedTarget = utils.isFunction(action.to)
					? action.to(ctx, _event.data, meta)
					: action.to;
				return _tslib.__assign(_tslib.__assign({}, action), {
					to: resolvedTarget,
					_event: resolvedEvent,
					event: resolvedEvent.data,
					delay: resolvedDelay,
				});
			}
			function sendParent2(event2, options) {
				return send3(
					event2,
					_tslib.__assign(_tslib.__assign({}, options), {
						to: types2.SpecialTargets.Parent,
					})
				);
			}
			function sendUpdate2() {
				return sendParent2(actionTypes.update);
			}
			function respond(event2, options) {
				return send3(
					event2,
					_tslib.__assign(_tslib.__assign({}, options), {
						to: function (_, __, _a) {
							var _event = _a._event;
							return _event.origin;
						},
					})
				);
			}
			var defaultLogExpr = function (context, event2) {
				return {
					context,
					event: event2,
				};
			};
			function log2(expr, label) {
				if (expr === void 0) {
					expr = defaultLogExpr;
				}
				return {
					type: actionTypes.log,
					label,
					expr,
				};
			}
			var resolveLog2 = function (action, ctx, _event) {
				return _tslib.__assign(_tslib.__assign({}, action), {
					value: utils.isString(action.expr)
						? action.expr
						: action.expr(ctx, _event.data, {
								_event,
						  }),
				});
			};
			var cancel3 = function (sendId) {
				return {
					type: actionTypes.cancel,
					sendId,
				};
			};
			function start3(activity) {
				var activityDef = toActivityDefinition2(activity);
				return {
					type: types2.ActionTypes.Start,
					activity: activityDef,
					exec: void 0,
				};
			}
			function stop3(actorRef) {
				var activity = utils.isFunction(actorRef) ? actorRef : toActivityDefinition2(actorRef);
				return {
					type: types2.ActionTypes.Stop,
					activity,
					exec: void 0,
				};
			}
			function resolveStop2(action, context, _event) {
				var actorRefOrString = utils.isFunction(action.activity)
					? action.activity(context, _event.data)
					: action.activity;
				var resolvedActorRef =
					typeof actorRefOrString === "string"
						? {
								id: actorRefOrString,
						  }
						: actorRefOrString;
				var actionObject = {
					type: types2.ActionTypes.Stop,
					activity: resolvedActorRef,
				};
				return actionObject;
			}
			var assign3 = function (assignment) {
				return {
					type: actionTypes.assign,
					assignment,
				};
			};
			function after3(delayRef, id) {
				var idSuffix = id ? "#" + id : "";
				return types2.ActionTypes.After + "(" + delayRef + ")" + idSuffix;
			}
			function done2(id, data) {
				var type = types2.ActionTypes.DoneState + "." + id;
				var eventObject = {
					type,
					data,
				};
				eventObject.toString = function () {
					return type;
				};
				return eventObject;
			}
			function doneInvoke2(id, data) {
				var type = types2.ActionTypes.DoneInvoke + "." + id;
				var eventObject = {
					type,
					data,
				};
				eventObject.toString = function () {
					return type;
				};
				return eventObject;
			}
			function error3(id, data) {
				var type = types2.ActionTypes.ErrorPlatform + "." + id;
				var eventObject = {
					type,
					data,
				};
				eventObject.toString = function () {
					return type;
				};
				return eventObject;
			}
			function pure2(getActions) {
				return {
					type: types2.ActionTypes.Pure,
					get: getActions,
				};
			}
			function forwardTo2(target, options) {
				return send3(
					function (_, event2) {
						return event2;
					},
					_tslib.__assign(_tslib.__assign({}, options), {
						to: target,
					})
				);
			}
			function escalate(errorData, options) {
				return sendParent2(
					function (context, event2, meta) {
						return {
							type: actionTypes.error,
							data: utils.isFunction(errorData) ? errorData(context, event2, meta) : errorData,
						};
					},
					_tslib.__assign(_tslib.__assign({}, options), {
						to: types2.SpecialTargets.Parent,
					})
				);
			}
			function choose2(conds) {
				return {
					type: types2.ActionTypes.Choose,
					conds,
				};
			}
			function resolveActions2(
				machine2,
				currentState,
				currentContext,
				_event,
				actions,
				preserveActionOrder
			) {
				if (preserveActionOrder === void 0) {
					preserveActionOrder = false;
				}
				var _a = _tslib.__read(
						preserveActionOrder
							? [[], actions]
							: utils.partition(actions, function (action) {
									return action.type === actionTypes.assign;
							  }),
						2
					),
					assignActions = _a[0],
					otherActions = _a[1];
				var updatedContext = assignActions.length
					? utils.updateContext(currentContext, _event, assignActions, currentState)
					: currentContext;
				var preservedContexts = preserveActionOrder ? [currentContext] : void 0;
				var resolvedActions = utils.flatten(
					otherActions
						.map(function (actionObject) {
							var _a2;
							switch (actionObject.type) {
								case actionTypes.raise:
									return resolveRaise2(actionObject);
								case actionTypes.send:
									var sendAction = resolveSend2(
										actionObject,
										updatedContext,
										_event,
										machine2.options.delays
									);
									if (!environment.IS_PRODUCTION) {
										utils.warn(
											!utils.isString(actionObject.delay) || typeof sendAction.delay === "number",
											"No delay reference for delay expression '" +
												actionObject.delay +
												"' was found on machine '" +
												machine2.id +
												"'"
										);
									}
									return sendAction;
								case actionTypes.log:
									return resolveLog2(actionObject, updatedContext, _event);
								case actionTypes.choose: {
									var chooseAction = actionObject;
									var matchedActions =
										(_a2 = chooseAction.conds.find(function (condition) {
											var guard = utils.toGuard(condition.cond, machine2.options.guards);
											return (
												!guard ||
												utils.evaluateGuard(machine2, guard, updatedContext, _event, currentState)
											);
										})) === null || _a2 === void 0
											? void 0
											: _a2.actions;
									if (!matchedActions) {
										return [];
									}
									var _b = _tslib.__read(
											resolveActions2(
												machine2,
												currentState,
												updatedContext,
												_event,
												toActionObjects2(utils.toArray(matchedActions), machine2.options.actions),
												preserveActionOrder
											),
											2
										),
										resolvedActionsFromChoose = _b[0],
										resolvedContextFromChoose = _b[1];
									updatedContext = resolvedContextFromChoose;
									preservedContexts === null || preservedContexts === void 0
										? void 0
										: preservedContexts.push(updatedContext);
									return resolvedActionsFromChoose;
								}
								case actionTypes.pure: {
									var matchedActions = actionObject.get(updatedContext, _event.data);
									if (!matchedActions) {
										return [];
									}
									var _c = _tslib.__read(
											resolveActions2(
												machine2,
												currentState,
												updatedContext,
												_event,
												toActionObjects2(utils.toArray(matchedActions), machine2.options.actions),
												preserveActionOrder
											),
											2
										),
										resolvedActionsFromPure = _c[0],
										resolvedContext = _c[1];
									updatedContext = resolvedContext;
									preservedContexts === null || preservedContexts === void 0
										? void 0
										: preservedContexts.push(updatedContext);
									return resolvedActionsFromPure;
								}
								case actionTypes.stop: {
									return resolveStop2(actionObject, updatedContext, _event);
								}
								case actionTypes.assign: {
									updatedContext = utils.updateContext(
										updatedContext,
										_event,
										[actionObject],
										currentState
									);
									preservedContexts === null || preservedContexts === void 0
										? void 0
										: preservedContexts.push(updatedContext);
									break;
								}
								default:
									var resolvedActionObject = toActionObject2(
										actionObject,
										machine2.options.actions
									);
									var exec_1 = resolvedActionObject.exec;
									if (exec_1 && preservedContexts) {
										var contextIndex_1 = preservedContexts.length - 1;
										resolvedActionObject.exec = function (_ctx) {
											var args = [];
											for (var _i = 1; _i < arguments.length; _i++) {
												args[_i - 1] = arguments[_i];
											}
											exec_1 === null || exec_1 === void 0
												? void 0
												: exec_1.apply(
														void 0,
														_tslib.__spreadArray(
															[preservedContexts[contextIndex_1]],
															_tslib.__read(args)
														)
												  );
										};
									}
									return resolvedActionObject;
							}
						})
						.filter(function (a) {
							return !!a;
						})
				);
				return [resolvedActions, updatedContext];
			}
			exports.after = after3;
			exports.assign = assign3;
			exports.cancel = cancel3;
			exports.choose = choose2;
			exports.done = done2;
			exports.doneInvoke = doneInvoke2;
			exports.error = error3;
			exports.escalate = escalate;
			exports.forwardTo = forwardTo2;
			exports.getActionFunction = getActionFunction2;
			exports.initEvent = initEvent2;
			exports.log = log2;
			exports.pure = pure2;
			exports.raise = raise3;
			exports.resolveActions = resolveActions2;
			exports.resolveLog = resolveLog2;
			exports.resolveRaise = resolveRaise2;
			exports.resolveSend = resolveSend2;
			exports.resolveStop = resolveStop2;
			exports.respond = respond;
			exports.send = send3;
			exports.sendParent = sendParent2;
			exports.sendUpdate = sendUpdate2;
			exports.start = start3;
			exports.stop = stop3;
			exports.toActionObject = toActionObject2;
			exports.toActionObjects = toActionObjects2;
			exports.toActivityDefinition = toActivityDefinition2;
		},
	});

	// ../../node_modules/xstate/lib/stateUtils.js
	var require_stateUtils = __commonJS({
		"../../node_modules/xstate/lib/stateUtils.js"(exports) {
			"use strict";
			Object.defineProperty(exports, "__esModule", { value: true });
			var _tslib = require_tslib();
			var utils = require_utils();
			var isLeafNode2 = function (stateNode) {
				return stateNode.type === "atomic" || stateNode.type === "final";
			};
			function getChildren2(stateNode) {
				return utils.keys(stateNode.states).map(function (key) {
					return stateNode.states[key];
				});
			}
			function getAllStateNodes2(stateNode) {
				var stateNodes = [stateNode];
				if (isLeafNode2(stateNode)) {
					return stateNodes;
				}
				return stateNodes.concat(utils.flatten(getChildren2(stateNode).map(getAllStateNodes2)));
			}
			function getConfiguration2(prevStateNodes, stateNodes) {
				var e_1, _a, e_2, _b, e_3, _c, e_4, _d;
				var prevConfiguration = new Set(prevStateNodes);
				var prevAdjList = getAdjList2(prevConfiguration);
				var configuration = new Set(stateNodes);
				try {
					for (
						var configuration_1 = _tslib.__values(configuration),
							configuration_1_1 = configuration_1.next();
						!configuration_1_1.done;
						configuration_1_1 = configuration_1.next()
					) {
						var s = configuration_1_1.value;
						var m = s.parent;
						while (m && !configuration.has(m)) {
							configuration.add(m);
							m = m.parent;
						}
					}
				} catch (e_1_1) {
					e_1 = {
						error: e_1_1,
					};
				} finally {
					try {
						if (configuration_1_1 && !configuration_1_1.done && (_a = configuration_1.return))
							_a.call(configuration_1);
					} finally {
						if (e_1) throw e_1.error;
					}
				}
				var adjList = getAdjList2(configuration);
				try {
					for (
						var configuration_2 = _tslib.__values(configuration),
							configuration_2_1 = configuration_2.next();
						!configuration_2_1.done;
						configuration_2_1 = configuration_2.next()
					) {
						var s = configuration_2_1.value;
						if (s.type === "compound" && (!adjList.get(s) || !adjList.get(s).length)) {
							if (prevAdjList.get(s)) {
								prevAdjList.get(s).forEach(function (sn) {
									return configuration.add(sn);
								});
							} else {
								s.initialStateNodes.forEach(function (sn) {
									return configuration.add(sn);
								});
							}
						} else {
							if (s.type === "parallel") {
								try {
									for (
										var _e = ((e_3 = void 0), _tslib.__values(getChildren2(s))), _f = _e.next();
										!_f.done;
										_f = _e.next()
									) {
										var child = _f.value;
										if (child.type === "history") {
											continue;
										}
										if (!configuration.has(child)) {
											configuration.add(child);
											if (prevAdjList.get(child)) {
												prevAdjList.get(child).forEach(function (sn) {
													return configuration.add(sn);
												});
											} else {
												child.initialStateNodes.forEach(function (sn) {
													return configuration.add(sn);
												});
											}
										}
									}
								} catch (e_3_1) {
									e_3 = {
										error: e_3_1,
									};
								} finally {
									try {
										if (_f && !_f.done && (_c = _e.return)) _c.call(_e);
									} finally {
										if (e_3) throw e_3.error;
									}
								}
							}
						}
					}
				} catch (e_2_1) {
					e_2 = {
						error: e_2_1,
					};
				} finally {
					try {
						if (configuration_2_1 && !configuration_2_1.done && (_b = configuration_2.return))
							_b.call(configuration_2);
					} finally {
						if (e_2) throw e_2.error;
					}
				}
				try {
					for (
						var configuration_3 = _tslib.__values(configuration),
							configuration_3_1 = configuration_3.next();
						!configuration_3_1.done;
						configuration_3_1 = configuration_3.next()
					) {
						var s = configuration_3_1.value;
						var m = s.parent;
						while (m && !configuration.has(m)) {
							configuration.add(m);
							m = m.parent;
						}
					}
				} catch (e_4_1) {
					e_4 = {
						error: e_4_1,
					};
				} finally {
					try {
						if (configuration_3_1 && !configuration_3_1.done && (_d = configuration_3.return))
							_d.call(configuration_3);
					} finally {
						if (e_4) throw e_4.error;
					}
				}
				return configuration;
			}
			function getValueFromAdj2(baseNode, adjList) {
				var childStateNodes = adjList.get(baseNode);
				if (!childStateNodes) {
					return {};
				}
				if (baseNode.type === "compound") {
					var childStateNode = childStateNodes[0];
					if (childStateNode) {
						if (isLeafNode2(childStateNode)) {
							return childStateNode.key;
						}
					} else {
						return {};
					}
				}
				var stateValue = {};
				childStateNodes.forEach(function (csn) {
					stateValue[csn.key] = getValueFromAdj2(csn, adjList);
				});
				return stateValue;
			}
			function getAdjList2(configuration) {
				var e_5, _a;
				var adjList = new Map();
				try {
					for (
						var configuration_4 = _tslib.__values(configuration),
							configuration_4_1 = configuration_4.next();
						!configuration_4_1.done;
						configuration_4_1 = configuration_4.next()
					) {
						var s = configuration_4_1.value;
						if (!adjList.has(s)) {
							adjList.set(s, []);
						}
						if (s.parent) {
							if (!adjList.has(s.parent)) {
								adjList.set(s.parent, []);
							}
							adjList.get(s.parent).push(s);
						}
					}
				} catch (e_5_1) {
					e_5 = {
						error: e_5_1,
					};
				} finally {
					try {
						if (configuration_4_1 && !configuration_4_1.done && (_a = configuration_4.return))
							_a.call(configuration_4);
					} finally {
						if (e_5) throw e_5.error;
					}
				}
				return adjList;
			}
			function getValue2(rootNode, configuration) {
				var config = getConfiguration2([rootNode], configuration);
				return getValueFromAdj2(rootNode, getAdjList2(config));
			}
			function has2(iterable, item) {
				if (Array.isArray(iterable)) {
					return iterable.some(function (member) {
						return member === item;
					});
				}
				if (iterable instanceof Set) {
					return iterable.has(item);
				}
				return false;
			}
			function nextEvents2(configuration) {
				return _tslib.__spreadArray(
					[],
					_tslib.__read(
						new Set(
							utils.flatten(
								_tslib.__spreadArray(
									[],
									_tslib.__read(
										configuration.map(function (sn) {
											return sn.ownEvents;
										})
									)
								)
							)
						)
					)
				);
			}
			function isInFinalState2(configuration, stateNode) {
				if (stateNode.type === "compound") {
					return getChildren2(stateNode).some(function (s) {
						return s.type === "final" && has2(configuration, s);
					});
				}
				if (stateNode.type === "parallel") {
					return getChildren2(stateNode).every(function (sn) {
						return isInFinalState2(configuration, sn);
					});
				}
				return false;
			}
			function getMeta2(configuration) {
				if (configuration === void 0) {
					configuration = [];
				}
				return configuration.reduce(function (acc, stateNode) {
					if (stateNode.meta !== void 0) {
						acc[stateNode.id] = stateNode.meta;
					}
					return acc;
				}, {});
			}
			exports.getAdjList = getAdjList2;
			exports.getAllStateNodes = getAllStateNodes2;
			exports.getChildren = getChildren2;
			exports.getConfiguration = getConfiguration2;
			exports.getMeta = getMeta2;
			exports.getValue = getValue2;
			exports.has = has2;
			exports.isInFinalState = isInFinalState2;
			exports.isLeafNode = isLeafNode2;
			exports.nextEvents = nextEvents2;
		},
	});

	// ../../node_modules/xstate/lib/State.js
	var require_State = __commonJS({
		"../../node_modules/xstate/lib/State.js"(exports) {
			"use strict";
			Object.defineProperty(exports, "__esModule", { value: true });
			var _tslib = require_tslib();
			var constants = require_constants();
			var utils = require_utils();
			var stateUtils = require_stateUtils();
			var actions = require_actions();
			function stateValuesEqual2(a, b) {
				if (a === b) {
					return true;
				}
				if (a === void 0 || b === void 0) {
					return false;
				}
				if (utils.isString(a) || utils.isString(b)) {
					return a === b;
				}
				var aKeys = utils.keys(a);
				var bKeys = utils.keys(b);
				return (
					aKeys.length === bKeys.length &&
					aKeys.every(function (key) {
						return stateValuesEqual2(a[key], b[key]);
					})
				);
			}
			function isState2(state) {
				if (utils.isString(state)) {
					return false;
				}
				return "value" in state && "history" in state;
			}
			function bindActionToState2(action, state) {
				var exec = action.exec;
				var boundAction = _tslib.__assign(_tslib.__assign({}, action), {
					exec:
						exec !== void 0
							? function () {
									return exec(state.context, state.event, {
										action,
										state,
										_event: state._event,
									});
							  }
							: void 0,
				});
				return boundAction;
			}
			var State2 = /* @__PURE__ */ (function () {
				function State3(config) {
					var _this = this;
					var _a;
					this.actions = [];
					this.activities = constants.EMPTY_ACTIVITY_MAP;
					this.meta = {};
					this.events = [];
					this.value = config.value;
					this.context = config.context;
					this._event = config._event;
					this._sessionid = config._sessionid;
					this.event = this._event.data;
					this.historyValue = config.historyValue;
					this.history = config.history;
					this.actions = config.actions || [];
					this.activities = config.activities || constants.EMPTY_ACTIVITY_MAP;
					this.meta = stateUtils.getMeta(config.configuration);
					this.events = config.events || [];
					this.matches = this.matches.bind(this);
					this.toStrings = this.toStrings.bind(this);
					this.configuration = config.configuration;
					this.transitions = config.transitions;
					this.children = config.children;
					this.done = !!config.done;
					this.tags = (_a = config.tags) !== null && _a !== void 0 ? _a : new Set();
					Object.defineProperty(this, "nextEvents", {
						get: function () {
							return stateUtils.nextEvents(_this.configuration);
						},
					});
				}
				State3.from = function (stateValue, context) {
					if (stateValue instanceof State3) {
						if (stateValue.context !== context) {
							return new State3({
								value: stateValue.value,
								context,
								_event: stateValue._event,
								_sessionid: null,
								historyValue: stateValue.historyValue,
								history: stateValue.history,
								actions: [],
								activities: stateValue.activities,
								meta: {},
								events: [],
								configuration: [],
								transitions: [],
								children: {},
							});
						}
						return stateValue;
					}
					var _event = actions.initEvent;
					return new State3({
						value: stateValue,
						context,
						_event,
						_sessionid: null,
						historyValue: void 0,
						history: void 0,
						actions: [],
						activities: void 0,
						meta: void 0,
						events: [],
						configuration: [],
						transitions: [],
						children: {},
					});
				};
				State3.create = function (config) {
					return new State3(config);
				};
				State3.inert = function (stateValue, context) {
					if (stateValue instanceof State3) {
						if (!stateValue.actions.length) {
							return stateValue;
						}
						var _event = actions.initEvent;
						return new State3({
							value: stateValue.value,
							context,
							_event,
							_sessionid: null,
							historyValue: stateValue.historyValue,
							history: stateValue.history,
							activities: stateValue.activities,
							configuration: stateValue.configuration,
							transitions: [],
							children: {},
						});
					}
					return State3.from(stateValue, context);
				};
				State3.prototype.toStrings = function (stateValue, delimiter) {
					var _this = this;
					if (stateValue === void 0) {
						stateValue = this.value;
					}
					if (delimiter === void 0) {
						delimiter = ".";
					}
					if (utils.isString(stateValue)) {
						return [stateValue];
					}
					var valueKeys = utils.keys(stateValue);
					return valueKeys.concat.apply(
						valueKeys,
						_tslib.__spreadArray(
							[],
							_tslib.__read(
								valueKeys.map(function (key) {
									return _this.toStrings(stateValue[key], delimiter).map(function (s) {
										return key + delimiter + s;
									});
								})
							)
						)
					);
				};
				State3.prototype.toJSON = function () {
					var _a = this,
						configuration = _a.configuration,
						transitions = _a.transitions,
						tags = _a.tags,
						jsonValues = _tslib.__rest(_a, ["configuration", "transitions", "tags"]);
					return _tslib.__assign(_tslib.__assign({}, jsonValues), {
						tags: Array.from(tags),
					});
				};
				State3.prototype.matches = function (parentStateValue) {
					return utils.matchesState(parentStateValue, this.value);
				};
				State3.prototype.hasTag = function (tag) {
					return this.tags.has(tag);
				};
				return State3;
			})();
			exports.State = State2;
			exports.bindActionToState = bindActionToState2;
			exports.isState = isState2;
			exports.stateValuesEqual = stateValuesEqual2;
		},
	});

	// ../../node_modules/xstate/lib/serviceScope.js
	var require_serviceScope = __commonJS({
		"../../node_modules/xstate/lib/serviceScope.js"(exports) {
			"use strict";
			Object.defineProperty(exports, "__esModule", { value: true });
			var serviceStack2 = [];
			var provide2 = function (service, fn) {
				serviceStack2.push(service);
				var result = fn(service);
				serviceStack2.pop();
				return result;
			};
			var consume2 = function (fn) {
				return fn(serviceStack2[serviceStack2.length - 1]);
			};
			exports.consume = consume2;
			exports.provide = provide2;
		},
	});

	// ../../node_modules/xstate/lib/Actor.js
	var require_Actor = __commonJS({
		"../../node_modules/xstate/lib/Actor.js"(exports) {
			"use strict";
			Object.defineProperty(exports, "__esModule", { value: true });
			var _tslib = require_tslib();
			var utils = require_utils();
			var serviceScope = require_serviceScope();
			function createNullActor2(id) {
				return {
					id,
					send: function () {
						return void 0;
					},
					subscribe: function () {
						return {
							unsubscribe: function () {
								return void 0;
							},
						};
					},
					getSnapshot: function () {
						return void 0;
					},
					toJSON: function () {
						return {
							id,
						};
					},
				};
			}
			function createInvocableActor2(invokeDefinition, machine2, context, _event) {
				var _a;
				var invokeSrc = utils.toInvokeSource(invokeDefinition.src);
				var serviceCreator =
					(_a = machine2 === null || machine2 === void 0 ? void 0 : machine2.options.services) ===
						null || _a === void 0
						? void 0
						: _a[invokeSrc.type];
				var resolvedData = invokeDefinition.data
					? utils.mapContext(invokeDefinition.data, context, _event)
					: void 0;
				var tempActor = serviceCreator
					? createDeferredActor2(serviceCreator, invokeDefinition.id, resolvedData)
					: createNullActor2(invokeDefinition.id);
				tempActor.meta = invokeDefinition;
				return tempActor;
			}
			function createDeferredActor2(entity, id, data) {
				var tempActor = createNullActor2(id);
				tempActor.deferred = true;
				if (utils.isMachine(entity)) {
					var initialState_1 = (tempActor.state = serviceScope.provide(void 0, function () {
						return (data ? entity.withContext(data) : entity).initialState;
					}));
					tempActor.getSnapshot = function () {
						return initialState_1;
					};
				}
				return tempActor;
			}
			function isActor3(item) {
				try {
					return typeof item.send === "function";
				} catch (e) {
					return false;
				}
			}
			function isSpawnedActor2(item) {
				return isActor3(item) && "id" in item;
			}
			function toActorRef2(actorRefLike) {
				return _tslib.__assign(
					{
						subscribe: function () {
							return {
								unsubscribe: function () {
									return void 0;
								},
							};
						},
						id: "anonymous",
						getSnapshot: function () {
							return void 0;
						},
					},
					actorRefLike
				);
			}
			exports.createDeferredActor = createDeferredActor2;
			exports.createInvocableActor = createInvocableActor2;
			exports.createNullActor = createNullActor2;
			exports.isActor = isActor3;
			exports.isSpawnedActor = isSpawnedActor2;
			exports.toActorRef = toActorRef2;
		},
	});

	// ../../node_modules/xstate/lib/invokeUtils.js
	var require_invokeUtils = __commonJS({
		"../../node_modules/xstate/lib/invokeUtils.js"(exports) {
			"use strict";
			Object.defineProperty(exports, "__esModule", { value: true });
			var _tslib = require_tslib();
			require_environment();
			require_utils();
			require_types();
			var actionTypes = require_actionTypes();
			function toInvokeSource3(src) {
				if (typeof src === "string") {
					var simpleSrc = {
						type: src,
					};
					simpleSrc.toString = function () {
						return src;
					};
					return simpleSrc;
				}
				return src;
			}
			function toInvokeDefinition2(invokeConfig) {
				return _tslib.__assign(
					_tslib.__assign(
						{
							type: actionTypes.invoke,
						},
						invokeConfig
					),
					{
						toJSON: function () {
							var onDone = invokeConfig.onDone,
								onError = invokeConfig.onError,
								invokeDef = _tslib.__rest(invokeConfig, ["onDone", "onError"]);
							return _tslib.__assign(_tslib.__assign({}, invokeDef), {
								type: actionTypes.invoke,
								src: toInvokeSource3(invokeConfig.src),
							});
						},
					}
				);
			}
			exports.toInvokeDefinition = toInvokeDefinition2;
			exports.toInvokeSource = toInvokeSource3;
		},
	});

	// ../../node_modules/xstate/lib/StateNode.js
	var require_StateNode = __commonJS({
		"../../node_modules/xstate/lib/StateNode.js"(exports) {
			"use strict";
			Object.defineProperty(exports, "__esModule", { value: true });
			var _tslib = require_tslib();
			var constants = require_constants();
			var environment = require_environment();
			var utils = require_utils();
			var types2 = require_types();
			var stateUtils = require_stateUtils();
			var actionTypes = require_actionTypes();
			var actions = require_actions();
			var State2 = require_State();
			var Actor = require_Actor();
			var invokeUtils = require_invokeUtils();
			var NULL_EVENT2 = "";
			var STATE_IDENTIFIER2 = "#";
			var WILDCARD2 = "*";
			var EMPTY_OBJECT2 = {};
			var isStateId2 = function (str) {
				return str[0] === STATE_IDENTIFIER2;
			};
			var createDefaultOptions2 = function () {
				return {
					actions: {},
					guards: {},
					services: {},
					activities: {},
					delays: {},
				};
			};
			var validateArrayifiedTransitions2 = function (stateNode, event2, transitions) {
				var hasNonLastUnguardedTarget = transitions.slice(0, -1).some(function (transition) {
					return (
						!("cond" in transition) &&
						!("in" in transition) &&
						(utils.isString(transition.target) || utils.isMachine(transition.target))
					);
				});
				var eventText = event2 === NULL_EVENT2 ? "the transient event" : "event '" + event2 + "'";
				utils.warn(
					!hasNonLastUnguardedTarget,
					"One or more transitions for " +
						eventText +
						" on state '" +
						stateNode.id +
						"' are unreachable. Make sure that the default transition is the last one defined."
				);
			};
			var StateNode2 = /* @__PURE__ */ (function () {
				function StateNode3(config, options, _context) {
					var _this = this;
					if (_context === void 0) {
						_context = config.context;
					}
					var _a;
					this.config = config;
					this._context = _context;
					this.order = -1;
					this.__xstatenode = true;
					this.__cache = {
						events: void 0,
						relativeValue: new Map(),
						initialStateValue: void 0,
						initialState: void 0,
						on: void 0,
						transitions: void 0,
						candidates: {},
						delayedTransitions: void 0,
					};
					this.idMap = {};
					this.tags = [];
					this.options = Object.assign(createDefaultOptions2(), options);
					this.parent = this.options._parent;
					this.key = this.config.key || this.options._key || this.config.id || "(machine)";
					this.machine = this.parent ? this.parent.machine : this;
					this.path = this.parent ? this.parent.path.concat(this.key) : [];
					this.delimiter =
						this.config.delimiter ||
						(this.parent ? this.parent.delimiter : constants.STATE_DELIMITER);
					this.id =
						this.config.id ||
						_tslib.__spreadArray([this.machine.key], _tslib.__read(this.path)).join(this.delimiter);
					this.version = this.parent ? this.parent.version : this.config.version;
					this.type =
						this.config.type ||
						(this.config.parallel
							? "parallel"
							: this.config.states && utils.keys(this.config.states).length
							? "compound"
							: this.config.history
							? "history"
							: "atomic");
					this.schema = this.parent
						? this.machine.schema
						: (_a = this.config.schema) !== null && _a !== void 0
						? _a
						: {};
					if (!environment.IS_PRODUCTION) {
						utils.warn(
							!("parallel" in this.config),
							'The "parallel" property is deprecated and will be removed in version 4.1. ' +
								(this.config.parallel
									? "Replace with `type: 'parallel'`"
									: "Use `type: '" + this.type + "'`") +
								" in the config for state node '" +
								this.id +
								"' instead."
						);
					}
					this.initial = this.config.initial;
					this.states = this.config.states
						? utils.mapValues(this.config.states, function (stateConfig, key) {
								var _a2;
								var stateNode = new StateNode3(stateConfig, {
									_parent: _this,
									_key: key,
								});
								Object.assign(
									_this.idMap,
									_tslib.__assign(
										((_a2 = {}), (_a2[stateNode.id] = stateNode), _a2),
										stateNode.idMap
									)
								);
								return stateNode;
						  })
						: EMPTY_OBJECT2;
					var order = 0;
					function dfs(stateNode) {
						var e_1, _a2;
						stateNode.order = order++;
						try {
							for (
								var _b = _tslib.__values(stateUtils.getChildren(stateNode)), _c = _b.next();
								!_c.done;
								_c = _b.next()
							) {
								var child = _c.value;
								dfs(child);
							}
						} catch (e_1_1) {
							e_1 = {
								error: e_1_1,
							};
						} finally {
							try {
								if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
							} finally {
								if (e_1) throw e_1.error;
							}
						}
					}
					dfs(this);
					this.history = this.config.history === true ? "shallow" : this.config.history || false;
					this._transient =
						!!this.config.always ||
						(!this.config.on
							? false
							: Array.isArray(this.config.on)
							? this.config.on.some(function (_a2) {
									var event2 = _a2.event;
									return event2 === NULL_EVENT2;
							  })
							: NULL_EVENT2 in this.config.on);
					this.strict = !!this.config.strict;
					this.onEntry = utils
						.toArray(this.config.entry || this.config.onEntry)
						.map(function (action) {
							return actions.toActionObject(action);
						});
					this.onExit = utils
						.toArray(this.config.exit || this.config.onExit)
						.map(function (action) {
							return actions.toActionObject(action);
						});
					this.meta = this.config.meta;
					this.doneData = this.type === "final" ? this.config.data : void 0;
					this.invoke = utils.toArray(this.config.invoke).map(function (invokeConfig, i) {
						var _a2, _b;
						if (utils.isMachine(invokeConfig)) {
							_this.machine.options.services = _tslib.__assign(
								((_a2 = {}), (_a2[invokeConfig.id] = invokeConfig), _a2),
								_this.machine.options.services
							);
							return invokeUtils.toInvokeDefinition({
								src: invokeConfig.id,
								id: invokeConfig.id,
							});
						} else if (utils.isString(invokeConfig.src)) {
							return invokeUtils.toInvokeDefinition(
								_tslib.__assign(_tslib.__assign({}, invokeConfig), {
									id: invokeConfig.id || invokeConfig.src,
									src: invokeConfig.src,
								})
							);
						} else if (utils.isMachine(invokeConfig.src) || utils.isFunction(invokeConfig.src)) {
							var invokeSrc = _this.id + ":invocation[" + i + "]";
							_this.machine.options.services = _tslib.__assign(
								((_b = {}), (_b[invokeSrc] = invokeConfig.src), _b),
								_this.machine.options.services
							);
							return invokeUtils.toInvokeDefinition(
								_tslib.__assign(
									_tslib.__assign(
										{
											id: invokeSrc,
										},
										invokeConfig
									),
									{
										src: invokeSrc,
									}
								)
							);
						} else {
							var invokeSource = invokeConfig.src;
							return invokeUtils.toInvokeDefinition(
								_tslib.__assign(
									_tslib.__assign(
										{
											id: invokeSource.type,
										},
										invokeConfig
									),
									{
										src: invokeSource,
									}
								)
							);
						}
					});
					this.activities = utils
						.toArray(this.config.activities)
						.concat(this.invoke)
						.map(function (activity) {
							return actions.toActivityDefinition(activity);
						});
					this.transition = this.transition.bind(this);
					this.tags = utils.toArray(this.config.tags);
				}
				StateNode3.prototype._init = function () {
					if (this.__cache.transitions) {
						return;
					}
					stateUtils.getAllStateNodes(this).forEach(function (stateNode) {
						return stateNode.on;
					});
				};
				StateNode3.prototype.withConfig = function (options, context) {
					var _a = this.options,
						actions2 = _a.actions,
						activities = _a.activities,
						guards = _a.guards,
						services = _a.services,
						delays = _a.delays;
					return new StateNode3(
						this.config,
						{
							actions: _tslib.__assign(_tslib.__assign({}, actions2), options.actions),
							activities: _tslib.__assign(_tslib.__assign({}, activities), options.activities),
							guards: _tslib.__assign(_tslib.__assign({}, guards), options.guards),
							services: _tslib.__assign(_tslib.__assign({}, services), options.services),
							delays: _tslib.__assign(_tslib.__assign({}, delays), options.delays),
						},
						context !== null && context !== void 0 ? context : this.context
					);
				};
				StateNode3.prototype.withContext = function (context) {
					return new StateNode3(this.config, this.options, context);
				};
				Object.defineProperty(StateNode3.prototype, "context", {
					get: function () {
						return utils.isFunction(this._context) ? this._context() : this._context;
					},
					enumerable: false,
					configurable: true,
				});
				Object.defineProperty(StateNode3.prototype, "definition", {
					get: function () {
						return {
							id: this.id,
							key: this.key,
							version: this.version,
							context: this.context,
							type: this.type,
							initial: this.initial,
							history: this.history,
							states: utils.mapValues(this.states, function (state) {
								return state.definition;
							}),
							on: this.on,
							transitions: this.transitions,
							entry: this.onEntry,
							exit: this.onExit,
							activities: this.activities || [],
							meta: this.meta,
							order: this.order || -1,
							data: this.doneData,
							invoke: this.invoke,
						};
					},
					enumerable: false,
					configurable: true,
				});
				StateNode3.prototype.toJSON = function () {
					return this.definition;
				};
				Object.defineProperty(StateNode3.prototype, "on", {
					get: function () {
						if (this.__cache.on) {
							return this.__cache.on;
						}
						var transitions = this.transitions;
						return (this.__cache.on = transitions.reduce(function (map, transition) {
							map[transition.eventType] = map[transition.eventType] || [];
							map[transition.eventType].push(transition);
							return map;
						}, {}));
					},
					enumerable: false,
					configurable: true,
				});
				Object.defineProperty(StateNode3.prototype, "after", {
					get: function () {
						return (
							this.__cache.delayedTransitions ||
							((this.__cache.delayedTransitions = this.getDelayedTransitions()),
							this.__cache.delayedTransitions)
						);
					},
					enumerable: false,
					configurable: true,
				});
				Object.defineProperty(StateNode3.prototype, "transitions", {
					get: function () {
						return (
							this.__cache.transitions ||
							((this.__cache.transitions = this.formatTransitions()), this.__cache.transitions)
						);
					},
					enumerable: false,
					configurable: true,
				});
				StateNode3.prototype.getCandidates = function (eventName) {
					if (this.__cache.candidates[eventName]) {
						return this.__cache.candidates[eventName];
					}
					var transient = eventName === NULL_EVENT2;
					var candidates = this.transitions.filter(function (transition) {
						var sameEventType = transition.eventType === eventName;
						return transient ? sameEventType : sameEventType || transition.eventType === WILDCARD2;
					});
					this.__cache.candidates[eventName] = candidates;
					return candidates;
				};
				StateNode3.prototype.getDelayedTransitions = function () {
					var _this = this;
					var afterConfig = this.config.after;
					if (!afterConfig) {
						return [];
					}
					var mutateEntryExit = function (delay, i) {
						var delayRef = utils.isFunction(delay) ? _this.id + ":delay[" + i + "]" : delay;
						var eventType = actions.after(delayRef, _this.id);
						_this.onEntry.push(
							actions.send(eventType, {
								delay,
							})
						);
						_this.onExit.push(actions.cancel(eventType));
						return eventType;
					};
					var delayedTransitions = utils.isArray(afterConfig)
						? afterConfig.map(function (transition, i) {
								var eventType = mutateEntryExit(transition.delay, i);
								return _tslib.__assign(_tslib.__assign({}, transition), {
									event: eventType,
								});
						  })
						: utils.flatten(
								utils.keys(afterConfig).map(function (delay, i) {
									var configTransition = afterConfig[delay];
									var resolvedTransition = utils.isString(configTransition)
										? {
												target: configTransition,
										  }
										: configTransition;
									var resolvedDelay = !isNaN(+delay) ? +delay : delay;
									var eventType = mutateEntryExit(resolvedDelay, i);
									return utils.toArray(resolvedTransition).map(function (transition) {
										return _tslib.__assign(_tslib.__assign({}, transition), {
											event: eventType,
											delay: resolvedDelay,
										});
									});
								})
						  );
					return delayedTransitions.map(function (delayedTransition) {
						var delay = delayedTransition.delay;
						return _tslib.__assign(_tslib.__assign({}, _this.formatTransition(delayedTransition)), {
							delay,
						});
					});
				};
				StateNode3.prototype.getStateNodes = function (state) {
					var _a;
					var _this = this;
					if (!state) {
						return [];
					}
					var stateValue =
						state instanceof State2.State ? state.value : utils.toStateValue(state, this.delimiter);
					if (utils.isString(stateValue)) {
						var initialStateValue = this.getStateNode(stateValue).initial;
						return initialStateValue !== void 0
							? this.getStateNodes(((_a = {}), (_a[stateValue] = initialStateValue), _a))
							: [this, this.states[stateValue]];
					}
					var subStateKeys = utils.keys(stateValue);
					var subStateNodes = subStateKeys.map(function (subStateKey) {
						return _this.getStateNode(subStateKey);
					});
					subStateNodes.push(this);
					return subStateNodes.concat(
						subStateKeys.reduce(function (allSubStateNodes, subStateKey) {
							var subStateNode = _this
								.getStateNode(subStateKey)
								.getStateNodes(stateValue[subStateKey]);
							return allSubStateNodes.concat(subStateNode);
						}, [])
					);
				};
				StateNode3.prototype.handles = function (event2) {
					var eventType = utils.getEventType(event2);
					return this.events.includes(eventType);
				};
				StateNode3.prototype.resolveState = function (state) {
					var configuration = Array.from(
						stateUtils.getConfiguration([], this.getStateNodes(state.value))
					);
					return new State2.State(
						_tslib.__assign(_tslib.__assign({}, state), {
							value: this.resolve(state.value),
							configuration,
							done: stateUtils.isInFinalState(configuration, this),
						})
					);
				};
				StateNode3.prototype.transitionLeafNode = function (stateValue, state, _event) {
					var stateNode = this.getStateNode(stateValue);
					var next = stateNode.next(state, _event);
					if (!next || !next.transitions.length) {
						return this.next(state, _event);
					}
					return next;
				};
				StateNode3.prototype.transitionCompoundNode = function (stateValue, state, _event) {
					var subStateKeys = utils.keys(stateValue);
					var stateNode = this.getStateNode(subStateKeys[0]);
					var next = stateNode._transition(stateValue[subStateKeys[0]], state, _event);
					if (!next || !next.transitions.length) {
						return this.next(state, _event);
					}
					return next;
				};
				StateNode3.prototype.transitionParallelNode = function (stateValue, state, _event) {
					var e_2, _a;
					var transitionMap = {};
					try {
						for (
							var _b = _tslib.__values(utils.keys(stateValue)), _c = _b.next();
							!_c.done;
							_c = _b.next()
						) {
							var subStateKey = _c.value;
							var subStateValue = stateValue[subStateKey];
							if (!subStateValue) {
								continue;
							}
							var subStateNode = this.getStateNode(subStateKey);
							var next = subStateNode._transition(subStateValue, state, _event);
							if (next) {
								transitionMap[subStateKey] = next;
							}
						}
					} catch (e_2_1) {
						e_2 = {
							error: e_2_1,
						};
					} finally {
						try {
							if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
						} finally {
							if (e_2) throw e_2.error;
						}
					}
					var stateTransitions = utils.keys(transitionMap).map(function (key) {
						return transitionMap[key];
					});
					var enabledTransitions = utils.flatten(
						stateTransitions.map(function (st) {
							return st.transitions;
						})
					);
					var willTransition = stateTransitions.some(function (st) {
						return st.transitions.length > 0;
					});
					if (!willTransition) {
						return this.next(state, _event);
					}
					var entryNodes = utils.flatten(
						stateTransitions.map(function (t) {
							return t.entrySet;
						})
					);
					var configuration = utils.flatten(
						utils.keys(transitionMap).map(function (key) {
							return transitionMap[key].configuration;
						})
					);
					return {
						transitions: enabledTransitions,
						entrySet: entryNodes,
						exitSet: utils.flatten(
							stateTransitions.map(function (t) {
								return t.exitSet;
							})
						),
						configuration,
						source: state,
						actions: utils.flatten(
							utils.keys(transitionMap).map(function (key) {
								return transitionMap[key].actions;
							})
						),
					};
				};
				StateNode3.prototype._transition = function (stateValue, state, _event) {
					if (utils.isString(stateValue)) {
						return this.transitionLeafNode(stateValue, state, _event);
					}
					if (utils.keys(stateValue).length === 1) {
						return this.transitionCompoundNode(stateValue, state, _event);
					}
					return this.transitionParallelNode(stateValue, state, _event);
				};
				StateNode3.prototype.next = function (state, _event) {
					var e_3, _a;
					var _this = this;
					var eventName = _event.name;
					var actions2 = [];
					var nextStateNodes = [];
					var selectedTransition;
					try {
						for (
							var _b = _tslib.__values(this.getCandidates(eventName)), _c = _b.next();
							!_c.done;
							_c = _b.next()
						) {
							var candidate = _c.value;
							var cond = candidate.cond,
								stateIn = candidate.in;
							var resolvedContext = state.context;
							var isInState = stateIn
								? utils.isString(stateIn) && isStateId2(stateIn)
									? state.matches(
											utils.toStateValue(this.getStateNodeById(stateIn).path, this.delimiter)
									  )
									: utils.matchesState(
											utils.toStateValue(stateIn, this.delimiter),
											utils.path(this.path.slice(0, -2))(state.value)
									  )
								: true;
							var guardPassed = false;
							try {
								guardPassed =
									!cond || utils.evaluateGuard(this.machine, cond, resolvedContext, _event, state);
							} catch (err) {
								throw new Error(
									"Unable to evaluate guard '" +
										(cond.name || cond.type) +
										"' in transition for event '" +
										eventName +
										"' in state node '" +
										this.id +
										"':\n" +
										err.message
								);
							}
							if (guardPassed && isInState) {
								if (candidate.target !== void 0) {
									nextStateNodes = candidate.target;
								}
								actions2.push.apply(
									actions2,
									_tslib.__spreadArray([], _tslib.__read(candidate.actions))
								);
								selectedTransition = candidate;
								break;
							}
						}
					} catch (e_3_1) {
						e_3 = {
							error: e_3_1,
						};
					} finally {
						try {
							if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
						} finally {
							if (e_3) throw e_3.error;
						}
					}
					if (!selectedTransition) {
						return void 0;
					}
					if (!nextStateNodes.length) {
						return {
							transitions: [selectedTransition],
							entrySet: [],
							exitSet: [],
							configuration: state.value ? [this] : [],
							source: state,
							actions: actions2,
						};
					}
					var allNextStateNodes = utils.flatten(
						nextStateNodes.map(function (stateNode) {
							return _this.getRelativeStateNodes(stateNode, state.historyValue);
						})
					);
					var isInternal = !!selectedTransition.internal;
					var reentryNodes = isInternal
						? []
						: utils.flatten(
								allNextStateNodes.map(function (n) {
									return _this.nodesFromChild(n);
								})
						  );
					return {
						transitions: [selectedTransition],
						entrySet: reentryNodes,
						exitSet: isInternal ? [] : [this],
						configuration: allNextStateNodes,
						source: state,
						actions: actions2,
					};
				};
				StateNode3.prototype.nodesFromChild = function (childStateNode) {
					if (childStateNode.escapes(this)) {
						return [];
					}
					var nodes = [];
					var marker = childStateNode;
					while (marker && marker !== this) {
						nodes.push(marker);
						marker = marker.parent;
					}
					nodes.push(this);
					return nodes;
				};
				StateNode3.prototype.escapes = function (stateNode) {
					if (this === stateNode) {
						return false;
					}
					var parent = this.parent;
					while (parent) {
						if (parent === stateNode) {
							return false;
						}
						parent = parent.parent;
					}
					return true;
				};
				StateNode3.prototype.getActions = function (transition, currentContext, _event, prevState) {
					var e_4, _a, e_5, _b;
					var prevConfig = stateUtils.getConfiguration(
						[],
						prevState ? this.getStateNodes(prevState.value) : [this]
					);
					var resolvedConfig = transition.configuration.length
						? stateUtils.getConfiguration(prevConfig, transition.configuration)
						: prevConfig;
					try {
						for (
							var resolvedConfig_1 = _tslib.__values(resolvedConfig),
								resolvedConfig_1_1 = resolvedConfig_1.next();
							!resolvedConfig_1_1.done;
							resolvedConfig_1_1 = resolvedConfig_1.next()
						) {
							var sn = resolvedConfig_1_1.value;
							if (!stateUtils.has(prevConfig, sn)) {
								transition.entrySet.push(sn);
							}
						}
					} catch (e_4_1) {
						e_4 = {
							error: e_4_1,
						};
					} finally {
						try {
							if (resolvedConfig_1_1 && !resolvedConfig_1_1.done && (_a = resolvedConfig_1.return))
								_a.call(resolvedConfig_1);
						} finally {
							if (e_4) throw e_4.error;
						}
					}
					try {
						for (
							var prevConfig_1 = _tslib.__values(prevConfig), prevConfig_1_1 = prevConfig_1.next();
							!prevConfig_1_1.done;
							prevConfig_1_1 = prevConfig_1.next()
						) {
							var sn = prevConfig_1_1.value;
							if (
								!stateUtils.has(resolvedConfig, sn) ||
								stateUtils.has(transition.exitSet, sn.parent)
							) {
								transition.exitSet.push(sn);
							}
						}
					} catch (e_5_1) {
						e_5 = {
							error: e_5_1,
						};
					} finally {
						try {
							if (prevConfig_1_1 && !prevConfig_1_1.done && (_b = prevConfig_1.return))
								_b.call(prevConfig_1);
						} finally {
							if (e_5) throw e_5.error;
						}
					}
					if (!transition.source) {
						transition.exitSet = [];
						transition.entrySet.push(this);
					}
					var doneEvents = utils.flatten(
						transition.entrySet.map(function (sn2) {
							var events = [];
							if (sn2.type !== "final") {
								return events;
							}
							var parent = sn2.parent;
							if (!parent.parent) {
								return events;
							}
							events.push(
								actions.done(sn2.id, sn2.doneData),
								actions.done(
									parent.id,
									sn2.doneData ? utils.mapContext(sn2.doneData, currentContext, _event) : void 0
								)
							);
							var grandparent = parent.parent;
							if (grandparent.type === "parallel") {
								if (
									stateUtils.getChildren(grandparent).every(function (parentNode) {
										return stateUtils.isInFinalState(transition.configuration, parentNode);
									})
								) {
									events.push(actions.done(grandparent.id));
								}
							}
							return events;
						})
					);
					transition.exitSet.sort(function (a, b) {
						return b.order - a.order;
					});
					transition.entrySet.sort(function (a, b) {
						return a.order - b.order;
					});
					var entryStates = new Set(transition.entrySet);
					var exitStates = new Set(transition.exitSet);
					var _c = _tslib.__read(
							[
								utils
									.flatten(
										Array.from(entryStates).map(function (stateNode) {
											return _tslib.__spreadArray(
												_tslib.__spreadArray(
													[],
													_tslib.__read(
														stateNode.activities.map(function (activity) {
															return actions.start(activity);
														})
													)
												),
												_tslib.__read(stateNode.onEntry)
											);
										})
									)
									.concat(doneEvents.map(actions.raise)),
								utils.flatten(
									Array.from(exitStates).map(function (stateNode) {
										return _tslib.__spreadArray(
											_tslib.__spreadArray([], _tslib.__read(stateNode.onExit)),
											_tslib.__read(
												stateNode.activities.map(function (activity) {
													return actions.stop(activity);
												})
											)
										);
									})
								),
							],
							2
						),
						entryActions = _c[0],
						exitActions = _c[1];
					var actions$1 = actions.toActionObjects(
						exitActions.concat(transition.actions).concat(entryActions),
						this.machine.options.actions
					);
					return actions$1;
				};
				StateNode3.prototype.transition = function (state, event2, context) {
					if (state === void 0) {
						state = this.initialState;
					}
					var _event = utils.toSCXMLEvent(event2);
					var currentState;
					if (state instanceof State2.State) {
						currentState =
							context === void 0 ? state : this.resolveState(State2.State.from(state, context));
					} else {
						var resolvedStateValue = utils.isString(state)
							? this.resolve(utils.pathToStateValue(this.getResolvedPath(state)))
							: this.resolve(state);
						var resolvedContext =
							context !== null && context !== void 0 ? context : this.machine.context;
						currentState = this.resolveState(
							State2.State.from(resolvedStateValue, resolvedContext)
						);
					}
					if (!environment.IS_PRODUCTION && _event.name === WILDCARD2) {
						throw new Error("An event cannot have the wildcard type ('" + WILDCARD2 + "')");
					}
					if (this.strict) {
						if (!this.events.includes(_event.name) && !utils.isBuiltInEvent(_event.name)) {
							throw new Error(
								"Machine '" + this.id + "' does not accept event '" + _event.name + "'"
							);
						}
					}
					var stateTransition = this._transition(currentState.value, currentState, _event) || {
						transitions: [],
						configuration: [],
						entrySet: [],
						exitSet: [],
						source: currentState,
						actions: [],
					};
					var prevConfig = stateUtils.getConfiguration([], this.getStateNodes(currentState.value));
					var resolvedConfig = stateTransition.configuration.length
						? stateUtils.getConfiguration(prevConfig, stateTransition.configuration)
						: prevConfig;
					stateTransition.configuration = _tslib.__spreadArray([], _tslib.__read(resolvedConfig));
					return this.resolveTransition(stateTransition, currentState, _event);
				};
				StateNode3.prototype.resolveRaisedTransition = function (state, _event, originalEvent) {
					var _a;
					var currentActions = state.actions;
					state = this.transition(state, _event);
					state._event = originalEvent;
					state.event = originalEvent.data;
					(_a = state.actions).unshift.apply(
						_a,
						_tslib.__spreadArray([], _tslib.__read(currentActions))
					);
					return state;
				};
				StateNode3.prototype.resolveTransition = function (
					stateTransition,
					currentState,
					_event,
					context
				) {
					var e_6, _a;
					var _this = this;
					if (_event === void 0) {
						_event = actions.initEvent;
					}
					if (context === void 0) {
						context = this.machine.context;
					}
					var configuration = stateTransition.configuration;
					var willTransition = !currentState || stateTransition.transitions.length > 0;
					var resolvedStateValue = willTransition
						? stateUtils.getValue(this.machine, configuration)
						: void 0;
					var historyValue = currentState
						? currentState.historyValue
							? currentState.historyValue
							: stateTransition.source
							? this.machine.historyValue(currentState.value)
							: void 0
						: void 0;
					var currentContext = currentState ? currentState.context : context;
					var actions$1 = this.getActions(stateTransition, currentContext, _event, currentState);
					var activities = currentState ? _tslib.__assign({}, currentState.activities) : {};
					try {
						for (
							var actions_1 = _tslib.__values(actions$1), actions_1_1 = actions_1.next();
							!actions_1_1.done;
							actions_1_1 = actions_1.next()
						) {
							var action = actions_1_1.value;
							if (action.type === actionTypes.start) {
								activities[action.activity.id || action.activity.type] = action;
							} else if (action.type === actionTypes.stop) {
								activities[action.activity.id || action.activity.type] = false;
							}
						}
					} catch (e_6_1) {
						e_6 = {
							error: e_6_1,
						};
					} finally {
						try {
							if (actions_1_1 && !actions_1_1.done && (_a = actions_1.return)) _a.call(actions_1);
						} finally {
							if (e_6) throw e_6.error;
						}
					}
					var _b = _tslib.__read(
							actions.resolveActions(
								this,
								currentState,
								currentContext,
								_event,
								actions$1,
								this.machine.config.preserveActionOrder
							),
							2
						),
						resolvedActions = _b[0],
						updatedContext = _b[1];
					var _c = _tslib.__read(
							utils.partition(resolvedActions, function (action2) {
								return (
									action2.type === actionTypes.raise ||
									(action2.type === actionTypes.send &&
										action2.to === types2.SpecialTargets.Internal)
								);
							}),
							2
						),
						raisedEvents = _c[0],
						nonRaisedActions = _c[1];
					var invokeActions = resolvedActions.filter(function (action2) {
						var _a2;
						return (
							action2.type === actionTypes.start &&
							((_a2 = action2.activity) === null || _a2 === void 0 ? void 0 : _a2.type) ===
								actionTypes.invoke
						);
					});
					var children2 = invokeActions.reduce(
						function (acc, action2) {
							acc[action2.activity.id] = Actor.createInvocableActor(
								action2.activity,
								_this.machine,
								updatedContext,
								_event
							);
							return acc;
						},
						currentState ? _tslib.__assign({}, currentState.children) : {}
					);
					var resolvedConfiguration = resolvedStateValue
						? stateTransition.configuration
						: currentState
						? currentState.configuration
						: [];
					var isDone = stateUtils.isInFinalState(resolvedConfiguration, this);
					var nextState = new State2.State({
						value: resolvedStateValue || currentState.value,
						context: updatedContext,
						_event,
						_sessionid: currentState ? currentState._sessionid : null,
						historyValue: resolvedStateValue
							? historyValue
								? utils.updateHistoryValue(historyValue, resolvedStateValue)
								: void 0
							: currentState
							? currentState.historyValue
							: void 0,
						history: !resolvedStateValue || stateTransition.source ? currentState : void 0,
						actions: resolvedStateValue ? nonRaisedActions : [],
						activities: resolvedStateValue
							? activities
							: currentState
							? currentState.activities
							: {},
						events: [],
						configuration: resolvedConfiguration,
						transitions: stateTransition.transitions,
						children: children2,
						done: isDone,
						tags: currentState === null || currentState === void 0 ? void 0 : currentState.tags,
					});
					var didUpdateContext = currentContext !== updatedContext;
					nextState.changed = _event.name === actionTypes.update || didUpdateContext;
					var history = nextState.history;
					if (history) {
						delete history.history;
					}
					var isTransient =
						!isDone &&
						(this._transient ||
							configuration.some(function (stateNode) {
								return stateNode._transient;
							}));
					if (!willTransition && (!isTransient || _event.name === NULL_EVENT2)) {
						return nextState;
					}
					var maybeNextState = nextState;
					if (!isDone) {
						if (isTransient) {
							maybeNextState = this.resolveRaisedTransition(
								maybeNextState,
								{
									type: actionTypes.nullEvent,
								},
								_event
							);
						}
						while (raisedEvents.length) {
							var raisedEvent = raisedEvents.shift();
							maybeNextState = this.resolveRaisedTransition(
								maybeNextState,
								raisedEvent._event,
								_event
							);
						}
					}
					var changed =
						maybeNextState.changed ||
						(history
							? !!maybeNextState.actions.length ||
							  didUpdateContext ||
							  typeof history.value !== typeof maybeNextState.value ||
							  !State2.stateValuesEqual(maybeNextState.value, history.value)
							: void 0);
					maybeNextState.changed = changed;
					maybeNextState.history = history;
					maybeNextState.tags = new Set(
						utils.flatten(
							maybeNextState.configuration.map(function (sn) {
								return sn.tags;
							})
						)
					);
					return maybeNextState;
				};
				StateNode3.prototype.getStateNode = function (stateKey) {
					if (isStateId2(stateKey)) {
						return this.machine.getStateNodeById(stateKey);
					}
					if (!this.states) {
						throw new Error(
							"Unable to retrieve child state '" +
								stateKey +
								"' from '" +
								this.id +
								"'; no child states exist."
						);
					}
					var result = this.states[stateKey];
					if (!result) {
						throw new Error("Child state '" + stateKey + "' does not exist on '" + this.id + "'");
					}
					return result;
				};
				StateNode3.prototype.getStateNodeById = function (stateId) {
					var resolvedStateId = isStateId2(stateId)
						? stateId.slice(STATE_IDENTIFIER2.length)
						: stateId;
					if (resolvedStateId === this.id) {
						return this;
					}
					var stateNode = this.machine.idMap[resolvedStateId];
					if (!stateNode) {
						throw new Error(
							"Child state node '#" +
								resolvedStateId +
								"' does not exist on machine '" +
								this.id +
								"'"
						);
					}
					return stateNode;
				};
				StateNode3.prototype.getStateNodeByPath = function (statePath) {
					if (typeof statePath === "string" && isStateId2(statePath)) {
						try {
							return this.getStateNodeById(statePath.slice(1));
						} catch (e) {}
					}
					var arrayStatePath = utils.toStatePath(statePath, this.delimiter).slice();
					var currentStateNode = this;
					while (arrayStatePath.length) {
						var key = arrayStatePath.shift();
						if (!key.length) {
							break;
						}
						currentStateNode = currentStateNode.getStateNode(key);
					}
					return currentStateNode;
				};
				StateNode3.prototype.resolve = function (stateValue) {
					var _a;
					var _this = this;
					if (!stateValue) {
						return this.initialStateValue || EMPTY_OBJECT2;
					}
					switch (this.type) {
						case "parallel":
							return utils.mapValues(this.initialStateValue, function (subStateValue, subStateKey) {
								return subStateValue
									? _this
											.getStateNode(subStateKey)
											.resolve(stateValue[subStateKey] || subStateValue)
									: EMPTY_OBJECT2;
							});
						case "compound":
							if (utils.isString(stateValue)) {
								var subStateNode = this.getStateNode(stateValue);
								if (subStateNode.type === "parallel" || subStateNode.type === "compound") {
									return (_a = {}), (_a[stateValue] = subStateNode.initialStateValue), _a;
								}
								return stateValue;
							}
							if (!utils.keys(stateValue).length) {
								return this.initialStateValue || {};
							}
							return utils.mapValues(stateValue, function (subStateValue, subStateKey) {
								return subStateValue
									? _this.getStateNode(subStateKey).resolve(subStateValue)
									: EMPTY_OBJECT2;
							});
						default:
							return stateValue || EMPTY_OBJECT2;
					}
				};
				StateNode3.prototype.getResolvedPath = function (stateIdentifier) {
					if (isStateId2(stateIdentifier)) {
						var stateNode = this.machine.idMap[stateIdentifier.slice(STATE_IDENTIFIER2.length)];
						if (!stateNode) {
							throw new Error("Unable to find state node '" + stateIdentifier + "'");
						}
						return stateNode.path;
					}
					return utils.toStatePath(stateIdentifier, this.delimiter);
				};
				Object.defineProperty(StateNode3.prototype, "initialStateValue", {
					get: function () {
						var _a;
						if (this.__cache.initialStateValue) {
							return this.__cache.initialStateValue;
						}
						var initialStateValue;
						if (this.type === "parallel") {
							initialStateValue = utils.mapFilterValues(
								this.states,
								function (state) {
									return state.initialStateValue || EMPTY_OBJECT2;
								},
								function (stateNode) {
									return !(stateNode.type === "history");
								}
							);
						} else if (this.initial !== void 0) {
							if (!this.states[this.initial]) {
								throw new Error(
									"Initial state '" + this.initial + "' not found on '" + this.key + "'"
								);
							}
							initialStateValue = stateUtils.isLeafNode(this.states[this.initial])
								? this.initial
								: ((_a = {}), (_a[this.initial] = this.states[this.initial].initialStateValue), _a);
						} else {
							initialStateValue = {};
						}
						this.__cache.initialStateValue = initialStateValue;
						return this.__cache.initialStateValue;
					},
					enumerable: false,
					configurable: true,
				});
				StateNode3.prototype.getInitialState = function (stateValue, context) {
					var configuration = this.getStateNodes(stateValue);
					return this.resolveTransition(
						{
							configuration,
							entrySet: configuration,
							exitSet: [],
							transitions: [],
							source: void 0,
							actions: [],
						},
						void 0,
						void 0,
						context
					);
				};
				Object.defineProperty(StateNode3.prototype, "initialState", {
					get: function () {
						this._init();
						var initialStateValue = this.initialStateValue;
						if (!initialStateValue) {
							throw new Error("Cannot retrieve initial state from simple state '" + this.id + "'.");
						}
						return this.getInitialState(initialStateValue);
					},
					enumerable: false,
					configurable: true,
				});
				Object.defineProperty(StateNode3.prototype, "target", {
					get: function () {
						var target;
						if (this.type === "history") {
							var historyConfig = this.config;
							if (utils.isString(historyConfig.target)) {
								target = isStateId2(historyConfig.target)
									? utils.pathToStateValue(
											this.machine
												.getStateNodeById(historyConfig.target)
												.path.slice(this.path.length - 1)
									  )
									: historyConfig.target;
							} else {
								target = historyConfig.target;
							}
						}
						return target;
					},
					enumerable: false,
					configurable: true,
				});
				StateNode3.prototype.getRelativeStateNodes = function (
					relativeStateId,
					historyValue,
					resolve
				) {
					if (resolve === void 0) {
						resolve = true;
					}
					return resolve
						? relativeStateId.type === "history"
							? relativeStateId.resolveHistory(historyValue)
							: relativeStateId.initialStateNodes
						: [relativeStateId];
				};
				Object.defineProperty(StateNode3.prototype, "initialStateNodes", {
					get: function () {
						var _this = this;
						if (stateUtils.isLeafNode(this)) {
							return [this];
						}
						if (this.type === "compound" && !this.initial) {
							if (!environment.IS_PRODUCTION) {
								utils.warn(false, "Compound state node '" + this.id + "' has no initial state.");
							}
							return [this];
						}
						var initialStateNodePaths = utils.toStatePaths(this.initialStateValue);
						return utils.flatten(
							initialStateNodePaths.map(function (initialPath) {
								return _this.getFromRelativePath(initialPath);
							})
						);
					},
					enumerable: false,
					configurable: true,
				});
				StateNode3.prototype.getFromRelativePath = function (relativePath) {
					if (!relativePath.length) {
						return [this];
					}
					var _a = _tslib.__read(relativePath),
						stateKey = _a[0],
						childStatePath = _a.slice(1);
					if (!this.states) {
						throw new Error("Cannot retrieve subPath '" + stateKey + "' from node with no states");
					}
					var childStateNode = this.getStateNode(stateKey);
					if (childStateNode.type === "history") {
						return childStateNode.resolveHistory();
					}
					if (!this.states[stateKey]) {
						throw new Error("Child state '" + stateKey + "' does not exist on '" + this.id + "'");
					}
					return this.states[stateKey].getFromRelativePath(childStatePath);
				};
				StateNode3.prototype.historyValue = function (relativeStateValue) {
					if (!utils.keys(this.states).length) {
						return void 0;
					}
					return {
						current: relativeStateValue || this.initialStateValue,
						states: utils.mapFilterValues(
							this.states,
							function (stateNode, key) {
								if (!relativeStateValue) {
									return stateNode.historyValue();
								}
								var subStateValue = utils.isString(relativeStateValue)
									? void 0
									: relativeStateValue[key];
								return stateNode.historyValue(subStateValue || stateNode.initialStateValue);
							},
							function (stateNode) {
								return !stateNode.history;
							}
						),
					};
				};
				StateNode3.prototype.resolveHistory = function (historyValue) {
					var _this = this;
					if (this.type !== "history") {
						return [this];
					}
					var parent = this.parent;
					if (!historyValue) {
						var historyTarget = this.target;
						return historyTarget
							? utils.flatten(
									utils.toStatePaths(historyTarget).map(function (relativeChildPath) {
										return parent.getFromRelativePath(relativeChildPath);
									})
							  )
							: parent.initialStateNodes;
					}
					var subHistoryValue = utils.nestedPath(parent.path, "states")(historyValue).current;
					if (utils.isString(subHistoryValue)) {
						return [parent.getStateNode(subHistoryValue)];
					}
					return utils.flatten(
						utils.toStatePaths(subHistoryValue).map(function (subStatePath) {
							return _this.history === "deep"
								? parent.getFromRelativePath(subStatePath)
								: [parent.states[subStatePath[0]]];
						})
					);
				};
				Object.defineProperty(StateNode3.prototype, "stateIds", {
					get: function () {
						var _this = this;
						var childStateIds = utils.flatten(
							utils.keys(this.states).map(function (stateKey) {
								return _this.states[stateKey].stateIds;
							})
						);
						return [this.id].concat(childStateIds);
					},
					enumerable: false,
					configurable: true,
				});
				Object.defineProperty(StateNode3.prototype, "events", {
					get: function () {
						var e_7, _a, e_8, _b;
						if (this.__cache.events) {
							return this.__cache.events;
						}
						var states = this.states;
						var events = new Set(this.ownEvents);
						if (states) {
							try {
								for (
									var _c = _tslib.__values(utils.keys(states)), _d = _c.next();
									!_d.done;
									_d = _c.next()
								) {
									var stateId = _d.value;
									var state = states[stateId];
									if (state.states) {
										try {
											for (
												var _e = ((e_8 = void 0), _tslib.__values(state.events)), _f = _e.next();
												!_f.done;
												_f = _e.next()
											) {
												var event_1 = _f.value;
												events.add("" + event_1);
											}
										} catch (e_8_1) {
											e_8 = {
												error: e_8_1,
											};
										} finally {
											try {
												if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
											} finally {
												if (e_8) throw e_8.error;
											}
										}
									}
								}
							} catch (e_7_1) {
								e_7 = {
									error: e_7_1,
								};
							} finally {
								try {
									if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
								} finally {
									if (e_7) throw e_7.error;
								}
							}
						}
						return (this.__cache.events = Array.from(events));
					},
					enumerable: false,
					configurable: true,
				});
				Object.defineProperty(StateNode3.prototype, "ownEvents", {
					get: function () {
						var events = new Set(
							this.transitions
								.filter(function (transition) {
									return !(!transition.target && !transition.actions.length && transition.internal);
								})
								.map(function (transition) {
									return transition.eventType;
								})
						);
						return Array.from(events);
					},
					enumerable: false,
					configurable: true,
				});
				StateNode3.prototype.resolveTarget = function (_target) {
					var _this = this;
					if (_target === void 0) {
						return void 0;
					}
					return _target.map(function (target) {
						if (!utils.isString(target)) {
							return target;
						}
						var isInternalTarget = target[0] === _this.delimiter;
						if (isInternalTarget && !_this.parent) {
							return _this.getStateNodeByPath(target.slice(1));
						}
						var resolvedTarget = isInternalTarget ? _this.key + target : target;
						if (_this.parent) {
							try {
								var targetStateNode = _this.parent.getStateNodeByPath(resolvedTarget);
								return targetStateNode;
							} catch (err) {
								throw new Error(
									"Invalid transition definition for state node '" + _this.id + "':\n" + err.message
								);
							}
						} else {
							return _this.getStateNodeByPath(resolvedTarget);
						}
					});
				};
				StateNode3.prototype.formatTransition = function (transitionConfig) {
					var _this = this;
					var normalizedTarget = utils.normalizeTarget(transitionConfig.target);
					var internal =
						"internal" in transitionConfig
							? transitionConfig.internal
							: normalizedTarget
							? normalizedTarget.some(function (_target) {
									return utils.isString(_target) && _target[0] === _this.delimiter;
							  })
							: true;
					var guards = this.machine.options.guards;
					var target = this.resolveTarget(normalizedTarget);
					var transition = _tslib.__assign(_tslib.__assign({}, transitionConfig), {
						actions: actions.toActionObjects(utils.toArray(transitionConfig.actions)),
						cond: utils.toGuard(transitionConfig.cond, guards),
						target,
						source: this,
						internal,
						eventType: transitionConfig.event,
						toJSON: function () {
							return _tslib.__assign(_tslib.__assign({}, transition), {
								target: transition.target
									? transition.target.map(function (t) {
											return "#" + t.id;
									  })
									: void 0,
								source: "#" + _this.id,
							});
						},
					});
					return transition;
				};
				StateNode3.prototype.formatTransitions = function () {
					var e_9, _a;
					var _this = this;
					var onConfig;
					if (!this.config.on) {
						onConfig = [];
					} else if (Array.isArray(this.config.on)) {
						onConfig = this.config.on;
					} else {
						var _b = this.config.on,
							_c = WILDCARD2,
							_d = _b[_c],
							wildcardConfigs = _d === void 0 ? [] : _d,
							strictTransitionConfigs_1 = _tslib.__rest(_b, [
								typeof _c === "symbol" ? _c : _c + "",
							]);
						onConfig = utils.flatten(
							utils
								.keys(strictTransitionConfigs_1)
								.map(function (key) {
									if (!environment.IS_PRODUCTION && key === NULL_EVENT2) {
										utils.warn(
											false,
											"Empty string transition configs (e.g., `{ on: { '': ... }}`) for transient transitions are deprecated. Specify the transition in the `{ always: ... }` property instead. " +
												('Please check the `on` configuration for "#' + _this.id + '".')
										);
									}
									var transitionConfigArray = utils.toTransitionConfigArray(
										key,
										strictTransitionConfigs_1[key]
									);
									if (!environment.IS_PRODUCTION) {
										validateArrayifiedTransitions2(_this, key, transitionConfigArray);
									}
									return transitionConfigArray;
								})
								.concat(utils.toTransitionConfigArray(WILDCARD2, wildcardConfigs))
						);
					}
					var eventlessConfig = this.config.always
						? utils.toTransitionConfigArray("", this.config.always)
						: [];
					var doneConfig = this.config.onDone
						? utils.toTransitionConfigArray(String(actions.done(this.id)), this.config.onDone)
						: [];
					if (!environment.IS_PRODUCTION) {
						utils.warn(
							!(this.config.onDone && !this.parent),
							'Root nodes cannot have an ".onDone" transition. Please check the config of "' +
								this.id +
								'".'
						);
					}
					var invokeConfig = utils.flatten(
						this.invoke.map(function (invokeDef) {
							var settleTransitions = [];
							if (invokeDef.onDone) {
								settleTransitions.push.apply(
									settleTransitions,
									_tslib.__spreadArray(
										[],
										_tslib.__read(
											utils.toTransitionConfigArray(
												String(actions.doneInvoke(invokeDef.id)),
												invokeDef.onDone
											)
										)
									)
								);
							}
							if (invokeDef.onError) {
								settleTransitions.push.apply(
									settleTransitions,
									_tslib.__spreadArray(
										[],
										_tslib.__read(
											utils.toTransitionConfigArray(
												String(actions.error(invokeDef.id)),
												invokeDef.onError
											)
										)
									)
								);
							}
							return settleTransitions;
						})
					);
					var delayedTransitions = this.after;
					var formattedTransitions = utils.flatten(
						_tslib
							.__spreadArray(
								_tslib.__spreadArray(
									_tslib.__spreadArray(
										_tslib.__spreadArray([], _tslib.__read(doneConfig)),
										_tslib.__read(invokeConfig)
									),
									_tslib.__read(onConfig)
								),
								_tslib.__read(eventlessConfig)
							)
							.map(function (transitionConfig) {
								return utils.toArray(transitionConfig).map(function (transition) {
									return _this.formatTransition(transition);
								});
							})
					);
					try {
						for (
							var delayedTransitions_1 = _tslib.__values(delayedTransitions),
								delayedTransitions_1_1 = delayedTransitions_1.next();
							!delayedTransitions_1_1.done;
							delayedTransitions_1_1 = delayedTransitions_1.next()
						) {
							var delayedTransition = delayedTransitions_1_1.value;
							formattedTransitions.push(delayedTransition);
						}
					} catch (e_9_1) {
						e_9 = {
							error: e_9_1,
						};
					} finally {
						try {
							if (
								delayedTransitions_1_1 &&
								!delayedTransitions_1_1.done &&
								(_a = delayedTransitions_1.return)
							)
								_a.call(delayedTransitions_1);
						} finally {
							if (e_9) throw e_9.error;
						}
					}
					return formattedTransitions;
				};
				return StateNode3;
			})();
			exports.StateNode = StateNode2;
		},
	});

	// ../../node_modules/xstate/lib/Machine.js
	var require_Machine = __commonJS({
		"../../node_modules/xstate/lib/Machine.js"(exports) {
			"use strict";
			Object.defineProperty(exports, "__esModule", { value: true });
			var StateNode2 = require_StateNode();
			function Machine2(config, options, initialContext) {
				if (initialContext === void 0) {
					initialContext = config.context;
				}
				return new StateNode2.StateNode(config, options, initialContext);
			}
			function createMachine2(config, options) {
				return new StateNode2.StateNode(config, options);
			}
			exports.Machine = Machine2;
			exports.createMachine = createMachine2;
		},
	});

	// ../../node_modules/xstate/lib/model.js
	var require_model = __commonJS({
		"../../node_modules/xstate/lib/model.js"(exports) {
			"use strict";
			var __assign12 =
				(exports && exports.__assign) ||
				function () {
					__assign12 =
						Object.assign ||
						function (t) {
							for (var s, i = 1, n = arguments.length; i < n; i++) {
								s = arguments[i];
								for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
							}
							return t;
						};
					return __assign12.apply(this, arguments);
				};
			var __read14 =
				(exports && exports.__read) ||
				function (o, n) {
					var m = typeof Symbol === "function" && o[Symbol.iterator];
					if (!m) return o;
					var i = m.call(o),
						r,
						ar = [],
						e;
					try {
						while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
					} catch (error3) {
						e = { error: error3 };
					} finally {
						try {
							if (r && !r.done && (m = i["return"])) m.call(i);
						} finally {
							if (e) throw e.error;
						}
					}
					return ar;
				};
			var __spreadArray4 =
				(exports && exports.__spreadArray) ||
				function (to, from) {
					for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];
					return to;
				};
			Object.defineProperty(exports, "__esModule", { value: true });
			exports.createModel = void 0;
			var actions_1 = require_actions();
			var Machine_1 = require_Machine();
			var utils_1 = require_utils();
			function createModel2(initialContext, creators) {
				var eventCreators = creators === null || creators === void 0 ? void 0 : creators.events;
				var model2 = {
					initialContext,
					assign: actions_1.assign,
					events: eventCreators
						? utils_1.mapValues(eventCreators, function (fn, eventType) {
								return function () {
									var args = [];
									for (var _i = 0; _i < arguments.length; _i++) {
										args[_i] = arguments[_i];
									}
									return __assign12(
										__assign12({}, fn.apply(void 0, __spreadArray4([], __read14(args)))),
										{ type: eventType }
									);
								};
						  })
						: void 0,
					reset: function () {
						return actions_1.assign(initialContext);
					},
					createMachine: function (config, implementations2) {
						return Machine_1.createMachine(
							"context" in config
								? config
								: __assign12(__assign12({}, config), { context: initialContext }),
							implementations2
						);
					},
				};
				return model2;
			}
			exports.createModel = createModel2;
		},
	});

	// ../logger/lib/index.js
	var require_lib = __commonJS({
		"../logger/lib/index.js"(exports) {
			var __defProp2 = Object.defineProperty;
			var __markAsModule2 = (target) => __defProp2(target, "__esModule", { value: true });
			var __export = (target, all) => {
				__markAsModule2(target);
				for (var name2 in all) __defProp2(target, name2, { get: all[name2], enumerable: true });
			};
			__export(exports, {
				createLogger: () => createLogger,
				useLogger: () => useLogger19,
			});
			function createLogger(implementation) {
				return () => implementation;
			}
			var useLogger19 = createLogger({
				info: console.info,
				log: console.log,
				warn: console.warn,
				error: console.error,
			});
		},
	});

	// ../../node_modules/url/node_modules/punycode/punycode.js
	var require_punycode = __commonJS({
		"../../node_modules/url/node_modules/punycode/punycode.js"(exports, module2) {
			(function (root) {
				var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
				var freeModule = typeof module2 == "object" && module2 && !module2.nodeType && module2;
				var freeGlobal = typeof global == "object" && global;
				if (
					freeGlobal.global === freeGlobal ||
					freeGlobal.window === freeGlobal ||
					freeGlobal.self === freeGlobal
				) {
					root = freeGlobal;
				}
				var punycode,
					maxInt = 2147483647,
					base = 36,
					tMin = 1,
					tMax = 26,
					skew = 38,
					damp = 700,
					initialBias = 72,
					initialN = 128,
					delimiter = "-",
					regexPunycode = /^xn--/,
					regexNonASCII = /[^\x20-\x7E]/,
					regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g,
					errors = {
						overflow: "Overflow: input needs wider integers to process",
						"not-basic": "Illegal input >= 0x80 (not a basic code point)",
						"invalid-input": "Invalid input",
					},
					baseMinusTMin = base - tMin,
					floor = Math.floor,
					stringFromCharCode = String.fromCharCode,
					key;
				function error3(type) {
					throw RangeError(errors[type]);
				}
				function map(array, fn) {
					var length = array.length;
					var result = [];
					while (length--) {
						result[length] = fn(array[length]);
					}
					return result;
				}
				function mapDomain(string, fn) {
					var parts = string.split("@");
					var result = "";
					if (parts.length > 1) {
						result = parts[0] + "@";
						string = parts[1];
					}
					string = string.replace(regexSeparators, ".");
					var labels = string.split(".");
					var encoded = map(labels, fn).join(".");
					return result + encoded;
				}
				function ucs2decode(string) {
					var output = [],
						counter = 0,
						length = string.length,
						value,
						extra;
					while (counter < length) {
						value = string.charCodeAt(counter++);
						if (value >= 55296 && value <= 56319 && counter < length) {
							extra = string.charCodeAt(counter++);
							if ((extra & 64512) == 56320) {
								output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
							} else {
								output.push(value);
								counter--;
							}
						} else {
							output.push(value);
						}
					}
					return output;
				}
				function ucs2encode(array) {
					return map(array, function (value) {
						var output = "";
						if (value > 65535) {
							value -= 65536;
							output += stringFromCharCode(((value >>> 10) & 1023) | 55296);
							value = 56320 | (value & 1023);
						}
						output += stringFromCharCode(value);
						return output;
					}).join("");
				}
				function basicToDigit(codePoint) {
					if (codePoint - 48 < 10) {
						return codePoint - 22;
					}
					if (codePoint - 65 < 26) {
						return codePoint - 65;
					}
					if (codePoint - 97 < 26) {
						return codePoint - 97;
					}
					return base;
				}
				function digitToBasic(digit, flag) {
					return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
				}
				function adapt(delta, numPoints, firstTime) {
					var k = 0;
					delta = firstTime ? floor(delta / damp) : delta >> 1;
					delta += floor(delta / numPoints);
					for (; delta > (baseMinusTMin * tMax) >> 1; k += base) {
						delta = floor(delta / baseMinusTMin);
					}
					return floor(k + ((baseMinusTMin + 1) * delta) / (delta + skew));
				}
				function decode(input) {
					var output = [],
						inputLength = input.length,
						out,
						i = 0,
						n = initialN,
						bias = initialBias,
						basic,
						j,
						index2,
						oldi,
						w,
						k,
						digit,
						t,
						baseMinusT;
					basic = input.lastIndexOf(delimiter);
					if (basic < 0) {
						basic = 0;
					}
					for (j = 0; j < basic; ++j) {
						if (input.charCodeAt(j) >= 128) {
							error3("not-basic");
						}
						output.push(input.charCodeAt(j));
					}
					for (index2 = basic > 0 ? basic + 1 : 0; index2 < inputLength; ) {
						for (oldi = i, w = 1, k = base; ; k += base) {
							if (index2 >= inputLength) {
								error3("invalid-input");
							}
							digit = basicToDigit(input.charCodeAt(index2++));
							if (digit >= base || digit > floor((maxInt - i) / w)) {
								error3("overflow");
							}
							i += digit * w;
							t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
							if (digit < t) {
								break;
							}
							baseMinusT = base - t;
							if (w > floor(maxInt / baseMinusT)) {
								error3("overflow");
							}
							w *= baseMinusT;
						}
						out = output.length + 1;
						bias = adapt(i - oldi, out, oldi == 0);
						if (floor(i / out) > maxInt - n) {
							error3("overflow");
						}
						n += floor(i / out);
						i %= out;
						output.splice(i++, 0, n);
					}
					return ucs2encode(output);
				}
				function encode(input) {
					var n,
						delta,
						handledCPCount,
						basicLength,
						bias,
						j,
						m,
						q,
						k,
						t,
						currentValue,
						output = [],
						inputLength,
						handledCPCountPlusOne,
						baseMinusT,
						qMinusT;
					input = ucs2decode(input);
					inputLength = input.length;
					n = initialN;
					delta = 0;
					bias = initialBias;
					for (j = 0; j < inputLength; ++j) {
						currentValue = input[j];
						if (currentValue < 128) {
							output.push(stringFromCharCode(currentValue));
						}
					}
					handledCPCount = basicLength = output.length;
					if (basicLength) {
						output.push(delimiter);
					}
					while (handledCPCount < inputLength) {
						for (m = maxInt, j = 0; j < inputLength; ++j) {
							currentValue = input[j];
							if (currentValue >= n && currentValue < m) {
								m = currentValue;
							}
						}
						handledCPCountPlusOne = handledCPCount + 1;
						if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
							error3("overflow");
						}
						delta += (m - n) * handledCPCountPlusOne;
						n = m;
						for (j = 0; j < inputLength; ++j) {
							currentValue = input[j];
							if (currentValue < n && ++delta > maxInt) {
								error3("overflow");
							}
							if (currentValue == n) {
								for (q = delta, k = base; ; k += base) {
									t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
									if (q < t) {
										break;
									}
									qMinusT = q - t;
									baseMinusT = base - t;
									output.push(stringFromCharCode(digitToBasic(t + (qMinusT % baseMinusT), 0)));
									q = floor(qMinusT / baseMinusT);
								}
								output.push(stringFromCharCode(digitToBasic(q, 0)));
								bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
								delta = 0;
								++handledCPCount;
							}
						}
						++delta;
						++n;
					}
					return output.join("");
				}
				function toUnicode(input) {
					return mapDomain(input, function (string) {
						return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
					});
				}
				function toASCII(input) {
					return mapDomain(input, function (string) {
						return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
					});
				}
				punycode = {
					version: "1.3.2",
					ucs2: {
						decode: ucs2decode,
						encode: ucs2encode,
					},
					decode: decode,
					encode: encode,
					toASCII: toASCII,
					toUnicode: toUnicode,
				};
				if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
					define("punycode", function () {
						return punycode;
					});
				} else if (freeExports && freeModule) {
					if (module2.exports == freeExports) {
						freeModule.exports = punycode;
					} else {
						for (key in punycode) {
							punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
						}
					}
				} else {
					root.punycode = punycode;
				}
			})(exports);
		},
	});

	// ../../node_modules/url/util.js
	var require_util = __commonJS({
		"../../node_modules/url/util.js"(exports, module2) {
			"use strict";
			module2.exports = {
				isString: function (arg) {
					return typeof arg === "string";
				},
				isObject: function (arg) {
					return typeof arg === "object" && arg !== null;
				},
				isNull: function (arg) {
					return arg === null;
				},
				isNullOrUndefined: function (arg) {
					return arg == null;
				},
			};
		},
	});

	// ../../node_modules/querystring/decode.js
	var require_decode = __commonJS({
		"../../node_modules/querystring/decode.js"(exports, module2) {
			"use strict";
			function hasOwnProperty(obj, prop) {
				return Object.prototype.hasOwnProperty.call(obj, prop);
			}
			module2.exports = function (qs, sep, eq, options) {
				sep = sep || "&";
				eq = eq || "=";
				var obj = {};
				if (typeof qs !== "string" || qs.length === 0) {
					return obj;
				}
				var regexp = /\+/g;
				qs = qs.split(sep);
				var maxKeys = 1e3;
				if (options && typeof options.maxKeys === "number") {
					maxKeys = options.maxKeys;
				}
				var len = qs.length;
				if (maxKeys > 0 && len > maxKeys) {
					len = maxKeys;
				}
				for (var i = 0; i < len; ++i) {
					var x = qs[i].replace(regexp, "%20"),
						idx = x.indexOf(eq),
						kstr,
						vstr,
						k,
						v;
					if (idx >= 0) {
						kstr = x.substr(0, idx);
						vstr = x.substr(idx + 1);
					} else {
						kstr = x;
						vstr = "";
					}
					k = decodeURIComponent(kstr);
					v = decodeURIComponent(vstr);
					if (!hasOwnProperty(obj, k)) {
						obj[k] = v;
					} else if (Array.isArray(obj[k])) {
						obj[k].push(v);
					} else {
						obj[k] = [obj[k], v];
					}
				}
				return obj;
			};
		},
	});

	// ../../node_modules/querystring/encode.js
	var require_encode = __commonJS({
		"../../node_modules/querystring/encode.js"(exports, module2) {
			"use strict";
			var stringifyPrimitive = function (v) {
				switch (typeof v) {
					case "string":
						return v;
					case "boolean":
						return v ? "true" : "false";
					case "number":
						return isFinite(v) ? v : "";
					default:
						return "";
				}
			};
			module2.exports = function (obj, sep, eq, name2) {
				sep = sep || "&";
				eq = eq || "=";
				if (obj === null) {
					obj = void 0;
				}
				if (typeof obj === "object") {
					return Object.keys(obj)
						.map(function (k) {
							var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
							if (Array.isArray(obj[k])) {
								return obj[k]
									.map(function (v) {
										return ks + encodeURIComponent(stringifyPrimitive(v));
									})
									.join(sep);
							} else {
								return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
							}
						})
						.join(sep);
				}
				if (!name2) return "";
				return (
					encodeURIComponent(stringifyPrimitive(name2)) +
					eq +
					encodeURIComponent(stringifyPrimitive(obj))
				);
			};
		},
	});

	// ../../node_modules/querystring/index.js
	var require_querystring = __commonJS({
		"../../node_modules/querystring/index.js"(exports) {
			"use strict";
			exports.decode = exports.parse = require_decode();
			exports.encode = exports.stringify = require_encode();
		},
	});

	// ../../node_modules/url/url.js
	var require_url = __commonJS({
		"../../node_modules/url/url.js"(exports) {
			"use strict";
			var punycode = require_punycode();
			var util = require_util();
			exports.parse = urlParse;
			exports.resolve = urlResolve;
			exports.resolveObject = urlResolveObject;
			exports.format = urlFormat;
			exports.Url = Url;
			function Url() {
				this.protocol = null;
				this.slashes = null;
				this.auth = null;
				this.host = null;
				this.port = null;
				this.hostname = null;
				this.hash = null;
				this.search = null;
				this.query = null;
				this.pathname = null;
				this.path = null;
				this.href = null;
			}
			var protocolPattern = /^([a-z0-9.+-]+:)/i;
			var portPattern = /:[0-9]*$/;
			var simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/;
			var delims = ["<", ">", '"', "`", " ", "\r", "\n", "	"];
			var unwise = ["{", "}", "|", "\\", "^", "`"].concat(delims);
			var autoEscape = ["'"].concat(unwise);
			var nonHostChars = ["%", "/", "?", ";", "#"].concat(autoEscape);
			var hostEndingChars = ["/", "?", "#"];
			var hostnameMaxLen = 255;
			var hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/;
			var hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/;
			var unsafeProtocol = {
				javascript: true,
				"javascript:": true,
			};
			var hostlessProtocol = {
				javascript: true,
				"javascript:": true,
			};
			var slashedProtocol = {
				http: true,
				https: true,
				ftp: true,
				gopher: true,
				file: true,
				"http:": true,
				"https:": true,
				"ftp:": true,
				"gopher:": true,
				"file:": true,
			};
			var querystring = require_querystring();
			function urlParse(url, parseQueryString2, slashesDenoteHost) {
				if (url && util.isObject(url) && url instanceof Url) return url;
				var u = new Url();
				u.parse(url, parseQueryString2, slashesDenoteHost);
				return u;
			}
			Url.prototype.parse = function (url, parseQueryString2, slashesDenoteHost) {
				if (!util.isString(url)) {
					throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
				}
				var queryIndex = url.indexOf("?"),
					splitter = queryIndex !== -1 && queryIndex < url.indexOf("#") ? "?" : "#",
					uSplit = url.split(splitter),
					slashRegex = /\\/g;
				uSplit[0] = uSplit[0].replace(slashRegex, "/");
				url = uSplit.join(splitter);
				var rest = url;
				rest = rest.trim();
				if (!slashesDenoteHost && url.split("#").length === 1) {
					var simplePath = simplePathPattern.exec(rest);
					if (simplePath) {
						this.path = rest;
						this.href = rest;
						this.pathname = simplePath[1];
						if (simplePath[2]) {
							this.search = simplePath[2];
							if (parseQueryString2) {
								this.query = querystring.parse(this.search.substr(1));
							} else {
								this.query = this.search.substr(1);
							}
						} else if (parseQueryString2) {
							this.search = "";
							this.query = {};
						}
						return this;
					}
				}
				var proto = protocolPattern.exec(rest);
				if (proto) {
					proto = proto[0];
					var lowerProto = proto.toLowerCase();
					this.protocol = lowerProto;
					rest = rest.substr(proto.length);
				}
				if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
					var slashes = rest.substr(0, 2) === "//";
					if (slashes && !(proto && hostlessProtocol[proto])) {
						rest = rest.substr(2);
						this.slashes = true;
					}
				}
				if (!hostlessProtocol[proto] && (slashes || (proto && !slashedProtocol[proto]))) {
					var hostEnd = -1;
					for (var i = 0; i < hostEndingChars.length; i++) {
						var hec = rest.indexOf(hostEndingChars[i]);
						if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
					}
					var auth, atSign;
					if (hostEnd === -1) {
						atSign = rest.lastIndexOf("@");
					} else {
						atSign = rest.lastIndexOf("@", hostEnd);
					}
					if (atSign !== -1) {
						auth = rest.slice(0, atSign);
						rest = rest.slice(atSign + 1);
						this.auth = decodeURIComponent(auth);
					}
					hostEnd = -1;
					for (var i = 0; i < nonHostChars.length; i++) {
						var hec = rest.indexOf(nonHostChars[i]);
						if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
					}
					if (hostEnd === -1) hostEnd = rest.length;
					this.host = rest.slice(0, hostEnd);
					rest = rest.slice(hostEnd);
					this.parseHost();
					this.hostname = this.hostname || "";
					var ipv6Hostname =
						this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
					if (!ipv6Hostname) {
						var hostparts = this.hostname.split(/\./);
						for (var i = 0, l = hostparts.length; i < l; i++) {
							var part = hostparts[i];
							if (!part) continue;
							if (!part.match(hostnamePartPattern)) {
								var newpart = "";
								for (var j = 0, k = part.length; j < k; j++) {
									if (part.charCodeAt(j) > 127) {
										newpart += "x";
									} else {
										newpart += part[j];
									}
								}
								if (!newpart.match(hostnamePartPattern)) {
									var validParts = hostparts.slice(0, i);
									var notHost = hostparts.slice(i + 1);
									var bit = part.match(hostnamePartStart);
									if (bit) {
										validParts.push(bit[1]);
										notHost.unshift(bit[2]);
									}
									if (notHost.length) {
										rest = "/" + notHost.join(".") + rest;
									}
									this.hostname = validParts.join(".");
									break;
								}
							}
						}
					}
					if (this.hostname.length > hostnameMaxLen) {
						this.hostname = "";
					} else {
						this.hostname = this.hostname.toLowerCase();
					}
					if (!ipv6Hostname) {
						this.hostname = punycode.toASCII(this.hostname);
					}
					var p = this.port ? ":" + this.port : "";
					var h = this.hostname || "";
					this.host = h + p;
					this.href += this.host;
					if (ipv6Hostname) {
						this.hostname = this.hostname.substr(1, this.hostname.length - 2);
						if (rest[0] !== "/") {
							rest = "/" + rest;
						}
					}
				}
				if (!unsafeProtocol[lowerProto]) {
					for (var i = 0, l = autoEscape.length; i < l; i++) {
						var ae = autoEscape[i];
						if (rest.indexOf(ae) === -1) continue;
						var esc = encodeURIComponent(ae);
						if (esc === ae) {
							esc = escape(ae);
						}
						rest = rest.split(ae).join(esc);
					}
				}
				var hash = rest.indexOf("#");
				if (hash !== -1) {
					this.hash = rest.substr(hash);
					rest = rest.slice(0, hash);
				}
				var qm = rest.indexOf("?");
				if (qm !== -1) {
					this.search = rest.substr(qm);
					this.query = rest.substr(qm + 1);
					if (parseQueryString2) {
						this.query = querystring.parse(this.query);
					}
					rest = rest.slice(0, qm);
				} else if (parseQueryString2) {
					this.search = "";
					this.query = {};
				}
				if (rest) this.pathname = rest;
				if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
					this.pathname = "/";
				}
				if (this.pathname || this.search) {
					var p = this.pathname || "";
					var s = this.search || "";
					this.path = p + s;
				}
				this.href = this.format();
				return this;
			};
			function urlFormat(obj) {
				if (util.isString(obj)) obj = urlParse(obj);
				if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
				return obj.format();
			}
			Url.prototype.format = function () {
				var auth = this.auth || "";
				if (auth) {
					auth = encodeURIComponent(auth);
					auth = auth.replace(/%3A/i, ":");
					auth += "@";
				}
				var protocol = this.protocol || "",
					pathname = this.pathname || "",
					hash = this.hash || "",
					host = false,
					query = "";
				if (this.host) {
					host = auth + this.host;
				} else if (this.hostname) {
					host =
						auth + (this.hostname.indexOf(":") === -1 ? this.hostname : "[" + this.hostname + "]");
					if (this.port) {
						host += ":" + this.port;
					}
				}
				if (this.query && util.isObject(this.query) && Object.keys(this.query).length) {
					query = querystring.stringify(this.query);
				}
				var search = this.search || (query && "?" + query) || "";
				if (protocol && protocol.substr(-1) !== ":") protocol += ":";
				if (this.slashes || ((!protocol || slashedProtocol[protocol]) && host !== false)) {
					host = "//" + (host || "");
					if (pathname && pathname.charAt(0) !== "/") pathname = "/" + pathname;
				} else if (!host) {
					host = "";
				}
				if (hash && hash.charAt(0) !== "#") hash = "#" + hash;
				if (search && search.charAt(0) !== "?") search = "?" + search;
				pathname = pathname.replace(/[?#]/g, function (match) {
					return encodeURIComponent(match);
				});
				search = search.replace("#", "%23");
				return protocol + host + pathname + search + hash;
			};
			function urlResolve(source, relative) {
				return urlParse(source, false, true).resolve(relative);
			}
			Url.prototype.resolve = function (relative) {
				return this.resolveObject(urlParse(relative, false, true)).format();
			};
			function urlResolveObject(source, relative) {
				if (!source) return relative;
				return urlParse(source, false, true).resolveObject(relative);
			}
			Url.prototype.resolveObject = function (relative) {
				if (util.isString(relative)) {
					var rel = new Url();
					rel.parse(relative, false, true);
					relative = rel;
				}
				var result = new Url();
				var tkeys = Object.keys(this);
				for (var tk = 0; tk < tkeys.length; tk++) {
					var tkey = tkeys[tk];
					result[tkey] = this[tkey];
				}
				result.hash = relative.hash;
				if (relative.href === "") {
					result.href = result.format();
					return result;
				}
				if (relative.slashes && !relative.protocol) {
					var rkeys = Object.keys(relative);
					for (var rk = 0; rk < rkeys.length; rk++) {
						var rkey = rkeys[rk];
						if (rkey !== "protocol") result[rkey] = relative[rkey];
					}
					if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
						result.path = result.pathname = "/";
					}
					result.href = result.format();
					return result;
				}
				if (relative.protocol && relative.protocol !== result.protocol) {
					if (!slashedProtocol[relative.protocol]) {
						var keys2 = Object.keys(relative);
						for (var v = 0; v < keys2.length; v++) {
							var k = keys2[v];
							result[k] = relative[k];
						}
						result.href = result.format();
						return result;
					}
					result.protocol = relative.protocol;
					if (!relative.host && !hostlessProtocol[relative.protocol]) {
						var relPath = (relative.pathname || "").split("/");
						while (relPath.length && !(relative.host = relPath.shift()));
						if (!relative.host) relative.host = "";
						if (!relative.hostname) relative.hostname = "";
						if (relPath[0] !== "") relPath.unshift("");
						if (relPath.length < 2) relPath.unshift("");
						result.pathname = relPath.join("/");
					} else {
						result.pathname = relative.pathname;
					}
					result.search = relative.search;
					result.query = relative.query;
					result.host = relative.host || "";
					result.auth = relative.auth;
					result.hostname = relative.hostname || relative.host;
					result.port = relative.port;
					if (result.pathname || result.search) {
						var p = result.pathname || "";
						var s = result.search || "";
						result.path = p + s;
					}
					result.slashes = result.slashes || relative.slashes;
					result.href = result.format();
					return result;
				}
				var isSourceAbs = result.pathname && result.pathname.charAt(0) === "/",
					isRelAbs = relative.host || (relative.pathname && relative.pathname.charAt(0) === "/"),
					mustEndAbs = isRelAbs || isSourceAbs || (result.host && relative.pathname),
					removeAllDots = mustEndAbs,
					srcPath = (result.pathname && result.pathname.split("/")) || [],
					relPath = (relative.pathname && relative.pathname.split("/")) || [],
					psychotic = result.protocol && !slashedProtocol[result.protocol];
				if (psychotic) {
					result.hostname = "";
					result.port = null;
					if (result.host) {
						if (srcPath[0] === "") srcPath[0] = result.host;
						else srcPath.unshift(result.host);
					}
					result.host = "";
					if (relative.protocol) {
						relative.hostname = null;
						relative.port = null;
						if (relative.host) {
							if (relPath[0] === "") relPath[0] = relative.host;
							else relPath.unshift(relative.host);
						}
						relative.host = null;
					}
					mustEndAbs = mustEndAbs && (relPath[0] === "" || srcPath[0] === "");
				}
				if (isRelAbs) {
					result.host = relative.host || relative.host === "" ? relative.host : result.host;
					result.hostname =
						relative.hostname || relative.hostname === "" ? relative.hostname : result.hostname;
					result.search = relative.search;
					result.query = relative.query;
					srcPath = relPath;
				} else if (relPath.length) {
					if (!srcPath) srcPath = [];
					srcPath.pop();
					srcPath = srcPath.concat(relPath);
					result.search = relative.search;
					result.query = relative.query;
				} else if (!util.isNullOrUndefined(relative.search)) {
					if (psychotic) {
						result.hostname = result.host = srcPath.shift();
						var authInHost =
							result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
						if (authInHost) {
							result.auth = authInHost.shift();
							result.host = result.hostname = authInHost.shift();
						}
					}
					result.search = relative.search;
					result.query = relative.query;
					if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
						result.path =
							(result.pathname ? result.pathname : "") + (result.search ? result.search : "");
					}
					result.href = result.format();
					return result;
				}
				if (!srcPath.length) {
					result.pathname = null;
					if (result.search) {
						result.path = "/" + result.search;
					} else {
						result.path = null;
					}
					result.href = result.format();
					return result;
				}
				var last = srcPath.slice(-1)[0];
				var hasTrailingSlash =
					((result.host || relative.host || srcPath.length > 1) &&
						(last === "." || last === "..")) ||
					last === "";
				var up = 0;
				for (var i = srcPath.length; i >= 0; i--) {
					last = srcPath[i];
					if (last === ".") {
						srcPath.splice(i, 1);
					} else if (last === "..") {
						srcPath.splice(i, 1);
						up++;
					} else if (up) {
						srcPath.splice(i, 1);
						up--;
					}
				}
				if (!mustEndAbs && !removeAllDots) {
					for (; up--; up) {
						srcPath.unshift("..");
					}
				}
				if (mustEndAbs && srcPath[0] !== "" && (!srcPath[0] || srcPath[0].charAt(0) !== "/")) {
					srcPath.unshift("");
				}
				if (hasTrailingSlash && srcPath.join("/").substr(-1) !== "/") {
					srcPath.push("");
				}
				var isAbsolute = srcPath[0] === "" || (srcPath[0] && srcPath[0].charAt(0) === "/");
				if (psychotic) {
					result.hostname = result.host = isAbsolute ? "" : srcPath.length ? srcPath.shift() : "";
					var authInHost =
						result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
					if (authInHost) {
						result.auth = authInHost.shift();
						result.host = result.hostname = authInHost.shift();
					}
				}
				mustEndAbs = mustEndAbs || (result.host && srcPath.length);
				if (mustEndAbs && !isAbsolute) {
					srcPath.unshift("");
				}
				if (!srcPath.length) {
					result.pathname = null;
					result.path = null;
				} else {
					result.pathname = srcPath.join("/");
				}
				if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
					result.path =
						(result.pathname ? result.pathname : "") + (result.search ? result.search : "");
				}
				result.auth = relative.auth || result.auth;
				result.slashes = result.slashes || relative.slashes;
				result.href = result.format();
				return result;
			};
			Url.prototype.parseHost = function () {
				var host = this.host;
				var port = portPattern.exec(host);
				if (port) {
					port = port[0];
					if (port !== ":") {
						this.port = port.substr(1);
					}
					host = host.substr(0, host.length - port.length);
				}
				if (host) this.hostname = host;
			};
		},
	});

	// ../../node_modules/tslib/tslib.js
	var require_tslib2 = __commonJS({
		"../../node_modules/tslib/tslib.js"(exports, module2) {
			var __extends5;
			var __assign12;
			var __rest5;
			var __decorate3;
			var __param3;
			var __metadata3;
			var __awaiter9;
			var __generator9;
			var __exportStar3;
			var __values6;
			var __read14;
			var __spread6;
			var __spreadArrays3;
			var __await3;
			var __asyncGenerator3;
			var __asyncDelegator3;
			var __asyncValues3;
			var __makeTemplateObject3;
			var __importStar3;
			var __importDefault3;
			var __classPrivateFieldGet3;
			var __classPrivateFieldSet3;
			var __createBinding3;
			(function (factory) {
				var root =
					typeof global === "object"
						? global
						: typeof self === "object"
						? self
						: typeof this === "object"
						? this
						: {};
				if (typeof define === "function" && define.amd) {
					define("tslib", ["exports"], function (exports2) {
						factory(createExporter(root, createExporter(exports2)));
					});
				} else if (typeof module2 === "object" && typeof module2.exports === "object") {
					factory(createExporter(root, createExporter(module2.exports)));
				} else {
					factory(createExporter(root));
				}
				function createExporter(exports2, previous) {
					if (exports2 !== root) {
						if (typeof Object.create === "function") {
							Object.defineProperty(exports2, "__esModule", { value: true });
						} else {
							exports2.__esModule = true;
						}
					}
					return function (id, v) {
						return (exports2[id] = previous ? previous(id, v) : v);
					};
				}
			})(function (exporter) {
				var extendStatics =
					Object.setPrototypeOf ||
					({ __proto__: [] } instanceof Array &&
						function (d, b) {
							d.__proto__ = b;
						}) ||
					function (d, b) {
						for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
					};
				__extends5 = function (d, b) {
					extendStatics(d, b);
					function __() {
						this.constructor = d;
					}
					d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
				};
				__assign12 =
					Object.assign ||
					function (t) {
						for (var s, i = 1, n = arguments.length; i < n; i++) {
							s = arguments[i];
							for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
						}
						return t;
					};
				__rest5 = function (s, e) {
					var t = {};
					for (var p in s)
						if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
					if (s != null && typeof Object.getOwnPropertySymbols === "function")
						for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
							if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
								t[p[i]] = s[p[i]];
						}
					return t;
				};
				__decorate3 = function (decorators, target, key, desc) {
					var c20 = arguments.length,
						r =
							c20 < 3
								? target
								: desc === null
								? (desc = Object.getOwnPropertyDescriptor(target, key))
								: desc,
						d;
					if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
						r = Reflect.decorate(decorators, target, key, desc);
					else
						for (var i = decorators.length - 1; i >= 0; i--)
							if ((d = decorators[i]))
								r = (c20 < 3 ? d(r) : c20 > 3 ? d(target, key, r) : d(target, key)) || r;
					return c20 > 3 && r && Object.defineProperty(target, key, r), r;
				};
				__param3 = function (paramIndex, decorator) {
					return function (target, key) {
						decorator(target, key, paramIndex);
					};
				};
				__metadata3 = function (metadataKey, metadataValue) {
					if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
						return Reflect.metadata(metadataKey, metadataValue);
				};
				__awaiter9 = function (thisArg, _arguments, P, generator) {
					function adopt(value) {
						return value instanceof P
							? value
							: new P(function (resolve) {
									resolve(value);
							  });
					}
					return new (P || (P = Promise))(function (resolve, reject) {
						function fulfilled(value) {
							try {
								step(generator.next(value));
							} catch (e) {
								reject(e);
							}
						}
						function rejected(value) {
							try {
								step(generator["throw"](value));
							} catch (e) {
								reject(e);
							}
						}
						function step(result) {
							result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
						}
						step((generator = generator.apply(thisArg, _arguments || [])).next());
					});
				};
				__generator9 = function (thisArg, body) {
					var _ = {
							label: 0,
							sent: function () {
								if (t[0] & 1) throw t[1];
								return t[1];
							},
							trys: [],
							ops: [],
						},
						f,
						y,
						t,
						g;
					return (
						(g = { next: verb(0), throw: verb(1), return: verb(2) }),
						typeof Symbol === "function" &&
							(g[Symbol.iterator] = function () {
								return this;
							}),
						g
					);
					function verb(n) {
						return function (v) {
							return step([n, v]);
						};
					}
					function step(op) {
						if (f) throw new TypeError("Generator is already executing.");
						while (_)
							try {
								if (
									((f = 1),
									y &&
										(t =
											op[0] & 2
												? y["return"]
												: op[0]
												? y["throw"] || ((t = y["return"]) && t.call(y), 0)
												: y.next) &&
										!(t = t.call(y, op[1])).done)
								)
									return t;
								if (((y = 0), t)) op = [op[0] & 2, t.value];
								switch (op[0]) {
									case 0:
									case 1:
										t = op;
										break;
									case 4:
										_.label++;
										return { value: op[1], done: false };
									case 5:
										_.label++;
										y = op[1];
										op = [0];
										continue;
									case 7:
										op = _.ops.pop();
										_.trys.pop();
										continue;
									default:
										if (
											!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) &&
											(op[0] === 6 || op[0] === 2)
										) {
											_ = 0;
											continue;
										}
										if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
											_.label = op[1];
											break;
										}
										if (op[0] === 6 && _.label < t[1]) {
											_.label = t[1];
											t = op;
											break;
										}
										if (t && _.label < t[2]) {
											_.label = t[2];
											_.ops.push(op);
											break;
										}
										if (t[2]) _.ops.pop();
										_.trys.pop();
										continue;
								}
								op = body.call(thisArg, _);
							} catch (e) {
								op = [6, e];
								y = 0;
							} finally {
								f = t = 0;
							}
						if (op[0] & 5) throw op[1];
						return { value: op[0] ? op[1] : void 0, done: true };
					}
				};
				__createBinding3 = function (o, m, k, k2) {
					if (k2 === void 0) k2 = k;
					o[k2] = m[k];
				};
				__exportStar3 = function (m, exports2) {
					for (var p in m) if (p !== "default" && !exports2.hasOwnProperty(p)) exports2[p] = m[p];
				};
				__values6 = function (o) {
					var s = typeof Symbol === "function" && Symbol.iterator,
						m = s && o[s],
						i = 0;
					if (m) return m.call(o);
					if (o && typeof o.length === "number")
						return {
							next: function () {
								if (o && i >= o.length) o = void 0;
								return { value: o && o[i++], done: !o };
							},
						};
					throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
				};
				__read14 = function (o, n) {
					var m = typeof Symbol === "function" && o[Symbol.iterator];
					if (!m) return o;
					var i = m.call(o),
						r,
						ar = [],
						e;
					try {
						while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
					} catch (error3) {
						e = { error: error3 };
					} finally {
						try {
							if (r && !r.done && (m = i["return"])) m.call(i);
						} finally {
							if (e) throw e.error;
						}
					}
					return ar;
				};
				__spread6 = function () {
					for (var ar = [], i = 0; i < arguments.length; i++)
						ar = ar.concat(__read14(arguments[i]));
					return ar;
				};
				__spreadArrays3 = function () {
					for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
					for (var r = Array(s), k = 0, i = 0; i < il; i++)
						for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
					return r;
				};
				__await3 = function (v) {
					return this instanceof __await3 ? ((this.v = v), this) : new __await3(v);
				};
				__asyncGenerator3 = function (thisArg, _arguments, generator) {
					if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
					var g = generator.apply(thisArg, _arguments || []),
						i,
						q = [];
					return (
						(i = {}),
						verb("next"),
						verb("throw"),
						verb("return"),
						(i[Symbol.asyncIterator] = function () {
							return this;
						}),
						i
					);
					function verb(n) {
						if (g[n])
							i[n] = function (v) {
								return new Promise(function (a, b) {
									q.push([n, v, a, b]) > 1 || resume(n, v);
								});
							};
					}
					function resume(n, v) {
						try {
							step(g[n](v));
						} catch (e) {
							settle(q[0][3], e);
						}
					}
					function step(r) {
						r.value instanceof __await3
							? Promise.resolve(r.value.v).then(fulfill, reject)
							: settle(q[0][2], r);
					}
					function fulfill(value) {
						resume("next", value);
					}
					function reject(value) {
						resume("throw", value);
					}
					function settle(f, v) {
						if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
					}
				};
				__asyncDelegator3 = function (o) {
					var i, p;
					return (
						(i = {}),
						verb("next"),
						verb("throw", function (e) {
							throw e;
						}),
						verb("return"),
						(i[Symbol.iterator] = function () {
							return this;
						}),
						i
					);
					function verb(n, f) {
						i[n] = o[n]
							? function (v) {
									return (p = !p)
										? { value: __await3(o[n](v)), done: n === "return" }
										: f
										? f(v)
										: v;
							  }
							: f;
					}
				};
				__asyncValues3 = function (o) {
					if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
					var m = o[Symbol.asyncIterator],
						i;
					return m
						? m.call(o)
						: ((o = typeof __values6 === "function" ? __values6(o) : o[Symbol.iterator]()),
						  (i = {}),
						  verb("next"),
						  verb("throw"),
						  verb("return"),
						  (i[Symbol.asyncIterator] = function () {
								return this;
						  }),
						  i);
					function verb(n) {
						i[n] =
							o[n] &&
							function (v) {
								return new Promise(function (resolve, reject) {
									(v = o[n](v)), settle(resolve, reject, v.done, v.value);
								});
							};
					}
					function settle(resolve, reject, d, v) {
						Promise.resolve(v).then(function (v2) {
							resolve({ value: v2, done: d });
						}, reject);
					}
				};
				__makeTemplateObject3 = function (cooked, raw) {
					if (Object.defineProperty) {
						Object.defineProperty(cooked, "raw", { value: raw });
					} else {
						cooked.raw = raw;
					}
					return cooked;
				};
				__importStar3 = function (mod) {
					if (mod && mod.__esModule) return mod;
					var result = {};
					if (mod != null) {
						for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
					}
					result["default"] = mod;
					return result;
				};
				__importDefault3 = function (mod) {
					return mod && mod.__esModule ? mod : { default: mod };
				};
				__classPrivateFieldGet3 = function (receiver, privateMap) {
					if (!privateMap.has(receiver)) {
						throw new TypeError("attempted to get private field on non-instance");
					}
					return privateMap.get(receiver);
				};
				__classPrivateFieldSet3 = function (receiver, privateMap, value) {
					if (!privateMap.has(receiver)) {
						throw new TypeError("attempted to set private field on non-instance");
					}
					privateMap.set(receiver, value);
					return value;
				};
				exporter("__extends", __extends5);
				exporter("__assign", __assign12);
				exporter("__rest", __rest5);
				exporter("__decorate", __decorate3);
				exporter("__param", __param3);
				exporter("__metadata", __metadata3);
				exporter("__awaiter", __awaiter9);
				exporter("__generator", __generator9);
				exporter("__exportStar", __exportStar3);
				exporter("__createBinding", __createBinding3);
				exporter("__values", __values6);
				exporter("__read", __read14);
				exporter("__spread", __spread6);
				exporter("__spreadArrays", __spreadArrays3);
				exporter("__await", __await3);
				exporter("__asyncGenerator", __asyncGenerator3);
				exporter("__asyncDelegator", __asyncDelegator3);
				exporter("__asyncValues", __asyncValues3);
				exporter("__makeTemplateObject", __makeTemplateObject3);
				exporter("__importStar", __importStar3);
				exporter("__importDefault", __importDefault3);
				exporter("__classPrivateFieldGet", __classPrivateFieldGet3);
				exporter("__classPrivateFieldSet", __classPrivateFieldSet3);
			});
		},
	});

	// ../../node_modules/@aws-crypto/sha256-browser/build/isEmptyData.js
	var require_isEmptyData = __commonJS({
		"../../node_modules/@aws-crypto/sha256-browser/build/isEmptyData.js"(exports) {
			"use strict";
			Object.defineProperty(exports, "__esModule", { value: true });
			exports.isEmptyData = void 0;
			function isEmptyData(data) {
				if (typeof data === "string") {
					return data.length === 0;
				}
				return data.byteLength === 0;
			}
			exports.isEmptyData = isEmptyData;
		},
	});

	// ../../node_modules/@aws-crypto/sha256-browser/build/constants.js
	var require_constants2 = __commonJS({
		"../../node_modules/@aws-crypto/sha256-browser/build/constants.js"(exports) {
			"use strict";
			Object.defineProperty(exports, "__esModule", { value: true });
			exports.EMPTY_DATA_SHA_256 = exports.SHA_256_HMAC_ALGO = exports.SHA_256_HASH = void 0;
			exports.SHA_256_HASH = { name: "SHA-256" };
			exports.SHA_256_HMAC_ALGO = {
				name: "HMAC",
				hash: exports.SHA_256_HASH,
			};
			exports.EMPTY_DATA_SHA_256 = new Uint8Array([
				227, 176, 196, 66, 152, 252, 28, 20, 154, 251, 244, 200, 153, 111, 185, 36, 39, 174, 65,
				228, 100, 155, 147, 76, 164, 149, 153, 27, 120, 82, 184, 85,
			]);
		},
	});

	// ../../node_modules/@aws-sdk/util-utf8-browser/dist/cjs/pureJs.js
	var require_pureJs = __commonJS({
		"../../node_modules/@aws-sdk/util-utf8-browser/dist/cjs/pureJs.js"(exports) {
			"use strict";
			Object.defineProperty(exports, "__esModule", { value: true });
			exports.toUtf8 = exports.fromUtf8 = void 0;
			var fromUtf84 = (input) => {
				const bytes = [];
				for (let i = 0, len = input.length; i < len; i++) {
					const value = input.charCodeAt(i);
					if (value < 128) {
						bytes.push(value);
					} else if (value < 2048) {
						bytes.push((value >> 6) | 192, (value & 63) | 128);
					} else if (
						i + 1 < input.length &&
						(value & 64512) === 55296 &&
						(input.charCodeAt(i + 1) & 64512) === 56320
					) {
						const surrogatePair = 65536 + ((value & 1023) << 10) + (input.charCodeAt(++i) & 1023);
						bytes.push(
							(surrogatePair >> 18) | 240,
							((surrogatePair >> 12) & 63) | 128,
							((surrogatePair >> 6) & 63) | 128,
							(surrogatePair & 63) | 128
						);
					} else {
						bytes.push((value >> 12) | 224, ((value >> 6) & 63) | 128, (value & 63) | 128);
					}
				}
				return Uint8Array.from(bytes);
			};
			exports.fromUtf8 = fromUtf84;
			var toUtf84 = (input) => {
				let decoded = "";
				for (let i = 0, len = input.length; i < len; i++) {
					const byte = input[i];
					if (byte < 128) {
						decoded += String.fromCharCode(byte);
					} else if (192 <= byte && byte < 224) {
						const nextByte = input[++i];
						decoded += String.fromCharCode(((byte & 31) << 6) | (nextByte & 63));
					} else if (240 <= byte && byte < 365) {
						const surrogatePair = [byte, input[++i], input[++i], input[++i]];
						const encoded =
							"%" + surrogatePair.map((byteValue) => byteValue.toString(16)).join("%");
						decoded += decodeURIComponent(encoded);
					} else {
						decoded += String.fromCharCode(
							((byte & 15) << 12) | ((input[++i] & 63) << 6) | (input[++i] & 63)
						);
					}
				}
				return decoded;
			};
			exports.toUtf8 = toUtf84;
		},
	});

	// ../../node_modules/@aws-sdk/util-utf8-browser/dist/cjs/whatwgEncodingApi.js
	var require_whatwgEncodingApi = __commonJS({
		"../../node_modules/@aws-sdk/util-utf8-browser/dist/cjs/whatwgEncodingApi.js"(exports) {
			"use strict";
			Object.defineProperty(exports, "__esModule", { value: true });
			exports.toUtf8 = exports.fromUtf8 = void 0;
			function fromUtf84(input) {
				return new TextEncoder().encode(input);
			}
			exports.fromUtf8 = fromUtf84;
			function toUtf84(input) {
				return new TextDecoder("utf-8").decode(input);
			}
			exports.toUtf8 = toUtf84;
		},
	});

	// ../../node_modules/@aws-sdk/util-utf8-browser/dist/cjs/index.js
	var require_cjs = __commonJS({
		"../../node_modules/@aws-sdk/util-utf8-browser/dist/cjs/index.js"(exports) {
			"use strict";
			Object.defineProperty(exports, "__esModule", { value: true });
			exports.toUtf8 = exports.fromUtf8 = void 0;
			var pureJs_1 = require_pureJs();
			var whatwgEncodingApi_1 = require_whatwgEncodingApi();
			var fromUtf84 = (input) =>
				typeof TextEncoder === "function"
					? whatwgEncodingApi_1.fromUtf8(input)
					: pureJs_1.fromUtf8(input);
			exports.fromUtf8 = fromUtf84;
			var toUtf84 = (input) =>
				typeof TextDecoder === "function"
					? whatwgEncodingApi_1.toUtf8(input)
					: pureJs_1.toUtf8(input);
			exports.toUtf8 = toUtf84;
		},
	});

	// ../../node_modules/@aws-sdk/util-locate-window/dist/cjs/index.js
	var require_cjs2 = __commonJS({
		"../../node_modules/@aws-sdk/util-locate-window/dist/cjs/index.js"(exports) {
			Object.defineProperty(exports, "__esModule", { value: true });
			exports.locateWindow = void 0;
			var fallbackWindow = {};
			function locateWindow() {
				if (typeof window !== "undefined") {
					return window;
				} else if (typeof self !== "undefined") {
					return self;
				}
				return fallbackWindow;
			}
			exports.locateWindow = locateWindow;
		},
	});

	// ../../node_modules/@aws-crypto/sha256-browser/build/ie11Sha256.js
	var require_ie11Sha256 = __commonJS({
		"../../node_modules/@aws-crypto/sha256-browser/build/ie11Sha256.js"(exports) {
			"use strict";
			Object.defineProperty(exports, "__esModule", { value: true });
			exports.Sha256 = void 0;
			var isEmptyData_1 = require_isEmptyData();
			var constants_1 = require_constants2();
			var util_utf8_browser_1 = require_cjs();
			var util_locate_window_1 = require_cjs2();
			var Sha2562 = (function () {
				function Sha2563(secret) {
					if (secret) {
						this.operation = getKeyPromise(secret).then(function (keyData) {
							return util_locate_window_1
								.locateWindow()
								.msCrypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, keyData);
						});
						this.operation.catch(function () {});
					} else {
						this.operation = Promise.resolve(
							util_locate_window_1.locateWindow().msCrypto.subtle.digest("SHA-256")
						);
					}
				}
				Sha2563.prototype.update = function (toHash) {
					var _this = this;
					if (isEmptyData_1.isEmptyData(toHash)) {
						return;
					}
					this.operation = this.operation.then(function (operation) {
						operation.onerror = function () {
							_this.operation = Promise.reject(new Error("Error encountered updating hash"));
						};
						operation.process(toArrayBufferView(toHash));
						return operation;
					});
					this.operation.catch(function () {});
				};
				Sha2563.prototype.digest = function () {
					return this.operation.then(function (operation) {
						return new Promise(function (resolve, reject) {
							operation.onerror = function () {
								reject(new Error("Error encountered finalizing hash"));
							};
							operation.oncomplete = function () {
								if (operation.result) {
									resolve(new Uint8Array(operation.result));
								}
								reject(new Error("Error encountered finalizing hash"));
							};
							operation.finish();
						});
					});
				};
				return Sha2563;
			})();
			exports.Sha256 = Sha2562;
			function getKeyPromise(secret) {
				return new Promise(function (resolve, reject) {
					var keyOperation = util_locate_window_1
						.locateWindow()
						.msCrypto.subtle.importKey(
							"raw",
							toArrayBufferView(secret),
							constants_1.SHA_256_HMAC_ALGO,
							false,
							["sign"]
						);
					keyOperation.oncomplete = function () {
						if (keyOperation.result) {
							resolve(keyOperation.result);
						}
						reject(new Error("ImportKey completed without importing key."));
					};
					keyOperation.onerror = function () {
						reject(new Error("ImportKey failed to import key."));
					};
				});
			}
			function toArrayBufferView(data) {
				if (typeof data === "string") {
					return util_utf8_browser_1.fromUtf8(data);
				}
				if (ArrayBuffer.isView(data)) {
					return new Uint8Array(
						data.buffer,
						data.byteOffset,
						data.byteLength / Uint8Array.BYTES_PER_ELEMENT
					);
				}
				return new Uint8Array(data);
			}
		},
	});

	// ../../node_modules/@aws-crypto/sha256-browser/build/webCryptoSha256.js
	var require_webCryptoSha256 = __commonJS({
		"../../node_modules/@aws-crypto/sha256-browser/build/webCryptoSha256.js"(exports) {
			"use strict";
			Object.defineProperty(exports, "__esModule", { value: true });
			exports.Sha256 = void 0;
			var util_utf8_browser_1 = require_cjs();
			var isEmptyData_1 = require_isEmptyData();
			var constants_1 = require_constants2();
			var util_locate_window_1 = require_cjs2();
			var Sha2562 = (function () {
				function Sha2563(secret) {
					this.toHash = new Uint8Array(0);
					if (secret !== void 0) {
						this.key = new Promise(function (resolve, reject) {
							util_locate_window_1
								.locateWindow()
								.crypto.subtle.importKey(
									"raw",
									convertToBuffer(secret),
									constants_1.SHA_256_HMAC_ALGO,
									false,
									["sign"]
								)
								.then(resolve, reject);
						});
						this.key.catch(function () {});
					}
				}
				Sha2563.prototype.update = function (data) {
					if (isEmptyData_1.isEmptyData(data)) {
						return;
					}
					var update2 = convertToBuffer(data);
					var typedArray = new Uint8Array(this.toHash.byteLength + update2.byteLength);
					typedArray.set(this.toHash, 0);
					typedArray.set(update2, this.toHash.byteLength);
					this.toHash = typedArray;
				};
				Sha2563.prototype.digest = function () {
					var _this = this;
					if (this.key) {
						return this.key.then(function (key) {
							return util_locate_window_1
								.locateWindow()
								.crypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, key, _this.toHash)
								.then(function (data) {
									return new Uint8Array(data);
								});
						});
					}
					if (isEmptyData_1.isEmptyData(this.toHash)) {
						return Promise.resolve(constants_1.EMPTY_DATA_SHA_256);
					}
					return Promise.resolve()
						.then(function () {
							return util_locate_window_1
								.locateWindow()
								.crypto.subtle.digest(constants_1.SHA_256_HASH, _this.toHash);
						})
						.then(function (data) {
							return Promise.resolve(new Uint8Array(data));
						});
				};
				return Sha2563;
			})();
			exports.Sha256 = Sha2562;
			function convertToBuffer(data) {
				if (typeof data === "string") {
					return util_utf8_browser_1.fromUtf8(data);
				}
				if (ArrayBuffer.isView(data)) {
					return new Uint8Array(
						data.buffer,
						data.byteOffset,
						data.byteLength / Uint8Array.BYTES_PER_ELEMENT
					);
				}
				return new Uint8Array(data);
			}
		},
	});

	// ../../node_modules/@aws-crypto/sha256-js/build/constants.js
	var require_constants3 = __commonJS({
		"../../node_modules/@aws-crypto/sha256-js/build/constants.js"(exports) {
			"use strict";
			Object.defineProperty(exports, "__esModule", { value: true });
			exports.MAX_HASHABLE_LENGTH =
				exports.INIT =
				exports.KEY =
				exports.DIGEST_LENGTH =
				exports.BLOCK_SIZE =
					void 0;
			exports.BLOCK_SIZE = 64;
			exports.DIGEST_LENGTH = 32;
			exports.KEY = new Uint32Array([
				1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748,
				2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206,
				2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122,
				1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891,
				3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700,
				1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771,
				3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877,
				958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452,
				2361852424, 2428436474, 2756734187, 3204031479, 3329325298,
			]);
			exports.INIT = [
				1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635,
				1541459225,
			];
			exports.MAX_HASHABLE_LENGTH = Math.pow(2, 53) - 1;
		},
	});

	// ../../node_modules/@aws-crypto/sha256-js/build/RawSha256.js
	var require_RawSha256 = __commonJS({
		"../../node_modules/@aws-crypto/sha256-js/build/RawSha256.js"(exports) {
			"use strict";
			Object.defineProperty(exports, "__esModule", { value: true });
			exports.RawSha256 = void 0;
			var constants_1 = require_constants3();
			var RawSha256 = (function () {
				function RawSha2562() {
					this.state = Int32Array.from(constants_1.INIT);
					this.temp = new Int32Array(64);
					this.buffer = new Uint8Array(64);
					this.bufferLength = 0;
					this.bytesHashed = 0;
					this.finished = false;
				}
				RawSha2562.prototype.update = function (data) {
					if (this.finished) {
						throw new Error("Attempted to update an already finished hash.");
					}
					var position = 0;
					var byteLength = data.byteLength;
					this.bytesHashed += byteLength;
					if (this.bytesHashed * 8 > constants_1.MAX_HASHABLE_LENGTH) {
						throw new Error("Cannot hash more than 2^53 - 1 bits");
					}
					while (byteLength > 0) {
						this.buffer[this.bufferLength++] = data[position++];
						byteLength--;
						if (this.bufferLength === constants_1.BLOCK_SIZE) {
							this.hashBuffer();
							this.bufferLength = 0;
						}
					}
				};
				RawSha2562.prototype.digest = function () {
					if (!this.finished) {
						var bitsHashed = this.bytesHashed * 8;
						var bufferView = new DataView(
							this.buffer.buffer,
							this.buffer.byteOffset,
							this.buffer.byteLength
						);
						var undecoratedLength = this.bufferLength;
						bufferView.setUint8(this.bufferLength++, 128);
						if (undecoratedLength % constants_1.BLOCK_SIZE >= constants_1.BLOCK_SIZE - 8) {
							for (var i = this.bufferLength; i < constants_1.BLOCK_SIZE; i++) {
								bufferView.setUint8(i, 0);
							}
							this.hashBuffer();
							this.bufferLength = 0;
						}
						for (var i = this.bufferLength; i < constants_1.BLOCK_SIZE - 8; i++) {
							bufferView.setUint8(i, 0);
						}
						bufferView.setUint32(
							constants_1.BLOCK_SIZE - 8,
							Math.floor(bitsHashed / 4294967296),
							true
						);
						bufferView.setUint32(constants_1.BLOCK_SIZE - 4, bitsHashed);
						this.hashBuffer();
						this.finished = true;
					}
					var out = new Uint8Array(constants_1.DIGEST_LENGTH);
					for (var i = 0; i < 8; i++) {
						out[i * 4] = (this.state[i] >>> 24) & 255;
						out[i * 4 + 1] = (this.state[i] >>> 16) & 255;
						out[i * 4 + 2] = (this.state[i] >>> 8) & 255;
						out[i * 4 + 3] = (this.state[i] >>> 0) & 255;
					}
					return out;
				};
				RawSha2562.prototype.hashBuffer = function () {
					var _a = this,
						buffer = _a.buffer,
						state = _a.state;
					var state0 = state[0],
						state1 = state[1],
						state2 = state[2],
						state3 = state[3],
						state4 = state[4],
						state5 = state[5],
						state6 = state[6],
						state7 = state[7];
					for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {
						if (i < 16) {
							this.temp[i] =
								((buffer[i * 4] & 255) << 24) |
								((buffer[i * 4 + 1] & 255) << 16) |
								((buffer[i * 4 + 2] & 255) << 8) |
								(buffer[i * 4 + 3] & 255);
						} else {
							var u = this.temp[i - 2];
							var t1_1 = ((u >>> 17) | (u << 15)) ^ ((u >>> 19) | (u << 13)) ^ (u >>> 10);
							u = this.temp[i - 15];
							var t2_1 = ((u >>> 7) | (u << 25)) ^ ((u >>> 18) | (u << 14)) ^ (u >>> 3);
							this.temp[i] = ((t1_1 + this.temp[i - 7]) | 0) + ((t2_1 + this.temp[i - 16]) | 0);
						}
						var t1 =
							((((((state4 >>> 6) | (state4 << 26)) ^
								((state4 >>> 11) | (state4 << 21)) ^
								((state4 >>> 25) | (state4 << 7))) +
								((state4 & state5) ^ (~state4 & state6))) |
								0) +
								((state7 + ((constants_1.KEY[i] + this.temp[i]) | 0)) | 0)) |
							0;
						var t2 =
							((((state0 >>> 2) | (state0 << 30)) ^
								((state0 >>> 13) | (state0 << 19)) ^
								((state0 >>> 22) | (state0 << 10))) +
								((state0 & state1) ^ (state0 & state2) ^ (state1 & state2))) |
							0;
						state7 = state6;
						state6 = state5;
						state5 = state4;
						state4 = (state3 + t1) | 0;
						state3 = state2;
						state2 = state1;
						state1 = state0;
						state0 = (t1 + t2) | 0;
					}
					state[0] += state0;
					state[1] += state1;
					state[2] += state2;
					state[3] += state3;
					state[4] += state4;
					state[5] += state5;
					state[6] += state6;
					state[7] += state7;
				};
				return RawSha2562;
			})();
			exports.RawSha256 = RawSha256;
		},
	});

	// ../../node_modules/@aws-crypto/sha256-js/build/jsSha256.js
	var require_jsSha256 = __commonJS({
		"../../node_modules/@aws-crypto/sha256-js/build/jsSha256.js"(exports) {
			"use strict";
			Object.defineProperty(exports, "__esModule", { value: true });
			exports.Sha256 = void 0;
			var tslib_1 = require_tslib2();
			var constants_1 = require_constants3();
			var RawSha256_1 = require_RawSha256();
			var util_utf8_browser_1 = require_cjs();
			var Sha2562 = (function () {
				function Sha2563(secret) {
					this.hash = new RawSha256_1.RawSha256();
					if (secret) {
						this.outer = new RawSha256_1.RawSha256();
						var inner = bufferFromSecret(secret);
						var outer = new Uint8Array(constants_1.BLOCK_SIZE);
						outer.set(inner);
						for (var i = 0; i < constants_1.BLOCK_SIZE; i++) {
							inner[i] ^= 54;
							outer[i] ^= 92;
						}
						this.hash.update(inner);
						this.outer.update(outer);
						for (var i = 0; i < inner.byteLength; i++) {
							inner[i] = 0;
						}
					}
				}
				Sha2563.prototype.update = function (toHash) {
					if (isEmptyData(toHash) || this.error) {
						return;
					}
					try {
						this.hash.update(convertToBuffer(toHash));
					} catch (e) {
						this.error = e;
					}
				};
				Sha2563.prototype.digestSync = function () {
					if (this.error) {
						throw this.error;
					}
					if (this.outer) {
						if (!this.outer.finished) {
							this.outer.update(this.hash.digest());
						}
						return this.outer.digest();
					}
					return this.hash.digest();
				};
				Sha2563.prototype.digest = function () {
					return tslib_1.__awaiter(this, void 0, void 0, function () {
						return tslib_1.__generator(this, function (_a) {
							return [2, this.digestSync()];
						});
					});
				};
				return Sha2563;
			})();
			exports.Sha256 = Sha2562;
			function bufferFromSecret(secret) {
				var input = convertToBuffer(secret);
				if (input.byteLength > constants_1.BLOCK_SIZE) {
					var bufferHash = new RawSha256_1.RawSha256();
					bufferHash.update(input);
					input = bufferHash.digest();
				}
				var buffer = new Uint8Array(constants_1.BLOCK_SIZE);
				buffer.set(input);
				return buffer;
			}
			function isEmptyData(data) {
				if (typeof data === "string") {
					return data.length === 0;
				}
				return data.byteLength === 0;
			}
			function convertToBuffer(data) {
				if (typeof data === "string") {
					return util_utf8_browser_1.fromUtf8(data);
				}
				if (ArrayBuffer.isView(data)) {
					return new Uint8Array(
						data.buffer,
						data.byteOffset,
						data.byteLength / Uint8Array.BYTES_PER_ELEMENT
					);
				}
				return new Uint8Array(data);
			}
		},
	});

	// ../../node_modules/@aws-crypto/sha256-js/build/index.js
	var require_build = __commonJS({
		"../../node_modules/@aws-crypto/sha256-js/build/index.js"(exports) {
			"use strict";
			Object.defineProperty(exports, "__esModule", { value: true });
			var tslib_1 = require_tslib2();
			tslib_1.__exportStar(require_jsSha256(), exports);
		},
	});

	// ../../node_modules/@aws-crypto/supports-web-crypto/build/supportsWebCrypto.js
	var require_supportsWebCrypto = __commonJS({
		"../../node_modules/@aws-crypto/supports-web-crypto/build/supportsWebCrypto.js"(exports) {
			"use strict";
			Object.defineProperty(exports, "__esModule", { value: true });
			exports.supportsZeroByteGCM =
				exports.supportsSubtleCrypto =
				exports.supportsSecureRandom =
				exports.supportsWebCrypto =
					void 0;
			var tslib_1 = require_tslib2();
			var subtleCryptoMethods = [
				"decrypt",
				"digest",
				"encrypt",
				"exportKey",
				"generateKey",
				"importKey",
				"sign",
				"verify",
			];
			function supportsWebCrypto(window2) {
				if (supportsSecureRandom(window2) && typeof window2.crypto.subtle === "object") {
					var subtle = window2.crypto.subtle;
					return supportsSubtleCrypto(subtle);
				}
				return false;
			}
			exports.supportsWebCrypto = supportsWebCrypto;
			function supportsSecureRandom(window2) {
				if (typeof window2 === "object" && typeof window2.crypto === "object") {
					var getRandomValues = window2.crypto.getRandomValues;
					return typeof getRandomValues === "function";
				}
				return false;
			}
			exports.supportsSecureRandom = supportsSecureRandom;
			function supportsSubtleCrypto(subtle) {
				return (
					subtle &&
					subtleCryptoMethods.every(function (methodName) {
						return typeof subtle[methodName] === "function";
					})
				);
			}
			exports.supportsSubtleCrypto = supportsSubtleCrypto;
			function supportsZeroByteGCM(subtle) {
				return tslib_1.__awaiter(this, void 0, void 0, function () {
					var key, zeroByteAuthTag, _a;
					return tslib_1.__generator(this, function (_b) {
						switch (_b.label) {
							case 0:
								if (!supportsSubtleCrypto(subtle)) return [2, false];
								_b.label = 1;
							case 1:
								_b.trys.push([1, 4, , 5]);
								return [
									4,
									subtle.generateKey({ name: "AES-GCM", length: 128 }, false, ["encrypt"]),
								];
							case 2:
								key = _b.sent();
								return [
									4,
									subtle.encrypt(
										{
											name: "AES-GCM",
											iv: new Uint8Array(Array(12)),
											additionalData: new Uint8Array(Array(16)),
											tagLength: 128,
										},
										key,
										new Uint8Array(0)
									),
								];
							case 3:
								zeroByteAuthTag = _b.sent();
								return [2, zeroByteAuthTag.byteLength === 16];
							case 4:
								_a = _b.sent();
								return [2, false];
							case 5:
								return [2];
						}
					});
				});
			}
			exports.supportsZeroByteGCM = supportsZeroByteGCM;
		},
	});

	// ../../node_modules/@aws-crypto/supports-web-crypto/build/index.js
	var require_build2 = __commonJS({
		"../../node_modules/@aws-crypto/supports-web-crypto/build/index.js"(exports) {
			"use strict";
			Object.defineProperty(exports, "__esModule", { value: true });
			var tslib_1 = require_tslib2();
			tslib_1.__exportStar(require_supportsWebCrypto(), exports);
		},
	});

	// ../../node_modules/@aws-crypto/ie11-detection/build/CryptoOperation.js
	var require_CryptoOperation = __commonJS({
		"../../node_modules/@aws-crypto/ie11-detection/build/CryptoOperation.js"(exports) {
			"use strict";
			Object.defineProperty(exports, "__esModule", { value: true });
		},
	});

	// ../../node_modules/@aws-crypto/ie11-detection/build/Key.js
	var require_Key = __commonJS({
		"../../node_modules/@aws-crypto/ie11-detection/build/Key.js"(exports) {
			"use strict";
			Object.defineProperty(exports, "__esModule", { value: true });
		},
	});

	// ../../node_modules/@aws-crypto/ie11-detection/build/KeyOperation.js
	var require_KeyOperation = __commonJS({
		"../../node_modules/@aws-crypto/ie11-detection/build/KeyOperation.js"(exports) {
			"use strict";
			Object.defineProperty(exports, "__esModule", { value: true });
		},
	});

	// ../../node_modules/@aws-crypto/ie11-detection/build/MsSubtleCrypto.js
	var require_MsSubtleCrypto = __commonJS({
		"../../node_modules/@aws-crypto/ie11-detection/build/MsSubtleCrypto.js"(exports) {
			"use strict";
			Object.defineProperty(exports, "__esModule", { value: true });
		},
	});

	// ../../node_modules/@aws-crypto/ie11-detection/build/MsWindow.js
	var require_MsWindow = __commonJS({
		"../../node_modules/@aws-crypto/ie11-detection/build/MsWindow.js"(exports) {
			"use strict";
			Object.defineProperty(exports, "__esModule", { value: true });
			exports.isMsWindow = void 0;
			var msSubtleCryptoMethods = [
				"decrypt",
				"digest",
				"encrypt",
				"exportKey",
				"generateKey",
				"importKey",
				"sign",
				"verify",
			];
			function quacksLikeAnMsWindow(window2) {
				return "MSInputMethodContext" in window2 && "msCrypto" in window2;
			}
			function isMsWindow(window2) {
				if (quacksLikeAnMsWindow(window2) && window2.msCrypto.subtle !== void 0) {
					var _a = window2.msCrypto,
						getRandomValues = _a.getRandomValues,
						subtle_1 = _a.subtle;
					return msSubtleCryptoMethods
						.map(function (methodName) {
							return subtle_1[methodName];
						})
						.concat(getRandomValues)
						.every(function (method) {
							return typeof method === "function";
						});
				}
				return false;
			}
			exports.isMsWindow = isMsWindow;
		},
	});

	// ../../node_modules/@aws-crypto/ie11-detection/build/index.js
	var require_build3 = __commonJS({
		"../../node_modules/@aws-crypto/ie11-detection/build/index.js"(exports) {
			"use strict";
			Object.defineProperty(exports, "__esModule", { value: true });
			var tslib_1 = require_tslib2();
			tslib_1.__exportStar(require_CryptoOperation(), exports);
			tslib_1.__exportStar(require_Key(), exports);
			tslib_1.__exportStar(require_KeyOperation(), exports);
			tslib_1.__exportStar(require_MsSubtleCrypto(), exports);
			tslib_1.__exportStar(require_MsWindow(), exports);
		},
	});

	// ../../node_modules/@aws-crypto/sha256-browser/build/crossPlatformSha256.js
	var require_crossPlatformSha256 = __commonJS({
		"../../node_modules/@aws-crypto/sha256-browser/build/crossPlatformSha256.js"(exports) {
			"use strict";
			Object.defineProperty(exports, "__esModule", { value: true });
			exports.Sha256 = void 0;
			var ie11Sha256_1 = require_ie11Sha256();
			var webCryptoSha256_1 = require_webCryptoSha256();
			var sha256_js_1 = require_build();
			var supports_web_crypto_1 = require_build2();
			var ie11_detection_1 = require_build3();
			var util_locate_window_1 = require_cjs2();
			var Sha2562 = (function () {
				function Sha2563(secret) {
					if (supports_web_crypto_1.supportsWebCrypto(util_locate_window_1.locateWindow())) {
						this.hash = new webCryptoSha256_1.Sha256(secret);
					} else if (ie11_detection_1.isMsWindow(util_locate_window_1.locateWindow())) {
						this.hash = new ie11Sha256_1.Sha256(secret);
					} else {
						this.hash = new sha256_js_1.Sha256(secret);
					}
				}
				Sha2563.prototype.update = function (data, encoding) {
					this.hash.update(data, encoding);
				};
				Sha2563.prototype.digest = function () {
					return this.hash.digest();
				};
				return Sha2563;
			})();
			exports.Sha256 = Sha2562;
		},
	});

	// ../../node_modules/@aws-crypto/sha256-browser/build/index.js
	var require_build4 = __commonJS({
		"../../node_modules/@aws-crypto/sha256-browser/build/index.js"(exports) {
			"use strict";
			Object.defineProperty(exports, "__esModule", { value: true });
			exports.WebCryptoSha256 = exports.Ie11Sha256 = void 0;
			var tslib_1 = require_tslib2();
			tslib_1.__exportStar(require_crossPlatformSha256(), exports);
			var ie11Sha256_1 = require_ie11Sha256();
			Object.defineProperty(exports, "Ie11Sha256", {
				enumerable: true,
				get: function () {
					return ie11Sha256_1.Sha256;
				},
			});
			var webCryptoSha256_1 = require_webCryptoSha256();
			Object.defineProperty(exports, "WebCryptoSha256", {
				enumerable: true,
				get: function () {
					return webCryptoSha256_1.Sha256;
				},
			});
		},
	});

	// ../../node_modules/uuid/lib/rng-browser.js
	var require_rng_browser = __commonJS({
		"../../node_modules/uuid/lib/rng-browser.js"(exports, module2) {
			var getRandomValues =
				(typeof crypto != "undefined" &&
					crypto.getRandomValues &&
					crypto.getRandomValues.bind(crypto)) ||
				(typeof msCrypto != "undefined" &&
					typeof window.msCrypto.getRandomValues == "function" &&
					msCrypto.getRandomValues.bind(msCrypto));
			if (getRandomValues) {
				rnds8 = new Uint8Array(16);
				module2.exports = function whatwgRNG() {
					getRandomValues(rnds8);
					return rnds8;
				};
			} else {
				rnds = new Array(16);
				module2.exports = function mathRNG() {
					for (var i = 0, r; i < 16; i++) {
						if ((i & 3) === 0) r = Math.random() * 4294967296;
						rnds[i] = (r >>> ((i & 3) << 3)) & 255;
					}
					return rnds;
				};
			}
			var rnds8;
			var rnds;
		},
	});

	// ../../node_modules/uuid/lib/bytesToUuid.js
	var require_bytesToUuid = __commonJS({
		"../../node_modules/uuid/lib/bytesToUuid.js"(exports, module2) {
			var byteToHex = [];
			for (i = 0; i < 256; ++i) {
				byteToHex[i] = (i + 256).toString(16).substr(1);
			}
			var i;
			function bytesToUuid(buf, offset) {
				var i2 = offset || 0;
				var bth = byteToHex;
				return [
					bth[buf[i2++]],
					bth[buf[i2++]],
					bth[buf[i2++]],
					bth[buf[i2++]],
					"-",
					bth[buf[i2++]],
					bth[buf[i2++]],
					"-",
					bth[buf[i2++]],
					bth[buf[i2++]],
					"-",
					bth[buf[i2++]],
					bth[buf[i2++]],
					"-",
					bth[buf[i2++]],
					bth[buf[i2++]],
					bth[buf[i2++]],
					bth[buf[i2++]],
					bth[buf[i2++]],
					bth[buf[i2++]],
				].join("");
			}
			module2.exports = bytesToUuid;
		},
	});

	// ../../node_modules/uuid/v1.js
	var require_v1 = __commonJS({
		"../../node_modules/uuid/v1.js"(exports, module2) {
			var rng = require_rng_browser();
			var bytesToUuid = require_bytesToUuid();
			var _nodeId;
			var _clockseq;
			var _lastMSecs = 0;
			var _lastNSecs = 0;
			function v1(options, buf, offset) {
				var i = (buf && offset) || 0;
				var b = buf || [];
				options = options || {};
				var node = options.node || _nodeId;
				var clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
				if (node == null || clockseq == null) {
					var seedBytes = rng();
					if (node == null) {
						node = _nodeId = [
							seedBytes[0] | 1,
							seedBytes[1],
							seedBytes[2],
							seedBytes[3],
							seedBytes[4],
							seedBytes[5],
						];
					}
					if (clockseq == null) {
						clockseq = _clockseq = ((seedBytes[6] << 8) | seedBytes[7]) & 16383;
					}
				}
				var msecs = options.msecs !== void 0 ? options.msecs : new Date().getTime();
				var nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
				var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
				if (dt < 0 && options.clockseq === void 0) {
					clockseq = (clockseq + 1) & 16383;
				}
				if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
					nsecs = 0;
				}
				if (nsecs >= 1e4) {
					throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
				}
				_lastMSecs = msecs;
				_lastNSecs = nsecs;
				_clockseq = clockseq;
				msecs += 122192928e5;
				var tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
				b[i++] = (tl >>> 24) & 255;
				b[i++] = (tl >>> 16) & 255;
				b[i++] = (tl >>> 8) & 255;
				b[i++] = tl & 255;
				var tmh = ((msecs / 4294967296) * 1e4) & 268435455;
				b[i++] = (tmh >>> 8) & 255;
				b[i++] = tmh & 255;
				b[i++] = ((tmh >>> 24) & 15) | 16;
				b[i++] = (tmh >>> 16) & 255;
				b[i++] = (clockseq >>> 8) | 128;
				b[i++] = clockseq & 255;
				for (var n = 0; n < 6; ++n) {
					b[i + n] = node[n];
				}
				return buf ? buf : bytesToUuid(b);
			}
			module2.exports = v1;
		},
	});

	// ../../node_modules/uuid/v4.js
	var require_v4 = __commonJS({
		"../../node_modules/uuid/v4.js"(exports, module2) {
			var rng = require_rng_browser();
			var bytesToUuid = require_bytesToUuid();
			function v42(options, buf, offset) {
				var i = (buf && offset) || 0;
				if (typeof options == "string") {
					buf = options === "binary" ? new Array(16) : null;
					options = null;
				}
				options = options || {};
				var rnds = options.random || (options.rng || rng)();
				rnds[6] = (rnds[6] & 15) | 64;
				rnds[8] = (rnds[8] & 63) | 128;
				if (buf) {
					for (var ii = 0; ii < 16; ++ii) {
						buf[i + ii] = rnds[ii];
					}
				}
				return buf || bytesToUuid(rnds);
			}
			module2.exports = v42;
		},
	});

	// ../../node_modules/uuid/index.js
	var require_uuid = __commonJS({
		"../../node_modules/uuid/index.js"(exports, module2) {
			var v1 = require_v1();
			var v42 = require_v4();
			var uuid = v42;
			uuid.v1 = v1;
			uuid.v4 = v42;
			module2.exports = uuid;
		},
	});

	// ../../node_modules/bowser/es5.js
	var require_es5 = __commonJS({
		"../../node_modules/bowser/es5.js"(exports, module2) {
			!(function (e, t) {
				typeof exports == "object" && typeof module2 == "object"
					? (module2.exports = t())
					: typeof define == "function" && define.amd
					? define([], t)
					: typeof exports == "object"
					? (exports.bowser = t())
					: (e.bowser = t());
			})(exports, function () {
				return (function (e) {
					var t = {};
					function r(n) {
						if (t[n]) return t[n].exports;
						var i = (t[n] = { i: n, l: false, exports: {} });
						return e[n].call(i.exports, i, i.exports, r), (i.l = true), i.exports;
					}
					return (
						(r.m = e),
						(r.c = t),
						(r.d = function (e2, t2, n) {
							r.o(e2, t2) || Object.defineProperty(e2, t2, { enumerable: true, get: n });
						}),
						(r.r = function (e2) {
							typeof Symbol != "undefined" &&
								Symbol.toStringTag &&
								Object.defineProperty(e2, Symbol.toStringTag, { value: "Module" }),
								Object.defineProperty(e2, "__esModule", { value: true });
						}),
						(r.t = function (e2, t2) {
							if ((1 & t2 && (e2 = r(e2)), 8 & t2)) return e2;
							if (4 & t2 && typeof e2 == "object" && e2 && e2.__esModule) return e2;
							var n = Object.create(null);
							if (
								(r.r(n),
								Object.defineProperty(n, "default", { enumerable: true, value: e2 }),
								2 & t2 && typeof e2 != "string")
							)
								for (var i in e2)
									r.d(
										n,
										i,
										function (t3) {
											return e2[t3];
										}.bind(null, i)
									);
							return n;
						}),
						(r.n = function (e2) {
							var t2 =
								e2 && e2.__esModule
									? function () {
											return e2.default;
									  }
									: function () {
											return e2;
									  };
							return r.d(t2, "a", t2), t2;
						}),
						(r.o = function (e2, t2) {
							return Object.prototype.hasOwnProperty.call(e2, t2);
						}),
						(r.p = ""),
						r((r.s = 90))
					);
				})({
					17: function (e, t, r) {
						"use strict";
						(t.__esModule = true), (t.default = void 0);
						var n = r(18),
							i = (function () {
								function e2() {}
								return (
									(e2.getFirstMatch = function (e3, t2) {
										var r2 = t2.match(e3);
										return (r2 && r2.length > 0 && r2[1]) || "";
									}),
									(e2.getSecondMatch = function (e3, t2) {
										var r2 = t2.match(e3);
										return (r2 && r2.length > 1 && r2[2]) || "";
									}),
									(e2.matchAndReturnConst = function (e3, t2, r2) {
										if (e3.test(t2)) return r2;
									}),
									(e2.getWindowsVersionName = function (e3) {
										switch (e3) {
											case "NT":
												return "NT";
											case "XP":
												return "XP";
											case "NT 5.0":
												return "2000";
											case "NT 5.1":
												return "XP";
											case "NT 5.2":
												return "2003";
											case "NT 6.0":
												return "Vista";
											case "NT 6.1":
												return "7";
											case "NT 6.2":
												return "8";
											case "NT 6.3":
												return "8.1";
											case "NT 10.0":
												return "10";
											default:
												return;
										}
									}),
									(e2.getMacOSVersionName = function (e3) {
										var t2 = e3
											.split(".")
											.splice(0, 2)
											.map(function (e4) {
												return parseInt(e4, 10) || 0;
											});
										if ((t2.push(0), t2[0] === 10))
											switch (t2[1]) {
												case 5:
													return "Leopard";
												case 6:
													return "Snow Leopard";
												case 7:
													return "Lion";
												case 8:
													return "Mountain Lion";
												case 9:
													return "Mavericks";
												case 10:
													return "Yosemite";
												case 11:
													return "El Capitan";
												case 12:
													return "Sierra";
												case 13:
													return "High Sierra";
												case 14:
													return "Mojave";
												case 15:
													return "Catalina";
												default:
													return;
											}
									}),
									(e2.getAndroidVersionName = function (e3) {
										var t2 = e3
											.split(".")
											.splice(0, 2)
											.map(function (e4) {
												return parseInt(e4, 10) || 0;
											});
										if ((t2.push(0), !(t2[0] === 1 && t2[1] < 5)))
											return t2[0] === 1 && t2[1] < 6
												? "Cupcake"
												: t2[0] === 1 && t2[1] >= 6
												? "Donut"
												: t2[0] === 2 && t2[1] < 2
												? "Eclair"
												: t2[0] === 2 && t2[1] === 2
												? "Froyo"
												: t2[0] === 2 && t2[1] > 2
												? "Gingerbread"
												: t2[0] === 3
												? "Honeycomb"
												: t2[0] === 4 && t2[1] < 1
												? "Ice Cream Sandwich"
												: t2[0] === 4 && t2[1] < 4
												? "Jelly Bean"
												: t2[0] === 4 && t2[1] >= 4
												? "KitKat"
												: t2[0] === 5
												? "Lollipop"
												: t2[0] === 6
												? "Marshmallow"
												: t2[0] === 7
												? "Nougat"
												: t2[0] === 8
												? "Oreo"
												: t2[0] === 9
												? "Pie"
												: void 0;
									}),
									(e2.getVersionPrecision = function (e3) {
										return e3.split(".").length;
									}),
									(e2.compareVersions = function (t2, r2, n2) {
										n2 === void 0 && (n2 = false);
										var i2 = e2.getVersionPrecision(t2),
											s = e2.getVersionPrecision(r2),
											a = Math.max(i2, s),
											o = 0,
											u = e2.map([t2, r2], function (t3) {
												var r3 = a - e2.getVersionPrecision(t3),
													n3 = t3 + new Array(r3 + 1).join(".0");
												return e2
													.map(n3.split("."), function (e3) {
														return new Array(20 - e3.length).join("0") + e3;
													})
													.reverse();
											});
										for (n2 && (o = a - Math.min(i2, s)), a -= 1; a >= o; ) {
											if (u[0][a] > u[1][a]) return 1;
											if (u[0][a] === u[1][a]) {
												if (a === o) return 0;
												a -= 1;
											} else if (u[0][a] < u[1][a]) return -1;
										}
									}),
									(e2.map = function (e3, t2) {
										var r2,
											n2 = [];
										if (Array.prototype.map) return Array.prototype.map.call(e3, t2);
										for (r2 = 0; r2 < e3.length; r2 += 1) n2.push(t2(e3[r2]));
										return n2;
									}),
									(e2.find = function (e3, t2) {
										var r2, n2;
										if (Array.prototype.find) return Array.prototype.find.call(e3, t2);
										for (r2 = 0, n2 = e3.length; r2 < n2; r2 += 1) {
											var i2 = e3[r2];
											if (t2(i2, r2)) return i2;
										}
									}),
									(e2.assign = function (e3) {
										for (
											var t2,
												r2,
												n2 = e3,
												i2 = arguments.length,
												s = new Array(i2 > 1 ? i2 - 1 : 0),
												a = 1;
											a < i2;
											a++
										)
											s[a - 1] = arguments[a];
										if (Object.assign) return Object.assign.apply(Object, [e3].concat(s));
										var o = function () {
											var e4 = s[t2];
											typeof e4 == "object" &&
												e4 !== null &&
												Object.keys(e4).forEach(function (t3) {
													n2[t3] = e4[t3];
												});
										};
										for (t2 = 0, r2 = s.length; t2 < r2; t2 += 1) o();
										return e3;
									}),
									(e2.getBrowserAlias = function (e3) {
										return n.BROWSER_ALIASES_MAP[e3];
									}),
									(e2.getBrowserTypeByAlias = function (e3) {
										return n.BROWSER_MAP[e3] || "";
									}),
									e2
								);
							})();
						(t.default = i), (e.exports = t.default);
					},
					18: function (e, t, r) {
						"use strict";
						(t.__esModule = true),
							(t.ENGINE_MAP =
								t.OS_MAP =
								t.PLATFORMS_MAP =
								t.BROWSER_MAP =
								t.BROWSER_ALIASES_MAP =
									void 0);
						t.BROWSER_ALIASES_MAP = {
							"Amazon Silk": "amazon_silk",
							"Android Browser": "android",
							Bada: "bada",
							BlackBerry: "blackberry",
							Chrome: "chrome",
							Chromium: "chromium",
							Electron: "electron",
							Epiphany: "epiphany",
							Firefox: "firefox",
							Focus: "focus",
							Generic: "generic",
							"Google Search": "google_search",
							Googlebot: "googlebot",
							"Internet Explorer": "ie",
							"K-Meleon": "k_meleon",
							Maxthon: "maxthon",
							"Microsoft Edge": "edge",
							"MZ Browser": "mz",
							"NAVER Whale Browser": "naver",
							Opera: "opera",
							"Opera Coast": "opera_coast",
							PhantomJS: "phantomjs",
							Puffin: "puffin",
							QupZilla: "qupzilla",
							QQ: "qq",
							QQLite: "qqlite",
							Safari: "safari",
							Sailfish: "sailfish",
							"Samsung Internet for Android": "samsung_internet",
							SeaMonkey: "seamonkey",
							Sleipnir: "sleipnir",
							Swing: "swing",
							Tizen: "tizen",
							"UC Browser": "uc",
							Vivaldi: "vivaldi",
							"WebOS Browser": "webos",
							WeChat: "wechat",
							"Yandex Browser": "yandex",
							Roku: "roku",
						};
						t.BROWSER_MAP = {
							amazon_silk: "Amazon Silk",
							android: "Android Browser",
							bada: "Bada",
							blackberry: "BlackBerry",
							chrome: "Chrome",
							chromium: "Chromium",
							electron: "Electron",
							epiphany: "Epiphany",
							firefox: "Firefox",
							focus: "Focus",
							generic: "Generic",
							googlebot: "Googlebot",
							google_search: "Google Search",
							ie: "Internet Explorer",
							k_meleon: "K-Meleon",
							maxthon: "Maxthon",
							edge: "Microsoft Edge",
							mz: "MZ Browser",
							naver: "NAVER Whale Browser",
							opera: "Opera",
							opera_coast: "Opera Coast",
							phantomjs: "PhantomJS",
							puffin: "Puffin",
							qupzilla: "QupZilla",
							qq: "QQ Browser",
							qqlite: "QQ Browser Lite",
							safari: "Safari",
							sailfish: "Sailfish",
							samsung_internet: "Samsung Internet for Android",
							seamonkey: "SeaMonkey",
							sleipnir: "Sleipnir",
							swing: "Swing",
							tizen: "Tizen",
							uc: "UC Browser",
							vivaldi: "Vivaldi",
							webos: "WebOS Browser",
							wechat: "WeChat",
							yandex: "Yandex Browser",
						};
						t.PLATFORMS_MAP = { tablet: "tablet", mobile: "mobile", desktop: "desktop", tv: "tv" };
						t.OS_MAP = {
							WindowsPhone: "Windows Phone",
							Windows: "Windows",
							MacOS: "macOS",
							iOS: "iOS",
							Android: "Android",
							WebOS: "WebOS",
							BlackBerry: "BlackBerry",
							Bada: "Bada",
							Tizen: "Tizen",
							Linux: "Linux",
							ChromeOS: "Chrome OS",
							PlayStation4: "PlayStation 4",
							Roku: "Roku",
						};
						t.ENGINE_MAP = {
							EdgeHTML: "EdgeHTML",
							Blink: "Blink",
							Trident: "Trident",
							Presto: "Presto",
							Gecko: "Gecko",
							WebKit: "WebKit",
						};
					},
					90: function (e, t, r) {
						"use strict";
						(t.__esModule = true), (t.default = void 0);
						var n,
							i = (n = r(91)) && n.__esModule ? n : { default: n },
							s = r(18);
						function a(e2, t2) {
							for (var r2 = 0; r2 < t2.length; r2++) {
								var n2 = t2[r2];
								(n2.enumerable = n2.enumerable || false),
									(n2.configurable = true),
									"value" in n2 && (n2.writable = true),
									Object.defineProperty(e2, n2.key, n2);
							}
						}
						var o = (function () {
							function e2() {}
							var t2, r2, n2;
							return (
								(e2.getParser = function (e3, t3) {
									if ((t3 === void 0 && (t3 = false), typeof e3 != "string"))
										throw new Error("UserAgent should be a string");
									return new i.default(e3, t3);
								}),
								(e2.parse = function (e3) {
									return new i.default(e3).getResult();
								}),
								(t2 = e2),
								(n2 = [
									{
										key: "BROWSER_MAP",
										get: function () {
											return s.BROWSER_MAP;
										},
									},
									{
										key: "ENGINE_MAP",
										get: function () {
											return s.ENGINE_MAP;
										},
									},
									{
										key: "OS_MAP",
										get: function () {
											return s.OS_MAP;
										},
									},
									{
										key: "PLATFORMS_MAP",
										get: function () {
											return s.PLATFORMS_MAP;
										},
									},
								]),
								(r2 = null) && a(t2.prototype, r2),
								n2 && a(t2, n2),
								e2
							);
						})();
						(t.default = o), (e.exports = t.default);
					},
					91: function (e, t, r) {
						"use strict";
						(t.__esModule = true), (t.default = void 0);
						var n = u(r(92)),
							i = u(r(93)),
							s = u(r(94)),
							a = u(r(95)),
							o = u(r(17));
						function u(e2) {
							return e2 && e2.__esModule ? e2 : { default: e2 };
						}
						var d = (function () {
							function e2(e3, t3) {
								if ((t3 === void 0 && (t3 = false), e3 == null || e3 === ""))
									throw new Error("UserAgent parameter can't be empty");
								(this._ua = e3), (this.parsedResult = {}), t3 !== true && this.parse();
							}
							var t2 = e2.prototype;
							return (
								(t2.getUA = function () {
									return this._ua;
								}),
								(t2.test = function (e3) {
									return e3.test(this._ua);
								}),
								(t2.parseBrowser = function () {
									var e3 = this;
									this.parsedResult.browser = {};
									var t3 = o.default.find(n.default, function (t4) {
										if (typeof t4.test == "function") return t4.test(e3);
										if (t4.test instanceof Array)
											return t4.test.some(function (t5) {
												return e3.test(t5);
											});
										throw new Error("Browser's test function is not valid");
									});
									return (
										t3 && (this.parsedResult.browser = t3.describe(this.getUA())),
										this.parsedResult.browser
									);
								}),
								(t2.getBrowser = function () {
									return this.parsedResult.browser
										? this.parsedResult.browser
										: this.parseBrowser();
								}),
								(t2.getBrowserName = function (e3) {
									return e3
										? String(this.getBrowser().name).toLowerCase() || ""
										: this.getBrowser().name || "";
								}),
								(t2.getBrowserVersion = function () {
									return this.getBrowser().version;
								}),
								(t2.getOS = function () {
									return this.parsedResult.os ? this.parsedResult.os : this.parseOS();
								}),
								(t2.parseOS = function () {
									var e3 = this;
									this.parsedResult.os = {};
									var t3 = o.default.find(i.default, function (t4) {
										if (typeof t4.test == "function") return t4.test(e3);
										if (t4.test instanceof Array)
											return t4.test.some(function (t5) {
												return e3.test(t5);
											});
										throw new Error("Browser's test function is not valid");
									});
									return (
										t3 && (this.parsedResult.os = t3.describe(this.getUA())), this.parsedResult.os
									);
								}),
								(t2.getOSName = function (e3) {
									var t3 = this.getOS().name;
									return e3 ? String(t3).toLowerCase() || "" : t3 || "";
								}),
								(t2.getOSVersion = function () {
									return this.getOS().version;
								}),
								(t2.getPlatform = function () {
									return this.parsedResult.platform
										? this.parsedResult.platform
										: this.parsePlatform();
								}),
								(t2.getPlatformType = function (e3) {
									e3 === void 0 && (e3 = false);
									var t3 = this.getPlatform().type;
									return e3 ? String(t3).toLowerCase() || "" : t3 || "";
								}),
								(t2.parsePlatform = function () {
									var e3 = this;
									this.parsedResult.platform = {};
									var t3 = o.default.find(s.default, function (t4) {
										if (typeof t4.test == "function") return t4.test(e3);
										if (t4.test instanceof Array)
											return t4.test.some(function (t5) {
												return e3.test(t5);
											});
										throw new Error("Browser's test function is not valid");
									});
									return (
										t3 && (this.parsedResult.platform = t3.describe(this.getUA())),
										this.parsedResult.platform
									);
								}),
								(t2.getEngine = function () {
									return this.parsedResult.engine ? this.parsedResult.engine : this.parseEngine();
								}),
								(t2.getEngineName = function (e3) {
									return e3
										? String(this.getEngine().name).toLowerCase() || ""
										: this.getEngine().name || "";
								}),
								(t2.parseEngine = function () {
									var e3 = this;
									this.parsedResult.engine = {};
									var t3 = o.default.find(a.default, function (t4) {
										if (typeof t4.test == "function") return t4.test(e3);
										if (t4.test instanceof Array)
											return t4.test.some(function (t5) {
												return e3.test(t5);
											});
										throw new Error("Browser's test function is not valid");
									});
									return (
										t3 && (this.parsedResult.engine = t3.describe(this.getUA())),
										this.parsedResult.engine
									);
								}),
								(t2.parse = function () {
									return (
										this.parseBrowser(),
										this.parseOS(),
										this.parsePlatform(),
										this.parseEngine(),
										this
									);
								}),
								(t2.getResult = function () {
									return o.default.assign({}, this.parsedResult);
								}),
								(t2.satisfies = function (e3) {
									var t3 = this,
										r2 = {},
										n2 = 0,
										i2 = {},
										s2 = 0;
									if (
										(Object.keys(e3).forEach(function (t4) {
											var a3 = e3[t4];
											typeof a3 == "string"
												? ((i2[t4] = a3), (s2 += 1))
												: typeof a3 == "object" && ((r2[t4] = a3), (n2 += 1));
										}),
										n2 > 0)
									) {
										var a2 = Object.keys(r2),
											u2 = o.default.find(a2, function (e4) {
												return t3.isOS(e4);
											});
										if (u2) {
											var d2 = this.satisfies(r2[u2]);
											if (d2 !== void 0) return d2;
										}
										var c20 = o.default.find(a2, function (e4) {
											return t3.isPlatform(e4);
										});
										if (c20) {
											var f = this.satisfies(r2[c20]);
											if (f !== void 0) return f;
										}
									}
									if (s2 > 0) {
										var l = Object.keys(i2),
											h = o.default.find(l, function (e4) {
												return t3.isBrowser(e4, true);
											});
										if (h !== void 0) return this.compareVersion(i2[h]);
									}
								}),
								(t2.isBrowser = function (e3, t3) {
									t3 === void 0 && (t3 = false);
									var r2 = this.getBrowserName().toLowerCase(),
										n2 = e3.toLowerCase(),
										i2 = o.default.getBrowserTypeByAlias(n2);
									return t3 && i2 && (n2 = i2.toLowerCase()), n2 === r2;
								}),
								(t2.compareVersion = function (e3) {
									var t3 = [0],
										r2 = e3,
										n2 = false,
										i2 = this.getBrowserVersion();
									if (typeof i2 == "string")
										return (
											e3[0] === ">" || e3[0] === "<"
												? ((r2 = e3.substr(1)),
												  e3[1] === "=" ? ((n2 = true), (r2 = e3.substr(2))) : (t3 = []),
												  e3[0] === ">" ? t3.push(1) : t3.push(-1))
												: e3[0] === "="
												? (r2 = e3.substr(1))
												: e3[0] === "~" && ((n2 = true), (r2 = e3.substr(1))),
											t3.indexOf(o.default.compareVersions(i2, r2, n2)) > -1
										);
								}),
								(t2.isOS = function (e3) {
									return this.getOSName(true) === String(e3).toLowerCase();
								}),
								(t2.isPlatform = function (e3) {
									return this.getPlatformType(true) === String(e3).toLowerCase();
								}),
								(t2.isEngine = function (e3) {
									return this.getEngineName(true) === String(e3).toLowerCase();
								}),
								(t2.is = function (e3, t3) {
									return (
										t3 === void 0 && (t3 = false),
										this.isBrowser(e3, t3) || this.isOS(e3) || this.isPlatform(e3)
									);
								}),
								(t2.some = function (e3) {
									var t3 = this;
									return (
										e3 === void 0 && (e3 = []),
										e3.some(function (e4) {
											return t3.is(e4);
										})
									);
								}),
								e2
							);
						})();
						(t.default = d), (e.exports = t.default);
					},
					92: function (e, t, r) {
						"use strict";
						(t.__esModule = true), (t.default = void 0);
						var n,
							i = (n = r(17)) && n.__esModule ? n : { default: n };
						var s = /version\/(\d+(\.?_?\d+)+)/i,
							a = [
								{
									test: [/googlebot/i],
									describe: function (e2) {
										var t2 = { name: "Googlebot" },
											r2 =
												i.default.getFirstMatch(/googlebot\/(\d+(\.\d+))/i, e2) ||
												i.default.getFirstMatch(s, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/opera/i],
									describe: function (e2) {
										var t2 = { name: "Opera" },
											r2 =
												i.default.getFirstMatch(s, e2) ||
												i.default.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/opr\/|opios/i],
									describe: function (e2) {
										var t2 = { name: "Opera" },
											r2 =
												i.default.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i, e2) ||
												i.default.getFirstMatch(s, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/SamsungBrowser/i],
									describe: function (e2) {
										var t2 = { name: "Samsung Internet for Android" },
											r2 =
												i.default.getFirstMatch(s, e2) ||
												i.default.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/Whale/i],
									describe: function (e2) {
										var t2 = { name: "NAVER Whale Browser" },
											r2 =
												i.default.getFirstMatch(s, e2) ||
												i.default.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/MZBrowser/i],
									describe: function (e2) {
										var t2 = { name: "MZ Browser" },
											r2 =
												i.default.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i, e2) ||
												i.default.getFirstMatch(s, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/focus/i],
									describe: function (e2) {
										var t2 = { name: "Focus" },
											r2 =
												i.default.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i, e2) ||
												i.default.getFirstMatch(s, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/swing/i],
									describe: function (e2) {
										var t2 = { name: "Swing" },
											r2 =
												i.default.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i, e2) ||
												i.default.getFirstMatch(s, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/coast/i],
									describe: function (e2) {
										var t2 = { name: "Opera Coast" },
											r2 =
												i.default.getFirstMatch(s, e2) ||
												i.default.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/opt\/\d+(?:.?_?\d+)+/i],
									describe: function (e2) {
										var t2 = { name: "Opera Touch" },
											r2 =
												i.default.getFirstMatch(/(?:opt)[\s/](\d+(\.?_?\d+)+)/i, e2) ||
												i.default.getFirstMatch(s, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/yabrowser/i],
									describe: function (e2) {
										var t2 = { name: "Yandex Browser" },
											r2 =
												i.default.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i, e2) ||
												i.default.getFirstMatch(s, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/ucbrowser/i],
									describe: function (e2) {
										var t2 = { name: "UC Browser" },
											r2 =
												i.default.getFirstMatch(s, e2) ||
												i.default.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/Maxthon|mxios/i],
									describe: function (e2) {
										var t2 = { name: "Maxthon" },
											r2 =
												i.default.getFirstMatch(s, e2) ||
												i.default.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/epiphany/i],
									describe: function (e2) {
										var t2 = { name: "Epiphany" },
											r2 =
												i.default.getFirstMatch(s, e2) ||
												i.default.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/puffin/i],
									describe: function (e2) {
										var t2 = { name: "Puffin" },
											r2 =
												i.default.getFirstMatch(s, e2) ||
												i.default.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/sleipnir/i],
									describe: function (e2) {
										var t2 = { name: "Sleipnir" },
											r2 =
												i.default.getFirstMatch(s, e2) ||
												i.default.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/k-meleon/i],
									describe: function (e2) {
										var t2 = { name: "K-Meleon" },
											r2 =
												i.default.getFirstMatch(s, e2) ||
												i.default.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/micromessenger/i],
									describe: function (e2) {
										var t2 = { name: "WeChat" },
											r2 =
												i.default.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i, e2) ||
												i.default.getFirstMatch(s, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/qqbrowser/i],
									describe: function (e2) {
										var t2 = { name: /qqbrowserlite/i.test(e2) ? "QQ Browser Lite" : "QQ Browser" },
											r2 =
												i.default.getFirstMatch(
													/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i,
													e2
												) || i.default.getFirstMatch(s, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/msie|trident/i],
									describe: function (e2) {
										var t2 = { name: "Internet Explorer" },
											r2 = i.default.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/\sedg\//i],
									describe: function (e2) {
										var t2 = { name: "Microsoft Edge" },
											r2 = i.default.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/edg([ea]|ios)/i],
									describe: function (e2) {
										var t2 = { name: "Microsoft Edge" },
											r2 = i.default.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/vivaldi/i],
									describe: function (e2) {
										var t2 = { name: "Vivaldi" },
											r2 = i.default.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/seamonkey/i],
									describe: function (e2) {
										var t2 = { name: "SeaMonkey" },
											r2 = i.default.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/sailfish/i],
									describe: function (e2) {
										var t2 = { name: "Sailfish" },
											r2 = i.default.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/silk/i],
									describe: function (e2) {
										var t2 = { name: "Amazon Silk" },
											r2 = i.default.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/phantom/i],
									describe: function (e2) {
										var t2 = { name: "PhantomJS" },
											r2 = i.default.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/slimerjs/i],
									describe: function (e2) {
										var t2 = { name: "SlimerJS" },
											r2 = i.default.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/blackberry|\bbb\d+/i, /rim\stablet/i],
									describe: function (e2) {
										var t2 = { name: "BlackBerry" },
											r2 =
												i.default.getFirstMatch(s, e2) ||
												i.default.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/(web|hpw)[o0]s/i],
									describe: function (e2) {
										var t2 = { name: "WebOS Browser" },
											r2 =
												i.default.getFirstMatch(s, e2) ||
												i.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/bada/i],
									describe: function (e2) {
										var t2 = { name: "Bada" },
											r2 = i.default.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/tizen/i],
									describe: function (e2) {
										var t2 = { name: "Tizen" },
											r2 =
												i.default.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i, e2) ||
												i.default.getFirstMatch(s, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/qupzilla/i],
									describe: function (e2) {
										var t2 = { name: "QupZilla" },
											r2 =
												i.default.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i, e2) ||
												i.default.getFirstMatch(s, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/firefox|iceweasel|fxios/i],
									describe: function (e2) {
										var t2 = { name: "Firefox" },
											r2 = i.default.getFirstMatch(
												/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i,
												e2
											);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/electron/i],
									describe: function (e2) {
										var t2 = { name: "Electron" },
											r2 = i.default.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/MiuiBrowser/i],
									describe: function (e2) {
										var t2 = { name: "Miui" },
											r2 = i.default.getFirstMatch(/(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/chromium/i],
									describe: function (e2) {
										var t2 = { name: "Chromium" },
											r2 =
												i.default.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i, e2) ||
												i.default.getFirstMatch(s, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/chrome|crios|crmo/i],
									describe: function (e2) {
										var t2 = { name: "Chrome" },
											r2 = i.default.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/GSA/i],
									describe: function (e2) {
										var t2 = { name: "Google Search" },
											r2 = i.default.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: function (e2) {
										var t2 = !e2.test(/like android/i),
											r2 = e2.test(/android/i);
										return t2 && r2;
									},
									describe: function (e2) {
										var t2 = { name: "Android Browser" },
											r2 = i.default.getFirstMatch(s, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/playstation 4/i],
									describe: function (e2) {
										var t2 = { name: "PlayStation 4" },
											r2 = i.default.getFirstMatch(s, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/safari|applewebkit/i],
									describe: function (e2) {
										var t2 = { name: "Safari" },
											r2 = i.default.getFirstMatch(s, e2);
										return r2 && (t2.version = r2), t2;
									},
								},
								{
									test: [/.*/i],
									describe: function (e2) {
										var t2 = e2.search("\\(") !== -1 ? /^(.*)\/(.*)[ \t]\((.*)/ : /^(.*)\/(.*) /;
										return {
											name: i.default.getFirstMatch(t2, e2),
											version: i.default.getSecondMatch(t2, e2),
										};
									},
								},
							];
						(t.default = a), (e.exports = t.default);
					},
					93: function (e, t, r) {
						"use strict";
						(t.__esModule = true), (t.default = void 0);
						var n,
							i = (n = r(17)) && n.__esModule ? n : { default: n },
							s = r(18);
						var a = [
							{
								test: [/Roku\/DVP/],
								describe: function (e2) {
									var t2 = i.default.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i, e2);
									return { name: s.OS_MAP.Roku, version: t2 };
								},
							},
							{
								test: [/windows phone/i],
								describe: function (e2) {
									var t2 = i.default.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i, e2);
									return { name: s.OS_MAP.WindowsPhone, version: t2 };
								},
							},
							{
								test: [/windows /i],
								describe: function (e2) {
									var t2 = i.default.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i, e2),
										r2 = i.default.getWindowsVersionName(t2);
									return { name: s.OS_MAP.Windows, version: t2, versionName: r2 };
								},
							},
							{
								test: [/Macintosh(.*?) FxiOS(.*?)\//],
								describe: function (e2) {
									var t2 = { name: s.OS_MAP.iOS },
										r2 = i.default.getSecondMatch(/(Version\/)(\d[\d.]+)/, e2);
									return r2 && (t2.version = r2), t2;
								},
							},
							{
								test: [/macintosh/i],
								describe: function (e2) {
									var t2 = i.default
											.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i, e2)
											.replace(/[_\s]/g, "."),
										r2 = i.default.getMacOSVersionName(t2),
										n2 = { name: s.OS_MAP.MacOS, version: t2 };
									return r2 && (n2.versionName = r2), n2;
								},
							},
							{
								test: [/(ipod|iphone|ipad)/i],
								describe: function (e2) {
									var t2 = i.default
										.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i, e2)
										.replace(/[_\s]/g, ".");
									return { name: s.OS_MAP.iOS, version: t2 };
								},
							},
							{
								test: function (e2) {
									var t2 = !e2.test(/like android/i),
										r2 = e2.test(/android/i);
									return t2 && r2;
								},
								describe: function (e2) {
									var t2 = i.default.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i, e2),
										r2 = i.default.getAndroidVersionName(t2),
										n2 = { name: s.OS_MAP.Android, version: t2 };
									return r2 && (n2.versionName = r2), n2;
								},
							},
							{
								test: [/(web|hpw)[o0]s/i],
								describe: function (e2) {
									var t2 = i.default.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i, e2),
										r2 = { name: s.OS_MAP.WebOS };
									return t2 && t2.length && (r2.version = t2), r2;
								},
							},
							{
								test: [/blackberry|\bbb\d+/i, /rim\stablet/i],
								describe: function (e2) {
									var t2 =
										i.default.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i, e2) ||
										i.default.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i, e2) ||
										i.default.getFirstMatch(/\bbb(\d+)/i, e2);
									return { name: s.OS_MAP.BlackBerry, version: t2 };
								},
							},
							{
								test: [/bada/i],
								describe: function (e2) {
									var t2 = i.default.getFirstMatch(/bada\/(\d+(\.\d+)*)/i, e2);
									return { name: s.OS_MAP.Bada, version: t2 };
								},
							},
							{
								test: [/tizen/i],
								describe: function (e2) {
									var t2 = i.default.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i, e2);
									return { name: s.OS_MAP.Tizen, version: t2 };
								},
							},
							{
								test: [/linux/i],
								describe: function () {
									return { name: s.OS_MAP.Linux };
								},
							},
							{
								test: [/CrOS/],
								describe: function () {
									return { name: s.OS_MAP.ChromeOS };
								},
							},
							{
								test: [/PlayStation 4/],
								describe: function (e2) {
									var t2 = i.default.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i, e2);
									return { name: s.OS_MAP.PlayStation4, version: t2 };
								},
							},
						];
						(t.default = a), (e.exports = t.default);
					},
					94: function (e, t, r) {
						"use strict";
						(t.__esModule = true), (t.default = void 0);
						var n,
							i = (n = r(17)) && n.__esModule ? n : { default: n },
							s = r(18);
						var a = [
							{
								test: [/googlebot/i],
								describe: function () {
									return { type: "bot", vendor: "Google" };
								},
							},
							{
								test: [/huawei/i],
								describe: function (e2) {
									var t2 = i.default.getFirstMatch(/(can-l01)/i, e2) && "Nova",
										r2 = { type: s.PLATFORMS_MAP.mobile, vendor: "Huawei" };
									return t2 && (r2.model = t2), r2;
								},
							},
							{
								test: [/nexus\s*(?:7|8|9|10).*/i],
								describe: function () {
									return { type: s.PLATFORMS_MAP.tablet, vendor: "Nexus" };
								},
							},
							{
								test: [/ipad/i],
								describe: function () {
									return { type: s.PLATFORMS_MAP.tablet, vendor: "Apple", model: "iPad" };
								},
							},
							{
								test: [/Macintosh(.*?) FxiOS(.*?)\//],
								describe: function () {
									return { type: s.PLATFORMS_MAP.tablet, vendor: "Apple", model: "iPad" };
								},
							},
							{
								test: [/kftt build/i],
								describe: function () {
									return {
										type: s.PLATFORMS_MAP.tablet,
										vendor: "Amazon",
										model: "Kindle Fire HD 7",
									};
								},
							},
							{
								test: [/silk/i],
								describe: function () {
									return { type: s.PLATFORMS_MAP.tablet, vendor: "Amazon" };
								},
							},
							{
								test: [/tablet(?! pc)/i],
								describe: function () {
									return { type: s.PLATFORMS_MAP.tablet };
								},
							},
							{
								test: function (e2) {
									var t2 = e2.test(/ipod|iphone/i),
										r2 = e2.test(/like (ipod|iphone)/i);
									return t2 && !r2;
								},
								describe: function (e2) {
									var t2 = i.default.getFirstMatch(/(ipod|iphone)/i, e2);
									return { type: s.PLATFORMS_MAP.mobile, vendor: "Apple", model: t2 };
								},
							},
							{
								test: [/nexus\s*[0-6].*/i, /galaxy nexus/i],
								describe: function () {
									return { type: s.PLATFORMS_MAP.mobile, vendor: "Nexus" };
								},
							},
							{
								test: [/[^-]mobi/i],
								describe: function () {
									return { type: s.PLATFORMS_MAP.mobile };
								},
							},
							{
								test: function (e2) {
									return e2.getBrowserName(true) === "blackberry";
								},
								describe: function () {
									return { type: s.PLATFORMS_MAP.mobile, vendor: "BlackBerry" };
								},
							},
							{
								test: function (e2) {
									return e2.getBrowserName(true) === "bada";
								},
								describe: function () {
									return { type: s.PLATFORMS_MAP.mobile };
								},
							},
							{
								test: function (e2) {
									return e2.getBrowserName() === "windows phone";
								},
								describe: function () {
									return { type: s.PLATFORMS_MAP.mobile, vendor: "Microsoft" };
								},
							},
							{
								test: function (e2) {
									var t2 = Number(String(e2.getOSVersion()).split(".")[0]);
									return e2.getOSName(true) === "android" && t2 >= 3;
								},
								describe: function () {
									return { type: s.PLATFORMS_MAP.tablet };
								},
							},
							{
								test: function (e2) {
									return e2.getOSName(true) === "android";
								},
								describe: function () {
									return { type: s.PLATFORMS_MAP.mobile };
								},
							},
							{
								test: function (e2) {
									return e2.getOSName(true) === "macos";
								},
								describe: function () {
									return { type: s.PLATFORMS_MAP.desktop, vendor: "Apple" };
								},
							},
							{
								test: function (e2) {
									return e2.getOSName(true) === "windows";
								},
								describe: function () {
									return { type: s.PLATFORMS_MAP.desktop };
								},
							},
							{
								test: function (e2) {
									return e2.getOSName(true) === "linux";
								},
								describe: function () {
									return { type: s.PLATFORMS_MAP.desktop };
								},
							},
							{
								test: function (e2) {
									return e2.getOSName(true) === "playstation 4";
								},
								describe: function () {
									return { type: s.PLATFORMS_MAP.tv };
								},
							},
							{
								test: function (e2) {
									return e2.getOSName(true) === "roku";
								},
								describe: function () {
									return { type: s.PLATFORMS_MAP.tv };
								},
							},
						];
						(t.default = a), (e.exports = t.default);
					},
					95: function (e, t, r) {
						"use strict";
						(t.__esModule = true), (t.default = void 0);
						var n,
							i = (n = r(17)) && n.__esModule ? n : { default: n },
							s = r(18);
						var a = [
							{
								test: function (e2) {
									return e2.getBrowserName(true) === "microsoft edge";
								},
								describe: function (e2) {
									if (/\sedg\//i.test(e2)) return { name: s.ENGINE_MAP.Blink };
									var t2 = i.default.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i, e2);
									return { name: s.ENGINE_MAP.EdgeHTML, version: t2 };
								},
							},
							{
								test: [/trident/i],
								describe: function (e2) {
									var t2 = { name: s.ENGINE_MAP.Trident },
										r2 = i.default.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i, e2);
									return r2 && (t2.version = r2), t2;
								},
							},
							{
								test: function (e2) {
									return e2.test(/presto/i);
								},
								describe: function (e2) {
									var t2 = { name: s.ENGINE_MAP.Presto },
										r2 = i.default.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i, e2);
									return r2 && (t2.version = r2), t2;
								},
							},
							{
								test: function (e2) {
									var t2 = e2.test(/gecko/i),
										r2 = e2.test(/like gecko/i);
									return t2 && !r2;
								},
								describe: function (e2) {
									var t2 = { name: s.ENGINE_MAP.Gecko },
										r2 = i.default.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i, e2);
									return r2 && (t2.version = r2), t2;
								},
							},
							{
								test: [/(apple)?webkit\/537\.36/i],
								describe: function () {
									return { name: s.ENGINE_MAP.Blink };
								},
							},
							{
								test: [/(apple)?webkit/i],
								describe: function (e2) {
									var t2 = { name: s.ENGINE_MAP.WebKit },
										r2 = i.default.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i, e2);
									return r2 && (t2.version = r2), t2;
								},
							},
						];
						(t.default = a), (e.exports = t.default);
					},
				});
			});
		},
	});

	// ../../node_modules/@aws-sdk/client-cognito-identity/node_modules/tslib/tslib.js
	var require_tslib3 = __commonJS({
		"../../node_modules/@aws-sdk/client-cognito-identity/node_modules/tslib/tslib.js"(
			exports,
			module2
		) {
			var __extends5;
			var __assign12;
			var __rest5;
			var __decorate3;
			var __param3;
			var __metadata3;
			var __awaiter9;
			var __generator9;
			var __exportStar3;
			var __values6;
			var __read14;
			var __spread6;
			var __spreadArrays3;
			var __spreadArray4;
			var __await3;
			var __asyncGenerator3;
			var __asyncDelegator3;
			var __asyncValues3;
			var __makeTemplateObject3;
			var __importStar3;
			var __importDefault3;
			var __classPrivateFieldGet3;
			var __classPrivateFieldSet3;
			var __createBinding3;
			(function (factory) {
				var root =
					typeof global === "object"
						? global
						: typeof self === "object"
						? self
						: typeof this === "object"
						? this
						: {};
				if (typeof define === "function" && define.amd) {
					define("tslib", ["exports"], function (exports2) {
						factory(createExporter(root, createExporter(exports2)));
					});
				} else if (typeof module2 === "object" && typeof module2.exports === "object") {
					factory(createExporter(root, createExporter(module2.exports)));
				} else {
					factory(createExporter(root));
				}
				function createExporter(exports2, previous) {
					if (exports2 !== root) {
						if (typeof Object.create === "function") {
							Object.defineProperty(exports2, "__esModule", { value: true });
						} else {
							exports2.__esModule = true;
						}
					}
					return function (id, v) {
						return (exports2[id] = previous ? previous(id, v) : v);
					};
				}
			})(function (exporter) {
				var extendStatics =
					Object.setPrototypeOf ||
					({ __proto__: [] } instanceof Array &&
						function (d, b) {
							d.__proto__ = b;
						}) ||
					function (d, b) {
						for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
					};
				__extends5 = function (d, b) {
					if (typeof b !== "function" && b !== null)
						throw new TypeError(
							"Class extends value " + String(b) + " is not a constructor or null"
						);
					extendStatics(d, b);
					function __() {
						this.constructor = d;
					}
					d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
				};
				__assign12 =
					Object.assign ||
					function (t) {
						for (var s, i = 1, n = arguments.length; i < n; i++) {
							s = arguments[i];
							for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
						}
						return t;
					};
				__rest5 = function (s, e) {
					var t = {};
					for (var p in s)
						if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
					if (s != null && typeof Object.getOwnPropertySymbols === "function")
						for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
							if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
								t[p[i]] = s[p[i]];
						}
					return t;
				};
				__decorate3 = function (decorators, target, key, desc) {
					var c20 = arguments.length,
						r =
							c20 < 3
								? target
								: desc === null
								? (desc = Object.getOwnPropertyDescriptor(target, key))
								: desc,
						d;
					if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
						r = Reflect.decorate(decorators, target, key, desc);
					else
						for (var i = decorators.length - 1; i >= 0; i--)
							if ((d = decorators[i]))
								r = (c20 < 3 ? d(r) : c20 > 3 ? d(target, key, r) : d(target, key)) || r;
					return c20 > 3 && r && Object.defineProperty(target, key, r), r;
				};
				__param3 = function (paramIndex, decorator) {
					return function (target, key) {
						decorator(target, key, paramIndex);
					};
				};
				__metadata3 = function (metadataKey, metadataValue) {
					if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
						return Reflect.metadata(metadataKey, metadataValue);
				};
				__awaiter9 = function (thisArg, _arguments, P, generator) {
					function adopt(value) {
						return value instanceof P
							? value
							: new P(function (resolve) {
									resolve(value);
							  });
					}
					return new (P || (P = Promise))(function (resolve, reject) {
						function fulfilled(value) {
							try {
								step(generator.next(value));
							} catch (e) {
								reject(e);
							}
						}
						function rejected(value) {
							try {
								step(generator["throw"](value));
							} catch (e) {
								reject(e);
							}
						}
						function step(result) {
							result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
						}
						step((generator = generator.apply(thisArg, _arguments || [])).next());
					});
				};
				__generator9 = function (thisArg, body) {
					var _ = {
							label: 0,
							sent: function () {
								if (t[0] & 1) throw t[1];
								return t[1];
							},
							trys: [],
							ops: [],
						},
						f,
						y,
						t,
						g;
					return (
						(g = { next: verb(0), throw: verb(1), return: verb(2) }),
						typeof Symbol === "function" &&
							(g[Symbol.iterator] = function () {
								return this;
							}),
						g
					);
					function verb(n) {
						return function (v) {
							return step([n, v]);
						};
					}
					function step(op) {
						if (f) throw new TypeError("Generator is already executing.");
						while (_)
							try {
								if (
									((f = 1),
									y &&
										(t =
											op[0] & 2
												? y["return"]
												: op[0]
												? y["throw"] || ((t = y["return"]) && t.call(y), 0)
												: y.next) &&
										!(t = t.call(y, op[1])).done)
								)
									return t;
								if (((y = 0), t)) op = [op[0] & 2, t.value];
								switch (op[0]) {
									case 0:
									case 1:
										t = op;
										break;
									case 4:
										_.label++;
										return { value: op[1], done: false };
									case 5:
										_.label++;
										y = op[1];
										op = [0];
										continue;
									case 7:
										op = _.ops.pop();
										_.trys.pop();
										continue;
									default:
										if (
											!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) &&
											(op[0] === 6 || op[0] === 2)
										) {
											_ = 0;
											continue;
										}
										if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
											_.label = op[1];
											break;
										}
										if (op[0] === 6 && _.label < t[1]) {
											_.label = t[1];
											t = op;
											break;
										}
										if (t && _.label < t[2]) {
											_.label = t[2];
											_.ops.push(op);
											break;
										}
										if (t[2]) _.ops.pop();
										_.trys.pop();
										continue;
								}
								op = body.call(thisArg, _);
							} catch (e) {
								op = [6, e];
								y = 0;
							} finally {
								f = t = 0;
							}
						if (op[0] & 5) throw op[1];
						return { value: op[0] ? op[1] : void 0, done: true };
					}
				};
				__exportStar3 = function (m, o) {
					for (var p in m)
						if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
							__createBinding3(o, m, p);
				};
				__createBinding3 = Object.create
					? function (o, m, k, k2) {
							if (k2 === void 0) k2 = k;
							Object.defineProperty(o, k2, {
								enumerable: true,
								get: function () {
									return m[k];
								},
							});
					  }
					: function (o, m, k, k2) {
							if (k2 === void 0) k2 = k;
							o[k2] = m[k];
					  };
				__values6 = function (o) {
					var s = typeof Symbol === "function" && Symbol.iterator,
						m = s && o[s],
						i = 0;
					if (m) return m.call(o);
					if (o && typeof o.length === "number")
						return {
							next: function () {
								if (o && i >= o.length) o = void 0;
								return { value: o && o[i++], done: !o };
							},
						};
					throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
				};
				__read14 = function (o, n) {
					var m = typeof Symbol === "function" && o[Symbol.iterator];
					if (!m) return o;
					var i = m.call(o),
						r,
						ar = [],
						e;
					try {
						while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
					} catch (error3) {
						e = { error: error3 };
					} finally {
						try {
							if (r && !r.done && (m = i["return"])) m.call(i);
						} finally {
							if (e) throw e.error;
						}
					}
					return ar;
				};
				__spread6 = function () {
					for (var ar = [], i = 0; i < arguments.length; i++)
						ar = ar.concat(__read14(arguments[i]));
					return ar;
				};
				__spreadArrays3 = function () {
					for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
					for (var r = Array(s), k = 0, i = 0; i < il; i++)
						for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
					return r;
				};
				__spreadArray4 = function (to, from, pack) {
					if (pack || arguments.length === 2)
						for (var i = 0, l = from.length, ar; i < l; i++) {
							if (ar || !(i in from)) {
								if (!ar) ar = Array.prototype.slice.call(from, 0, i);
								ar[i] = from[i];
							}
						}
					return to.concat(ar || Array.prototype.slice.call(from));
				};
				__await3 = function (v) {
					return this instanceof __await3 ? ((this.v = v), this) : new __await3(v);
				};
				__asyncGenerator3 = function (thisArg, _arguments, generator) {
					if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
					var g = generator.apply(thisArg, _arguments || []),
						i,
						q = [];
					return (
						(i = {}),
						verb("next"),
						verb("throw"),
						verb("return"),
						(i[Symbol.asyncIterator] = function () {
							return this;
						}),
						i
					);
					function verb(n) {
						if (g[n])
							i[n] = function (v) {
								return new Promise(function (a, b) {
									q.push([n, v, a, b]) > 1 || resume(n, v);
								});
							};
					}
					function resume(n, v) {
						try {
							step(g[n](v));
						} catch (e) {
							settle(q[0][3], e);
						}
					}
					function step(r) {
						r.value instanceof __await3
							? Promise.resolve(r.value.v).then(fulfill, reject)
							: settle(q[0][2], r);
					}
					function fulfill(value) {
						resume("next", value);
					}
					function reject(value) {
						resume("throw", value);
					}
					function settle(f, v) {
						if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);
					}
				};
				__asyncDelegator3 = function (o) {
					var i, p;
					return (
						(i = {}),
						verb("next"),
						verb("throw", function (e) {
							throw e;
						}),
						verb("return"),
						(i[Symbol.iterator] = function () {
							return this;
						}),
						i
					);
					function verb(n, f) {
						i[n] = o[n]
							? function (v) {
									return (p = !p)
										? { value: __await3(o[n](v)), done: n === "return" }
										: f
										? f(v)
										: v;
							  }
							: f;
					}
				};
				__asyncValues3 = function (o) {
					if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
					var m = o[Symbol.asyncIterator],
						i;
					return m
						? m.call(o)
						: ((o = typeof __values6 === "function" ? __values6(o) : o[Symbol.iterator]()),
						  (i = {}),
						  verb("next"),
						  verb("throw"),
						  verb("return"),
						  (i[Symbol.asyncIterator] = function () {
								return this;
						  }),
						  i);
					function verb(n) {
						i[n] =
							o[n] &&
							function (v) {
								return new Promise(function (resolve, reject) {
									(v = o[n](v)), settle(resolve, reject, v.done, v.value);
								});
							};
					}
					function settle(resolve, reject, d, v) {
						Promise.resolve(v).then(function (v2) {
							resolve({ value: v2, done: d });
						}, reject);
					}
				};
				__makeTemplateObject3 = function (cooked, raw) {
					if (Object.defineProperty) {
						Object.defineProperty(cooked, "raw", { value: raw });
					} else {
						cooked.raw = raw;
					}
					return cooked;
				};
				var __setModuleDefault = Object.create
					? function (o, v) {
							Object.defineProperty(o, "default", { enumerable: true, value: v });
					  }
					: function (o, v) {
							o["default"] = v;
					  };
				__importStar3 = function (mod) {
					if (mod && mod.__esModule) return mod;
					var result = {};
					if (mod != null) {
						for (var k in mod)
							if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
								__createBinding3(result, mod, k);
					}
					__setModuleDefault(result, mod);
					return result;
				};
				__importDefault3 = function (mod) {
					return mod && mod.__esModule ? mod : { default: mod };
				};
				__classPrivateFieldGet3 = function (receiver, state, kind, f) {
					if (kind === "a" && !f)
						throw new TypeError("Private accessor was defined without a getter");
					if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
						throw new TypeError(
							"Cannot read private member from an object whose class did not declare it"
						);
					return kind === "m"
						? f
						: kind === "a"
						? f.call(receiver)
						: f
						? f.value
						: state.get(receiver);
				};
				__classPrivateFieldSet3 = function (receiver, state, value, kind, f) {
					if (kind === "m") throw new TypeError("Private method is not writable");
					if (kind === "a" && !f)
						throw new TypeError("Private accessor was defined without a setter");
					if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
						throw new TypeError(
							"Cannot write private member to an object whose class did not declare it"
						);
					return (
						kind === "a"
							? f.call(receiver, value)
							: f
							? (f.value = value)
							: state.set(receiver, value),
						value
					);
				};
				exporter("__extends", __extends5);
				exporter("__assign", __assign12);
				exporter("__rest", __rest5);
				exporter("__decorate", __decorate3);
				exporter("__param", __param3);
				exporter("__metadata", __metadata3);
				exporter("__awaiter", __awaiter9);
				exporter("__generator", __generator9);
				exporter("__exportStar", __exportStar3);
				exporter("__createBinding", __createBinding3);
				exporter("__values", __values6);
				exporter("__read", __read14);
				exporter("__spread", __spread6);
				exporter("__spreadArrays", __spreadArrays3);
				exporter("__spreadArray", __spreadArray4);
				exporter("__await", __await3);
				exporter("__asyncGenerator", __asyncGenerator3);
				exporter("__asyncDelegator", __asyncDelegator3);
				exporter("__asyncValues", __asyncValues3);
				exporter("__makeTemplateObject", __makeTemplateObject3);
				exporter("__importStar", __importStar3);
				exporter("__importDefault", __importDefault3);
				exporter("__classPrivateFieldGet", __classPrivateFieldGet3);
				exporter("__classPrivateFieldSet", __classPrivateFieldSet3);
			});
		},
	});

	// ../../node_modules/cookie/index.js
	var require_cookie = __commonJS({
		"../../node_modules/cookie/index.js"(exports) {
			"use strict";
			exports.parse = parse5;
			exports.serialize = serialize2;
			var decode = decodeURIComponent;
			var encode = encodeURIComponent;
			var pairSplitRegExp = /; */;
			var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
			function parse5(str, options) {
				if (typeof str !== "string") {
					throw new TypeError("argument str must be a string");
				}
				var obj = {};
				var opt = options || {};
				var pairs = str.split(pairSplitRegExp);
				var dec = opt.decode || decode;
				for (var i = 0; i < pairs.length; i++) {
					var pair = pairs[i];
					var eq_idx = pair.indexOf("=");
					if (eq_idx < 0) {
						continue;
					}
					var key = pair.substr(0, eq_idx).trim();
					var val = pair.substr(++eq_idx, pair.length).trim();
					if (val[0] == '"') {
						val = val.slice(1, -1);
					}
					if (obj[key] == void 0) {
						obj[key] = tryDecode(val, dec);
					}
				}
				return obj;
			}
			function serialize2(name2, val, options) {
				var opt = options || {};
				var enc = opt.encode || encode;
				if (typeof enc !== "function") {
					throw new TypeError("option encode is invalid");
				}
				if (!fieldContentRegExp.test(name2)) {
					throw new TypeError("argument name is invalid");
				}
				var value = enc(val);
				if (value && !fieldContentRegExp.test(value)) {
					throw new TypeError("argument val is invalid");
				}
				var str = name2 + "=" + value;
				if (opt.maxAge != null) {
					var maxAge = opt.maxAge - 0;
					if (isNaN(maxAge) || !isFinite(maxAge)) {
						throw new TypeError("option maxAge is invalid");
					}
					str += "; Max-Age=" + Math.floor(maxAge);
				}
				if (opt.domain) {
					if (!fieldContentRegExp.test(opt.domain)) {
						throw new TypeError("option domain is invalid");
					}
					str += "; Domain=" + opt.domain;
				}
				if (opt.path) {
					if (!fieldContentRegExp.test(opt.path)) {
						throw new TypeError("option path is invalid");
					}
					str += "; Path=" + opt.path;
				}
				if (opt.expires) {
					if (typeof opt.expires.toUTCString !== "function") {
						throw new TypeError("option expires is invalid");
					}
					str += "; Expires=" + opt.expires.toUTCString();
				}
				if (opt.httpOnly) {
					str += "; HttpOnly";
				}
				if (opt.secure) {
					str += "; Secure";
				}
				if (opt.sameSite) {
					var sameSite =
						typeof opt.sameSite === "string" ? opt.sameSite.toLowerCase() : opt.sameSite;
					switch (sameSite) {
						case true:
							str += "; SameSite=Strict";
							break;
						case "lax":
							str += "; SameSite=Lax";
							break;
						case "strict":
							str += "; SameSite=Strict";
							break;
						case "none":
							str += "; SameSite=None";
							break;
						default:
							throw new TypeError("option sameSite is invalid");
					}
				}
				return str;
			}
			function tryDecode(str, decode2) {
				try {
					return decode2(str);
				} catch (e) {
					return str;
				}
			}
		},
	});

	// ../../node_modules/base64-js/index.js
	var require_base64_js = __commonJS({
		"../../node_modules/base64-js/index.js"(exports) {
			"use strict";
			exports.byteLength = byteLength;
			exports.toByteArray = toByteArray;
			exports.fromByteArray = fromByteArray;
			var lookup = [];
			var revLookup = [];
			var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
			var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
			for (i = 0, len = code.length; i < len; ++i) {
				lookup[i] = code[i];
				revLookup[code.charCodeAt(i)] = i;
			}
			var i;
			var len;
			revLookup["-".charCodeAt(0)] = 62;
			revLookup["_".charCodeAt(0)] = 63;
			function getLens(b64) {
				var len2 = b64.length;
				if (len2 % 4 > 0) {
					throw new Error("Invalid string. Length must be a multiple of 4");
				}
				var validLen = b64.indexOf("=");
				if (validLen === -1) validLen = len2;
				var placeHoldersLen = validLen === len2 ? 0 : 4 - (validLen % 4);
				return [validLen, placeHoldersLen];
			}
			function byteLength(b64) {
				var lens = getLens(b64);
				var validLen = lens[0];
				var placeHoldersLen = lens[1];
				return ((validLen + placeHoldersLen) * 3) / 4 - placeHoldersLen;
			}
			function _byteLength(b64, validLen, placeHoldersLen) {
				return ((validLen + placeHoldersLen) * 3) / 4 - placeHoldersLen;
			}
			function toByteArray(b64) {
				var tmp;
				var lens = getLens(b64);
				var validLen = lens[0];
				var placeHoldersLen = lens[1];
				var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
				var curByte = 0;
				var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
				var i2;
				for (i2 = 0; i2 < len2; i2 += 4) {
					tmp =
						(revLookup[b64.charCodeAt(i2)] << 18) |
						(revLookup[b64.charCodeAt(i2 + 1)] << 12) |
						(revLookup[b64.charCodeAt(i2 + 2)] << 6) |
						revLookup[b64.charCodeAt(i2 + 3)];
					arr[curByte++] = (tmp >> 16) & 255;
					arr[curByte++] = (tmp >> 8) & 255;
					arr[curByte++] = tmp & 255;
				}
				if (placeHoldersLen === 2) {
					tmp = (revLookup[b64.charCodeAt(i2)] << 2) | (revLookup[b64.charCodeAt(i2 + 1)] >> 4);
					arr[curByte++] = tmp & 255;
				}
				if (placeHoldersLen === 1) {
					tmp =
						(revLookup[b64.charCodeAt(i2)] << 10) |
						(revLookup[b64.charCodeAt(i2 + 1)] << 4) |
						(revLookup[b64.charCodeAt(i2 + 2)] >> 2);
					arr[curByte++] = (tmp >> 8) & 255;
					arr[curByte++] = tmp & 255;
				}
				return arr;
			}
			function tripletToBase64(num) {
				return (
					lookup[(num >> 18) & 63] +
					lookup[(num >> 12) & 63] +
					lookup[(num >> 6) & 63] +
					lookup[num & 63]
				);
			}
			function encodeChunk(uint8, start3, end) {
				var tmp;
				var output = [];
				for (var i2 = start3; i2 < end; i2 += 3) {
					tmp =
						((uint8[i2] << 16) & 16711680) + ((uint8[i2 + 1] << 8) & 65280) + (uint8[i2 + 2] & 255);
					output.push(tripletToBase64(tmp));
				}
				return output.join("");
			}
			function fromByteArray(uint8) {
				var tmp;
				var len2 = uint8.length;
				var extraBytes = len2 % 3;
				var parts = [];
				var maxChunkLength = 16383;
				for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
					parts.push(
						encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength)
					);
				}
				if (extraBytes === 1) {
					tmp = uint8[len2 - 1];
					parts.push(lookup[tmp >> 2] + lookup[(tmp << 4) & 63] + "==");
				} else if (extraBytes === 2) {
					tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
					parts.push(lookup[tmp >> 10] + lookup[(tmp >> 4) & 63] + lookup[(tmp << 2) & 63] + "=");
				}
				return parts.join("");
			}
		},
	});

	// ../../node_modules/ieee754/index.js
	var require_ieee754 = __commonJS({
		"../../node_modules/ieee754/index.js"(exports) {
			exports.read = function (buffer, offset, isLE, mLen, nBytes) {
				var e, m;
				var eLen = nBytes * 8 - mLen - 1;
				var eMax = (1 << eLen) - 1;
				var eBias = eMax >> 1;
				var nBits = -7;
				var i = isLE ? nBytes - 1 : 0;
				var d = isLE ? -1 : 1;
				var s = buffer[offset + i];
				i += d;
				e = s & ((1 << -nBits) - 1);
				s >>= -nBits;
				nBits += eLen;
				for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}
				m = e & ((1 << -nBits) - 1);
				e >>= -nBits;
				nBits += mLen;
				for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}
				if (e === 0) {
					e = 1 - eBias;
				} else if (e === eMax) {
					return m ? NaN : (s ? -1 : 1) * Infinity;
				} else {
					m = m + Math.pow(2, mLen);
					e = e - eBias;
				}
				return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
			};
			exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
				var e, m, c20;
				var eLen = nBytes * 8 - mLen - 1;
				var eMax = (1 << eLen) - 1;
				var eBias = eMax >> 1;
				var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
				var i = isLE ? 0 : nBytes - 1;
				var d = isLE ? 1 : -1;
				var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;
				value = Math.abs(value);
				if (isNaN(value) || value === Infinity) {
					m = isNaN(value) ? 1 : 0;
					e = eMax;
				} else {
					e = Math.floor(Math.log(value) / Math.LN2);
					if (value * (c20 = Math.pow(2, -e)) < 1) {
						e--;
						c20 *= 2;
					}
					if (e + eBias >= 1) {
						value += rt / c20;
					} else {
						value += rt * Math.pow(2, 1 - eBias);
					}
					if (value * c20 >= 2) {
						e++;
						c20 /= 2;
					}
					if (e + eBias >= eMax) {
						m = 0;
						e = eMax;
					} else if (e + eBias >= 1) {
						m = (value * c20 - 1) * Math.pow(2, mLen);
						e = e + eBias;
					} else {
						m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
						e = 0;
					}
				}
				for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {}
				e = (e << mLen) | m;
				eLen += mLen;
				for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {}
				buffer[offset + i - d] |= s * 128;
			};
		},
	});

	// ../../node_modules/isarray/index.js
	var require_isarray = __commonJS({
		"../../node_modules/isarray/index.js"(exports, module2) {
			var toString = {}.toString;
			module2.exports =
				Array.isArray ||
				function (arr) {
					return toString.call(arr) == "[object Array]";
				};
		},
	});

	// ../../node_modules/amazon-cognito-identity-js/node_modules/buffer/index.js
	var require_buffer = __commonJS({
		"../../node_modules/amazon-cognito-identity-js/node_modules/buffer/index.js"(exports) {
			"use strict";
			var base64 = require_base64_js();
			var ieee754 = require_ieee754();
			var isArray2 = require_isarray();
			exports.Buffer = Buffer5;
			exports.SlowBuffer = SlowBuffer;
			exports.INSPECT_MAX_BYTES = 50;
			Buffer5.TYPED_ARRAY_SUPPORT =
				global.TYPED_ARRAY_SUPPORT !== void 0 ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();
			exports.kMaxLength = kMaxLength();
			function typedArraySupport() {
				try {
					var arr = new Uint8Array(1);
					arr.__proto__ = {
						__proto__: Uint8Array.prototype,
						foo: function () {
							return 42;
						},
					};
					return (
						arr.foo() === 42 &&
						typeof arr.subarray === "function" &&
						arr.subarray(1, 1).byteLength === 0
					);
				} catch (e) {
					return false;
				}
			}
			function kMaxLength() {
				return Buffer5.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
			}
			function createBuffer(that, length) {
				if (kMaxLength() < length) {
					throw new RangeError("Invalid typed array length");
				}
				if (Buffer5.TYPED_ARRAY_SUPPORT) {
					that = new Uint8Array(length);
					that.__proto__ = Buffer5.prototype;
				} else {
					if (that === null) {
						that = new Buffer5(length);
					}
					that.length = length;
				}
				return that;
			}
			function Buffer5(arg, encodingOrOffset, length) {
				if (!Buffer5.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer5)) {
					return new Buffer5(arg, encodingOrOffset, length);
				}
				if (typeof arg === "number") {
					if (typeof encodingOrOffset === "string") {
						throw new Error("If encoding is specified then the first argument must be a string");
					}
					return allocUnsafe(this, arg);
				}
				return from(this, arg, encodingOrOffset, length);
			}
			Buffer5.poolSize = 8192;
			Buffer5._augment = function (arr) {
				arr.__proto__ = Buffer5.prototype;
				return arr;
			};
			function from(that, value, encodingOrOffset, length) {
				if (typeof value === "number") {
					throw new TypeError('"value" argument must not be a number');
				}
				if (typeof ArrayBuffer !== "undefined" && value instanceof ArrayBuffer) {
					return fromArrayBuffer(that, value, encodingOrOffset, length);
				}
				if (typeof value === "string") {
					return fromString(that, value, encodingOrOffset);
				}
				return fromObject(that, value);
			}
			Buffer5.from = function (value, encodingOrOffset, length) {
				return from(null, value, encodingOrOffset, length);
			};
			if (Buffer5.TYPED_ARRAY_SUPPORT) {
				Buffer5.prototype.__proto__ = Uint8Array.prototype;
				Buffer5.__proto__ = Uint8Array;
				if (
					typeof Symbol !== "undefined" &&
					Symbol.species &&
					Buffer5[Symbol.species] === Buffer5
				) {
					Object.defineProperty(Buffer5, Symbol.species, {
						value: null,
						configurable: true,
					});
				}
			}
			function assertSize(size) {
				if (typeof size !== "number") {
					throw new TypeError('"size" argument must be a number');
				} else if (size < 0) {
					throw new RangeError('"size" argument must not be negative');
				}
			}
			function alloc(that, size, fill, encoding) {
				assertSize(size);
				if (size <= 0) {
					return createBuffer(that, size);
				}
				if (fill !== void 0) {
					return typeof encoding === "string"
						? createBuffer(that, size).fill(fill, encoding)
						: createBuffer(that, size).fill(fill);
				}
				return createBuffer(that, size);
			}
			Buffer5.alloc = function (size, fill, encoding) {
				return alloc(null, size, fill, encoding);
			};
			function allocUnsafe(that, size) {
				assertSize(size);
				that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
				if (!Buffer5.TYPED_ARRAY_SUPPORT) {
					for (var i = 0; i < size; ++i) {
						that[i] = 0;
					}
				}
				return that;
			}
			Buffer5.allocUnsafe = function (size) {
				return allocUnsafe(null, size);
			};
			Buffer5.allocUnsafeSlow = function (size) {
				return allocUnsafe(null, size);
			};
			function fromString(that, string, encoding) {
				if (typeof encoding !== "string" || encoding === "") {
					encoding = "utf8";
				}
				if (!Buffer5.isEncoding(encoding)) {
					throw new TypeError('"encoding" must be a valid string encoding');
				}
				var length = byteLength(string, encoding) | 0;
				that = createBuffer(that, length);
				var actual = that.write(string, encoding);
				if (actual !== length) {
					that = that.slice(0, actual);
				}
				return that;
			}
			function fromArrayLike(that, array) {
				var length = array.length < 0 ? 0 : checked(array.length) | 0;
				that = createBuffer(that, length);
				for (var i = 0; i < length; i += 1) {
					that[i] = array[i] & 255;
				}
				return that;
			}
			function fromArrayBuffer(that, array, byteOffset, length) {
				array.byteLength;
				if (byteOffset < 0 || array.byteLength < byteOffset) {
					throw new RangeError("'offset' is out of bounds");
				}
				if (array.byteLength < byteOffset + (length || 0)) {
					throw new RangeError("'length' is out of bounds");
				}
				if (byteOffset === void 0 && length === void 0) {
					array = new Uint8Array(array);
				} else if (length === void 0) {
					array = new Uint8Array(array, byteOffset);
				} else {
					array = new Uint8Array(array, byteOffset, length);
				}
				if (Buffer5.TYPED_ARRAY_SUPPORT) {
					that = array;
					that.__proto__ = Buffer5.prototype;
				} else {
					that = fromArrayLike(that, array);
				}
				return that;
			}
			function fromObject(that, obj) {
				if (Buffer5.isBuffer(obj)) {
					var len = checked(obj.length) | 0;
					that = createBuffer(that, len);
					if (that.length === 0) {
						return that;
					}
					obj.copy(that, 0, 0, len);
					return that;
				}
				if (obj) {
					if (
						(typeof ArrayBuffer !== "undefined" && obj.buffer instanceof ArrayBuffer) ||
						"length" in obj
					) {
						if (typeof obj.length !== "number" || isnan(obj.length)) {
							return createBuffer(that, 0);
						}
						return fromArrayLike(that, obj);
					}
					if (obj.type === "Buffer" && isArray2(obj.data)) {
						return fromArrayLike(that, obj.data);
					}
				}
				throw new TypeError(
					"First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object."
				);
			}
			function checked(length) {
				if (length >= kMaxLength()) {
					throw new RangeError(
						"Attempt to allocate Buffer larger than maximum size: 0x" +
							kMaxLength().toString(16) +
							" bytes"
					);
				}
				return length | 0;
			}
			function SlowBuffer(length) {
				if (+length != length) {
					length = 0;
				}
				return Buffer5.alloc(+length);
			}
			Buffer5.isBuffer = function isBuffer(b) {
				return !!(b != null && b._isBuffer);
			};
			Buffer5.compare = function compare(a, b) {
				if (!Buffer5.isBuffer(a) || !Buffer5.isBuffer(b)) {
					throw new TypeError("Arguments must be Buffers");
				}
				if (a === b) return 0;
				var x = a.length;
				var y = b.length;
				for (var i = 0, len = Math.min(x, y); i < len; ++i) {
					if (a[i] !== b[i]) {
						x = a[i];
						y = b[i];
						break;
					}
				}
				if (x < y) return -1;
				if (y < x) return 1;
				return 0;
			};
			Buffer5.isEncoding = function isEncoding(encoding) {
				switch (String(encoding).toLowerCase()) {
					case "hex":
					case "utf8":
					case "utf-8":
					case "ascii":
					case "latin1":
					case "binary":
					case "base64":
					case "ucs2":
					case "ucs-2":
					case "utf16le":
					case "utf-16le":
						return true;
					default:
						return false;
				}
			};
			Buffer5.concat = function concat(list, length) {
				if (!isArray2(list)) {
					throw new TypeError('"list" argument must be an Array of Buffers');
				}
				if (list.length === 0) {
					return Buffer5.alloc(0);
				}
				var i;
				if (length === void 0) {
					length = 0;
					for (i = 0; i < list.length; ++i) {
						length += list[i].length;
					}
				}
				var buffer = Buffer5.allocUnsafe(length);
				var pos = 0;
				for (i = 0; i < list.length; ++i) {
					var buf = list[i];
					if (!Buffer5.isBuffer(buf)) {
						throw new TypeError('"list" argument must be an Array of Buffers');
					}
					buf.copy(buffer, pos);
					pos += buf.length;
				}
				return buffer;
			};
			function byteLength(string, encoding) {
				if (Buffer5.isBuffer(string)) {
					return string.length;
				}
				if (
					typeof ArrayBuffer !== "undefined" &&
					typeof ArrayBuffer.isView === "function" &&
					(ArrayBuffer.isView(string) || string instanceof ArrayBuffer)
				) {
					return string.byteLength;
				}
				if (typeof string !== "string") {
					string = "" + string;
				}
				var len = string.length;
				if (len === 0) return 0;
				var loweredCase = false;
				for (;;) {
					switch (encoding) {
						case "ascii":
						case "latin1":
						case "binary":
							return len;
						case "utf8":
						case "utf-8":
						case void 0:
							return utf8ToBytes(string).length;
						case "ucs2":
						case "ucs-2":
						case "utf16le":
						case "utf-16le":
							return len * 2;
						case "hex":
							return len >>> 1;
						case "base64":
							return base64ToBytes(string).length;
						default:
							if (loweredCase) return utf8ToBytes(string).length;
							encoding = ("" + encoding).toLowerCase();
							loweredCase = true;
					}
				}
			}
			Buffer5.byteLength = byteLength;
			function slowToString(encoding, start3, end) {
				var loweredCase = false;
				if (start3 === void 0 || start3 < 0) {
					start3 = 0;
				}
				if (start3 > this.length) {
					return "";
				}
				if (end === void 0 || end > this.length) {
					end = this.length;
				}
				if (end <= 0) {
					return "";
				}
				end >>>= 0;
				start3 >>>= 0;
				if (end <= start3) {
					return "";
				}
				if (!encoding) encoding = "utf8";
				while (true) {
					switch (encoding) {
						case "hex":
							return hexSlice(this, start3, end);
						case "utf8":
						case "utf-8":
							return utf8Slice(this, start3, end);
						case "ascii":
							return asciiSlice(this, start3, end);
						case "latin1":
						case "binary":
							return latin1Slice(this, start3, end);
						case "base64":
							return base64Slice(this, start3, end);
						case "ucs2":
						case "ucs-2":
						case "utf16le":
						case "utf-16le":
							return utf16leSlice(this, start3, end);
						default:
							if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
							encoding = (encoding + "").toLowerCase();
							loweredCase = true;
					}
				}
			}
			Buffer5.prototype._isBuffer = true;
			function swap(b, n, m) {
				var i = b[n];
				b[n] = b[m];
				b[m] = i;
			}
			Buffer5.prototype.swap16 = function swap16() {
				var len = this.length;
				if (len % 2 !== 0) {
					throw new RangeError("Buffer size must be a multiple of 16-bits");
				}
				for (var i = 0; i < len; i += 2) {
					swap(this, i, i + 1);
				}
				return this;
			};
			Buffer5.prototype.swap32 = function swap32() {
				var len = this.length;
				if (len % 4 !== 0) {
					throw new RangeError("Buffer size must be a multiple of 32-bits");
				}
				for (var i = 0; i < len; i += 4) {
					swap(this, i, i + 3);
					swap(this, i + 1, i + 2);
				}
				return this;
			};
			Buffer5.prototype.swap64 = function swap64() {
				var len = this.length;
				if (len % 8 !== 0) {
					throw new RangeError("Buffer size must be a multiple of 64-bits");
				}
				for (var i = 0; i < len; i += 8) {
					swap(this, i, i + 7);
					swap(this, i + 1, i + 6);
					swap(this, i + 2, i + 5);
					swap(this, i + 3, i + 4);
				}
				return this;
			};
			Buffer5.prototype.toString = function toString() {
				var length = this.length | 0;
				if (length === 0) return "";
				if (arguments.length === 0) return utf8Slice(this, 0, length);
				return slowToString.apply(this, arguments);
			};
			Buffer5.prototype.equals = function equals(b) {
				if (!Buffer5.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
				if (this === b) return true;
				return Buffer5.compare(this, b) === 0;
			};
			Buffer5.prototype.inspect = function inspect2() {
				var str = "";
				var max = exports.INSPECT_MAX_BYTES;
				if (this.length > 0) {
					str = this.toString("hex", 0, max).match(/.{2}/g).join(" ");
					if (this.length > max) str += " ... ";
				}
				return "<Buffer " + str + ">";
			};
			Buffer5.prototype.compare = function compare(target, start3, end, thisStart, thisEnd) {
				if (!Buffer5.isBuffer(target)) {
					throw new TypeError("Argument must be a Buffer");
				}
				if (start3 === void 0) {
					start3 = 0;
				}
				if (end === void 0) {
					end = target ? target.length : 0;
				}
				if (thisStart === void 0) {
					thisStart = 0;
				}
				if (thisEnd === void 0) {
					thisEnd = this.length;
				}
				if (start3 < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
					throw new RangeError("out of range index");
				}
				if (thisStart >= thisEnd && start3 >= end) {
					return 0;
				}
				if (thisStart >= thisEnd) {
					return -1;
				}
				if (start3 >= end) {
					return 1;
				}
				start3 >>>= 0;
				end >>>= 0;
				thisStart >>>= 0;
				thisEnd >>>= 0;
				if (this === target) return 0;
				var x = thisEnd - thisStart;
				var y = end - start3;
				var len = Math.min(x, y);
				var thisCopy = this.slice(thisStart, thisEnd);
				var targetCopy = target.slice(start3, end);
				for (var i = 0; i < len; ++i) {
					if (thisCopy[i] !== targetCopy[i]) {
						x = thisCopy[i];
						y = targetCopy[i];
						break;
					}
				}
				if (x < y) return -1;
				if (y < x) return 1;
				return 0;
			};
			function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
				if (buffer.length === 0) return -1;
				if (typeof byteOffset === "string") {
					encoding = byteOffset;
					byteOffset = 0;
				} else if (byteOffset > 2147483647) {
					byteOffset = 2147483647;
				} else if (byteOffset < -2147483648) {
					byteOffset = -2147483648;
				}
				byteOffset = +byteOffset;
				if (isNaN(byteOffset)) {
					byteOffset = dir ? 0 : buffer.length - 1;
				}
				if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
				if (byteOffset >= buffer.length) {
					if (dir) return -1;
					else byteOffset = buffer.length - 1;
				} else if (byteOffset < 0) {
					if (dir) byteOffset = 0;
					else return -1;
				}
				if (typeof val === "string") {
					val = Buffer5.from(val, encoding);
				}
				if (Buffer5.isBuffer(val)) {
					if (val.length === 0) {
						return -1;
					}
					return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
				} else if (typeof val === "number") {
					val = val & 255;
					if (Buffer5.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === "function") {
						if (dir) {
							return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
						} else {
							return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
						}
					}
					return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
				}
				throw new TypeError("val must be string, number or Buffer");
			}
			function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
				var indexSize = 1;
				var arrLength = arr.length;
				var valLength = val.length;
				if (encoding !== void 0) {
					encoding = String(encoding).toLowerCase();
					if (
						encoding === "ucs2" ||
						encoding === "ucs-2" ||
						encoding === "utf16le" ||
						encoding === "utf-16le"
					) {
						if (arr.length < 2 || val.length < 2) {
							return -1;
						}
						indexSize = 2;
						arrLength /= 2;
						valLength /= 2;
						byteOffset /= 2;
					}
				}
				function read(buf, i2) {
					if (indexSize === 1) {
						return buf[i2];
					} else {
						return buf.readUInt16BE(i2 * indexSize);
					}
				}
				var i;
				if (dir) {
					var foundIndex = -1;
					for (i = byteOffset; i < arrLength; i++) {
						if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
							if (foundIndex === -1) foundIndex = i;
							if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
						} else {
							if (foundIndex !== -1) i -= i - foundIndex;
							foundIndex = -1;
						}
					}
				} else {
					if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
					for (i = byteOffset; i >= 0; i--) {
						var found = true;
						for (var j = 0; j < valLength; j++) {
							if (read(arr, i + j) !== read(val, j)) {
								found = false;
								break;
							}
						}
						if (found) return i;
					}
				}
				return -1;
			}
			Buffer5.prototype.includes = function includes(val, byteOffset, encoding) {
				return this.indexOf(val, byteOffset, encoding) !== -1;
			};
			Buffer5.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
				return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
			};
			Buffer5.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
				return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
			};
			function hexWrite(buf, string, offset, length) {
				offset = Number(offset) || 0;
				var remaining = buf.length - offset;
				if (!length) {
					length = remaining;
				} else {
					length = Number(length);
					if (length > remaining) {
						length = remaining;
					}
				}
				var strLen = string.length;
				if (strLen % 2 !== 0) throw new TypeError("Invalid hex string");
				if (length > strLen / 2) {
					length = strLen / 2;
				}
				for (var i = 0; i < length; ++i) {
					var parsed = parseInt(string.substr(i * 2, 2), 16);
					if (isNaN(parsed)) return i;
					buf[offset + i] = parsed;
				}
				return i;
			}
			function utf8Write(buf, string, offset, length) {
				return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
			}
			function asciiWrite(buf, string, offset, length) {
				return blitBuffer(asciiToBytes(string), buf, offset, length);
			}
			function latin1Write(buf, string, offset, length) {
				return asciiWrite(buf, string, offset, length);
			}
			function base64Write(buf, string, offset, length) {
				return blitBuffer(base64ToBytes(string), buf, offset, length);
			}
			function ucs2Write(buf, string, offset, length) {
				return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
			}
			Buffer5.prototype.write = function write(string, offset, length, encoding) {
				if (offset === void 0) {
					encoding = "utf8";
					length = this.length;
					offset = 0;
				} else if (length === void 0 && typeof offset === "string") {
					encoding = offset;
					length = this.length;
					offset = 0;
				} else if (isFinite(offset)) {
					offset = offset | 0;
					if (isFinite(length)) {
						length = length | 0;
						if (encoding === void 0) encoding = "utf8";
					} else {
						encoding = length;
						length = void 0;
					}
				} else {
					throw new Error(
						"Buffer.write(string, encoding, offset[, length]) is no longer supported"
					);
				}
				var remaining = this.length - offset;
				if (length === void 0 || length > remaining) length = remaining;
				if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
					throw new RangeError("Attempt to write outside buffer bounds");
				}
				if (!encoding) encoding = "utf8";
				var loweredCase = false;
				for (;;) {
					switch (encoding) {
						case "hex":
							return hexWrite(this, string, offset, length);
						case "utf8":
						case "utf-8":
							return utf8Write(this, string, offset, length);
						case "ascii":
							return asciiWrite(this, string, offset, length);
						case "latin1":
						case "binary":
							return latin1Write(this, string, offset, length);
						case "base64":
							return base64Write(this, string, offset, length);
						case "ucs2":
						case "ucs-2":
						case "utf16le":
						case "utf-16le":
							return ucs2Write(this, string, offset, length);
						default:
							if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
							encoding = ("" + encoding).toLowerCase();
							loweredCase = true;
					}
				}
			};
			Buffer5.prototype.toJSON = function toJSON() {
				return {
					type: "Buffer",
					data: Array.prototype.slice.call(this._arr || this, 0),
				};
			};
			function base64Slice(buf, start3, end) {
				if (start3 === 0 && end === buf.length) {
					return base64.fromByteArray(buf);
				} else {
					return base64.fromByteArray(buf.slice(start3, end));
				}
			}
			function utf8Slice(buf, start3, end) {
				end = Math.min(buf.length, end);
				var res = [];
				var i = start3;
				while (i < end) {
					var firstByte = buf[i];
					var codePoint = null;
					var bytesPerSequence =
						firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
					if (i + bytesPerSequence <= end) {
						var secondByte, thirdByte, fourthByte, tempCodePoint;
						switch (bytesPerSequence) {
							case 1:
								if (firstByte < 128) {
									codePoint = firstByte;
								}
								break;
							case 2:
								secondByte = buf[i + 1];
								if ((secondByte & 192) === 128) {
									tempCodePoint = ((firstByte & 31) << 6) | (secondByte & 63);
									if (tempCodePoint > 127) {
										codePoint = tempCodePoint;
									}
								}
								break;
							case 3:
								secondByte = buf[i + 1];
								thirdByte = buf[i + 2];
								if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
									tempCodePoint =
										((firstByte & 15) << 12) | ((secondByte & 63) << 6) | (thirdByte & 63);
									if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
										codePoint = tempCodePoint;
									}
								}
								break;
							case 4:
								secondByte = buf[i + 1];
								thirdByte = buf[i + 2];
								fourthByte = buf[i + 3];
								if (
									(secondByte & 192) === 128 &&
									(thirdByte & 192) === 128 &&
									(fourthByte & 192) === 128
								) {
									tempCodePoint =
										((firstByte & 15) << 18) |
										((secondByte & 63) << 12) |
										((thirdByte & 63) << 6) |
										(fourthByte & 63);
									if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
										codePoint = tempCodePoint;
									}
								}
						}
					}
					if (codePoint === null) {
						codePoint = 65533;
						bytesPerSequence = 1;
					} else if (codePoint > 65535) {
						codePoint -= 65536;
						res.push(((codePoint >>> 10) & 1023) | 55296);
						codePoint = 56320 | (codePoint & 1023);
					}
					res.push(codePoint);
					i += bytesPerSequence;
				}
				return decodeCodePointsArray(res);
			}
			var MAX_ARGUMENTS_LENGTH = 4096;
			function decodeCodePointsArray(codePoints) {
				var len = codePoints.length;
				if (len <= MAX_ARGUMENTS_LENGTH) {
					return String.fromCharCode.apply(String, codePoints);
				}
				var res = "";
				var i = 0;
				while (i < len) {
					res += String.fromCharCode.apply(
						String,
						codePoints.slice(i, (i += MAX_ARGUMENTS_LENGTH))
					);
				}
				return res;
			}
			function asciiSlice(buf, start3, end) {
				var ret = "";
				end = Math.min(buf.length, end);
				for (var i = start3; i < end; ++i) {
					ret += String.fromCharCode(buf[i] & 127);
				}
				return ret;
			}
			function latin1Slice(buf, start3, end) {
				var ret = "";
				end = Math.min(buf.length, end);
				for (var i = start3; i < end; ++i) {
					ret += String.fromCharCode(buf[i]);
				}
				return ret;
			}
			function hexSlice(buf, start3, end) {
				var len = buf.length;
				if (!start3 || start3 < 0) start3 = 0;
				if (!end || end < 0 || end > len) end = len;
				var out = "";
				for (var i = start3; i < end; ++i) {
					out += toHex2(buf[i]);
				}
				return out;
			}
			function utf16leSlice(buf, start3, end) {
				var bytes = buf.slice(start3, end);
				var res = "";
				for (var i = 0; i < bytes.length; i += 2) {
					res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
				}
				return res;
			}
			Buffer5.prototype.slice = function slice(start3, end) {
				var len = this.length;
				start3 = ~~start3;
				end = end === void 0 ? len : ~~end;
				if (start3 < 0) {
					start3 += len;
					if (start3 < 0) start3 = 0;
				} else if (start3 > len) {
					start3 = len;
				}
				if (end < 0) {
					end += len;
					if (end < 0) end = 0;
				} else if (end > len) {
					end = len;
				}
				if (end < start3) end = start3;
				var newBuf;
				if (Buffer5.TYPED_ARRAY_SUPPORT) {
					newBuf = this.subarray(start3, end);
					newBuf.__proto__ = Buffer5.prototype;
				} else {
					var sliceLen = end - start3;
					newBuf = new Buffer5(sliceLen, void 0);
					for (var i = 0; i < sliceLen; ++i) {
						newBuf[i] = this[i + start3];
					}
				}
				return newBuf;
			};
			function checkOffset(offset, ext, length) {
				if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
				if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
			}
			Buffer5.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
				offset = offset | 0;
				byteLength2 = byteLength2 | 0;
				if (!noAssert) checkOffset(offset, byteLength2, this.length);
				var val = this[offset];
				var mul = 1;
				var i = 0;
				while (++i < byteLength2 && (mul *= 256)) {
					val += this[offset + i] * mul;
				}
				return val;
			};
			Buffer5.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
				offset = offset | 0;
				byteLength2 = byteLength2 | 0;
				if (!noAssert) {
					checkOffset(offset, byteLength2, this.length);
				}
				var val = this[offset + --byteLength2];
				var mul = 1;
				while (byteLength2 > 0 && (mul *= 256)) {
					val += this[offset + --byteLength2] * mul;
				}
				return val;
			};
			Buffer5.prototype.readUInt8 = function readUInt8(offset, noAssert) {
				if (!noAssert) checkOffset(offset, 1, this.length);
				return this[offset];
			};
			Buffer5.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
				if (!noAssert) checkOffset(offset, 2, this.length);
				return this[offset] | (this[offset + 1] << 8);
			};
			Buffer5.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
				if (!noAssert) checkOffset(offset, 2, this.length);
				return (this[offset] << 8) | this[offset + 1];
			};
			Buffer5.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
				if (!noAssert) checkOffset(offset, 4, this.length);
				return (
					(this[offset] | (this[offset + 1] << 8) | (this[offset + 2] << 16)) +
					this[offset + 3] * 16777216
				);
			};
			Buffer5.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
				if (!noAssert) checkOffset(offset, 4, this.length);
				return (
					this[offset] * 16777216 +
					((this[offset + 1] << 16) | (this[offset + 2] << 8) | this[offset + 3])
				);
			};
			Buffer5.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
				offset = offset | 0;
				byteLength2 = byteLength2 | 0;
				if (!noAssert) checkOffset(offset, byteLength2, this.length);
				var val = this[offset];
				var mul = 1;
				var i = 0;
				while (++i < byteLength2 && (mul *= 256)) {
					val += this[offset + i] * mul;
				}
				mul *= 128;
				if (val >= mul) val -= Math.pow(2, 8 * byteLength2);
				return val;
			};
			Buffer5.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
				offset = offset | 0;
				byteLength2 = byteLength2 | 0;
				if (!noAssert) checkOffset(offset, byteLength2, this.length);
				var i = byteLength2;
				var mul = 1;
				var val = this[offset + --i];
				while (i > 0 && (mul *= 256)) {
					val += this[offset + --i] * mul;
				}
				mul *= 128;
				if (val >= mul) val -= Math.pow(2, 8 * byteLength2);
				return val;
			};
			Buffer5.prototype.readInt8 = function readInt8(offset, noAssert) {
				if (!noAssert) checkOffset(offset, 1, this.length);
				if (!(this[offset] & 128)) return this[offset];
				return (255 - this[offset] + 1) * -1;
			};
			Buffer5.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
				if (!noAssert) checkOffset(offset, 2, this.length);
				var val = this[offset] | (this[offset + 1] << 8);
				return val & 32768 ? val | 4294901760 : val;
			};
			Buffer5.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
				if (!noAssert) checkOffset(offset, 2, this.length);
				var val = this[offset + 1] | (this[offset] << 8);
				return val & 32768 ? val | 4294901760 : val;
			};
			Buffer5.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
				if (!noAssert) checkOffset(offset, 4, this.length);
				return (
					this[offset] |
					(this[offset + 1] << 8) |
					(this[offset + 2] << 16) |
					(this[offset + 3] << 24)
				);
			};
			Buffer5.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
				if (!noAssert) checkOffset(offset, 4, this.length);
				return (
					(this[offset] << 24) |
					(this[offset + 1] << 16) |
					(this[offset + 2] << 8) |
					this[offset + 3]
				);
			};
			Buffer5.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
				if (!noAssert) checkOffset(offset, 4, this.length);
				return ieee754.read(this, offset, true, 23, 4);
			};
			Buffer5.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
				if (!noAssert) checkOffset(offset, 4, this.length);
				return ieee754.read(this, offset, false, 23, 4);
			};
			Buffer5.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
				if (!noAssert) checkOffset(offset, 8, this.length);
				return ieee754.read(this, offset, true, 52, 8);
			};
			Buffer5.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
				if (!noAssert) checkOffset(offset, 8, this.length);
				return ieee754.read(this, offset, false, 52, 8);
			};
			function checkInt(buf, value, offset, ext, max, min) {
				if (!Buffer5.isBuffer(buf))
					throw new TypeError('"buffer" argument must be a Buffer instance');
				if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
				if (offset + ext > buf.length) throw new RangeError("Index out of range");
			}
			Buffer5.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
				value = +value;
				offset = offset | 0;
				byteLength2 = byteLength2 | 0;
				if (!noAssert) {
					var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
					checkInt(this, value, offset, byteLength2, maxBytes, 0);
				}
				var mul = 1;
				var i = 0;
				this[offset] = value & 255;
				while (++i < byteLength2 && (mul *= 256)) {
					this[offset + i] = (value / mul) & 255;
				}
				return offset + byteLength2;
			};
			Buffer5.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
				value = +value;
				offset = offset | 0;
				byteLength2 = byteLength2 | 0;
				if (!noAssert) {
					var maxBytes = Math.pow(2, 8 * byteLength2) - 1;
					checkInt(this, value, offset, byteLength2, maxBytes, 0);
				}
				var i = byteLength2 - 1;
				var mul = 1;
				this[offset + i] = value & 255;
				while (--i >= 0 && (mul *= 256)) {
					this[offset + i] = (value / mul) & 255;
				}
				return offset + byteLength2;
			};
			Buffer5.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
				value = +value;
				offset = offset | 0;
				if (!noAssert) checkInt(this, value, offset, 1, 255, 0);
				if (!Buffer5.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
				this[offset] = value & 255;
				return offset + 1;
			};
			function objectWriteUInt16(buf, value, offset, littleEndian) {
				if (value < 0) value = 65535 + value + 1;
				for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
					buf[offset + i] =
						(value & (255 << (8 * (littleEndian ? i : 1 - i)))) >>>
						((littleEndian ? i : 1 - i) * 8);
				}
			}
			Buffer5.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
				value = +value;
				offset = offset | 0;
				if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
				if (Buffer5.TYPED_ARRAY_SUPPORT) {
					this[offset] = value & 255;
					this[offset + 1] = value >>> 8;
				} else {
					objectWriteUInt16(this, value, offset, true);
				}
				return offset + 2;
			};
			Buffer5.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
				value = +value;
				offset = offset | 0;
				if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
				if (Buffer5.TYPED_ARRAY_SUPPORT) {
					this[offset] = value >>> 8;
					this[offset + 1] = value & 255;
				} else {
					objectWriteUInt16(this, value, offset, false);
				}
				return offset + 2;
			};
			function objectWriteUInt32(buf, value, offset, littleEndian) {
				if (value < 0) value = 4294967295 + value + 1;
				for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
					buf[offset + i] = (value >>> ((littleEndian ? i : 3 - i) * 8)) & 255;
				}
			}
			Buffer5.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
				value = +value;
				offset = offset | 0;
				if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
				if (Buffer5.TYPED_ARRAY_SUPPORT) {
					this[offset + 3] = value >>> 24;
					this[offset + 2] = value >>> 16;
					this[offset + 1] = value >>> 8;
					this[offset] = value & 255;
				} else {
					objectWriteUInt32(this, value, offset, true);
				}
				return offset + 4;
			};
			Buffer5.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
				value = +value;
				offset = offset | 0;
				if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
				if (Buffer5.TYPED_ARRAY_SUPPORT) {
					this[offset] = value >>> 24;
					this[offset + 1] = value >>> 16;
					this[offset + 2] = value >>> 8;
					this[offset + 3] = value & 255;
				} else {
					objectWriteUInt32(this, value, offset, false);
				}
				return offset + 4;
			};
			Buffer5.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
				value = +value;
				offset = offset | 0;
				if (!noAssert) {
					var limit = Math.pow(2, 8 * byteLength2 - 1);
					checkInt(this, value, offset, byteLength2, limit - 1, -limit);
				}
				var i = 0;
				var mul = 1;
				var sub = 0;
				this[offset] = value & 255;
				while (++i < byteLength2 && (mul *= 256)) {
					if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
						sub = 1;
					}
					this[offset + i] = (((value / mul) >> 0) - sub) & 255;
				}
				return offset + byteLength2;
			};
			Buffer5.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
				value = +value;
				offset = offset | 0;
				if (!noAssert) {
					var limit = Math.pow(2, 8 * byteLength2 - 1);
					checkInt(this, value, offset, byteLength2, limit - 1, -limit);
				}
				var i = byteLength2 - 1;
				var mul = 1;
				var sub = 0;
				this[offset + i] = value & 255;
				while (--i >= 0 && (mul *= 256)) {
					if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
						sub = 1;
					}
					this[offset + i] = (((value / mul) >> 0) - sub) & 255;
				}
				return offset + byteLength2;
			};
			Buffer5.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
				value = +value;
				offset = offset | 0;
				if (!noAssert) checkInt(this, value, offset, 1, 127, -128);
				if (!Buffer5.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
				if (value < 0) value = 255 + value + 1;
				this[offset] = value & 255;
				return offset + 1;
			};
			Buffer5.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
				value = +value;
				offset = offset | 0;
				if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
				if (Buffer5.TYPED_ARRAY_SUPPORT) {
					this[offset] = value & 255;
					this[offset + 1] = value >>> 8;
				} else {
					objectWriteUInt16(this, value, offset, true);
				}
				return offset + 2;
			};
			Buffer5.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
				value = +value;
				offset = offset | 0;
				if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
				if (Buffer5.TYPED_ARRAY_SUPPORT) {
					this[offset] = value >>> 8;
					this[offset + 1] = value & 255;
				} else {
					objectWriteUInt16(this, value, offset, false);
				}
				return offset + 2;
			};
			Buffer5.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
				value = +value;
				offset = offset | 0;
				if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
				if (Buffer5.TYPED_ARRAY_SUPPORT) {
					this[offset] = value & 255;
					this[offset + 1] = value >>> 8;
					this[offset + 2] = value >>> 16;
					this[offset + 3] = value >>> 24;
				} else {
					objectWriteUInt32(this, value, offset, true);
				}
				return offset + 4;
			};
			Buffer5.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
				value = +value;
				offset = offset | 0;
				if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
				if (value < 0) value = 4294967295 + value + 1;
				if (Buffer5.TYPED_ARRAY_SUPPORT) {
					this[offset] = value >>> 24;
					this[offset + 1] = value >>> 16;
					this[offset + 2] = value >>> 8;
					this[offset + 3] = value & 255;
				} else {
					objectWriteUInt32(this, value, offset, false);
				}
				return offset + 4;
			};
			function checkIEEE754(buf, value, offset, ext, max, min) {
				if (offset + ext > buf.length) throw new RangeError("Index out of range");
				if (offset < 0) throw new RangeError("Index out of range");
			}
			function writeFloat(buf, value, offset, littleEndian, noAssert) {
				if (!noAssert) {
					checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
				}
				ieee754.write(buf, value, offset, littleEndian, 23, 4);
				return offset + 4;
			}
			Buffer5.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
				return writeFloat(this, value, offset, true, noAssert);
			};
			Buffer5.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
				return writeFloat(this, value, offset, false, noAssert);
			};
			function writeDouble(buf, value, offset, littleEndian, noAssert) {
				if (!noAssert) {
					checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
				}
				ieee754.write(buf, value, offset, littleEndian, 52, 8);
				return offset + 8;
			}
			Buffer5.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
				return writeDouble(this, value, offset, true, noAssert);
			};
			Buffer5.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
				return writeDouble(this, value, offset, false, noAssert);
			};
			Buffer5.prototype.copy = function copy(target, targetStart, start3, end) {
				if (!start3) start3 = 0;
				if (!end && end !== 0) end = this.length;
				if (targetStart >= target.length) targetStart = target.length;
				if (!targetStart) targetStart = 0;
				if (end > 0 && end < start3) end = start3;
				if (end === start3) return 0;
				if (target.length === 0 || this.length === 0) return 0;
				if (targetStart < 0) {
					throw new RangeError("targetStart out of bounds");
				}
				if (start3 < 0 || start3 >= this.length) throw new RangeError("sourceStart out of bounds");
				if (end < 0) throw new RangeError("sourceEnd out of bounds");
				if (end > this.length) end = this.length;
				if (target.length - targetStart < end - start3) {
					end = target.length - targetStart + start3;
				}
				var len = end - start3;
				var i;
				if (this === target && start3 < targetStart && targetStart < end) {
					for (i = len - 1; i >= 0; --i) {
						target[i + targetStart] = this[i + start3];
					}
				} else if (len < 1e3 || !Buffer5.TYPED_ARRAY_SUPPORT) {
					for (i = 0; i < len; ++i) {
						target[i + targetStart] = this[i + start3];
					}
				} else {
					Uint8Array.prototype.set.call(target, this.subarray(start3, start3 + len), targetStart);
				}
				return len;
			};
			Buffer5.prototype.fill = function fill(val, start3, end, encoding) {
				if (typeof val === "string") {
					if (typeof start3 === "string") {
						encoding = start3;
						start3 = 0;
						end = this.length;
					} else if (typeof end === "string") {
						encoding = end;
						end = this.length;
					}
					if (val.length === 1) {
						var code = val.charCodeAt(0);
						if (code < 256) {
							val = code;
						}
					}
					if (encoding !== void 0 && typeof encoding !== "string") {
						throw new TypeError("encoding must be a string");
					}
					if (typeof encoding === "string" && !Buffer5.isEncoding(encoding)) {
						throw new TypeError("Unknown encoding: " + encoding);
					}
				} else if (typeof val === "number") {
					val = val & 255;
				}
				if (start3 < 0 || this.length < start3 || this.length < end) {
					throw new RangeError("Out of range index");
				}
				if (end <= start3) {
					return this;
				}
				start3 = start3 >>> 0;
				end = end === void 0 ? this.length : end >>> 0;
				if (!val) val = 0;
				var i;
				if (typeof val === "number") {
					for (i = start3; i < end; ++i) {
						this[i] = val;
					}
				} else {
					var bytes = Buffer5.isBuffer(val)
						? val
						: utf8ToBytes(new Buffer5(val, encoding).toString());
					var len = bytes.length;
					for (i = 0; i < end - start3; ++i) {
						this[i + start3] = bytes[i % len];
					}
				}
				return this;
			};
			var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
			function base64clean(str) {
				str = stringtrim(str).replace(INVALID_BASE64_RE, "");
				if (str.length < 2) return "";
				while (str.length % 4 !== 0) {
					str = str + "=";
				}
				return str;
			}
			function stringtrim(str) {
				if (str.trim) return str.trim();
				return str.replace(/^\s+|\s+$/g, "");
			}
			function toHex2(n) {
				if (n < 16) return "0" + n.toString(16);
				return n.toString(16);
			}
			function utf8ToBytes(string, units) {
				units = units || Infinity;
				var codePoint;
				var length = string.length;
				var leadSurrogate = null;
				var bytes = [];
				for (var i = 0; i < length; ++i) {
					codePoint = string.charCodeAt(i);
					if (codePoint > 55295 && codePoint < 57344) {
						if (!leadSurrogate) {
							if (codePoint > 56319) {
								if ((units -= 3) > -1) bytes.push(239, 191, 189);
								continue;
							} else if (i + 1 === length) {
								if ((units -= 3) > -1) bytes.push(239, 191, 189);
								continue;
							}
							leadSurrogate = codePoint;
							continue;
						}
						if (codePoint < 56320) {
							if ((units -= 3) > -1) bytes.push(239, 191, 189);
							leadSurrogate = codePoint;
							continue;
						}
						codePoint = (((leadSurrogate - 55296) << 10) | (codePoint - 56320)) + 65536;
					} else if (leadSurrogate) {
						if ((units -= 3) > -1) bytes.push(239, 191, 189);
					}
					leadSurrogate = null;
					if (codePoint < 128) {
						if ((units -= 1) < 0) break;
						bytes.push(codePoint);
					} else if (codePoint < 2048) {
						if ((units -= 2) < 0) break;
						bytes.push((codePoint >> 6) | 192, (codePoint & 63) | 128);
					} else if (codePoint < 65536) {
						if ((units -= 3) < 0) break;
						bytes.push(
							(codePoint >> 12) | 224,
							((codePoint >> 6) & 63) | 128,
							(codePoint & 63) | 128
						);
					} else if (codePoint < 1114112) {
						if ((units -= 4) < 0) break;
						bytes.push(
							(codePoint >> 18) | 240,
							((codePoint >> 12) & 63) | 128,
							((codePoint >> 6) & 63) | 128,
							(codePoint & 63) | 128
						);
					} else {
						throw new Error("Invalid code point");
					}
				}
				return bytes;
			}
			function asciiToBytes(str) {
				var byteArray = [];
				for (var i = 0; i < str.length; ++i) {
					byteArray.push(str.charCodeAt(i) & 255);
				}
				return byteArray;
			}
			function utf16leToBytes(str, units) {
				var c20, hi, lo;
				var byteArray = [];
				for (var i = 0; i < str.length; ++i) {
					if ((units -= 2) < 0) break;
					c20 = str.charCodeAt(i);
					hi = c20 >> 8;
					lo = c20 % 256;
					byteArray.push(lo);
					byteArray.push(hi);
				}
				return byteArray;
			}
			function base64ToBytes(str) {
				return base64.toByteArray(base64clean(str));
			}
			function blitBuffer(src, dst, offset, length) {
				for (var i = 0; i < length; ++i) {
					if (i + offset >= dst.length || i >= src.length) break;
					dst[i + offset] = src[i];
				}
				return i;
			}
			function isnan(val) {
				return val !== val;
			}
		},
	});

	// (disabled):crypto
	var require_crypto = __commonJS({
		"(disabled):crypto"() {},
	});

	// ../../node_modules/crypto-js/core.js
	var require_core = __commonJS({
		"../../node_modules/crypto-js/core.js"(exports, module2) {
			(function (root, factory) {
				if (typeof exports === "object") {
					module2.exports = exports = factory();
				} else if (typeof define === "function" && define.amd) {
					define([], factory);
				} else {
					root.CryptoJS = factory();
				}
			})(exports, function () {
				var CryptoJS3 =
					CryptoJS3 ||
					(function (Math2, undefined2) {
						var crypto3;
						if (typeof window !== "undefined" && window.crypto) {
							crypto3 = window.crypto;
						}
						if (typeof self !== "undefined" && self.crypto) {
							crypto3 = self.crypto;
						}
						if (typeof globalThis !== "undefined" && globalThis.crypto) {
							crypto3 = globalThis.crypto;
						}
						if (!crypto3 && typeof window !== "undefined" && window.msCrypto) {
							crypto3 = window.msCrypto;
						}
						if (!crypto3 && typeof global !== "undefined" && global.crypto) {
							crypto3 = global.crypto;
						}
						if (!crypto3 && typeof __require === "function") {
							try {
								crypto3 = require_crypto();
							} catch (err) {}
						}
						var cryptoSecureRandomInt2 = function () {
							if (crypto3) {
								if (typeof crypto3.getRandomValues === "function") {
									try {
										return crypto3.getRandomValues(new Uint32Array(1))[0];
									} catch (err) {}
								}
								if (typeof crypto3.randomBytes === "function") {
									try {
										return crypto3.randomBytes(4).readInt32LE();
									} catch (err) {}
								}
							}
							throw new Error(
								"Native crypto module could not be used to get secure random number."
							);
						};
						var create =
							Object.create ||
							(function () {
								function F() {}
								return function (obj) {
									var subtype;
									F.prototype = obj;
									subtype = new F();
									F.prototype = null;
									return subtype;
								};
							})();
						var C = {};
						var C_lib = (C.lib = {});
						var Base = (C_lib.Base = (function () {
							return {
								extend: function (overrides) {
									var subtype = create(this);
									if (overrides) {
										subtype.mixIn(overrides);
									}
									if (!subtype.hasOwnProperty("init") || this.init === subtype.init) {
										subtype.init = function () {
											subtype.$super.init.apply(this, arguments);
										};
									}
									subtype.init.prototype = subtype;
									subtype.$super = this;
									return subtype;
								},
								create: function () {
									var instance = this.extend();
									instance.init.apply(instance, arguments);
									return instance;
								},
								init: function () {},
								mixIn: function (properties) {
									for (var propertyName in properties) {
										if (properties.hasOwnProperty(propertyName)) {
											this[propertyName] = properties[propertyName];
										}
									}
									if (properties.hasOwnProperty("toString")) {
										this.toString = properties.toString;
									}
								},
								clone: function () {
									return this.init.prototype.extend(this);
								},
							};
						})());
						var WordArray2 = (C_lib.WordArray = Base.extend({
							init: function (words, sigBytes) {
								words = this.words = words || [];
								if (sigBytes != undefined2) {
									this.sigBytes = sigBytes;
								} else {
									this.sigBytes = words.length * 4;
								}
							},
							toString: function (encoder) {
								return (encoder || Hex).stringify(this);
							},
							concat: function (wordArray) {
								var thisWords = this.words;
								var thatWords = wordArray.words;
								var thisSigBytes = this.sigBytes;
								var thatSigBytes = wordArray.sigBytes;
								this.clamp();
								if (thisSigBytes % 4) {
									for (var i = 0; i < thatSigBytes; i++) {
										var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 255;
										thisWords[(thisSigBytes + i) >>> 2] |=
											thatByte << (24 - ((thisSigBytes + i) % 4) * 8);
									}
								} else {
									for (var j = 0; j < thatSigBytes; j += 4) {
										thisWords[(thisSigBytes + j) >>> 2] = thatWords[j >>> 2];
									}
								}
								this.sigBytes += thatSigBytes;
								return this;
							},
							clamp: function () {
								var words = this.words;
								var sigBytes = this.sigBytes;
								words[sigBytes >>> 2] &= 4294967295 << (32 - (sigBytes % 4) * 8);
								words.length = Math2.ceil(sigBytes / 4);
							},
							clone: function () {
								var clone = Base.clone.call(this);
								clone.words = this.words.slice(0);
								return clone;
							},
							random: function (nBytes) {
								var words = [];
								for (var i = 0; i < nBytes; i += 4) {
									words.push(cryptoSecureRandomInt2());
								}
								return new WordArray2.init(words, nBytes);
							},
						}));
						var C_enc = (C.enc = {});
						var Hex = (C_enc.Hex = {
							stringify: function (wordArray) {
								var words = wordArray.words;
								var sigBytes = wordArray.sigBytes;
								var hexChars = [];
								for (var i = 0; i < sigBytes; i++) {
									var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 255;
									hexChars.push((bite >>> 4).toString(16));
									hexChars.push((bite & 15).toString(16));
								}
								return hexChars.join("");
							},
							parse: function (hexStr) {
								var hexStrLength = hexStr.length;
								var words = [];
								for (var i = 0; i < hexStrLength; i += 2) {
									words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);
								}
								return new WordArray2.init(words, hexStrLength / 2);
							},
						});
						var Latin1 = (C_enc.Latin1 = {
							stringify: function (wordArray) {
								var words = wordArray.words;
								var sigBytes = wordArray.sigBytes;
								var latin1Chars = [];
								for (var i = 0; i < sigBytes; i++) {
									var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 255;
									latin1Chars.push(String.fromCharCode(bite));
								}
								return latin1Chars.join("");
							},
							parse: function (latin1Str) {
								var latin1StrLength = latin1Str.length;
								var words = [];
								for (var i = 0; i < latin1StrLength; i++) {
									words[i >>> 2] |= (latin1Str.charCodeAt(i) & 255) << (24 - (i % 4) * 8);
								}
								return new WordArray2.init(words, latin1StrLength);
							},
						});
						var Utf8 = (C_enc.Utf8 = {
							stringify: function (wordArray) {
								try {
									return decodeURIComponent(escape(Latin1.stringify(wordArray)));
								} catch (e) {
									throw new Error("Malformed UTF-8 data");
								}
							},
							parse: function (utf8Str) {
								return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
							},
						});
						var BufferedBlockAlgorithm = (C_lib.BufferedBlockAlgorithm = Base.extend({
							reset: function () {
								this._data = new WordArray2.init();
								this._nDataBytes = 0;
							},
							_append: function (data) {
								if (typeof data == "string") {
									data = Utf8.parse(data);
								}
								this._data.concat(data);
								this._nDataBytes += data.sigBytes;
							},
							_process: function (doFlush) {
								var processedWords;
								var data = this._data;
								var dataWords = data.words;
								var dataSigBytes = data.sigBytes;
								var blockSize = this.blockSize;
								var blockSizeBytes = blockSize * 4;
								var nBlocksReady = dataSigBytes / blockSizeBytes;
								if (doFlush) {
									nBlocksReady = Math2.ceil(nBlocksReady);
								} else {
									nBlocksReady = Math2.max((nBlocksReady | 0) - this._minBufferSize, 0);
								}
								var nWordsReady = nBlocksReady * blockSize;
								var nBytesReady = Math2.min(nWordsReady * 4, dataSigBytes);
								if (nWordsReady) {
									for (var offset = 0; offset < nWordsReady; offset += blockSize) {
										this._doProcessBlock(dataWords, offset);
									}
									processedWords = dataWords.splice(0, nWordsReady);
									data.sigBytes -= nBytesReady;
								}
								return new WordArray2.init(processedWords, nBytesReady);
							},
							clone: function () {
								var clone = Base.clone.call(this);
								clone._data = this._data.clone();
								return clone;
							},
							_minBufferSize: 0,
						}));
						var Hasher = (C_lib.Hasher = BufferedBlockAlgorithm.extend({
							cfg: Base.extend(),
							init: function (cfg) {
								this.cfg = this.cfg.extend(cfg);
								this.reset();
							},
							reset: function () {
								BufferedBlockAlgorithm.reset.call(this);
								this._doReset();
							},
							update: function (messageUpdate) {
								this._append(messageUpdate);
								this._process();
								return this;
							},
							finalize: function (messageUpdate) {
								if (messageUpdate) {
									this._append(messageUpdate);
								}
								var hash = this._doFinalize();
								return hash;
							},
							blockSize: 512 / 32,
							_createHelper: function (hasher) {
								return function (message, cfg) {
									return new hasher.init(cfg).finalize(message);
								};
							},
							_createHmacHelper: function (hasher) {
								return function (message, key) {
									return new C_algo.HMAC.init(hasher, key).finalize(message);
								};
							},
						}));
						var C_algo = (C.algo = {});
						return C;
					})(Math);
				return CryptoJS3;
			});
		},
	});

	// ../../node_modules/crypto-js/lib-typedarrays.js
	var require_lib_typedarrays = __commonJS({
		"../../node_modules/crypto-js/lib-typedarrays.js"(exports, module2) {
			(function (root, factory) {
				if (typeof exports === "object") {
					module2.exports = exports = factory(require_core());
				} else if (typeof define === "function" && define.amd) {
					define(["./core"], factory);
				} else {
					factory(root.CryptoJS);
				}
			})(exports, function (CryptoJS3) {
				(function () {
					if (typeof ArrayBuffer != "function") {
						return;
					}
					var C = CryptoJS3;
					var C_lib = C.lib;
					var WordArray2 = C_lib.WordArray;
					var superInit = WordArray2.init;
					var subInit = (WordArray2.init = function (typedArray) {
						if (typedArray instanceof ArrayBuffer) {
							typedArray = new Uint8Array(typedArray);
						}
						if (
							typedArray instanceof Int8Array ||
							(typeof Uint8ClampedArray !== "undefined" &&
								typedArray instanceof Uint8ClampedArray) ||
							typedArray instanceof Int16Array ||
							typedArray instanceof Uint16Array ||
							typedArray instanceof Int32Array ||
							typedArray instanceof Uint32Array ||
							typedArray instanceof Float32Array ||
							typedArray instanceof Float64Array
						) {
							typedArray = new Uint8Array(
								typedArray.buffer,
								typedArray.byteOffset,
								typedArray.byteLength
							);
						}
						if (typedArray instanceof Uint8Array) {
							var typedArrayByteLength = typedArray.byteLength;
							var words = [];
							for (var i = 0; i < typedArrayByteLength; i++) {
								words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);
							}
							superInit.call(this, words, typedArrayByteLength);
						} else {
							superInit.apply(this, arguments);
						}
					});
					subInit.prototype = WordArray2;
				})();
				return CryptoJS3.lib.WordArray;
			});
		},
	});

	// ../../node_modules/crypto-js/sha256.js
	var require_sha256 = __commonJS({
		"../../node_modules/crypto-js/sha256.js"(exports, module2) {
			(function (root, factory) {
				if (typeof exports === "object") {
					module2.exports = exports = factory(require_core());
				} else if (typeof define === "function" && define.amd) {
					define(["./core"], factory);
				} else {
					factory(root.CryptoJS);
				}
			})(exports, function (CryptoJS3) {
				(function (Math2) {
					var C = CryptoJS3;
					var C_lib = C.lib;
					var WordArray2 = C_lib.WordArray;
					var Hasher = C_lib.Hasher;
					var C_algo = C.algo;
					var H = [];
					var K = [];
					(function () {
						function isPrime(n2) {
							var sqrtN = Math2.sqrt(n2);
							for (var factor = 2; factor <= sqrtN; factor++) {
								if (!(n2 % factor)) {
									return false;
								}
							}
							return true;
						}
						function getFractionalBits(n2) {
							return ((n2 - (n2 | 0)) * 4294967296) | 0;
						}
						var n = 2;
						var nPrime = 0;
						while (nPrime < 64) {
							if (isPrime(n)) {
								if (nPrime < 8) {
									H[nPrime] = getFractionalBits(Math2.pow(n, 1 / 2));
								}
								K[nPrime] = getFractionalBits(Math2.pow(n, 1 / 3));
								nPrime++;
							}
							n++;
						}
					})();
					var W = [];
					var SHA2562 = (C_algo.SHA256 = Hasher.extend({
						_doReset: function () {
							this._hash = new WordArray2.init(H.slice(0));
						},
						_doProcessBlock: function (M, offset) {
							var H2 = this._hash.words;
							var a = H2[0];
							var b = H2[1];
							var c20 = H2[2];
							var d = H2[3];
							var e = H2[4];
							var f = H2[5];
							var g = H2[6];
							var h = H2[7];
							for (var i = 0; i < 64; i++) {
								if (i < 16) {
									W[i] = M[offset + i] | 0;
								} else {
									var gamma0x = W[i - 15];
									var gamma0 =
										((gamma0x << 25) | (gamma0x >>> 7)) ^
										((gamma0x << 14) | (gamma0x >>> 18)) ^
										(gamma0x >>> 3);
									var gamma1x = W[i - 2];
									var gamma1 =
										((gamma1x << 15) | (gamma1x >>> 17)) ^
										((gamma1x << 13) | (gamma1x >>> 19)) ^
										(gamma1x >>> 10);
									W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
								}
								var ch = (e & f) ^ (~e & g);
								var maj = (a & b) ^ (a & c20) ^ (b & c20);
								var sigma0 =
									((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));
								var sigma1 =
									((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7) | (e >>> 25));
								var t1 = h + sigma1 + ch + K[i] + W[i];
								var t2 = sigma0 + maj;
								h = g;
								g = f;
								f = e;
								e = (d + t1) | 0;
								d = c20;
								c20 = b;
								b = a;
								a = (t1 + t2) | 0;
							}
							H2[0] = (H2[0] + a) | 0;
							H2[1] = (H2[1] + b) | 0;
							H2[2] = (H2[2] + c20) | 0;
							H2[3] = (H2[3] + d) | 0;
							H2[4] = (H2[4] + e) | 0;
							H2[5] = (H2[5] + f) | 0;
							H2[6] = (H2[6] + g) | 0;
							H2[7] = (H2[7] + h) | 0;
						},
						_doFinalize: function () {
							var data = this._data;
							var dataWords = data.words;
							var nBitsTotal = this._nDataBytes * 8;
							var nBitsLeft = data.sigBytes * 8;
							dataWords[nBitsLeft >>> 5] |= 128 << (24 - (nBitsLeft % 32));
							dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math2.floor(
								nBitsTotal / 4294967296
							);
							dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
							data.sigBytes = dataWords.length * 4;
							this._process();
							return this._hash;
						},
						clone: function () {
							var clone = Hasher.clone.call(this);
							clone._hash = this._hash.clone();
							return clone;
						},
					}));
					C.SHA256 = Hasher._createHelper(SHA2562);
					C.HmacSHA256 = Hasher._createHmacHelper(SHA2562);
				})(Math);
				return CryptoJS3.SHA256;
			});
		},
	});

	// ../../node_modules/crypto-js/hmac.js
	var require_hmac = __commonJS({
		"../../node_modules/crypto-js/hmac.js"(exports, module2) {
			(function (root, factory) {
				if (typeof exports === "object") {
					module2.exports = exports = factory(require_core());
				} else if (typeof define === "function" && define.amd) {
					define(["./core"], factory);
				} else {
					factory(root.CryptoJS);
				}
			})(exports, function (CryptoJS3) {
				(function () {
					var C = CryptoJS3;
					var C_lib = C.lib;
					var Base = C_lib.Base;
					var C_enc = C.enc;
					var Utf8 = C_enc.Utf8;
					var C_algo = C.algo;
					var HMAC = (C_algo.HMAC = Base.extend({
						init: function (hasher, key) {
							hasher = this._hasher = new hasher.init();
							if (typeof key == "string") {
								key = Utf8.parse(key);
							}
							var hasherBlockSize = hasher.blockSize;
							var hasherBlockSizeBytes = hasherBlockSize * 4;
							if (key.sigBytes > hasherBlockSizeBytes) {
								key = hasher.finalize(key);
							}
							key.clamp();
							var oKey = (this._oKey = key.clone());
							var iKey = (this._iKey = key.clone());
							var oKeyWords = oKey.words;
							var iKeyWords = iKey.words;
							for (var i = 0; i < hasherBlockSize; i++) {
								oKeyWords[i] ^= 1549556828;
								iKeyWords[i] ^= 909522486;
							}
							oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;
							this.reset();
						},
						reset: function () {
							var hasher = this._hasher;
							hasher.reset();
							hasher.update(this._iKey);
						},
						update: function (messageUpdate) {
							this._hasher.update(messageUpdate);
							return this;
						},
						finalize: function (messageUpdate) {
							var hasher = this._hasher;
							var innerHash = hasher.finalize(messageUpdate);
							hasher.reset();
							var hmac2 = hasher.finalize(this._oKey.clone().concat(innerHash));
							return hmac2;
						},
					}));
				})();
			});
		},
	});

	// ../../node_modules/crypto-js/hmac-sha256.js
	var require_hmac_sha256 = __commonJS({
		"../../node_modules/crypto-js/hmac-sha256.js"(exports, module2) {
			(function (root, factory, undef) {
				if (typeof exports === "object") {
					module2.exports = exports = factory(require_core(), require_sha256(), require_hmac());
				} else if (typeof define === "function" && define.amd) {
					define(["./core", "./sha256", "./hmac"], factory);
				} else {
					factory(root.CryptoJS);
				}
			})(exports, function (CryptoJS3) {
				return CryptoJS3.HmacSHA256;
			});
		},
	});

	// ../../node_modules/crypto-js/enc-base64.js
	var require_enc_base64 = __commonJS({
		"../../node_modules/crypto-js/enc-base64.js"(exports, module2) {
			(function (root, factory) {
				if (typeof exports === "object") {
					module2.exports = exports = factory(require_core());
				} else if (typeof define === "function" && define.amd) {
					define(["./core"], factory);
				} else {
					factory(root.CryptoJS);
				}
			})(exports, function (CryptoJS3) {
				(function () {
					var C = CryptoJS3;
					var C_lib = C.lib;
					var WordArray2 = C_lib.WordArray;
					var C_enc = C.enc;
					var Base643 = (C_enc.Base64 = {
						stringify: function (wordArray) {
							var words = wordArray.words;
							var sigBytes = wordArray.sigBytes;
							var map = this._map;
							wordArray.clamp();
							var base64Chars = [];
							for (var i = 0; i < sigBytes; i += 3) {
								var byte1 = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 255;
								var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 255;
								var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 255;
								var triplet = (byte1 << 16) | (byte2 << 8) | byte3;
								for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {
									base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 63));
								}
							}
							var paddingChar = map.charAt(64);
							if (paddingChar) {
								while (base64Chars.length % 4) {
									base64Chars.push(paddingChar);
								}
							}
							return base64Chars.join("");
						},
						parse: function (base64Str) {
							var base64StrLength = base64Str.length;
							var map = this._map;
							var reverseMap = this._reverseMap;
							if (!reverseMap) {
								reverseMap = this._reverseMap = [];
								for (var j = 0; j < map.length; j++) {
									reverseMap[map.charCodeAt(j)] = j;
								}
							}
							var paddingChar = map.charAt(64);
							if (paddingChar) {
								var paddingIndex = base64Str.indexOf(paddingChar);
								if (paddingIndex !== -1) {
									base64StrLength = paddingIndex;
								}
							}
							return parseLoop(base64Str, base64StrLength, reverseMap);
						},
						_map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
					});
					function parseLoop(base64Str, base64StrLength, reverseMap) {
						var words = [];
						var nBytes = 0;
						for (var i = 0; i < base64StrLength; i++) {
							if (i % 4) {
								var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);
								var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);
								var bitsCombined = bits1 | bits2;
								words[nBytes >>> 2] |= bitsCombined << (24 - (nBytes % 4) * 8);
								nBytes++;
							}
						}
						return WordArray2.create(words, nBytes);
					}
				})();
				return CryptoJS3.enc.Base64;
			});
		},
	});

	// ../../node_modules/unfetch/dist/unfetch.js
	var require_unfetch = __commonJS({
		"../../node_modules/unfetch/dist/unfetch.js"(exports, module2) {
			module2.exports = function (e, n) {
				return (
					(n = n || {}),
					new Promise(function (t, r) {
						var s = new XMLHttpRequest(),
							o = [],
							u = [],
							i = {},
							a = function () {
								return {
									ok: ((s.status / 100) | 0) == 2,
									statusText: s.statusText,
									status: s.status,
									url: s.responseURL,
									text: function () {
										return Promise.resolve(s.responseText);
									},
									json: function () {
										return Promise.resolve(s.responseText).then(JSON.parse);
									},
									blob: function () {
										return Promise.resolve(new Blob([s.response]));
									},
									clone: a,
									headers: {
										keys: function () {
											return o;
										},
										entries: function () {
											return u;
										},
										get: function (e2) {
											return i[e2.toLowerCase()];
										},
										has: function (e2) {
											return e2.toLowerCase() in i;
										},
									},
								};
							};
						for (var l in (s.open(n.method || "get", e, true),
						(s.onload = function () {
							s
								.getAllResponseHeaders()
								.replace(/^(.*?):[^\S\n]*([\s\S]*?)$/gm, function (e2, n2, t2) {
									o.push((n2 = n2.toLowerCase())),
										u.push([n2, t2]),
										(i[n2] = i[n2] ? i[n2] + "," + t2 : t2);
								}),
								t(a());
						}),
						(s.onerror = r),
						(s.withCredentials = n.credentials == "include"),
						n.headers))
							s.setRequestHeader(l, n.headers[l]);
						s.send(n.body || null);
					})
				);
			};
		},
	});

	// ../../node_modules/isomorphic-unfetch/browser.js
	var require_browser = __commonJS({
		"../../node_modules/isomorphic-unfetch/browser.js"(exports, module2) {
			module2.exports = self.fetch || (self.fetch = require_unfetch().default || require_unfetch());
		},
	});

	// ../../node_modules/js-cookie/src/js.cookie.js
	var require_js_cookie = __commonJS({
		"../../node_modules/js-cookie/src/js.cookie.js"(exports, module2) {
			(function (factory) {
				var registeredInModuleLoader;
				if (typeof define === "function" && define.amd) {
					define(factory);
					registeredInModuleLoader = true;
				}
				if (typeof exports === "object") {
					module2.exports = factory();
					registeredInModuleLoader = true;
				}
				if (!registeredInModuleLoader) {
					var OldCookies = window.Cookies;
					var api = (window.Cookies = factory());
					api.noConflict = function () {
						window.Cookies = OldCookies;
						return api;
					};
				}
			})(function () {
				function extend() {
					var i = 0;
					var result = {};
					for (; i < arguments.length; i++) {
						var attributes = arguments[i];
						for (var key in attributes) {
							result[key] = attributes[key];
						}
					}
					return result;
				}
				function decode(s) {
					return s.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
				}
				function init2(converter) {
					function api() {}
					function set2(key, value, attributes) {
						if (typeof document === "undefined") {
							return;
						}
						attributes = extend(
							{
								path: "/",
							},
							api.defaults,
							attributes
						);
						if (typeof attributes.expires === "number") {
							attributes.expires = new Date(new Date() * 1 + attributes.expires * 864e5);
						}
						attributes.expires = attributes.expires ? attributes.expires.toUTCString() : "";
						try {
							var result = JSON.stringify(value);
							if (/^[\{\[]/.test(result)) {
								value = result;
							}
						} catch (e) {}
						value = converter.write
							? converter.write(value, key)
							: encodeURIComponent(String(value)).replace(
									/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g,
									decodeURIComponent
							  );
						key = encodeURIComponent(String(key))
							.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)
							.replace(/[\(\)]/g, escape);
						var stringifiedAttributes = "";
						for (var attributeName in attributes) {
							if (!attributes[attributeName]) {
								continue;
							}
							stringifiedAttributes += "; " + attributeName;
							if (attributes[attributeName] === true) {
								continue;
							}
							stringifiedAttributes += "=" + attributes[attributeName].split(";")[0];
						}
						return (document.cookie = key + "=" + value + stringifiedAttributes);
					}
					function get2(key, json) {
						if (typeof document === "undefined") {
							return;
						}
						var jar = {};
						var cookies = document.cookie ? document.cookie.split("; ") : [];
						var i = 0;
						for (; i < cookies.length; i++) {
							var parts = cookies[i].split("=");
							var cookie3 = parts.slice(1).join("=");
							if (!json && cookie3.charAt(0) === '"') {
								cookie3 = cookie3.slice(1, -1);
							}
							try {
								var name2 = decode(parts[0]);
								cookie3 = (converter.read || converter)(cookie3, name2) || decode(cookie3);
								if (json) {
									try {
										cookie3 = JSON.parse(cookie3);
									} catch (e) {}
								}
								jar[name2] = cookie3;
								if (key === name2) {
									break;
								}
							} catch (e) {}
						}
						return key ? jar[key] : jar;
					}
					api.set = set2;
					api.get = function (key) {
						return get2(key, false);
					};
					api.getJSON = function (key) {
						return get2(key, true);
					};
					api.remove = function (key, attributes) {
						set2(
							key,
							"",
							extend(attributes, {
								expires: -1,
							})
						);
					};
					api.defaults = {};
					api.withConverter = init2;
					return api;
				}
				return init2(function () {});
			});
		},
	});

	// ../../node_modules/unraw/dist/errors.js
	var require_errors = __commonJS({
		"../../node_modules/unraw/dist/errors.js"(exports) {
			"use strict";
			Object.defineProperty(exports, "__esModule", { value: true });
			var ErrorType;
			(function (ErrorType2) {
				ErrorType2["MalformedUnicode"] = "MALFORMED_UNICODE";
				ErrorType2["MalformedHexadecimal"] = "MALFORMED_HEXADECIMAL";
				ErrorType2["CodePointLimit"] = "CODE_POINT_LIMIT";
				ErrorType2["OctalDeprecation"] = "OCTAL_DEPRECATION";
				ErrorType2["EndOfString"] = "END_OF_STRING";
			})((ErrorType = exports.ErrorType || (exports.ErrorType = {})));
			exports.errorMessages = new Map([
				[ErrorType.MalformedUnicode, "malformed Unicode character escape sequence"],
				[ErrorType.MalformedHexadecimal, "malformed hexadecimal character escape sequence"],
				[
					ErrorType.CodePointLimit,
					"Unicode codepoint must not be greater than 0x10FFFF in escape sequence",
				],
				[
					ErrorType.OctalDeprecation,
					'"0"-prefixed octal literals and octal escape sequences are deprecated; for octal literals use the "0o" prefix instead',
				],
				[ErrorType.EndOfString, "malformed escape sequence at end of string"],
			]);
		},
	});

	// ../../node_modules/unraw/dist/index.js
	var require_dist = __commonJS({
		"../../node_modules/unraw/dist/index.js"(exports) {
			"use strict";
			Object.defineProperty(exports, "__esModule", { value: true });
			var errors_1 = require_errors();
			exports.ErrorType = errors_1.ErrorType;
			exports.errorMessages = errors_1.errorMessages;
			function parseHexToInt(hex) {
				const isOnlyHexChars = !hex.match(/[^a-f0-9]/i);
				return isOnlyHexChars ? parseInt(hex, 16) : NaN;
			}
			function validateAndParseHex(hex, errorName, enforcedLength) {
				const parsedHex = parseHexToInt(hex);
				if (
					Number.isNaN(parsedHex) ||
					(enforcedLength !== void 0 && enforcedLength !== hex.length)
				) {
					throw new SyntaxError(errors_1.errorMessages.get(errorName));
				}
				return parsedHex;
			}
			function parseHexadecimalCode(code) {
				const parsedCode = validateAndParseHex(code, errors_1.ErrorType.MalformedHexadecimal, 2);
				return String.fromCharCode(parsedCode);
			}
			function parseUnicodeCode(code, surrogateCode) {
				const parsedCode = validateAndParseHex(code, errors_1.ErrorType.MalformedUnicode, 4);
				if (surrogateCode !== void 0) {
					const parsedSurrogateCode = validateAndParseHex(
						surrogateCode,
						errors_1.ErrorType.MalformedUnicode,
						4
					);
					return String.fromCharCode(parsedCode, parsedSurrogateCode);
				}
				return String.fromCharCode(parsedCode);
			}
			function isCurlyBraced(text) {
				return text.charAt(0) === "{" && text.charAt(text.length - 1) === "}";
			}
			function parseUnicodeCodePointCode(codePoint) {
				if (!isCurlyBraced(codePoint)) {
					throw new SyntaxError(errors_1.errorMessages.get(errors_1.ErrorType.MalformedUnicode));
				}
				const withoutBraces = codePoint.slice(1, -1);
				const parsedCode = validateAndParseHex(withoutBraces, errors_1.ErrorType.MalformedUnicode);
				try {
					return String.fromCodePoint(parsedCode);
				} catch (err) {
					throw err instanceof RangeError
						? new SyntaxError(errors_1.errorMessages.get(errors_1.ErrorType.CodePointLimit))
						: err;
				}
			}
			function parseOctalCode(code, error3 = false) {
				if (error3) {
					throw new SyntaxError(errors_1.errorMessages.get(errors_1.ErrorType.OctalDeprecation));
				}
				const parsedCode = parseInt(code, 8);
				return String.fromCharCode(parsedCode);
			}
			var singleCharacterEscapes = new Map([
				["b", "\b"],
				["f", "\f"],
				["n", "\n"],
				["r", "\r"],
				["t", "	"],
				["v", "\v"],
				["0", "\0"],
			]);
			function parseSingleCharacterCode(code) {
				return singleCharacterEscapes.get(code) || code;
			}
			var escapeMatch =
				/\\(?:(\\)|x([\s\S]{0,2})|u(\{[^}]*\}?)|u([\s\S]{4})\\u([^{][\s\S]{0,3})|u([\s\S]{0,4})|([0-3]?[0-7]{1,2})|([\s\S])|$)/g;
			function unraw(raw, allowOctals = false) {
				return raw.replace(
					escapeMatch,
					function (
						_,
						backslash,
						hex,
						codePoint,
						unicodeWithSurrogate,
						surrogate,
						unicode,
						octal,
						singleCharacter
					) {
						if (backslash !== void 0) {
							return "\\";
						}
						if (hex !== void 0) {
							return parseHexadecimalCode(hex);
						}
						if (codePoint !== void 0) {
							return parseUnicodeCodePointCode(codePoint);
						}
						if (unicodeWithSurrogate !== void 0) {
							return parseUnicodeCode(unicodeWithSurrogate, surrogate);
						}
						if (unicode !== void 0) {
							return parseUnicodeCode(unicode);
						}
						if (octal === "0") {
							return "\0";
						}
						if (octal !== void 0) {
							return parseOctalCode(octal, !allowOctals);
						}
						if (singleCharacter !== void 0) {
							return parseSingleCharacterCode(singleCharacter);
						}
						throw new SyntaxError(errors_1.errorMessages.get(errors_1.ErrorType.EndOfString));
					}
				);
			}
			exports.unraw = unraw;
			exports.default = unraw;
		},
	});

	// ../../node_modules/compress-tag/dist/index.js
	var require_dist2 = __commonJS({
		"../../node_modules/compress-tag/dist/index.js"(exports) {
			"use strict";
			var __importDefault3 =
				(exports && exports.__importDefault) ||
				function (mod) {
					return mod && mod.__esModule ? mod : { default: mod };
				};
			Object.defineProperty(exports, "__esModule", { value: true });
			var unraw_1 = __importDefault3(require_dist());
			function mergeAndReduceToString(a, b) {
				let result = "";
				for (let i = 0; i < Math.max(a.length, b.length); i++) {
					if (i in a) result += a[i];
					if (i in b) result += b[i];
				}
				return result;
			}
			function removeLineBreaks(text, tight) {
				return text.replace(/\s*[\r\n]+\s*/g, tight ? "" : " ");
			}
			function generateCompressTag(tight = false) {
				return function (stringOrStrings, ...placeholders) {
					if (typeof stringOrStrings === "string") {
						return removeLineBreaks(stringOrStrings, tight).trim();
					}
					const compressedStrings = stringOrStrings.raw.map((rawString, index2, list) => {
						let compressedString = rawString;
						if (index2 === 0) {
							compressedString = compressedString.replace(/^\s+/, "");
						}
						if (index2 === list.length - 1) {
							compressedString = compressedString.replace(/\s+$/, "");
						}
						compressedString = removeLineBreaks(compressedString, tight);
						return unraw_1.default(compressedString);
					});
					return mergeAndReduceToString(compressedStrings, placeholders);
				};
			}
			exports.compress = generateCompressTag();
			exports.compressTight = generateCompressTag(true);
			exports.c = exports.compress;
			exports.t = exports.compressTight;
		},
	});

	// src/test-app/index.tsx
	var import_react84 = __toModule(require_react());
	var import_react_dom = __toModule(require_react_dom());

	// ../../node_modules/@xstate/inspect/es/_virtual/_tslib.js
	var __assign = function () {
		__assign =
			Object.assign ||
			function __assign12(t) {
				for (var s, i = 1, n = arguments.length; i < n; i++) {
					s = arguments[i];
					for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
				}
				return t;
			};
		return __assign.apply(this, arguments);
	};

	// ../../node_modules/xstate/es/_virtual/_tslib.js
	var __assign2 = function () {
		__assign2 =
			Object.assign ||
			function __assign12(t) {
				for (var s, i = 1, n = arguments.length; i < n; i++) {
					s = arguments[i];
					for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
				}
				return t;
			};
		return __assign2.apply(this, arguments);
	};
	function __rest(s, e) {
		var t = {};
		for (var p in s)
			if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
		if (s != null && typeof Object.getOwnPropertySymbols === "function")
			for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
				if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
					t[p[i]] = s[p[i]];
			}
		return t;
	}
	function __values(o) {
		var s = typeof Symbol === "function" && Symbol.iterator,
			m = s && o[s],
			i = 0;
		if (m) return m.call(o);
		if (o && typeof o.length === "number")
			return {
				next: function () {
					if (o && i >= o.length) o = void 0;
					return { value: o && o[i++], done: !o };
				},
			};
		throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
	}
	function __read(o, n) {
		var m = typeof Symbol === "function" && o[Symbol.iterator];
		if (!m) return o;
		var i = m.call(o),
			r,
			ar = [],
			e;
		try {
			while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
		} catch (error3) {
			e = { error: error3 };
		} finally {
			try {
				if (r && !r.done && (m = i["return"])) m.call(i);
			} finally {
				if (e) throw e.error;
			}
		}
		return ar;
	}
	function __spreadArray(to, from) {
		for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];
		return to;
	}

	// ../../node_modules/xstate/es/constants.js
	var STATE_DELIMITER = ".";
	var EMPTY_ACTIVITY_MAP = {};
	var DEFAULT_GUARD_TYPE = "xstate.guard";
	var TARGETLESS_KEY = "";

	// ../../node_modules/xstate/es/environment.js
	var IS_PRODUCTION = false;

	// ../../node_modules/xstate/es/utils.js
	function keys(value) {
		return Object.keys(value);
	}
	function matchesState(parentStateId, childStateId, delimiter) {
		if (delimiter === void 0) {
			delimiter = STATE_DELIMITER;
		}
		var parentStateValue = toStateValue(parentStateId, delimiter);
		var childStateValue = toStateValue(childStateId, delimiter);
		if (isString(childStateValue)) {
			if (isString(parentStateValue)) {
				return childStateValue === parentStateValue;
			}
			return false;
		}
		if (isString(parentStateValue)) {
			return parentStateValue in childStateValue;
		}
		return keys(parentStateValue).every(function (key) {
			if (!(key in childStateValue)) {
				return false;
			}
			return matchesState(parentStateValue[key], childStateValue[key]);
		});
	}
	function getEventType(event2) {
		try {
			return isString(event2) || typeof event2 === "number" ? "" + event2 : event2.type;
		} catch (e) {
			throw new Error("Events must be strings or objects with a string event.type property.");
		}
	}
	function toStatePath(stateId, delimiter) {
		try {
			if (isArray(stateId)) {
				return stateId;
			}
			return stateId.toString().split(delimiter);
		} catch (e) {
			throw new Error("'" + stateId + "' is not a valid state path.");
		}
	}
	function isStateLike(state) {
		return (
			typeof state === "object" &&
			"value" in state &&
			"context" in state &&
			"event" in state &&
			"_event" in state
		);
	}
	function toStateValue(stateValue, delimiter) {
		if (isStateLike(stateValue)) {
			return stateValue.value;
		}
		if (isArray(stateValue)) {
			return pathToStateValue(stateValue);
		}
		if (typeof stateValue !== "string") {
			return stateValue;
		}
		var statePath = toStatePath(stateValue, delimiter);
		return pathToStateValue(statePath);
	}
	function pathToStateValue(statePath) {
		if (statePath.length === 1) {
			return statePath[0];
		}
		var value = {};
		var marker = value;
		for (var i = 0; i < statePath.length - 1; i++) {
			if (i === statePath.length - 2) {
				marker[statePath[i]] = statePath[i + 1];
			} else {
				marker[statePath[i]] = {};
				marker = marker[statePath[i]];
			}
		}
		return value;
	}
	function mapValues(collection, iteratee) {
		var result = {};
		var collectionKeys = keys(collection);
		for (var i = 0; i < collectionKeys.length; i++) {
			var key = collectionKeys[i];
			result[key] = iteratee(collection[key], key, collection, i);
		}
		return result;
	}
	function mapFilterValues(collection, iteratee, predicate) {
		var e_1, _a;
		var result = {};
		try {
			for (var _b = __values(keys(collection)), _c = _b.next(); !_c.done; _c = _b.next()) {
				var key = _c.value;
				var item = collection[key];
				if (!predicate(item)) {
					continue;
				}
				result[key] = iteratee(item, key, collection);
			}
		} catch (e_1_1) {
			e_1 = {
				error: e_1_1,
			};
		} finally {
			try {
				if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
			} finally {
				if (e_1) throw e_1.error;
			}
		}
		return result;
	}
	var path = function (props) {
		return function (object) {
			var e_2, _a;
			var result = object;
			try {
				for (
					var props_1 = __values(props), props_1_1 = props_1.next();
					!props_1_1.done;
					props_1_1 = props_1.next()
				) {
					var prop = props_1_1.value;
					result = result[prop];
				}
			} catch (e_2_1) {
				e_2 = {
					error: e_2_1,
				};
			} finally {
				try {
					if (props_1_1 && !props_1_1.done && (_a = props_1.return)) _a.call(props_1);
				} finally {
					if (e_2) throw e_2.error;
				}
			}
			return result;
		};
	};
	function nestedPath(props, accessorProp) {
		return function (object) {
			var e_3, _a;
			var result = object;
			try {
				for (
					var props_2 = __values(props), props_2_1 = props_2.next();
					!props_2_1.done;
					props_2_1 = props_2.next()
				) {
					var prop = props_2_1.value;
					result = result[accessorProp][prop];
				}
			} catch (e_3_1) {
				e_3 = {
					error: e_3_1,
				};
			} finally {
				try {
					if (props_2_1 && !props_2_1.done && (_a = props_2.return)) _a.call(props_2);
				} finally {
					if (e_3) throw e_3.error;
				}
			}
			return result;
		};
	}
	function toStatePaths(stateValue) {
		if (!stateValue) {
			return [[]];
		}
		if (isString(stateValue)) {
			return [[stateValue]];
		}
		var result = flatten(
			keys(stateValue).map(function (key) {
				var subStateValue = stateValue[key];
				if (
					typeof subStateValue !== "string" &&
					(!subStateValue || !Object.keys(subStateValue).length)
				) {
					return [[key]];
				}
				return toStatePaths(stateValue[key]).map(function (subPath) {
					return [key].concat(subPath);
				});
			})
		);
		return result;
	}
	function flatten(array) {
		var _a;
		return (_a = []).concat.apply(_a, __spreadArray([], __read(array)));
	}
	function toArrayStrict(value) {
		if (isArray(value)) {
			return value;
		}
		return [value];
	}
	function toArray(value) {
		if (value === void 0) {
			return [];
		}
		return toArrayStrict(value);
	}
	function mapContext(mapper, context, _event) {
		var e_5, _a;
		if (isFunction(mapper)) {
			return mapper(context, _event.data);
		}
		var result = {};
		try {
			for (var _b = __values(Object.keys(mapper)), _c = _b.next(); !_c.done; _c = _b.next()) {
				var key = _c.value;
				var subMapper = mapper[key];
				if (isFunction(subMapper)) {
					result[key] = subMapper(context, _event.data);
				} else {
					result[key] = subMapper;
				}
			}
		} catch (e_5_1) {
			e_5 = {
				error: e_5_1,
			};
		} finally {
			try {
				if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
			} finally {
				if (e_5) throw e_5.error;
			}
		}
		return result;
	}
	function isBuiltInEvent(eventType) {
		return /^(done|error)\./.test(eventType);
	}
	function isPromiseLike(value) {
		if (value instanceof Promise) {
			return true;
		}
		if (
			value !== null &&
			(isFunction(value) || typeof value === "object") &&
			isFunction(value.then)
		) {
			return true;
		}
		return false;
	}
	function isBehavior(value) {
		return (
			value !== null &&
			typeof value === "object" &&
			"transition" in value &&
			typeof value.transition === "function"
		);
	}
	function partition(items, predicate) {
		var e_6, _a;
		var _b = __read([[], []], 2),
			truthy = _b[0],
			falsy = _b[1];
		try {
			for (
				var items_1 = __values(items), items_1_1 = items_1.next();
				!items_1_1.done;
				items_1_1 = items_1.next()
			) {
				var item = items_1_1.value;
				if (predicate(item)) {
					truthy.push(item);
				} else {
					falsy.push(item);
				}
			}
		} catch (e_6_1) {
			e_6 = {
				error: e_6_1,
			};
		} finally {
			try {
				if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);
			} finally {
				if (e_6) throw e_6.error;
			}
		}
		return [truthy, falsy];
	}
	function updateHistoryStates(hist, stateValue) {
		return mapValues(hist.states, function (subHist, key) {
			if (!subHist) {
				return void 0;
			}
			var subStateValue =
				(isString(stateValue) ? void 0 : stateValue[key]) || (subHist ? subHist.current : void 0);
			if (!subStateValue) {
				return void 0;
			}
			return {
				current: subStateValue,
				states: updateHistoryStates(subHist, subStateValue),
			};
		});
	}
	function updateHistoryValue(hist, stateValue) {
		return {
			current: stateValue,
			states: updateHistoryStates(hist, stateValue),
		};
	}
	function updateContext(context, _event, assignActions, state) {
		if (!IS_PRODUCTION) {
			warn(!!context, "Attempting to update undefined context");
		}
		var updatedContext = context
			? assignActions.reduce(function (acc, assignAction) {
					var e_7, _a;
					var assignment = assignAction.assignment;
					var meta = {
						state,
						action: assignAction,
						_event,
					};
					var partialUpdate = {};
					if (isFunction(assignment)) {
						partialUpdate = assignment(acc, _event.data, meta);
					} else {
						try {
							for (var _b = __values(keys(assignment)), _c = _b.next(); !_c.done; _c = _b.next()) {
								var key = _c.value;
								var propAssignment = assignment[key];
								partialUpdate[key] = isFunction(propAssignment)
									? propAssignment(acc, _event.data, meta)
									: propAssignment;
							}
						} catch (e_7_1) {
							e_7 = {
								error: e_7_1,
							};
						} finally {
							try {
								if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
							} finally {
								if (e_7) throw e_7.error;
							}
						}
					}
					return Object.assign({}, acc, partialUpdate);
			  }, context)
			: context;
		return updatedContext;
	}
	var warn = function () {};
	if (!IS_PRODUCTION) {
		warn = function (condition, message) {
			var error3 = condition instanceof Error ? condition : void 0;
			if (!error3 && condition) {
				return;
			}
			if (console !== void 0) {
				var args = ["Warning: " + message];
				if (error3) {
					args.push(error3);
				}
				console.warn.apply(console, args);
			}
		};
	}
	function isArray(value) {
		return Array.isArray(value);
	}
	function isFunction(value) {
		return typeof value === "function";
	}
	function isString(value) {
		return typeof value === "string";
	}
	function toGuard(condition, guardMap) {
		if (!condition) {
			return void 0;
		}
		if (isString(condition)) {
			return {
				type: DEFAULT_GUARD_TYPE,
				name: condition,
				predicate: guardMap ? guardMap[condition] : void 0,
			};
		}
		if (isFunction(condition)) {
			return {
				type: DEFAULT_GUARD_TYPE,
				name: condition.name,
				predicate: condition,
			};
		}
		return condition;
	}
	function isObservable(value) {
		try {
			return "subscribe" in value && isFunction(value.subscribe);
		} catch (e) {
			return false;
		}
	}
	var symbolObservable = /* @__PURE__ */ (function () {
		return (typeof Symbol === "function" && Symbol.observable) || "@@observable";
	})();
	function isMachine(value) {
		try {
			return "__xstatenode" in value;
		} catch (e) {
			return false;
		}
	}
	function isActor(value) {
		return !!value && typeof value.send === "function";
	}
	function toEventObject(event2, payload) {
		if (isString(event2) || typeof event2 === "number") {
			return __assign2(
				{
					type: event2,
				},
				payload
			);
		}
		return event2;
	}
	function toSCXMLEvent(event2, scxmlEvent) {
		if (!isString(event2) && "$$type" in event2 && event2.$$type === "scxml") {
			return event2;
		}
		var eventObject = toEventObject(event2);
		return __assign2(
			{
				name: eventObject.type,
				data: eventObject,
				$$type: "scxml",
				type: "external",
			},
			scxmlEvent
		);
	}
	function toTransitionConfigArray(event2, configLike) {
		var transitions = toArrayStrict(configLike).map(function (transitionLike) {
			if (
				typeof transitionLike === "undefined" ||
				typeof transitionLike === "string" ||
				isMachine(transitionLike)
			) {
				return {
					target: transitionLike,
					event: event2,
				};
			}
			return __assign2(__assign2({}, transitionLike), {
				event: event2,
			});
		});
		return transitions;
	}
	function normalizeTarget(target) {
		if (target === void 0 || target === TARGETLESS_KEY) {
			return void 0;
		}
		return toArray(target);
	}
	function reportUnhandledExceptionOnInvocation(originalError, currentError, id) {
		if (!IS_PRODUCTION) {
			var originalStackTrace = originalError.stack
				? " Stacktrace was '" + originalError.stack + "'"
				: "";
			if (originalError === currentError) {
				console.error(
					"Missing onError handler for invocation '" +
						id +
						"', error was '" +
						originalError +
						"'." +
						originalStackTrace
				);
			} else {
				var stackTrace = currentError.stack ? " Stacktrace was '" + currentError.stack + "'" : "";
				console.error(
					"Missing onError handler and/or unhandled exception/promise rejection for invocation '" +
						id +
						"'. " +
						("Original error: '" +
							originalError +
							"'. " +
							originalStackTrace +
							" Current error is '" +
							currentError +
							"'." +
							stackTrace)
				);
			}
		}
	}
	function evaluateGuard(machine2, guard, context, _event, state) {
		var guards = machine2.options.guards;
		var guardMeta = {
			state,
			cond: guard,
			_event,
		};
		if (guard.type === DEFAULT_GUARD_TYPE) {
			return guard.predicate(context, _event.data, guardMeta);
		}
		var condFn = guards[guard.type];
		if (!condFn) {
			throw new Error(
				"Guard '" + guard.type + "' is not implemented on machine '" + machine2.id + "'."
			);
		}
		return condFn(context, _event.data, guardMeta);
	}
	function toInvokeSource(src) {
		if (typeof src === "string") {
			return {
				type: src,
			};
		}
		return src;
	}
	function toObserver(nextHandler, errorHandler, completionHandler) {
		if (typeof nextHandler === "object") {
			return nextHandler;
		}
		var noop = function () {
			return void 0;
		};
		return {
			next: nextHandler,
			error: errorHandler || noop,
			complete: completionHandler || noop,
		};
	}

	// ../../node_modules/xstate/es/types.js
	var ActionTypes;
	(function (ActionTypes2) {
		ActionTypes2["Start"] = "xstate.start";
		ActionTypes2["Stop"] = "xstate.stop";
		ActionTypes2["Raise"] = "xstate.raise";
		ActionTypes2["Send"] = "xstate.send";
		ActionTypes2["Cancel"] = "xstate.cancel";
		ActionTypes2["NullEvent"] = "";
		ActionTypes2["Assign"] = "xstate.assign";
		ActionTypes2["After"] = "xstate.after";
		ActionTypes2["DoneState"] = "done.state";
		ActionTypes2["DoneInvoke"] = "done.invoke";
		ActionTypes2["Log"] = "xstate.log";
		ActionTypes2["Init"] = "xstate.init";
		ActionTypes2["Invoke"] = "xstate.invoke";
		ActionTypes2["ErrorExecution"] = "error.execution";
		ActionTypes2["ErrorCommunication"] = "error.communication";
		ActionTypes2["ErrorPlatform"] = "error.platform";
		ActionTypes2["ErrorCustom"] = "xstate.error";
		ActionTypes2["Update"] = "xstate.update";
		ActionTypes2["Pure"] = "xstate.pure";
		ActionTypes2["Choose"] = "xstate.choose";
	})(ActionTypes || (ActionTypes = {}));
	var SpecialTargets;
	(function (SpecialTargets2) {
		SpecialTargets2["Parent"] = "#_parent";
		SpecialTargets2["Internal"] = "#_internal";
	})(SpecialTargets || (SpecialTargets = {}));

	// ../../node_modules/xstate/es/actionTypes.js
	var start = ActionTypes.Start;
	var stop = ActionTypes.Stop;
	var raise = ActionTypes.Raise;
	var send = ActionTypes.Send;
	var cancel = ActionTypes.Cancel;
	var nullEvent = ActionTypes.NullEvent;
	var assign = ActionTypes.Assign;
	var after = ActionTypes.After;
	var doneState = ActionTypes.DoneState;
	var log = ActionTypes.Log;
	var init = ActionTypes.Init;
	var invoke = ActionTypes.Invoke;
	var errorExecution = ActionTypes.ErrorExecution;
	var errorPlatform = ActionTypes.ErrorPlatform;
	var error = ActionTypes.ErrorCustom;
	var update = ActionTypes.Update;
	var choose = ActionTypes.Choose;
	var pure = ActionTypes.Pure;

	// ../../node_modules/xstate/es/actions.js
	var initEvent = /* @__PURE__ */ toSCXMLEvent({
		type: init,
	});
	function getActionFunction(actionType, actionFunctionMap) {
		return actionFunctionMap ? actionFunctionMap[actionType] || void 0 : void 0;
	}
	function toActionObject(action, actionFunctionMap) {
		var actionObject;
		if (isString(action) || typeof action === "number") {
			var exec = getActionFunction(action, actionFunctionMap);
			if (isFunction(exec)) {
				actionObject = {
					type: action,
					exec,
				};
			} else if (exec) {
				actionObject = exec;
			} else {
				actionObject = {
					type: action,
					exec: void 0,
				};
			}
		} else if (isFunction(action)) {
			actionObject = {
				type: action.name || action.toString(),
				exec: action,
			};
		} else {
			var exec = getActionFunction(action.type, actionFunctionMap);
			if (isFunction(exec)) {
				actionObject = __assign2(__assign2({}, action), {
					exec,
				});
			} else if (exec) {
				var actionType = exec.type || action.type;
				actionObject = __assign2(__assign2(__assign2({}, exec), action), {
					type: actionType,
				});
			} else {
				actionObject = action;
			}
		}
		Object.defineProperty(actionObject, "toString", {
			value: function () {
				return actionObject.type;
			},
			enumerable: false,
			configurable: true,
		});
		return actionObject;
	}
	var toActionObjects = function (action, actionFunctionMap) {
		if (!action) {
			return [];
		}
		var actions = isArray(action) ? action : [action];
		return actions.map(function (subAction) {
			return toActionObject(subAction, actionFunctionMap);
		});
	};
	function toActivityDefinition(action) {
		var actionObject = toActionObject(action);
		return __assign2(
			__assign2(
				{
					id: isString(action) ? action : actionObject.id,
				},
				actionObject
			),
			{
				type: actionObject.type,
			}
		);
	}
	function raise2(event2) {
		if (!isString(event2)) {
			return send2(event2, {
				to: SpecialTargets.Internal,
			});
		}
		return {
			type: raise,
			event: event2,
		};
	}
	function resolveRaise(action) {
		return {
			type: raise,
			_event: toSCXMLEvent(action.event),
		};
	}
	function send2(event2, options) {
		return {
			to: options ? options.to : void 0,
			type: send,
			event: isFunction(event2) ? event2 : toEventObject(event2),
			delay: options ? options.delay : void 0,
			id:
				options && options.id !== void 0
					? options.id
					: isFunction(event2)
					? event2.name
					: getEventType(event2),
		};
	}
	function resolveSend(action, ctx, _event, delaysMap) {
		var meta = {
			_event,
		};
		var resolvedEvent = toSCXMLEvent(
			isFunction(action.event) ? action.event(ctx, _event.data, meta) : action.event
		);
		var resolvedDelay;
		if (isString(action.delay)) {
			var configDelay = delaysMap && delaysMap[action.delay];
			resolvedDelay = isFunction(configDelay) ? configDelay(ctx, _event.data, meta) : configDelay;
		} else {
			resolvedDelay = isFunction(action.delay)
				? action.delay(ctx, _event.data, meta)
				: action.delay;
		}
		var resolvedTarget = isFunction(action.to) ? action.to(ctx, _event.data, meta) : action.to;
		return __assign2(__assign2({}, action), {
			to: resolvedTarget,
			_event: resolvedEvent,
			event: resolvedEvent.data,
			delay: resolvedDelay,
		});
	}
	var resolveLog = function (action, ctx, _event) {
		return __assign2(__assign2({}, action), {
			value: isString(action.expr)
				? action.expr
				: action.expr(ctx, _event.data, {
						_event,
				  }),
		});
	};
	var cancel2 = function (sendId) {
		return {
			type: cancel,
			sendId,
		};
	};
	function start2(activity) {
		var activityDef = toActivityDefinition(activity);
		return {
			type: ActionTypes.Start,
			activity: activityDef,
			exec: void 0,
		};
	}
	function stop2(actorRef) {
		var activity = isFunction(actorRef) ? actorRef : toActivityDefinition(actorRef);
		return {
			type: ActionTypes.Stop,
			activity,
			exec: void 0,
		};
	}
	function resolveStop(action, context, _event) {
		var actorRefOrString = isFunction(action.activity)
			? action.activity(context, _event.data)
			: action.activity;
		var resolvedActorRef =
			typeof actorRefOrString === "string"
				? {
						id: actorRefOrString,
				  }
				: actorRefOrString;
		var actionObject = {
			type: ActionTypes.Stop,
			activity: resolvedActorRef,
		};
		return actionObject;
	}
	var assign2 = function (assignment) {
		return {
			type: assign,
			assignment,
		};
	};
	function after2(delayRef, id) {
		var idSuffix = id ? "#" + id : "";
		return ActionTypes.After + "(" + delayRef + ")" + idSuffix;
	}
	function done(id, data) {
		var type = ActionTypes.DoneState + "." + id;
		var eventObject = {
			type,
			data,
		};
		eventObject.toString = function () {
			return type;
		};
		return eventObject;
	}
	function doneInvoke(id, data) {
		var type = ActionTypes.DoneInvoke + "." + id;
		var eventObject = {
			type,
			data,
		};
		eventObject.toString = function () {
			return type;
		};
		return eventObject;
	}
	function error2(id, data) {
		var type = ActionTypes.ErrorPlatform + "." + id;
		var eventObject = {
			type,
			data,
		};
		eventObject.toString = function () {
			return type;
		};
		return eventObject;
	}
	function resolveActions(
		machine2,
		currentState,
		currentContext,
		_event,
		actions,
		preserveActionOrder
	) {
		if (preserveActionOrder === void 0) {
			preserveActionOrder = false;
		}
		var _a = __read(
				preserveActionOrder
					? [[], actions]
					: partition(actions, function (action) {
							return action.type === assign;
					  }),
				2
			),
			assignActions = _a[0],
			otherActions = _a[1];
		var updatedContext = assignActions.length
			? updateContext(currentContext, _event, assignActions, currentState)
			: currentContext;
		var preservedContexts = preserveActionOrder ? [currentContext] : void 0;
		var resolvedActions = flatten(
			otherActions
				.map(function (actionObject) {
					var _a2;
					switch (actionObject.type) {
						case raise:
							return resolveRaise(actionObject);
						case send:
							var sendAction = resolveSend(
								actionObject,
								updatedContext,
								_event,
								machine2.options.delays
							);
							if (!IS_PRODUCTION) {
								warn(
									!isString(actionObject.delay) || typeof sendAction.delay === "number",
									"No delay reference for delay expression '" +
										actionObject.delay +
										"' was found on machine '" +
										machine2.id +
										"'"
								);
							}
							return sendAction;
						case log:
							return resolveLog(actionObject, updatedContext, _event);
						case choose: {
							var chooseAction = actionObject;
							var matchedActions =
								(_a2 = chooseAction.conds.find(function (condition) {
									var guard = toGuard(condition.cond, machine2.options.guards);
									return (
										!guard || evaluateGuard(machine2, guard, updatedContext, _event, currentState)
									);
								})) === null || _a2 === void 0
									? void 0
									: _a2.actions;
							if (!matchedActions) {
								return [];
							}
							var _b = __read(
									resolveActions(
										machine2,
										currentState,
										updatedContext,
										_event,
										toActionObjects(toArray(matchedActions), machine2.options.actions),
										preserveActionOrder
									),
									2
								),
								resolvedActionsFromChoose = _b[0],
								resolvedContextFromChoose = _b[1];
							updatedContext = resolvedContextFromChoose;
							preservedContexts === null || preservedContexts === void 0
								? void 0
								: preservedContexts.push(updatedContext);
							return resolvedActionsFromChoose;
						}
						case pure: {
							var matchedActions = actionObject.get(updatedContext, _event.data);
							if (!matchedActions) {
								return [];
							}
							var _c = __read(
									resolveActions(
										machine2,
										currentState,
										updatedContext,
										_event,
										toActionObjects(toArray(matchedActions), machine2.options.actions),
										preserveActionOrder
									),
									2
								),
								resolvedActionsFromPure = _c[0],
								resolvedContext = _c[1];
							updatedContext = resolvedContext;
							preservedContexts === null || preservedContexts === void 0
								? void 0
								: preservedContexts.push(updatedContext);
							return resolvedActionsFromPure;
						}
						case stop: {
							return resolveStop(actionObject, updatedContext, _event);
						}
						case assign: {
							updatedContext = updateContext(updatedContext, _event, [actionObject], currentState);
							preservedContexts === null || preservedContexts === void 0
								? void 0
								: preservedContexts.push(updatedContext);
							break;
						}
						default:
							var resolvedActionObject = toActionObject(actionObject, machine2.options.actions);
							var exec_1 = resolvedActionObject.exec;
							if (exec_1 && preservedContexts) {
								var contextIndex_1 = preservedContexts.length - 1;
								resolvedActionObject.exec = function (_ctx) {
									var args = [];
									for (var _i = 1; _i < arguments.length; _i++) {
										args[_i - 1] = arguments[_i];
									}
									exec_1 === null || exec_1 === void 0
										? void 0
										: exec_1.apply(
												void 0,
												__spreadArray([preservedContexts[contextIndex_1]], __read(args))
										  );
								};
							}
							return resolvedActionObject;
					}
				})
				.filter(function (a) {
					return !!a;
				})
		);
		return [resolvedActions, updatedContext];
	}

	// ../../node_modules/xstate/es/stateUtils.js
	var isLeafNode = function (stateNode) {
		return stateNode.type === "atomic" || stateNode.type === "final";
	};
	function getChildren(stateNode) {
		return keys(stateNode.states).map(function (key) {
			return stateNode.states[key];
		});
	}
	function getAllStateNodes(stateNode) {
		var stateNodes = [stateNode];
		if (isLeafNode(stateNode)) {
			return stateNodes;
		}
		return stateNodes.concat(flatten(getChildren(stateNode).map(getAllStateNodes)));
	}
	function getConfiguration(prevStateNodes, stateNodes) {
		var e_1, _a, e_2, _b, e_3, _c, e_4, _d;
		var prevConfiguration = new Set(prevStateNodes);
		var prevAdjList = getAdjList(prevConfiguration);
		var configuration = new Set(stateNodes);
		try {
			for (
				var configuration_1 = __values(configuration), configuration_1_1 = configuration_1.next();
				!configuration_1_1.done;
				configuration_1_1 = configuration_1.next()
			) {
				var s = configuration_1_1.value;
				var m = s.parent;
				while (m && !configuration.has(m)) {
					configuration.add(m);
					m = m.parent;
				}
			}
		} catch (e_1_1) {
			e_1 = {
				error: e_1_1,
			};
		} finally {
			try {
				if (configuration_1_1 && !configuration_1_1.done && (_a = configuration_1.return))
					_a.call(configuration_1);
			} finally {
				if (e_1) throw e_1.error;
			}
		}
		var adjList = getAdjList(configuration);
		try {
			for (
				var configuration_2 = __values(configuration), configuration_2_1 = configuration_2.next();
				!configuration_2_1.done;
				configuration_2_1 = configuration_2.next()
			) {
				var s = configuration_2_1.value;
				if (s.type === "compound" && (!adjList.get(s) || !adjList.get(s).length)) {
					if (prevAdjList.get(s)) {
						prevAdjList.get(s).forEach(function (sn) {
							return configuration.add(sn);
						});
					} else {
						s.initialStateNodes.forEach(function (sn) {
							return configuration.add(sn);
						});
					}
				} else {
					if (s.type === "parallel") {
						try {
							for (
								var _e = ((e_3 = void 0), __values(getChildren(s))), _f = _e.next();
								!_f.done;
								_f = _e.next()
							) {
								var child = _f.value;
								if (child.type === "history") {
									continue;
								}
								if (!configuration.has(child)) {
									configuration.add(child);
									if (prevAdjList.get(child)) {
										prevAdjList.get(child).forEach(function (sn) {
											return configuration.add(sn);
										});
									} else {
										child.initialStateNodes.forEach(function (sn) {
											return configuration.add(sn);
										});
									}
								}
							}
						} catch (e_3_1) {
							e_3 = {
								error: e_3_1,
							};
						} finally {
							try {
								if (_f && !_f.done && (_c = _e.return)) _c.call(_e);
							} finally {
								if (e_3) throw e_3.error;
							}
						}
					}
				}
			}
		} catch (e_2_1) {
			e_2 = {
				error: e_2_1,
			};
		} finally {
			try {
				if (configuration_2_1 && !configuration_2_1.done && (_b = configuration_2.return))
					_b.call(configuration_2);
			} finally {
				if (e_2) throw e_2.error;
			}
		}
		try {
			for (
				var configuration_3 = __values(configuration), configuration_3_1 = configuration_3.next();
				!configuration_3_1.done;
				configuration_3_1 = configuration_3.next()
			) {
				var s = configuration_3_1.value;
				var m = s.parent;
				while (m && !configuration.has(m)) {
					configuration.add(m);
					m = m.parent;
				}
			}
		} catch (e_4_1) {
			e_4 = {
				error: e_4_1,
			};
		} finally {
			try {
				if (configuration_3_1 && !configuration_3_1.done && (_d = configuration_3.return))
					_d.call(configuration_3);
			} finally {
				if (e_4) throw e_4.error;
			}
		}
		return configuration;
	}
	function getValueFromAdj(baseNode, adjList) {
		var childStateNodes = adjList.get(baseNode);
		if (!childStateNodes) {
			return {};
		}
		if (baseNode.type === "compound") {
			var childStateNode = childStateNodes[0];
			if (childStateNode) {
				if (isLeafNode(childStateNode)) {
					return childStateNode.key;
				}
			} else {
				return {};
			}
		}
		var stateValue = {};
		childStateNodes.forEach(function (csn) {
			stateValue[csn.key] = getValueFromAdj(csn, adjList);
		});
		return stateValue;
	}
	function getAdjList(configuration) {
		var e_5, _a;
		var adjList = new Map();
		try {
			for (
				var configuration_4 = __values(configuration), configuration_4_1 = configuration_4.next();
				!configuration_4_1.done;
				configuration_4_1 = configuration_4.next()
			) {
				var s = configuration_4_1.value;
				if (!adjList.has(s)) {
					adjList.set(s, []);
				}
				if (s.parent) {
					if (!adjList.has(s.parent)) {
						adjList.set(s.parent, []);
					}
					adjList.get(s.parent).push(s);
				}
			}
		} catch (e_5_1) {
			e_5 = {
				error: e_5_1,
			};
		} finally {
			try {
				if (configuration_4_1 && !configuration_4_1.done && (_a = configuration_4.return))
					_a.call(configuration_4);
			} finally {
				if (e_5) throw e_5.error;
			}
		}
		return adjList;
	}
	function getValue(rootNode, configuration) {
		var config = getConfiguration([rootNode], configuration);
		return getValueFromAdj(rootNode, getAdjList(config));
	}
	function has(iterable, item) {
		if (Array.isArray(iterable)) {
			return iterable.some(function (member) {
				return member === item;
			});
		}
		if (iterable instanceof Set) {
			return iterable.has(item);
		}
		return false;
	}
	function nextEvents(configuration) {
		return __spreadArray(
			[],
			__read(
				new Set(
					flatten(
						__spreadArray(
							[],
							__read(
								configuration.map(function (sn) {
									return sn.ownEvents;
								})
							)
						)
					)
				)
			)
		);
	}
	function isInFinalState(configuration, stateNode) {
		if (stateNode.type === "compound") {
			return getChildren(stateNode).some(function (s) {
				return s.type === "final" && has(configuration, s);
			});
		}
		if (stateNode.type === "parallel") {
			return getChildren(stateNode).every(function (sn) {
				return isInFinalState(configuration, sn);
			});
		}
		return false;
	}
	function getMeta(configuration) {
		if (configuration === void 0) {
			configuration = [];
		}
		return configuration.reduce(function (acc, stateNode) {
			if (stateNode.meta !== void 0) {
				acc[stateNode.id] = stateNode.meta;
			}
			return acc;
		}, {});
	}

	// ../../node_modules/xstate/es/State.js
	function stateValuesEqual(a, b) {
		if (a === b) {
			return true;
		}
		if (a === void 0 || b === void 0) {
			return false;
		}
		if (isString(a) || isString(b)) {
			return a === b;
		}
		var aKeys = keys(a);
		var bKeys = keys(b);
		return (
			aKeys.length === bKeys.length &&
			aKeys.every(function (key) {
				return stateValuesEqual(a[key], b[key]);
			})
		);
	}
	function isState(state) {
		if (isString(state)) {
			return false;
		}
		return "value" in state && "history" in state;
	}
	function bindActionToState(action, state) {
		var exec = action.exec;
		var boundAction = __assign2(__assign2({}, action), {
			exec:
				exec !== void 0
					? function () {
							return exec(state.context, state.event, {
								action,
								state,
								_event: state._event,
							});
					  }
					: void 0,
		});
		return boundAction;
	}
	var State = /* @__PURE__ */ (function () {
		function State2(config) {
			var _this = this;
			var _a;
			this.actions = [];
			this.activities = EMPTY_ACTIVITY_MAP;
			this.meta = {};
			this.events = [];
			this.value = config.value;
			this.context = config.context;
			this._event = config._event;
			this._sessionid = config._sessionid;
			this.event = this._event.data;
			this.historyValue = config.historyValue;
			this.history = config.history;
			this.actions = config.actions || [];
			this.activities = config.activities || EMPTY_ACTIVITY_MAP;
			this.meta = getMeta(config.configuration);
			this.events = config.events || [];
			this.matches = this.matches.bind(this);
			this.toStrings = this.toStrings.bind(this);
			this.configuration = config.configuration;
			this.transitions = config.transitions;
			this.children = config.children;
			this.done = !!config.done;
			this.tags = (_a = config.tags) !== null && _a !== void 0 ? _a : new Set();
			Object.defineProperty(this, "nextEvents", {
				get: function () {
					return nextEvents(_this.configuration);
				},
			});
		}
		State2.from = function (stateValue, context) {
			if (stateValue instanceof State2) {
				if (stateValue.context !== context) {
					return new State2({
						value: stateValue.value,
						context,
						_event: stateValue._event,
						_sessionid: null,
						historyValue: stateValue.historyValue,
						history: stateValue.history,
						actions: [],
						activities: stateValue.activities,
						meta: {},
						events: [],
						configuration: [],
						transitions: [],
						children: {},
					});
				}
				return stateValue;
			}
			var _event = initEvent;
			return new State2({
				value: stateValue,
				context,
				_event,
				_sessionid: null,
				historyValue: void 0,
				history: void 0,
				actions: [],
				activities: void 0,
				meta: void 0,
				events: [],
				configuration: [],
				transitions: [],
				children: {},
			});
		};
		State2.create = function (config) {
			return new State2(config);
		};
		State2.inert = function (stateValue, context) {
			if (stateValue instanceof State2) {
				if (!stateValue.actions.length) {
					return stateValue;
				}
				var _event = initEvent;
				return new State2({
					value: stateValue.value,
					context,
					_event,
					_sessionid: null,
					historyValue: stateValue.historyValue,
					history: stateValue.history,
					activities: stateValue.activities,
					configuration: stateValue.configuration,
					transitions: [],
					children: {},
				});
			}
			return State2.from(stateValue, context);
		};
		State2.prototype.toStrings = function (stateValue, delimiter) {
			var _this = this;
			if (stateValue === void 0) {
				stateValue = this.value;
			}
			if (delimiter === void 0) {
				delimiter = ".";
			}
			if (isString(stateValue)) {
				return [stateValue];
			}
			var valueKeys = keys(stateValue);
			return valueKeys.concat.apply(
				valueKeys,
				__spreadArray(
					[],
					__read(
						valueKeys.map(function (key) {
							return _this.toStrings(stateValue[key], delimiter).map(function (s) {
								return key + delimiter + s;
							});
						})
					)
				)
			);
		};
		State2.prototype.toJSON = function () {
			var _a = this,
				configuration = _a.configuration,
				transitions = _a.transitions,
				tags = _a.tags,
				jsonValues = __rest(_a, ["configuration", "transitions", "tags"]);
			return __assign2(__assign2({}, jsonValues), {
				tags: Array.from(tags),
			});
		};
		State2.prototype.matches = function (parentStateValue) {
			return matchesState(parentStateValue, this.value);
		};
		State2.prototype.hasTag = function (tag) {
			return this.tags.has(tag);
		};
		return State2;
	})();

	// ../../node_modules/xstate/es/serviceScope.js
	var serviceStack = [];
	var provide = function (service, fn) {
		serviceStack.push(service);
		var result = fn(service);
		serviceStack.pop();
		return result;
	};

	// ../../node_modules/xstate/es/Actor.js
	function createNullActor(id) {
		return {
			id,
			send: function () {
				return void 0;
			},
			subscribe: function () {
				return {
					unsubscribe: function () {
						return void 0;
					},
				};
			},
			getSnapshot: function () {
				return void 0;
			},
			toJSON: function () {
				return {
					id,
				};
			},
		};
	}
	function createInvocableActor(invokeDefinition, machine2, context, _event) {
		var _a;
		var invokeSrc = toInvokeSource(invokeDefinition.src);
		var serviceCreator =
			(_a = machine2 === null || machine2 === void 0 ? void 0 : machine2.options.services) ===
				null || _a === void 0
				? void 0
				: _a[invokeSrc.type];
		var resolvedData = invokeDefinition.data
			? mapContext(invokeDefinition.data, context, _event)
			: void 0;
		var tempActor = serviceCreator
			? createDeferredActor(serviceCreator, invokeDefinition.id, resolvedData)
			: createNullActor(invokeDefinition.id);
		tempActor.meta = invokeDefinition;
		return tempActor;
	}
	function createDeferredActor(entity, id, data) {
		var tempActor = createNullActor(id);
		tempActor.deferred = true;
		if (isMachine(entity)) {
			var initialState_1 = (tempActor.state = provide(void 0, function () {
				return (data ? entity.withContext(data) : entity).initialState;
			}));
			tempActor.getSnapshot = function () {
				return initialState_1;
			};
		}
		return tempActor;
	}
	function isActor2(item) {
		try {
			return typeof item.send === "function";
		} catch (e) {
			return false;
		}
	}
	function isSpawnedActor(item) {
		return isActor2(item) && "id" in item;
	}
	function toActorRef(actorRefLike) {
		return __assign2(
			{
				subscribe: function () {
					return {
						unsubscribe: function () {
							return void 0;
						},
					};
				},
				id: "anonymous",
				getSnapshot: function () {
					return void 0;
				},
			},
			actorRefLike
		);
	}

	// ../../node_modules/xstate/es/invokeUtils.js
	function toInvokeSource2(src) {
		if (typeof src === "string") {
			var simpleSrc = {
				type: src,
			};
			simpleSrc.toString = function () {
				return src;
			};
			return simpleSrc;
		}
		return src;
	}
	function toInvokeDefinition(invokeConfig) {
		return __assign2(
			__assign2(
				{
					type: invoke,
				},
				invokeConfig
			),
			{
				toJSON: function () {
					var onDone = invokeConfig.onDone,
						onError = invokeConfig.onError,
						invokeDef = __rest(invokeConfig, ["onDone", "onError"]);
					return __assign2(__assign2({}, invokeDef), {
						type: invoke,
						src: toInvokeSource2(invokeConfig.src),
					});
				},
			}
		);
	}

	// ../../node_modules/xstate/es/StateNode.js
	var NULL_EVENT = "";
	var STATE_IDENTIFIER = "#";
	var WILDCARD = "*";
	var EMPTY_OBJECT = {};
	var isStateId = function (str) {
		return str[0] === STATE_IDENTIFIER;
	};
	var createDefaultOptions = function () {
		return {
			actions: {},
			guards: {},
			services: {},
			activities: {},
			delays: {},
		};
	};
	var validateArrayifiedTransitions = function (stateNode, event2, transitions) {
		var hasNonLastUnguardedTarget = transitions.slice(0, -1).some(function (transition) {
			return (
				!("cond" in transition) &&
				!("in" in transition) &&
				(isString(transition.target) || isMachine(transition.target))
			);
		});
		var eventText = event2 === NULL_EVENT ? "the transient event" : "event '" + event2 + "'";
		warn(
			!hasNonLastUnguardedTarget,
			"One or more transitions for " +
				eventText +
				" on state '" +
				stateNode.id +
				"' are unreachable. Make sure that the default transition is the last one defined."
		);
	};
	var StateNode = /* @__PURE__ */ (function () {
		function StateNode2(config, options, _context) {
			var _this = this;
			if (_context === void 0) {
				_context = config.context;
			}
			var _a;
			this.config = config;
			this._context = _context;
			this.order = -1;
			this.__xstatenode = true;
			this.__cache = {
				events: void 0,
				relativeValue: new Map(),
				initialStateValue: void 0,
				initialState: void 0,
				on: void 0,
				transitions: void 0,
				candidates: {},
				delayedTransitions: void 0,
			};
			this.idMap = {};
			this.tags = [];
			this.options = Object.assign(createDefaultOptions(), options);
			this.parent = this.options._parent;
			this.key = this.config.key || this.options._key || this.config.id || "(machine)";
			this.machine = this.parent ? this.parent.machine : this;
			this.path = this.parent ? this.parent.path.concat(this.key) : [];
			this.delimiter =
				this.config.delimiter || (this.parent ? this.parent.delimiter : STATE_DELIMITER);
			this.id =
				this.config.id || __spreadArray([this.machine.key], __read(this.path)).join(this.delimiter);
			this.version = this.parent ? this.parent.version : this.config.version;
			this.type =
				this.config.type ||
				(this.config.parallel
					? "parallel"
					: this.config.states && keys(this.config.states).length
					? "compound"
					: this.config.history
					? "history"
					: "atomic");
			this.schema = this.parent
				? this.machine.schema
				: (_a = this.config.schema) !== null && _a !== void 0
				? _a
				: {};
			if (!IS_PRODUCTION) {
				warn(
					!("parallel" in this.config),
					'The "parallel" property is deprecated and will be removed in version 4.1. ' +
						(this.config.parallel
							? "Replace with `type: 'parallel'`"
							: "Use `type: '" + this.type + "'`") +
						" in the config for state node '" +
						this.id +
						"' instead."
				);
			}
			this.initial = this.config.initial;
			this.states = this.config.states
				? mapValues(this.config.states, function (stateConfig, key) {
						var _a2;
						var stateNode = new StateNode2(stateConfig, {
							_parent: _this,
							_key: key,
						});
						Object.assign(
							_this.idMap,
							__assign2(((_a2 = {}), (_a2[stateNode.id] = stateNode), _a2), stateNode.idMap)
						);
						return stateNode;
				  })
				: EMPTY_OBJECT;
			var order = 0;
			function dfs(stateNode) {
				var e_1, _a2;
				stateNode.order = order++;
				try {
					for (
						var _b = __values(getChildren(stateNode)), _c = _b.next();
						!_c.done;
						_c = _b.next()
					) {
						var child = _c.value;
						dfs(child);
					}
				} catch (e_1_1) {
					e_1 = {
						error: e_1_1,
					};
				} finally {
					try {
						if (_c && !_c.done && (_a2 = _b.return)) _a2.call(_b);
					} finally {
						if (e_1) throw e_1.error;
					}
				}
			}
			dfs(this);
			this.history = this.config.history === true ? "shallow" : this.config.history || false;
			this._transient =
				!!this.config.always ||
				(!this.config.on
					? false
					: Array.isArray(this.config.on)
					? this.config.on.some(function (_a2) {
							var event2 = _a2.event;
							return event2 === NULL_EVENT;
					  })
					: NULL_EVENT in this.config.on);
			this.strict = !!this.config.strict;
			this.onEntry = toArray(this.config.entry || this.config.onEntry).map(function (action) {
				return toActionObject(action);
			});
			this.onExit = toArray(this.config.exit || this.config.onExit).map(function (action) {
				return toActionObject(action);
			});
			this.meta = this.config.meta;
			this.doneData = this.type === "final" ? this.config.data : void 0;
			this.invoke = toArray(this.config.invoke).map(function (invokeConfig, i) {
				var _a2, _b;
				if (isMachine(invokeConfig)) {
					_this.machine.options.services = __assign2(
						((_a2 = {}), (_a2[invokeConfig.id] = invokeConfig), _a2),
						_this.machine.options.services
					);
					return toInvokeDefinition({
						src: invokeConfig.id,
						id: invokeConfig.id,
					});
				} else if (isString(invokeConfig.src)) {
					return toInvokeDefinition(
						__assign2(__assign2({}, invokeConfig), {
							id: invokeConfig.id || invokeConfig.src,
							src: invokeConfig.src,
						})
					);
				} else if (isMachine(invokeConfig.src) || isFunction(invokeConfig.src)) {
					var invokeSrc = _this.id + ":invocation[" + i + "]";
					_this.machine.options.services = __assign2(
						((_b = {}), (_b[invokeSrc] = invokeConfig.src), _b),
						_this.machine.options.services
					);
					return toInvokeDefinition(
						__assign2(
							__assign2(
								{
									id: invokeSrc,
								},
								invokeConfig
							),
							{
								src: invokeSrc,
							}
						)
					);
				} else {
					var invokeSource = invokeConfig.src;
					return toInvokeDefinition(
						__assign2(
							__assign2(
								{
									id: invokeSource.type,
								},
								invokeConfig
							),
							{
								src: invokeSource,
							}
						)
					);
				}
			});
			this.activities = toArray(this.config.activities)
				.concat(this.invoke)
				.map(function (activity) {
					return toActivityDefinition(activity);
				});
			this.transition = this.transition.bind(this);
			this.tags = toArray(this.config.tags);
		}
		StateNode2.prototype._init = function () {
			if (this.__cache.transitions) {
				return;
			}
			getAllStateNodes(this).forEach(function (stateNode) {
				return stateNode.on;
			});
		};
		StateNode2.prototype.withConfig = function (options, context) {
			var _a = this.options,
				actions = _a.actions,
				activities = _a.activities,
				guards = _a.guards,
				services = _a.services,
				delays = _a.delays;
			return new StateNode2(
				this.config,
				{
					actions: __assign2(__assign2({}, actions), options.actions),
					activities: __assign2(__assign2({}, activities), options.activities),
					guards: __assign2(__assign2({}, guards), options.guards),
					services: __assign2(__assign2({}, services), options.services),
					delays: __assign2(__assign2({}, delays), options.delays),
				},
				context !== null && context !== void 0 ? context : this.context
			);
		};
		StateNode2.prototype.withContext = function (context) {
			return new StateNode2(this.config, this.options, context);
		};
		Object.defineProperty(StateNode2.prototype, "context", {
			get: function () {
				return isFunction(this._context) ? this._context() : this._context;
			},
			enumerable: false,
			configurable: true,
		});
		Object.defineProperty(StateNode2.prototype, "definition", {
			get: function () {
				return {
					id: this.id,
					key: this.key,
					version: this.version,
					context: this.context,
					type: this.type,
					initial: this.initial,
					history: this.history,
					states: mapValues(this.states, function (state) {
						return state.definition;
					}),
					on: this.on,
					transitions: this.transitions,
					entry: this.onEntry,
					exit: this.onExit,
					activities: this.activities || [],
					meta: this.meta,
					order: this.order || -1,
					data: this.doneData,
					invoke: this.invoke,
				};
			},
			enumerable: false,
			configurable: true,
		});
		StateNode2.prototype.toJSON = function () {
			return this.definition;
		};
		Object.defineProperty(StateNode2.prototype, "on", {
			get: function () {
				if (this.__cache.on) {
					return this.__cache.on;
				}
				var transitions = this.transitions;
				return (this.__cache.on = transitions.reduce(function (map, transition) {
					map[transition.eventType] = map[transition.eventType] || [];
					map[transition.eventType].push(transition);
					return map;
				}, {}));
			},
			enumerable: false,
			configurable: true,
		});
		Object.defineProperty(StateNode2.prototype, "after", {
			get: function () {
				return (
					this.__cache.delayedTransitions ||
					((this.__cache.delayedTransitions = this.getDelayedTransitions()),
					this.__cache.delayedTransitions)
				);
			},
			enumerable: false,
			configurable: true,
		});
		Object.defineProperty(StateNode2.prototype, "transitions", {
			get: function () {
				return (
					this.__cache.transitions ||
					((this.__cache.transitions = this.formatTransitions()), this.__cache.transitions)
				);
			},
			enumerable: false,
			configurable: true,
		});
		StateNode2.prototype.getCandidates = function (eventName) {
			if (this.__cache.candidates[eventName]) {
				return this.__cache.candidates[eventName];
			}
			var transient = eventName === NULL_EVENT;
			var candidates = this.transitions.filter(function (transition) {
				var sameEventType = transition.eventType === eventName;
				return transient ? sameEventType : sameEventType || transition.eventType === WILDCARD;
			});
			this.__cache.candidates[eventName] = candidates;
			return candidates;
		};
		StateNode2.prototype.getDelayedTransitions = function () {
			var _this = this;
			var afterConfig = this.config.after;
			if (!afterConfig) {
				return [];
			}
			var mutateEntryExit = function (delay, i) {
				var delayRef = isFunction(delay) ? _this.id + ":delay[" + i + "]" : delay;
				var eventType = after2(delayRef, _this.id);
				_this.onEntry.push(
					send2(eventType, {
						delay,
					})
				);
				_this.onExit.push(cancel2(eventType));
				return eventType;
			};
			var delayedTransitions = isArray(afterConfig)
				? afterConfig.map(function (transition, i) {
						var eventType = mutateEntryExit(transition.delay, i);
						return __assign2(__assign2({}, transition), {
							event: eventType,
						});
				  })
				: flatten(
						keys(afterConfig).map(function (delay, i) {
							var configTransition = afterConfig[delay];
							var resolvedTransition = isString(configTransition)
								? {
										target: configTransition,
								  }
								: configTransition;
							var resolvedDelay = !isNaN(+delay) ? +delay : delay;
							var eventType = mutateEntryExit(resolvedDelay, i);
							return toArray(resolvedTransition).map(function (transition) {
								return __assign2(__assign2({}, transition), {
									event: eventType,
									delay: resolvedDelay,
								});
							});
						})
				  );
			return delayedTransitions.map(function (delayedTransition) {
				var delay = delayedTransition.delay;
				return __assign2(__assign2({}, _this.formatTransition(delayedTransition)), {
					delay,
				});
			});
		};
		StateNode2.prototype.getStateNodes = function (state) {
			var _a;
			var _this = this;
			if (!state) {
				return [];
			}
			var stateValue = state instanceof State ? state.value : toStateValue(state, this.delimiter);
			if (isString(stateValue)) {
				var initialStateValue = this.getStateNode(stateValue).initial;
				return initialStateValue !== void 0
					? this.getStateNodes(((_a = {}), (_a[stateValue] = initialStateValue), _a))
					: [this, this.states[stateValue]];
			}
			var subStateKeys = keys(stateValue);
			var subStateNodes = subStateKeys.map(function (subStateKey) {
				return _this.getStateNode(subStateKey);
			});
			subStateNodes.push(this);
			return subStateNodes.concat(
				subStateKeys.reduce(function (allSubStateNodes, subStateKey) {
					var subStateNode = _this.getStateNode(subStateKey).getStateNodes(stateValue[subStateKey]);
					return allSubStateNodes.concat(subStateNode);
				}, [])
			);
		};
		StateNode2.prototype.handles = function (event2) {
			var eventType = getEventType(event2);
			return this.events.includes(eventType);
		};
		StateNode2.prototype.resolveState = function (state) {
			var configuration = Array.from(getConfiguration([], this.getStateNodes(state.value)));
			return new State(
				__assign2(__assign2({}, state), {
					value: this.resolve(state.value),
					configuration,
					done: isInFinalState(configuration, this),
				})
			);
		};
		StateNode2.prototype.transitionLeafNode = function (stateValue, state, _event) {
			var stateNode = this.getStateNode(stateValue);
			var next = stateNode.next(state, _event);
			if (!next || !next.transitions.length) {
				return this.next(state, _event);
			}
			return next;
		};
		StateNode2.prototype.transitionCompoundNode = function (stateValue, state, _event) {
			var subStateKeys = keys(stateValue);
			var stateNode = this.getStateNode(subStateKeys[0]);
			var next = stateNode._transition(stateValue[subStateKeys[0]], state, _event);
			if (!next || !next.transitions.length) {
				return this.next(state, _event);
			}
			return next;
		};
		StateNode2.prototype.transitionParallelNode = function (stateValue, state, _event) {
			var e_2, _a;
			var transitionMap = {};
			try {
				for (var _b = __values(keys(stateValue)), _c = _b.next(); !_c.done; _c = _b.next()) {
					var subStateKey = _c.value;
					var subStateValue = stateValue[subStateKey];
					if (!subStateValue) {
						continue;
					}
					var subStateNode = this.getStateNode(subStateKey);
					var next = subStateNode._transition(subStateValue, state, _event);
					if (next) {
						transitionMap[subStateKey] = next;
					}
				}
			} catch (e_2_1) {
				e_2 = {
					error: e_2_1,
				};
			} finally {
				try {
					if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
				} finally {
					if (e_2) throw e_2.error;
				}
			}
			var stateTransitions = keys(transitionMap).map(function (key) {
				return transitionMap[key];
			});
			var enabledTransitions = flatten(
				stateTransitions.map(function (st) {
					return st.transitions;
				})
			);
			var willTransition = stateTransitions.some(function (st) {
				return st.transitions.length > 0;
			});
			if (!willTransition) {
				return this.next(state, _event);
			}
			var entryNodes = flatten(
				stateTransitions.map(function (t) {
					return t.entrySet;
				})
			);
			var configuration = flatten(
				keys(transitionMap).map(function (key) {
					return transitionMap[key].configuration;
				})
			);
			return {
				transitions: enabledTransitions,
				entrySet: entryNodes,
				exitSet: flatten(
					stateTransitions.map(function (t) {
						return t.exitSet;
					})
				),
				configuration,
				source: state,
				actions: flatten(
					keys(transitionMap).map(function (key) {
						return transitionMap[key].actions;
					})
				),
			};
		};
		StateNode2.prototype._transition = function (stateValue, state, _event) {
			if (isString(stateValue)) {
				return this.transitionLeafNode(stateValue, state, _event);
			}
			if (keys(stateValue).length === 1) {
				return this.transitionCompoundNode(stateValue, state, _event);
			}
			return this.transitionParallelNode(stateValue, state, _event);
		};
		StateNode2.prototype.next = function (state, _event) {
			var e_3, _a;
			var _this = this;
			var eventName = _event.name;
			var actions = [];
			var nextStateNodes = [];
			var selectedTransition;
			try {
				for (
					var _b = __values(this.getCandidates(eventName)), _c = _b.next();
					!_c.done;
					_c = _b.next()
				) {
					var candidate = _c.value;
					var cond = candidate.cond,
						stateIn = candidate.in;
					var resolvedContext = state.context;
					var isInState = stateIn
						? isString(stateIn) && isStateId(stateIn)
							? state.matches(toStateValue(this.getStateNodeById(stateIn).path, this.delimiter))
							: matchesState(
									toStateValue(stateIn, this.delimiter),
									path(this.path.slice(0, -2))(state.value)
							  )
						: true;
					var guardPassed = false;
					try {
						guardPassed =
							!cond || evaluateGuard(this.machine, cond, resolvedContext, _event, state);
					} catch (err) {
						throw new Error(
							"Unable to evaluate guard '" +
								(cond.name || cond.type) +
								"' in transition for event '" +
								eventName +
								"' in state node '" +
								this.id +
								"':\n" +
								err.message
						);
					}
					if (guardPassed && isInState) {
						if (candidate.target !== void 0) {
							nextStateNodes = candidate.target;
						}
						actions.push.apply(actions, __spreadArray([], __read(candidate.actions)));
						selectedTransition = candidate;
						break;
					}
				}
			} catch (e_3_1) {
				e_3 = {
					error: e_3_1,
				};
			} finally {
				try {
					if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
				} finally {
					if (e_3) throw e_3.error;
				}
			}
			if (!selectedTransition) {
				return void 0;
			}
			if (!nextStateNodes.length) {
				return {
					transitions: [selectedTransition],
					entrySet: [],
					exitSet: [],
					configuration: state.value ? [this] : [],
					source: state,
					actions,
				};
			}
			var allNextStateNodes = flatten(
				nextStateNodes.map(function (stateNode) {
					return _this.getRelativeStateNodes(stateNode, state.historyValue);
				})
			);
			var isInternal = !!selectedTransition.internal;
			var reentryNodes = isInternal
				? []
				: flatten(
						allNextStateNodes.map(function (n) {
							return _this.nodesFromChild(n);
						})
				  );
			return {
				transitions: [selectedTransition],
				entrySet: reentryNodes,
				exitSet: isInternal ? [] : [this],
				configuration: allNextStateNodes,
				source: state,
				actions,
			};
		};
		StateNode2.prototype.nodesFromChild = function (childStateNode) {
			if (childStateNode.escapes(this)) {
				return [];
			}
			var nodes = [];
			var marker = childStateNode;
			while (marker && marker !== this) {
				nodes.push(marker);
				marker = marker.parent;
			}
			nodes.push(this);
			return nodes;
		};
		StateNode2.prototype.escapes = function (stateNode) {
			if (this === stateNode) {
				return false;
			}
			var parent = this.parent;
			while (parent) {
				if (parent === stateNode) {
					return false;
				}
				parent = parent.parent;
			}
			return true;
		};
		StateNode2.prototype.getActions = function (transition, currentContext, _event, prevState) {
			var e_4, _a, e_5, _b;
			var prevConfig = getConfiguration(
				[],
				prevState ? this.getStateNodes(prevState.value) : [this]
			);
			var resolvedConfig = transition.configuration.length
				? getConfiguration(prevConfig, transition.configuration)
				: prevConfig;
			try {
				for (
					var resolvedConfig_1 = __values(resolvedConfig),
						resolvedConfig_1_1 = resolvedConfig_1.next();
					!resolvedConfig_1_1.done;
					resolvedConfig_1_1 = resolvedConfig_1.next()
				) {
					var sn = resolvedConfig_1_1.value;
					if (!has(prevConfig, sn)) {
						transition.entrySet.push(sn);
					}
				}
			} catch (e_4_1) {
				e_4 = {
					error: e_4_1,
				};
			} finally {
				try {
					if (resolvedConfig_1_1 && !resolvedConfig_1_1.done && (_a = resolvedConfig_1.return))
						_a.call(resolvedConfig_1);
				} finally {
					if (e_4) throw e_4.error;
				}
			}
			try {
				for (
					var prevConfig_1 = __values(prevConfig), prevConfig_1_1 = prevConfig_1.next();
					!prevConfig_1_1.done;
					prevConfig_1_1 = prevConfig_1.next()
				) {
					var sn = prevConfig_1_1.value;
					if (!has(resolvedConfig, sn) || has(transition.exitSet, sn.parent)) {
						transition.exitSet.push(sn);
					}
				}
			} catch (e_5_1) {
				e_5 = {
					error: e_5_1,
				};
			} finally {
				try {
					if (prevConfig_1_1 && !prevConfig_1_1.done && (_b = prevConfig_1.return))
						_b.call(prevConfig_1);
				} finally {
					if (e_5) throw e_5.error;
				}
			}
			if (!transition.source) {
				transition.exitSet = [];
				transition.entrySet.push(this);
			}
			var doneEvents = flatten(
				transition.entrySet.map(function (sn2) {
					var events = [];
					if (sn2.type !== "final") {
						return events;
					}
					var parent = sn2.parent;
					if (!parent.parent) {
						return events;
					}
					events.push(
						done(sn2.id, sn2.doneData),
						done(
							parent.id,
							sn2.doneData ? mapContext(sn2.doneData, currentContext, _event) : void 0
						)
					);
					var grandparent = parent.parent;
					if (grandparent.type === "parallel") {
						if (
							getChildren(grandparent).every(function (parentNode) {
								return isInFinalState(transition.configuration, parentNode);
							})
						) {
							events.push(done(grandparent.id));
						}
					}
					return events;
				})
			);
			transition.exitSet.sort(function (a, b) {
				return b.order - a.order;
			});
			transition.entrySet.sort(function (a, b) {
				return a.order - b.order;
			});
			var entryStates = new Set(transition.entrySet);
			var exitStates = new Set(transition.exitSet);
			var _c = __read(
					[
						flatten(
							Array.from(entryStates).map(function (stateNode) {
								return __spreadArray(
									__spreadArray(
										[],
										__read(
											stateNode.activities.map(function (activity) {
												return start2(activity);
											})
										)
									),
									__read(stateNode.onEntry)
								);
							})
						).concat(doneEvents.map(raise2)),
						flatten(
							Array.from(exitStates).map(function (stateNode) {
								return __spreadArray(
									__spreadArray([], __read(stateNode.onExit)),
									__read(
										stateNode.activities.map(function (activity) {
											return stop2(activity);
										})
									)
								);
							})
						),
					],
					2
				),
				entryActions = _c[0],
				exitActions = _c[1];
			var actions = toActionObjects(
				exitActions.concat(transition.actions).concat(entryActions),
				this.machine.options.actions
			);
			return actions;
		};
		StateNode2.prototype.transition = function (state, event2, context) {
			if (state === void 0) {
				state = this.initialState;
			}
			var _event = toSCXMLEvent(event2);
			var currentState;
			if (state instanceof State) {
				currentState = context === void 0 ? state : this.resolveState(State.from(state, context));
			} else {
				var resolvedStateValue = isString(state)
					? this.resolve(pathToStateValue(this.getResolvedPath(state)))
					: this.resolve(state);
				var resolvedContext =
					context !== null && context !== void 0 ? context : this.machine.context;
				currentState = this.resolveState(State.from(resolvedStateValue, resolvedContext));
			}
			if (!IS_PRODUCTION && _event.name === WILDCARD) {
				throw new Error("An event cannot have the wildcard type ('" + WILDCARD + "')");
			}
			if (this.strict) {
				if (!this.events.includes(_event.name) && !isBuiltInEvent(_event.name)) {
					throw new Error("Machine '" + this.id + "' does not accept event '" + _event.name + "'");
				}
			}
			var stateTransition = this._transition(currentState.value, currentState, _event) || {
				transitions: [],
				configuration: [],
				entrySet: [],
				exitSet: [],
				source: currentState,
				actions: [],
			};
			var prevConfig = getConfiguration([], this.getStateNodes(currentState.value));
			var resolvedConfig = stateTransition.configuration.length
				? getConfiguration(prevConfig, stateTransition.configuration)
				: prevConfig;
			stateTransition.configuration = __spreadArray([], __read(resolvedConfig));
			return this.resolveTransition(stateTransition, currentState, _event);
		};
		StateNode2.prototype.resolveRaisedTransition = function (state, _event, originalEvent) {
			var _a;
			var currentActions = state.actions;
			state = this.transition(state, _event);
			state._event = originalEvent;
			state.event = originalEvent.data;
			(_a = state.actions).unshift.apply(_a, __spreadArray([], __read(currentActions)));
			return state;
		};
		StateNode2.prototype.resolveTransition = function (
			stateTransition,
			currentState,
			_event,
			context
		) {
			var e_6, _a;
			var _this = this;
			if (_event === void 0) {
				_event = initEvent;
			}
			if (context === void 0) {
				context = this.machine.context;
			}
			var configuration = stateTransition.configuration;
			var willTransition = !currentState || stateTransition.transitions.length > 0;
			var resolvedStateValue = willTransition ? getValue(this.machine, configuration) : void 0;
			var historyValue = currentState
				? currentState.historyValue
					? currentState.historyValue
					: stateTransition.source
					? this.machine.historyValue(currentState.value)
					: void 0
				: void 0;
			var currentContext = currentState ? currentState.context : context;
			var actions = this.getActions(stateTransition, currentContext, _event, currentState);
			var activities = currentState ? __assign2({}, currentState.activities) : {};
			try {
				for (
					var actions_1 = __values(actions), actions_1_1 = actions_1.next();
					!actions_1_1.done;
					actions_1_1 = actions_1.next()
				) {
					var action = actions_1_1.value;
					if (action.type === start) {
						activities[action.activity.id || action.activity.type] = action;
					} else if (action.type === stop) {
						activities[action.activity.id || action.activity.type] = false;
					}
				}
			} catch (e_6_1) {
				e_6 = {
					error: e_6_1,
				};
			} finally {
				try {
					if (actions_1_1 && !actions_1_1.done && (_a = actions_1.return)) _a.call(actions_1);
				} finally {
					if (e_6) throw e_6.error;
				}
			}
			var _b = __read(
					resolveActions(
						this,
						currentState,
						currentContext,
						_event,
						actions,
						this.machine.config.preserveActionOrder
					),
					2
				),
				resolvedActions = _b[0],
				updatedContext = _b[1];
			var _c = __read(
					partition(resolvedActions, function (action2) {
						return (
							action2.type === raise ||
							(action2.type === send && action2.to === SpecialTargets.Internal)
						);
					}),
					2
				),
				raisedEvents = _c[0],
				nonRaisedActions = _c[1];
			var invokeActions = resolvedActions.filter(function (action2) {
				var _a2;
				return (
					action2.type === start &&
					((_a2 = action2.activity) === null || _a2 === void 0 ? void 0 : _a2.type) === invoke
				);
			});
			var children2 = invokeActions.reduce(
				function (acc, action2) {
					acc[action2.activity.id] = createInvocableActor(
						action2.activity,
						_this.machine,
						updatedContext,
						_event
					);
					return acc;
				},
				currentState ? __assign2({}, currentState.children) : {}
			);
			var resolvedConfiguration = resolvedStateValue
				? stateTransition.configuration
				: currentState
				? currentState.configuration
				: [];
			var isDone = isInFinalState(resolvedConfiguration, this);
			var nextState = new State({
				value: resolvedStateValue || currentState.value,
				context: updatedContext,
				_event,
				_sessionid: currentState ? currentState._sessionid : null,
				historyValue: resolvedStateValue
					? historyValue
						? updateHistoryValue(historyValue, resolvedStateValue)
						: void 0
					: currentState
					? currentState.historyValue
					: void 0,
				history: !resolvedStateValue || stateTransition.source ? currentState : void 0,
				actions: resolvedStateValue ? nonRaisedActions : [],
				activities: resolvedStateValue ? activities : currentState ? currentState.activities : {},
				events: [],
				configuration: resolvedConfiguration,
				transitions: stateTransition.transitions,
				children: children2,
				done: isDone,
				tags: currentState === null || currentState === void 0 ? void 0 : currentState.tags,
			});
			var didUpdateContext = currentContext !== updatedContext;
			nextState.changed = _event.name === update || didUpdateContext;
			var history = nextState.history;
			if (history) {
				delete history.history;
			}
			var isTransient =
				!isDone &&
				(this._transient ||
					configuration.some(function (stateNode) {
						return stateNode._transient;
					}));
			if (!willTransition && (!isTransient || _event.name === NULL_EVENT)) {
				return nextState;
			}
			var maybeNextState = nextState;
			if (!isDone) {
				if (isTransient) {
					maybeNextState = this.resolveRaisedTransition(
						maybeNextState,
						{
							type: nullEvent,
						},
						_event
					);
				}
				while (raisedEvents.length) {
					var raisedEvent = raisedEvents.shift();
					maybeNextState = this.resolveRaisedTransition(maybeNextState, raisedEvent._event, _event);
				}
			}
			var changed =
				maybeNextState.changed ||
				(history
					? !!maybeNextState.actions.length ||
					  didUpdateContext ||
					  typeof history.value !== typeof maybeNextState.value ||
					  !stateValuesEqual(maybeNextState.value, history.value)
					: void 0);
			maybeNextState.changed = changed;
			maybeNextState.history = history;
			maybeNextState.tags = new Set(
				flatten(
					maybeNextState.configuration.map(function (sn) {
						return sn.tags;
					})
				)
			);
			return maybeNextState;
		};
		StateNode2.prototype.getStateNode = function (stateKey) {
			if (isStateId(stateKey)) {
				return this.machine.getStateNodeById(stateKey);
			}
			if (!this.states) {
				throw new Error(
					"Unable to retrieve child state '" +
						stateKey +
						"' from '" +
						this.id +
						"'; no child states exist."
				);
			}
			var result = this.states[stateKey];
			if (!result) {
				throw new Error("Child state '" + stateKey + "' does not exist on '" + this.id + "'");
			}
			return result;
		};
		StateNode2.prototype.getStateNodeById = function (stateId) {
			var resolvedStateId = isStateId(stateId) ? stateId.slice(STATE_IDENTIFIER.length) : stateId;
			if (resolvedStateId === this.id) {
				return this;
			}
			var stateNode = this.machine.idMap[resolvedStateId];
			if (!stateNode) {
				throw new Error(
					"Child state node '#" + resolvedStateId + "' does not exist on machine '" + this.id + "'"
				);
			}
			return stateNode;
		};
		StateNode2.prototype.getStateNodeByPath = function (statePath) {
			if (typeof statePath === "string" && isStateId(statePath)) {
				try {
					return this.getStateNodeById(statePath.slice(1));
				} catch (e) {}
			}
			var arrayStatePath = toStatePath(statePath, this.delimiter).slice();
			var currentStateNode = this;
			while (arrayStatePath.length) {
				var key = arrayStatePath.shift();
				if (!key.length) {
					break;
				}
				currentStateNode = currentStateNode.getStateNode(key);
			}
			return currentStateNode;
		};
		StateNode2.prototype.resolve = function (stateValue) {
			var _a;
			var _this = this;
			if (!stateValue) {
				return this.initialStateValue || EMPTY_OBJECT;
			}
			switch (this.type) {
				case "parallel":
					return mapValues(this.initialStateValue, function (subStateValue, subStateKey) {
						return subStateValue
							? _this.getStateNode(subStateKey).resolve(stateValue[subStateKey] || subStateValue)
							: EMPTY_OBJECT;
					});
				case "compound":
					if (isString(stateValue)) {
						var subStateNode = this.getStateNode(stateValue);
						if (subStateNode.type === "parallel" || subStateNode.type === "compound") {
							return (_a = {}), (_a[stateValue] = subStateNode.initialStateValue), _a;
						}
						return stateValue;
					}
					if (!keys(stateValue).length) {
						return this.initialStateValue || {};
					}
					return mapValues(stateValue, function (subStateValue, subStateKey) {
						return subStateValue
							? _this.getStateNode(subStateKey).resolve(subStateValue)
							: EMPTY_OBJECT;
					});
				default:
					return stateValue || EMPTY_OBJECT;
			}
		};
		StateNode2.prototype.getResolvedPath = function (stateIdentifier) {
			if (isStateId(stateIdentifier)) {
				var stateNode = this.machine.idMap[stateIdentifier.slice(STATE_IDENTIFIER.length)];
				if (!stateNode) {
					throw new Error("Unable to find state node '" + stateIdentifier + "'");
				}
				return stateNode.path;
			}
			return toStatePath(stateIdentifier, this.delimiter);
		};
		Object.defineProperty(StateNode2.prototype, "initialStateValue", {
			get: function () {
				var _a;
				if (this.__cache.initialStateValue) {
					return this.__cache.initialStateValue;
				}
				var initialStateValue;
				if (this.type === "parallel") {
					initialStateValue = mapFilterValues(
						this.states,
						function (state) {
							return state.initialStateValue || EMPTY_OBJECT;
						},
						function (stateNode) {
							return !(stateNode.type === "history");
						}
					);
				} else if (this.initial !== void 0) {
					if (!this.states[this.initial]) {
						throw new Error("Initial state '" + this.initial + "' not found on '" + this.key + "'");
					}
					initialStateValue = isLeafNode(this.states[this.initial])
						? this.initial
						: ((_a = {}), (_a[this.initial] = this.states[this.initial].initialStateValue), _a);
				} else {
					initialStateValue = {};
				}
				this.__cache.initialStateValue = initialStateValue;
				return this.__cache.initialStateValue;
			},
			enumerable: false,
			configurable: true,
		});
		StateNode2.prototype.getInitialState = function (stateValue, context) {
			var configuration = this.getStateNodes(stateValue);
			return this.resolveTransition(
				{
					configuration,
					entrySet: configuration,
					exitSet: [],
					transitions: [],
					source: void 0,
					actions: [],
				},
				void 0,
				void 0,
				context
			);
		};
		Object.defineProperty(StateNode2.prototype, "initialState", {
			get: function () {
				this._init();
				var initialStateValue = this.initialStateValue;
				if (!initialStateValue) {
					throw new Error("Cannot retrieve initial state from simple state '" + this.id + "'.");
				}
				return this.getInitialState(initialStateValue);
			},
			enumerable: false,
			configurable: true,
		});
		Object.defineProperty(StateNode2.prototype, "target", {
			get: function () {
				var target;
				if (this.type === "history") {
					var historyConfig = this.config;
					if (isString(historyConfig.target)) {
						target = isStateId(historyConfig.target)
							? pathToStateValue(
									this.machine
										.getStateNodeById(historyConfig.target)
										.path.slice(this.path.length - 1)
							  )
							: historyConfig.target;
					} else {
						target = historyConfig.target;
					}
				}
				return target;
			},
			enumerable: false,
			configurable: true,
		});
		StateNode2.prototype.getRelativeStateNodes = function (relativeStateId, historyValue, resolve) {
			if (resolve === void 0) {
				resolve = true;
			}
			return resolve
				? relativeStateId.type === "history"
					? relativeStateId.resolveHistory(historyValue)
					: relativeStateId.initialStateNodes
				: [relativeStateId];
		};
		Object.defineProperty(StateNode2.prototype, "initialStateNodes", {
			get: function () {
				var _this = this;
				if (isLeafNode(this)) {
					return [this];
				}
				if (this.type === "compound" && !this.initial) {
					if (!IS_PRODUCTION) {
						warn(false, "Compound state node '" + this.id + "' has no initial state.");
					}
					return [this];
				}
				var initialStateNodePaths = toStatePaths(this.initialStateValue);
				return flatten(
					initialStateNodePaths.map(function (initialPath) {
						return _this.getFromRelativePath(initialPath);
					})
				);
			},
			enumerable: false,
			configurable: true,
		});
		StateNode2.prototype.getFromRelativePath = function (relativePath) {
			if (!relativePath.length) {
				return [this];
			}
			var _a = __read(relativePath),
				stateKey = _a[0],
				childStatePath = _a.slice(1);
			if (!this.states) {
				throw new Error("Cannot retrieve subPath '" + stateKey + "' from node with no states");
			}
			var childStateNode = this.getStateNode(stateKey);
			if (childStateNode.type === "history") {
				return childStateNode.resolveHistory();
			}
			if (!this.states[stateKey]) {
				throw new Error("Child state '" + stateKey + "' does not exist on '" + this.id + "'");
			}
			return this.states[stateKey].getFromRelativePath(childStatePath);
		};
		StateNode2.prototype.historyValue = function (relativeStateValue) {
			if (!keys(this.states).length) {
				return void 0;
			}
			return {
				current: relativeStateValue || this.initialStateValue,
				states: mapFilterValues(
					this.states,
					function (stateNode, key) {
						if (!relativeStateValue) {
							return stateNode.historyValue();
						}
						var subStateValue = isString(relativeStateValue) ? void 0 : relativeStateValue[key];
						return stateNode.historyValue(subStateValue || stateNode.initialStateValue);
					},
					function (stateNode) {
						return !stateNode.history;
					}
				),
			};
		};
		StateNode2.prototype.resolveHistory = function (historyValue) {
			var _this = this;
			if (this.type !== "history") {
				return [this];
			}
			var parent = this.parent;
			if (!historyValue) {
				var historyTarget = this.target;
				return historyTarget
					? flatten(
							toStatePaths(historyTarget).map(function (relativeChildPath) {
								return parent.getFromRelativePath(relativeChildPath);
							})
					  )
					: parent.initialStateNodes;
			}
			var subHistoryValue = nestedPath(parent.path, "states")(historyValue).current;
			if (isString(subHistoryValue)) {
				return [parent.getStateNode(subHistoryValue)];
			}
			return flatten(
				toStatePaths(subHistoryValue).map(function (subStatePath) {
					return _this.history === "deep"
						? parent.getFromRelativePath(subStatePath)
						: [parent.states[subStatePath[0]]];
				})
			);
		};
		Object.defineProperty(StateNode2.prototype, "stateIds", {
			get: function () {
				var _this = this;
				var childStateIds = flatten(
					keys(this.states).map(function (stateKey) {
						return _this.states[stateKey].stateIds;
					})
				);
				return [this.id].concat(childStateIds);
			},
			enumerable: false,
			configurable: true,
		});
		Object.defineProperty(StateNode2.prototype, "events", {
			get: function () {
				var e_7, _a, e_8, _b;
				if (this.__cache.events) {
					return this.__cache.events;
				}
				var states = this.states;
				var events = new Set(this.ownEvents);
				if (states) {
					try {
						for (var _c = __values(keys(states)), _d = _c.next(); !_d.done; _d = _c.next()) {
							var stateId = _d.value;
							var state = states[stateId];
							if (state.states) {
								try {
									for (
										var _e = ((e_8 = void 0), __values(state.events)), _f = _e.next();
										!_f.done;
										_f = _e.next()
									) {
										var event_1 = _f.value;
										events.add("" + event_1);
									}
								} catch (e_8_1) {
									e_8 = {
										error: e_8_1,
									};
								} finally {
									try {
										if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
									} finally {
										if (e_8) throw e_8.error;
									}
								}
							}
						}
					} catch (e_7_1) {
						e_7 = {
							error: e_7_1,
						};
					} finally {
						try {
							if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
						} finally {
							if (e_7) throw e_7.error;
						}
					}
				}
				return (this.__cache.events = Array.from(events));
			},
			enumerable: false,
			configurable: true,
		});
		Object.defineProperty(StateNode2.prototype, "ownEvents", {
			get: function () {
				var events = new Set(
					this.transitions
						.filter(function (transition) {
							return !(!transition.target && !transition.actions.length && transition.internal);
						})
						.map(function (transition) {
							return transition.eventType;
						})
				);
				return Array.from(events);
			},
			enumerable: false,
			configurable: true,
		});
		StateNode2.prototype.resolveTarget = function (_target) {
			var _this = this;
			if (_target === void 0) {
				return void 0;
			}
			return _target.map(function (target) {
				if (!isString(target)) {
					return target;
				}
				var isInternalTarget = target[0] === _this.delimiter;
				if (isInternalTarget && !_this.parent) {
					return _this.getStateNodeByPath(target.slice(1));
				}
				var resolvedTarget = isInternalTarget ? _this.key + target : target;
				if (_this.parent) {
					try {
						var targetStateNode = _this.parent.getStateNodeByPath(resolvedTarget);
						return targetStateNode;
					} catch (err) {
						throw new Error(
							"Invalid transition definition for state node '" + _this.id + "':\n" + err.message
						);
					}
				} else {
					return _this.getStateNodeByPath(resolvedTarget);
				}
			});
		};
		StateNode2.prototype.formatTransition = function (transitionConfig) {
			var _this = this;
			var normalizedTarget = normalizeTarget(transitionConfig.target);
			var internal =
				"internal" in transitionConfig
					? transitionConfig.internal
					: normalizedTarget
					? normalizedTarget.some(function (_target) {
							return isString(_target) && _target[0] === _this.delimiter;
					  })
					: true;
			var guards = this.machine.options.guards;
			var target = this.resolveTarget(normalizedTarget);
			var transition = __assign2(__assign2({}, transitionConfig), {
				actions: toActionObjects(toArray(transitionConfig.actions)),
				cond: toGuard(transitionConfig.cond, guards),
				target,
				source: this,
				internal,
				eventType: transitionConfig.event,
				toJSON: function () {
					return __assign2(__assign2({}, transition), {
						target: transition.target
							? transition.target.map(function (t) {
									return "#" + t.id;
							  })
							: void 0,
						source: "#" + _this.id,
					});
				},
			});
			return transition;
		};
		StateNode2.prototype.formatTransitions = function () {
			var e_9, _a;
			var _this = this;
			var onConfig;
			if (!this.config.on) {
				onConfig = [];
			} else if (Array.isArray(this.config.on)) {
				onConfig = this.config.on;
			} else {
				var _b = this.config.on,
					_c = WILDCARD,
					_d = _b[_c],
					wildcardConfigs = _d === void 0 ? [] : _d,
					strictTransitionConfigs_1 = __rest(_b, [typeof _c === "symbol" ? _c : _c + ""]);
				onConfig = flatten(
					keys(strictTransitionConfigs_1)
						.map(function (key) {
							if (!IS_PRODUCTION && key === NULL_EVENT) {
								warn(
									false,
									"Empty string transition configs (e.g., `{ on: { '': ... }}`) for transient transitions are deprecated. Specify the transition in the `{ always: ... }` property instead. " +
										('Please check the `on` configuration for "#' + _this.id + '".')
								);
							}
							var transitionConfigArray = toTransitionConfigArray(
								key,
								strictTransitionConfigs_1[key]
							);
							if (!IS_PRODUCTION) {
								validateArrayifiedTransitions(_this, key, transitionConfigArray);
							}
							return transitionConfigArray;
						})
						.concat(toTransitionConfigArray(WILDCARD, wildcardConfigs))
				);
			}
			var eventlessConfig = this.config.always
				? toTransitionConfigArray("", this.config.always)
				: [];
			var doneConfig = this.config.onDone
				? toTransitionConfigArray(String(done(this.id)), this.config.onDone)
				: [];
			if (!IS_PRODUCTION) {
				warn(
					!(this.config.onDone && !this.parent),
					'Root nodes cannot have an ".onDone" transition. Please check the config of "' +
						this.id +
						'".'
				);
			}
			var invokeConfig = flatten(
				this.invoke.map(function (invokeDef) {
					var settleTransitions = [];
					if (invokeDef.onDone) {
						settleTransitions.push.apply(
							settleTransitions,
							__spreadArray(
								[],
								__read(toTransitionConfigArray(String(doneInvoke(invokeDef.id)), invokeDef.onDone))
							)
						);
					}
					if (invokeDef.onError) {
						settleTransitions.push.apply(
							settleTransitions,
							__spreadArray(
								[],
								__read(toTransitionConfigArray(String(error2(invokeDef.id)), invokeDef.onError))
							)
						);
					}
					return settleTransitions;
				})
			);
			var delayedTransitions = this.after;
			var formattedTransitions = flatten(
				__spreadArray(
					__spreadArray(
						__spreadArray(__spreadArray([], __read(doneConfig)), __read(invokeConfig)),
						__read(onConfig)
					),
					__read(eventlessConfig)
				).map(function (transitionConfig) {
					return toArray(transitionConfig).map(function (transition) {
						return _this.formatTransition(transition);
					});
				})
			);
			try {
				for (
					var delayedTransitions_1 = __values(delayedTransitions),
						delayedTransitions_1_1 = delayedTransitions_1.next();
					!delayedTransitions_1_1.done;
					delayedTransitions_1_1 = delayedTransitions_1.next()
				) {
					var delayedTransition = delayedTransitions_1_1.value;
					formattedTransitions.push(delayedTransition);
				}
			} catch (e_9_1) {
				e_9 = {
					error: e_9_1,
				};
			} finally {
				try {
					if (
						delayedTransitions_1_1 &&
						!delayedTransitions_1_1.done &&
						(_a = delayedTransitions_1.return)
					)
						_a.call(delayedTransitions_1);
				} finally {
					if (e_9) throw e_9.error;
				}
			}
			return formattedTransitions;
		};
		return StateNode2;
	})();

	// ../../node_modules/xstate/es/Machine.js
	function createMachine(config, options) {
		return new StateNode(config, options);
	}

	// ../../node_modules/xstate/es/scheduler.js
	var defaultOptions = {
		deferEvents: false,
	};
	var Scheduler = /* @__PURE__ */ (function () {
		function Scheduler2(options) {
			this.processingEvent = false;
			this.queue = [];
			this.initialized = false;
			this.options = __assign2(__assign2({}, defaultOptions), options);
		}
		Scheduler2.prototype.initialize = function (callback) {
			this.initialized = true;
			if (callback) {
				if (!this.options.deferEvents) {
					this.schedule(callback);
					return;
				}
				this.process(callback);
			}
			this.flushEvents();
		};
		Scheduler2.prototype.schedule = function (task) {
			if (!this.initialized || this.processingEvent) {
				this.queue.push(task);
				return;
			}
			if (this.queue.length !== 0) {
				throw new Error("Event queue should be empty when it is not processing events");
			}
			this.process(task);
			this.flushEvents();
		};
		Scheduler2.prototype.clear = function () {
			this.queue = [];
		};
		Scheduler2.prototype.flushEvents = function () {
			var nextCallback = this.queue.shift();
			while (nextCallback) {
				this.process(nextCallback);
				nextCallback = this.queue.shift();
			}
		};
		Scheduler2.prototype.process = function (callback) {
			this.processingEvent = true;
			try {
				callback();
			} catch (e) {
				this.clear();
				throw e;
			} finally {
				this.processingEvent = false;
			}
		};
		return Scheduler2;
	})();

	// ../../node_modules/xstate/es/registry.js
	var children = /* @__PURE__ */ new Map();
	var sessionIdIndex = 0;
	var registry = {
		bookId: function () {
			return "x:" + sessionIdIndex++;
		},
		register: function (id, actor) {
			children.set(id, actor);
			return id;
		},
		get: function (id) {
			return children.get(id);
		},
		free: function (id) {
			children.delete(id);
		},
	};

	// ../../node_modules/xstate/es/devTools.js
	function getGlobal() {
		if (typeof self !== "undefined") {
			return self;
		}
		if (typeof window !== "undefined") {
			return window;
		}
		if (typeof global !== "undefined") {
			return global;
		}
		return void 0;
	}
	function getDevTools() {
		var global2 = getGlobal();
		if (global2 && "__xstate__" in global2) {
			return global2.__xstate__;
		}
		return void 0;
	}
	function registerService(service) {
		if (!getGlobal()) {
			return;
		}
		var devTools = getDevTools();
		if (devTools) {
			devTools.register(service);
		}
	}

	// ../../node_modules/xstate/es/behaviors.js
	function spawnBehavior(behavior, options) {
		if (options === void 0) {
			options = {};
		}
		var state = behavior.initialState;
		var observers = new Set();
		var mailbox = [];
		var flushing = false;
		var flush = function () {
			if (flushing) {
				return;
			}
			flushing = true;
			while (mailbox.length > 0) {
				var event_1 = mailbox.shift();
				state = behavior.transition(state, event_1, actorCtx);
				observers.forEach(function (observer) {
					return observer.next(state);
				});
			}
			flushing = false;
		};
		var actor = toActorRef({
			id: options.id,
			send: function (event2) {
				mailbox.push(event2);
				flush();
			},
			getSnapshot: function () {
				return state;
			},
			subscribe: function (next, handleError, complete) {
				var observer = toObserver(next, handleError, complete);
				observers.add(observer);
				observer.next(state);
				return {
					unsubscribe: function () {
						observers.delete(observer);
					},
				};
			},
		});
		var actorCtx = {
			parent: options.parent,
			self: actor,
			id: options.id || "anonymous",
			observers,
		};
		state = behavior.start ? behavior.start(actorCtx) : state;
		return actor;
	}

	// ../../node_modules/xstate/es/interpreter.js
	var DEFAULT_SPAWN_OPTIONS = {
		sync: false,
		autoForward: false,
	};
	var InterpreterStatus;
	(function (InterpreterStatus2) {
		InterpreterStatus2[(InterpreterStatus2["NotStarted"] = 0)] = "NotStarted";
		InterpreterStatus2[(InterpreterStatus2["Running"] = 1)] = "Running";
		InterpreterStatus2[(InterpreterStatus2["Stopped"] = 2)] = "Stopped";
	})(InterpreterStatus || (InterpreterStatus = {}));
	var Interpreter = /* @__PURE__ */ (function () {
		function Interpreter2(machine2, options) {
			var _this = this;
			if (options === void 0) {
				options = Interpreter2.defaultOptions;
			}
			this.machine = machine2;
			this.scheduler = new Scheduler();
			this.delayedEventsMap = {};
			this.listeners = new Set();
			this.contextListeners = new Set();
			this.stopListeners = new Set();
			this.doneListeners = new Set();
			this.eventListeners = new Set();
			this.sendListeners = new Set();
			this.initialized = false;
			this.status = InterpreterStatus.NotStarted;
			this.children = new Map();
			this.forwardTo = new Set();
			this.init = this.start;
			this.send = function (event2, payload) {
				if (isArray(event2)) {
					_this.batch(event2);
					return _this.state;
				}
				var _event = toSCXMLEvent(toEventObject(event2, payload));
				if (_this.status === InterpreterStatus.Stopped) {
					if (!IS_PRODUCTION) {
						warn(
							false,
							'Event "' +
								_event.name +
								'" was sent to stopped service "' +
								_this.machine.id +
								'". This service has already reached its final state, and will not transition.\nEvent: ' +
								JSON.stringify(_event.data)
						);
					}
					return _this.state;
				}
				if (_this.status !== InterpreterStatus.Running && !_this.options.deferEvents) {
					throw new Error(
						'Event "' +
							_event.name +
							'" was sent to uninitialized service "' +
							_this.machine.id +
							'". Make sure .start() is called for this service, or set { deferEvents: true } in the service options.\nEvent: ' +
							JSON.stringify(_event.data)
					);
				}
				_this.scheduler.schedule(function () {
					_this.forward(_event);
					var nextState = _this.nextState(_event);
					_this.update(nextState, _event);
				});
				return _this._state;
			};
			this.sendTo = function (event2, to) {
				var isParent = _this.parent && (to === SpecialTargets.Parent || _this.parent.id === to);
				var target = isParent
					? _this.parent
					: isString(to)
					? _this.children.get(to) || registry.get(to)
					: isActor(to)
					? to
					: void 0;
				if (!target) {
					if (!isParent) {
						throw new Error(
							"Unable to send event to child '" + to + "' from service '" + _this.id + "'."
						);
					}
					if (!IS_PRODUCTION) {
						warn(
							false,
							"Service '" + _this.id + "' has no parent: unable to send event " + event2.type
						);
					}
					return;
				}
				if ("machine" in target) {
					target.send(
						__assign2(__assign2({}, event2), {
							name: event2.name === error ? "" + error2(_this.id) : event2.name,
							origin: _this.sessionId,
						})
					);
				} else {
					target.send(event2.data);
				}
			};
			var resolvedOptions = __assign2(__assign2({}, Interpreter2.defaultOptions), options);
			var clock = resolvedOptions.clock,
				logger14 = resolvedOptions.logger,
				parent = resolvedOptions.parent,
				id = resolvedOptions.id;
			var resolvedId = id !== void 0 ? id : machine2.id;
			this.id = resolvedId;
			this.logger = logger14;
			this.clock = clock;
			this.parent = parent;
			this.options = resolvedOptions;
			this.scheduler = new Scheduler({
				deferEvents: this.options.deferEvents,
			});
			this.sessionId = registry.bookId();
		}
		Object.defineProperty(Interpreter2.prototype, "initialState", {
			get: function () {
				var _this = this;
				if (this._initialState) {
					return this._initialState;
				}
				return provide(this, function () {
					_this._initialState = _this.machine.initialState;
					return _this._initialState;
				});
			},
			enumerable: false,
			configurable: true,
		});
		Object.defineProperty(Interpreter2.prototype, "state", {
			get: function () {
				if (!IS_PRODUCTION) {
					warn(
						this.status !== InterpreterStatus.NotStarted,
						"Attempted to read state from uninitialized service '" +
							this.id +
							"'. Make sure the service is started first."
					);
				}
				return this._state;
			},
			enumerable: false,
			configurable: true,
		});
		Interpreter2.prototype.execute = function (state, actionsConfig) {
			var e_1, _a;
			try {
				for (var _b = __values(state.actions), _c = _b.next(); !_c.done; _c = _b.next()) {
					var action = _c.value;
					this.exec(action, state, actionsConfig);
				}
			} catch (e_1_1) {
				e_1 = {
					error: e_1_1,
				};
			} finally {
				try {
					if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
				} finally {
					if (e_1) throw e_1.error;
				}
			}
		};
		Interpreter2.prototype.update = function (state, _event) {
			var e_2, _a, e_3, _b, e_4, _c, e_5, _d;
			var _this = this;
			state._sessionid = this.sessionId;
			this._state = state;
			if (this.options.execute) {
				this.execute(this.state);
			}
			this.children.forEach(function (child) {
				_this.state.children[child.id] = child;
			});
			if (this.devTools) {
				this.devTools.send(_event.data, state);
			}
			if (state.event) {
				try {
					for (var _e = __values(this.eventListeners), _f = _e.next(); !_f.done; _f = _e.next()) {
						var listener = _f.value;
						listener(state.event);
					}
				} catch (e_2_1) {
					e_2 = {
						error: e_2_1,
					};
				} finally {
					try {
						if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
					} finally {
						if (e_2) throw e_2.error;
					}
				}
			}
			try {
				for (var _g = __values(this.listeners), _h = _g.next(); !_h.done; _h = _g.next()) {
					var listener = _h.value;
					listener(state, state.event);
				}
			} catch (e_3_1) {
				e_3 = {
					error: e_3_1,
				};
			} finally {
				try {
					if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
				} finally {
					if (e_3) throw e_3.error;
				}
			}
			try {
				for (var _j = __values(this.contextListeners), _k = _j.next(); !_k.done; _k = _j.next()) {
					var contextListener = _k.value;
					contextListener(
						this.state.context,
						this.state.history ? this.state.history.context : void 0
					);
				}
			} catch (e_4_1) {
				e_4 = {
					error: e_4_1,
				};
			} finally {
				try {
					if (_k && !_k.done && (_c = _j.return)) _c.call(_j);
				} finally {
					if (e_4) throw e_4.error;
				}
			}
			var isDone = isInFinalState(state.configuration || [], this.machine);
			if (this.state.configuration && isDone) {
				var finalChildStateNode = state.configuration.find(function (sn) {
					return sn.type === "final" && sn.parent === _this.machine;
				});
				var doneData =
					finalChildStateNode && finalChildStateNode.doneData
						? mapContext(finalChildStateNode.doneData, state.context, _event)
						: void 0;
				try {
					for (var _l = __values(this.doneListeners), _m = _l.next(); !_m.done; _m = _l.next()) {
						var listener = _m.value;
						listener(doneInvoke(this.id, doneData));
					}
				} catch (e_5_1) {
					e_5 = {
						error: e_5_1,
					};
				} finally {
					try {
						if (_m && !_m.done && (_d = _l.return)) _d.call(_l);
					} finally {
						if (e_5) throw e_5.error;
					}
				}
				this.stop();
			}
		};
		Interpreter2.prototype.onTransition = function (listener) {
			this.listeners.add(listener);
			if (this.status === InterpreterStatus.Running) {
				listener(this.state, this.state.event);
			}
			return this;
		};
		Interpreter2.prototype.subscribe = function (nextListenerOrObserver, _, completeListener) {
			var _this = this;
			if (!nextListenerOrObserver) {
				return {
					unsubscribe: function () {
						return void 0;
					},
				};
			}
			var listener;
			var resolvedCompleteListener = completeListener;
			if (typeof nextListenerOrObserver === "function") {
				listener = nextListenerOrObserver;
			} else {
				listener = nextListenerOrObserver.next.bind(nextListenerOrObserver);
				resolvedCompleteListener = nextListenerOrObserver.complete.bind(nextListenerOrObserver);
			}
			this.listeners.add(listener);
			if (this.status === InterpreterStatus.Running) {
				listener(this.state);
			}
			if (resolvedCompleteListener) {
				this.onDone(resolvedCompleteListener);
			}
			return {
				unsubscribe: function () {
					listener && _this.listeners.delete(listener);
					resolvedCompleteListener && _this.doneListeners.delete(resolvedCompleteListener);
				},
			};
		};
		Interpreter2.prototype.onEvent = function (listener) {
			this.eventListeners.add(listener);
			return this;
		};
		Interpreter2.prototype.onSend = function (listener) {
			this.sendListeners.add(listener);
			return this;
		};
		Interpreter2.prototype.onChange = function (listener) {
			this.contextListeners.add(listener);
			return this;
		};
		Interpreter2.prototype.onStop = function (listener) {
			this.stopListeners.add(listener);
			return this;
		};
		Interpreter2.prototype.onDone = function (listener) {
			this.doneListeners.add(listener);
			return this;
		};
		Interpreter2.prototype.off = function (listener) {
			this.listeners.delete(listener);
			this.eventListeners.delete(listener);
			this.sendListeners.delete(listener);
			this.stopListeners.delete(listener);
			this.doneListeners.delete(listener);
			this.contextListeners.delete(listener);
			return this;
		};
		Interpreter2.prototype.start = function (initialState) {
			var _this = this;
			if (this.status === InterpreterStatus.Running) {
				return this;
			}
			registry.register(this.sessionId, this);
			this.initialized = true;
			this.status = InterpreterStatus.Running;
			var resolvedState =
				initialState === void 0
					? this.initialState
					: provide(this, function () {
							return isState(initialState)
								? _this.machine.resolveState(initialState)
								: _this.machine.resolveState(State.from(initialState, _this.machine.context));
					  });
			if (this.options.devTools) {
				this.attachDev();
			}
			this.scheduler.initialize(function () {
				_this.update(resolvedState, initEvent);
			});
			return this;
		};
		Interpreter2.prototype.stop = function () {
			var e_6, _a, e_7, _b, e_8, _c, e_9, _d, e_10, _e;
			var _this = this;
			try {
				for (var _f = __values(this.listeners), _g = _f.next(); !_g.done; _g = _f.next()) {
					var listener = _g.value;
					this.listeners.delete(listener);
				}
			} catch (e_6_1) {
				e_6 = {
					error: e_6_1,
				};
			} finally {
				try {
					if (_g && !_g.done && (_a = _f.return)) _a.call(_f);
				} finally {
					if (e_6) throw e_6.error;
				}
			}
			try {
				for (var _h = __values(this.stopListeners), _j = _h.next(); !_j.done; _j = _h.next()) {
					var listener = _j.value;
					listener();
					this.stopListeners.delete(listener);
				}
			} catch (e_7_1) {
				e_7 = {
					error: e_7_1,
				};
			} finally {
				try {
					if (_j && !_j.done && (_b = _h.return)) _b.call(_h);
				} finally {
					if (e_7) throw e_7.error;
				}
			}
			try {
				for (var _k = __values(this.contextListeners), _l = _k.next(); !_l.done; _l = _k.next()) {
					var listener = _l.value;
					this.contextListeners.delete(listener);
				}
			} catch (e_8_1) {
				e_8 = {
					error: e_8_1,
				};
			} finally {
				try {
					if (_l && !_l.done && (_c = _k.return)) _c.call(_k);
				} finally {
					if (e_8) throw e_8.error;
				}
			}
			try {
				for (var _m = __values(this.doneListeners), _o = _m.next(); !_o.done; _o = _m.next()) {
					var listener = _o.value;
					this.doneListeners.delete(listener);
				}
			} catch (e_9_1) {
				e_9 = {
					error: e_9_1,
				};
			} finally {
				try {
					if (_o && !_o.done && (_d = _m.return)) _d.call(_m);
				} finally {
					if (e_9) throw e_9.error;
				}
			}
			if (!this.initialized) {
				return this;
			}
			this.state.configuration.forEach(function (stateNode) {
				var e_11, _a2;
				try {
					for (
						var _b2 = __values(stateNode.definition.exit), _c2 = _b2.next();
						!_c2.done;
						_c2 = _b2.next()
					) {
						var action = _c2.value;
						_this.exec(action, _this.state);
					}
				} catch (e_11_1) {
					e_11 = {
						error: e_11_1,
					};
				} finally {
					try {
						if (_c2 && !_c2.done && (_a2 = _b2.return)) _a2.call(_b2);
					} finally {
						if (e_11) throw e_11.error;
					}
				}
			});
			this.children.forEach(function (child) {
				if (isFunction(child.stop)) {
					child.stop();
				}
			});
			try {
				for (
					var _p = __values(keys(this.delayedEventsMap)), _q = _p.next();
					!_q.done;
					_q = _p.next()
				) {
					var key = _q.value;
					this.clock.clearTimeout(this.delayedEventsMap[key]);
				}
			} catch (e_10_1) {
				e_10 = {
					error: e_10_1,
				};
			} finally {
				try {
					if (_q && !_q.done && (_e = _p.return)) _e.call(_p);
				} finally {
					if (e_10) throw e_10.error;
				}
			}
			this.scheduler.clear();
			this.initialized = false;
			this.status = InterpreterStatus.Stopped;
			registry.free(this.sessionId);
			return this;
		};
		Interpreter2.prototype.batch = function (events) {
			var _this = this;
			if (this.status === InterpreterStatus.NotStarted && this.options.deferEvents) {
				if (!IS_PRODUCTION) {
					warn(
						false,
						events.length +
							' event(s) were sent to uninitialized service "' +
							this.machine.id +
							'" and are deferred. Make sure .start() is called for this service.\nEvent: ' +
							JSON.stringify(event)
					);
				}
			} else if (this.status !== InterpreterStatus.Running) {
				throw new Error(
					events.length +
						' event(s) were sent to uninitialized service "' +
						this.machine.id +
						'". Make sure .start() is called for this service, or set { deferEvents: true } in the service options.'
				);
			}
			this.scheduler.schedule(function () {
				var e_12, _a;
				var nextState = _this.state;
				var batchChanged = false;
				var batchedActions = [];
				var _loop_1 = function (event_12) {
					var _event = toSCXMLEvent(event_12);
					_this.forward(_event);
					nextState = provide(_this, function () {
						return _this.machine.transition(nextState, _event);
					});
					batchedActions.push.apply(
						batchedActions,
						__spreadArray(
							[],
							__read(
								nextState.actions.map(function (a) {
									return bindActionToState(a, nextState);
								})
							)
						)
					);
					batchChanged = batchChanged || !!nextState.changed;
				};
				try {
					for (
						var events_1 = __values(events), events_1_1 = events_1.next();
						!events_1_1.done;
						events_1_1 = events_1.next()
					) {
						var event_1 = events_1_1.value;
						_loop_1(event_1);
					}
				} catch (e_12_1) {
					e_12 = {
						error: e_12_1,
					};
				} finally {
					try {
						if (events_1_1 && !events_1_1.done && (_a = events_1.return)) _a.call(events_1);
					} finally {
						if (e_12) throw e_12.error;
					}
				}
				nextState.changed = batchChanged;
				nextState.actions = batchedActions;
				_this.update(nextState, toSCXMLEvent(events[events.length - 1]));
			});
		};
		Interpreter2.prototype.sender = function (event2) {
			return this.send.bind(this, event2);
		};
		Interpreter2.prototype.nextState = function (event2) {
			var _this = this;
			var _event = toSCXMLEvent(event2);
			if (
				_event.name.indexOf(errorPlatform) === 0 &&
				!this.state.nextEvents.some(function (nextEvent) {
					return nextEvent.indexOf(errorPlatform) === 0;
				})
			) {
				throw _event.data.data;
			}
			var nextState = provide(this, function () {
				return _this.machine.transition(_this.state, _event);
			});
			return nextState;
		};
		Interpreter2.prototype.forward = function (event2) {
			var e_13, _a;
			try {
				for (var _b = __values(this.forwardTo), _c = _b.next(); !_c.done; _c = _b.next()) {
					var id = _c.value;
					var child = this.children.get(id);
					if (!child) {
						throw new Error(
							"Unable to forward event '" +
								event2 +
								"' from interpreter '" +
								this.id +
								"' to nonexistant child '" +
								id +
								"'."
						);
					}
					child.send(event2);
				}
			} catch (e_13_1) {
				e_13 = {
					error: e_13_1,
				};
			} finally {
				try {
					if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
				} finally {
					if (e_13) throw e_13.error;
				}
			}
		};
		Interpreter2.prototype.defer = function (sendAction) {
			var _this = this;
			this.delayedEventsMap[sendAction.id] = this.clock.setTimeout(function () {
				if (sendAction.to) {
					_this.sendTo(sendAction._event, sendAction.to);
				} else {
					_this.send(sendAction._event);
				}
			}, sendAction.delay);
		};
		Interpreter2.prototype.cancel = function (sendId) {
			this.clock.clearTimeout(this.delayedEventsMap[sendId]);
			delete this.delayedEventsMap[sendId];
		};
		Interpreter2.prototype.exec = function (action, state, actionFunctionMap) {
			if (actionFunctionMap === void 0) {
				actionFunctionMap = this.machine.options.actions;
			}
			var context = state.context,
				_event = state._event;
			var actionOrExec = action.exec || getActionFunction(action.type, actionFunctionMap);
			var exec = isFunction(actionOrExec)
				? actionOrExec
				: actionOrExec
				? actionOrExec.exec
				: action.exec;
			if (exec) {
				try {
					return exec(context, _event.data, {
						action,
						state: this.state,
						_event,
					});
				} catch (err) {
					if (this.parent) {
						this.parent.send({
							type: "xstate.error",
							data: err,
						});
					}
					throw err;
				}
			}
			switch (action.type) {
				case send:
					var sendAction = action;
					if (typeof sendAction.delay === "number") {
						this.defer(sendAction);
						return;
					} else {
						if (sendAction.to) {
							this.sendTo(sendAction._event, sendAction.to);
						} else {
							this.send(sendAction._event);
						}
					}
					break;
				case cancel:
					this.cancel(action.sendId);
					break;
				case start: {
					var activity = action.activity;
					if (!this.state.activities[activity.id || activity.type]) {
						break;
					}
					if (activity.type === ActionTypes.Invoke) {
						var invokeSource = toInvokeSource(activity.src);
						var serviceCreator = this.machine.options.services
							? this.machine.options.services[invokeSource.type]
							: void 0;
						var id = activity.id,
							data = activity.data;
						if (!IS_PRODUCTION) {
							warn(
								!("forward" in activity),
								"`forward` property is deprecated (found in invocation of '" +
									activity.src +
									"' in in machine '" +
									this.machine.id +
									"'). Please use `autoForward` instead."
							);
						}
						var autoForward = "autoForward" in activity ? activity.autoForward : !!activity.forward;
						if (!serviceCreator) {
							if (!IS_PRODUCTION) {
								warn(
									false,
									"No service found for invocation '" +
										activity.src +
										"' in machine '" +
										this.machine.id +
										"'."
								);
							}
							return;
						}
						var resolvedData = data ? mapContext(data, context, _event) : void 0;
						if (typeof serviceCreator === "string") {
							return;
						}
						var source = isFunction(serviceCreator)
							? serviceCreator(context, _event.data, {
									data: resolvedData,
									src: invokeSource,
							  })
							: serviceCreator;
						if (!source) {
							return;
						}
						var options = void 0;
						if (isMachine(source)) {
							source = resolvedData ? source.withContext(resolvedData) : source;
							options = {
								autoForward,
							};
						}
						this.spawn(source, id, options);
					} else {
						this.spawnActivity(activity);
					}
					break;
				}
				case stop: {
					this.stopChild(action.activity.id);
					break;
				}
				case log:
					var label = action.label,
						value = action.value;
					if (label) {
						this.logger(label, value);
					} else {
						this.logger(value);
					}
					break;
				default:
					if (!IS_PRODUCTION) {
						warn(false, "No implementation found for action type '" + action.type + "'");
					}
					break;
			}
			return void 0;
		};
		Interpreter2.prototype.removeChild = function (childId) {
			this.children.delete(childId);
			this.forwardTo.delete(childId);
			delete this.state.children[childId];
		};
		Interpreter2.prototype.stopChild = function (childId) {
			var child = this.children.get(childId);
			if (!child) {
				return;
			}
			this.removeChild(childId);
			if (isFunction(child.stop)) {
				child.stop();
			}
		};
		Interpreter2.prototype.spawn = function (entity, name2, options) {
			if (isPromiseLike(entity)) {
				return this.spawnPromise(Promise.resolve(entity), name2);
			} else if (isFunction(entity)) {
				return this.spawnCallback(entity, name2);
			} else if (isSpawnedActor(entity)) {
				return this.spawnActor(entity, name2);
			} else if (isObservable(entity)) {
				return this.spawnObservable(entity, name2);
			} else if (isMachine(entity)) {
				return this.spawnMachine(
					entity,
					__assign2(__assign2({}, options), {
						id: name2,
					})
				);
			} else if (isBehavior(entity)) {
				return this.spawnBehavior(entity, name2);
			} else {
				throw new Error('Unable to spawn entity "' + name2 + '" of type "' + typeof entity + '".');
			}
		};
		Interpreter2.prototype.spawnMachine = function (machine2, options) {
			var _this = this;
			if (options === void 0) {
				options = {};
			}
			var childService = new Interpreter2(
				machine2,
				__assign2(__assign2({}, this.options), {
					parent: this,
					id: options.id || machine2.id,
				})
			);
			var resolvedOptions = __assign2(__assign2({}, DEFAULT_SPAWN_OPTIONS), options);
			if (resolvedOptions.sync) {
				childService.onTransition(function (state) {
					_this.send(update, {
						state,
						id: childService.id,
					});
				});
			}
			var actor = childService;
			this.children.set(childService.id, actor);
			if (resolvedOptions.autoForward) {
				this.forwardTo.add(childService.id);
			}
			childService
				.onDone(function (doneEvent) {
					_this.removeChild(childService.id);
					_this.send(
						toSCXMLEvent(doneEvent, {
							origin: childService.id,
						})
					);
				})
				.start();
			return actor;
		};
		Interpreter2.prototype.spawnBehavior = function (behavior, id) {
			var actorRef = spawnBehavior(behavior, {
				id,
				parent: this,
			});
			this.children.set(id, actorRef);
			return actorRef;
		};
		Interpreter2.prototype.spawnPromise = function (promise, id) {
			var _this = this;
			var canceled = false;
			var resolvedData;
			promise.then(
				function (response) {
					if (!canceled) {
						resolvedData = response;
						_this.removeChild(id);
						_this.send(
							toSCXMLEvent(doneInvoke(id, response), {
								origin: id,
							})
						);
					}
				},
				function (errorData) {
					if (!canceled) {
						_this.removeChild(id);
						var errorEvent = error2(id, errorData);
						try {
							_this.send(
								toSCXMLEvent(errorEvent, {
									origin: id,
								})
							);
						} catch (error3) {
							reportUnhandledExceptionOnInvocation(errorData, error3, id);
							if (_this.devTools) {
								_this.devTools.send(errorEvent, _this.state);
							}
							if (_this.machine.strict) {
								_this.stop();
							}
						}
					}
				}
			);
			var actor = {
				id,
				send: function () {
					return void 0;
				},
				subscribe: function (next, handleError, complete) {
					var observer = toObserver(next, handleError, complete);
					var unsubscribed = false;
					promise.then(
						function (response) {
							if (unsubscribed) {
								return;
							}
							observer.next(response);
							if (unsubscribed) {
								return;
							}
							observer.complete();
						},
						function (err) {
							if (unsubscribed) {
								return;
							}
							observer.error(err);
						}
					);
					return {
						unsubscribe: function () {
							return (unsubscribed = true);
						},
					};
				},
				stop: function () {
					canceled = true;
				},
				toJSON: function () {
					return {
						id,
					};
				},
				getSnapshot: function () {
					return resolvedData;
				},
			};
			this.children.set(id, actor);
			return actor;
		};
		Interpreter2.prototype.spawnCallback = function (callback, id) {
			var _this = this;
			var canceled = false;
			var receivers = new Set();
			var listeners = new Set();
			var emitted;
			var receive = function (e) {
				emitted = e;
				listeners.forEach(function (listener) {
					return listener(e);
				});
				if (canceled) {
					return;
				}
				_this.send(
					toSCXMLEvent(e, {
						origin: id,
					})
				);
			};
			var callbackStop;
			try {
				callbackStop = callback(receive, function (newListener) {
					receivers.add(newListener);
				});
			} catch (err) {
				this.send(error2(id, err));
			}
			if (isPromiseLike(callbackStop)) {
				return this.spawnPromise(callbackStop, id);
			}
			var actor = {
				id,
				send: function (event2) {
					return receivers.forEach(function (receiver) {
						return receiver(event2);
					});
				},
				subscribe: function (next) {
					listeners.add(next);
					return {
						unsubscribe: function () {
							listeners.delete(next);
						},
					};
				},
				stop: function () {
					canceled = true;
					if (isFunction(callbackStop)) {
						callbackStop();
					}
				},
				toJSON: function () {
					return {
						id,
					};
				},
				getSnapshot: function () {
					return emitted;
				},
			};
			this.children.set(id, actor);
			return actor;
		};
		Interpreter2.prototype.spawnObservable = function (source, id) {
			var _this = this;
			var emitted;
			var subscription = source.subscribe(
				function (value) {
					emitted = value;
					_this.send(
						toSCXMLEvent(value, {
							origin: id,
						})
					);
				},
				function (err) {
					_this.removeChild(id);
					_this.send(
						toSCXMLEvent(error2(id, err), {
							origin: id,
						})
					);
				},
				function () {
					_this.removeChild(id);
					_this.send(
						toSCXMLEvent(doneInvoke(id), {
							origin: id,
						})
					);
				}
			);
			var actor = {
				id,
				send: function () {
					return void 0;
				},
				subscribe: function (next, handleError, complete) {
					return source.subscribe(next, handleError, complete);
				},
				stop: function () {
					return subscription.unsubscribe();
				},
				getSnapshot: function () {
					return emitted;
				},
				toJSON: function () {
					return {
						id,
					};
				},
			};
			this.children.set(id, actor);
			return actor;
		};
		Interpreter2.prototype.spawnActor = function (actor, name2) {
			this.children.set(name2, actor);
			return actor;
		};
		Interpreter2.prototype.spawnActivity = function (activity) {
			var implementation =
				this.machine.options && this.machine.options.activities
					? this.machine.options.activities[activity.type]
					: void 0;
			if (!implementation) {
				if (!IS_PRODUCTION) {
					warn(false, "No implementation found for activity '" + activity.type + "'");
				}
				return;
			}
			var dispose = implementation(this.state.context, activity);
			this.spawnEffect(activity.id, dispose);
		};
		Interpreter2.prototype.spawnEffect = function (id, dispose) {
			this.children.set(id, {
				id,
				send: function () {
					return void 0;
				},
				subscribe: function () {
					return {
						unsubscribe: function () {
							return void 0;
						},
					};
				},
				stop: dispose || void 0,
				getSnapshot: function () {
					return void 0;
				},
				toJSON: function () {
					return {
						id,
					};
				},
			});
		};
		Interpreter2.prototype.attachDev = function () {
			var global2 = getGlobal();
			if (this.options.devTools && global2) {
				if (global2.__REDUX_DEVTOOLS_EXTENSION__) {
					var devToolsOptions =
						typeof this.options.devTools === "object" ? this.options.devTools : void 0;
					this.devTools = global2.__REDUX_DEVTOOLS_EXTENSION__.connect(
						__assign2(
							__assign2(
								{
									name: this.id,
									autoPause: true,
									stateSanitizer: function (state) {
										return {
											value: state.value,
											context: state.context,
											actions: state.actions,
										};
									},
								},
								devToolsOptions
							),
							{
								features: __assign2(
									{
										jump: false,
										skip: false,
									},
									devToolsOptions ? devToolsOptions.features : void 0
								),
							}
						),
						this.machine
					);
					this.devTools.init(this.state);
				}
				registerService(this);
			}
		};
		Interpreter2.prototype.toJSON = function () {
			return {
				id: this.id,
			};
		};
		Interpreter2.prototype[symbolObservable] = function () {
			return this;
		};
		Interpreter2.prototype.getSnapshot = function () {
			if (this.status === InterpreterStatus.NotStarted) {
				return this.initialState;
			}
			return this._state;
		};
		Interpreter2.defaultOptions = /* @__PURE__ */ (function (global2) {
			return {
				execute: true,
				deferEvents: true,
				clock: {
					setTimeout: function (fn, ms) {
						return setTimeout(fn, ms);
					},
					clearTimeout: function (id) {
						return clearTimeout(id);
					},
				},
				logger: global2.console.log.bind(console),
				devTools: false,
			};
		})(typeof self !== "undefined" ? self : global);
		Interpreter2.interpret = interpret;
		return Interpreter2;
	})();
	function interpret(machine2, options) {
		var interpreter = new Interpreter(machine2, options);
		return interpreter;
	}

	// ../../node_modules/@xstate/inspect/es/browser.js
	var import_utils9 = __toModule(require_utils());

	// ../../node_modules/@xstate/inspect/es/utils.js
	var import_fast_safe_stringify = __toModule(require_fast_safe_stringify());
	function getLazy(value) {
		return typeof value === "function" ? value() : value;
	}
	function stringify(value) {
		try {
			return JSON.stringify(value);
		} catch (e) {
			return (0, import_fast_safe_stringify.default)(value);
		}
	}

	// ../../node_modules/@xstate/inspect/es/inspectMachine.js
	function createInspectMachine(devTools) {
		if (devTools === void 0) {
			devTools = globalThis.__xstate__;
		}
		var serviceMap2 = new Map();
		var sub = devTools.onRegister(function (service) {
			serviceMap2.set(service.sessionId, service);
		});
		return createMachine({
			initial: "pendingConnection",
			context: {
				client: void 0,
			},
			states: {
				pendingConnection: {},
				connected: {
					on: {
						"service.state": {
							actions: function (ctx, e) {
								return ctx.client.send(e);
							},
						},
						"service.event": {
							actions: function (ctx, e) {
								return ctx.client.send(e);
							},
						},
						"service.register": {
							actions: function (ctx, e) {
								return ctx.client.send(e);
							},
						},
						"service.stop": {
							actions: function (ctx, e) {
								return ctx.client.send(e);
							},
						},
						"xstate.event": {
							actions: function (_, e) {
								var event2 = e.event;
								var scxmlEventObject = JSON.parse(event2);
								var service = serviceMap2.get(scxmlEventObject.origin);
								service === null || service === void 0 ? void 0 : service.send(scxmlEventObject);
							},
						},
						unload: {
							actions: function (ctx) {
								ctx.client.send({ type: "xstate.disconnect" });
							},
						},
						disconnect: "disconnected",
					},
				},
				disconnected: {
					entry: function () {
						sub.unsubscribe();
					},
					type: "final",
				},
			},
			on: {
				"xstate.inspecting": {
					target: ".connected",
					actions: [
						assign2({
							client: function (_, e) {
								return e.client;
							},
						}),
						function (ctx) {
							devTools.services.forEach(function (service) {
								var _a;
								(_a = ctx.client) === null || _a === void 0
									? void 0
									: _a.send({
											type: "service.register",
											machine: stringify(service.machine),
											state: stringify(service.state || service.initialState),
											sessionId: service.sessionId,
									  });
							});
						},
					],
				},
			},
		});
	}

	// ../../node_modules/@xstate/inspect/es/browser.js
	var serviceMap = new Map();
	function createDevTools() {
		var services = new Set();
		var serviceListeners = new Set();
		return {
			services,
			register: function (service) {
				services.add(service);
				serviceMap.set(service.sessionId, service);
				serviceListeners.forEach(function (listener) {
					return listener(service);
				});
				service.onStop(function () {
					services.delete(service);
					serviceMap.delete(service.sessionId);
				});
			},
			unregister: function (service) {
				services.delete(service);
				serviceMap.delete(service.sessionId);
			},
			onRegister: function (listener) {
				serviceListeners.add(listener);
				services.forEach(function (service) {
					return listener(service);
				});
				return {
					unsubscribe: function () {
						serviceListeners.delete(listener);
					},
				};
			},
		};
	}
	var defaultInspectorOptions = {
		url: "https://statecharts.io/inspect",
		iframe: function () {
			return document.querySelector("iframe[data-xstate]");
		},
		devTools: function () {
			var devTools = createDevTools();
			globalThis.__xstate__ = devTools;
			return devTools;
		},
	};
	function inspect(options) {
		var _a = __assign(__assign({}, defaultInspectorOptions), options),
			iframe = _a.iframe,
			url = _a.url,
			devTools = _a.devTools;
		var resolvedIframe = getLazy(iframe);
		if (resolvedIframe === null) {
			console.warn(
				"No suitable <iframe> found to embed the inspector. Please pass an <iframe> element to `inspect(iframe)` or create an <iframe data-xstate></iframe> element."
			);
			return void 0;
		}
		var resolvedDevTools = getLazy(devTools);
		var inspectMachine = createInspectMachine(resolvedDevTools);
		var inspectService = interpret(inspectMachine).start();
		var listeners = new Set();
		var sub = inspectService.subscribe(function (state) {
			listeners.forEach(function (listener) {
				return listener.next(state);
			});
		});
		var targetWindow;
		var client;
		var messageHandler = function (event2) {
			if (typeof event2.data === "object" && event2.data !== null && "type" in event2.data) {
				if (resolvedIframe && !targetWindow) {
					targetWindow = resolvedIframe.contentWindow;
				}
				if (!client) {
					client = {
						send: function (e) {
							targetWindow.postMessage(e, url);
						},
					};
				}
				inspectService.send(__assign(__assign({}, event2.data), { client }));
			}
		};
		window.addEventListener("message", messageHandler);
		window.addEventListener("unload", function () {
			inspectService.send({ type: "unload" });
		});
		if (resolvedIframe === false) {
			targetWindow = window.open(url, "xstateinspector");
		}
		resolvedDevTools.onRegister(function (service) {
			var _a2;
			inspectService.send({
				type: "service.register",
				machine: stringify(service.machine),
				state: stringify(service.state || service.initialState),
				sessionId: service.sessionId,
				id: service.id,
				parent: (_a2 = service.parent) === null || _a2 === void 0 ? void 0 : _a2.sessionId,
			});
			inspectService.send({
				type: "service.event",
				event: stringify((service.state || service.initialState)._event),
				sessionId: service.sessionId,
			});
			var originalSend = service.send.bind(service);
			service.send = function inspectSend(event2, payload) {
				inspectService.send({
					type: "service.event",
					event: stringify(
						(0, import_utils9.toSCXMLEvent)((0, import_utils9.toEventObject)(event2, payload))
					),
					sessionId: service.sessionId,
				});
				return originalSend(event2, payload);
			};
			service.subscribe(function (state) {
				inspectService.send({
					type: "service.state",
					state: stringify(state),
					sessionId: service.sessionId,
				});
			});
			service.onStop(function () {
				inspectService.send({
					type: "service.stop",
					sessionId: service.sessionId,
				});
			});
		});
		if (resolvedIframe) {
			resolvedIframe.addEventListener("load", function () {
				targetWindow = resolvedIframe.contentWindow;
			});
			resolvedIframe.setAttribute("src", url);
		}
		return {
			send: function (event2) {
				inspectService.send(event2);
			},
			subscribe: function (next, onError, onComplete) {
				var observer = (0, import_utils9.toObserver)(next, onError, onComplete);
				listeners.add(observer);
				return {
					unsubscribe: function () {
						listeners.delete(observer);
					},
				};
			},
			disconnect: function () {
				inspectService.send("disconnect");
				window.removeEventListener("message", messageHandler);
				sub.unsubscribe();
			},
		};
	}

	// src/test-app/App.tsx
	var import_react83 = __toModule(require_react());
	var import_classnames3 = __toModule(require_classnames());

	// ../../node_modules/@xstate/react/es/types.js
	var ReactEffectType;
	(function (ReactEffectType2) {
		ReactEffectType2[(ReactEffectType2["Effect"] = 1)] = "Effect";
		ReactEffectType2[(ReactEffectType2["LayoutEffect"] = 2)] = "LayoutEffect";
	})(ReactEffectType || (ReactEffectType = {}));

	// ../../node_modules/@xstate/react/es/useInterpret.js
	var import_react3 = __toModule(require_react());

	// ../../node_modules/use-isomorphic-layout-effect/dist/use-isomorphic-layout-effect.browser.esm.js
	var import_react = __toModule(require_react());
	var index = import_react.useLayoutEffect;
	var use_isomorphic_layout_effect_browser_esm_default = index;

	// ../../node_modules/@xstate/react/es/useConstant.js
	var React = __toModule(require_react());
	function useConstant(fn) {
		var ref = React.useRef();
		if (!ref.current) {
			ref.current = { v: fn() };
		}
		return ref.current.v;
	}

	// ../../node_modules/@xstate/react/es/useReactEffectActions.js
	var import_react2 = __toModule(require_react());

	// ../../node_modules/@xstate/react/es/utils.js
	var __read2 = function (o, n) {
		var m = typeof Symbol === "function" && o[Symbol.iterator];
		if (!m) return o;
		var i = m.call(o),
			r,
			ar = [],
			e;
		try {
			while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
		} catch (error3) {
			e = { error: error3 };
		} finally {
			try {
				if (r && !r.done && (m = i["return"])) m.call(i);
			} finally {
				if (e) throw e.error;
			}
		}
		return ar;
	};
	var __values2 = function (o) {
		var s = typeof Symbol === "function" && Symbol.iterator,
			m = s && o[s],
			i = 0;
		if (m) return m.call(o);
		if (o && typeof o.length === "number")
			return {
				next: function () {
					if (o && i >= o.length) o = void 0;
					return { value: o && o[i++], done: !o };
				},
			};
		throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
	};
	function partition2(items, predicate) {
		var e_1, _a;
		var _b = __read2([[], []], 2),
			truthy = _b[0],
			falsy = _b[1];
		try {
			for (
				var items_1 = __values2(items), items_1_1 = items_1.next();
				!items_1_1.done;
				items_1_1 = items_1.next()
			) {
				var item = items_1_1.value;
				if (predicate(item)) {
					truthy.push(item);
				} else {
					falsy.push(item);
				}
			}
		} catch (e_1_1) {
			e_1 = { error: e_1_1 };
		} finally {
			try {
				if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);
			} finally {
				if (e_1) throw e_1.error;
			}
		}
		return [truthy, falsy];
	}

	// ../../node_modules/@xstate/react/es/useReactEffectActions.js
	var __read3 = function (o, n) {
		var m = typeof Symbol === "function" && o[Symbol.iterator];
		if (!m) return o;
		var i = m.call(o),
			r,
			ar = [],
			e;
		try {
			while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
		} catch (error3) {
			e = { error: error3 };
		} finally {
			try {
				if (r && !r.done && (m = i["return"])) m.call(i);
			} finally {
				if (e) throw e.error;
			}
		}
		return ar;
	};
	var __spreadArray2 = function (to, from) {
		for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];
		return to;
	};
	function executeEffect(action, state) {
		var exec = action.exec;
		var originalExec = exec(state.context, state._event.data, {
			action,
			state,
			_event: state._event,
		});
		originalExec();
	}
	function useReactEffectActions(service) {
		var effectActionsRef = (0, import_react2.useRef)([]);
		var layoutEffectActionsRef = (0, import_react2.useRef)([]);
		use_isomorphic_layout_effect_browser_esm_default(function () {
			var sub = service.subscribe(function (currentState) {
				var _a, _b;
				if (currentState.actions.length) {
					var reactEffectActions = currentState.actions.filter(function (action) {
						return typeof action.exec === "function" && "__effect" in action.exec;
					});
					var _c = __read3(
							partition2(reactEffectActions, function (action) {
								return action.exec.__effect === ReactEffectType.Effect;
							}),
							2
						),
						effectActions = _c[0],
						layoutEffectActions = _c[1];
					(_a = effectActionsRef.current).push.apply(
						_a,
						__spreadArray2(
							[],
							__read3(
								effectActions.map(function (effectAction) {
									return [effectAction, currentState];
								})
							)
						)
					);
					(_b = layoutEffectActionsRef.current).push.apply(
						_b,
						__spreadArray2(
							[],
							__read3(
								layoutEffectActions.map(function (layoutEffectAction) {
									return [layoutEffectAction, currentState];
								})
							)
						)
					);
				}
			});
			return function () {
				sub.unsubscribe();
			};
		}, []);
		use_isomorphic_layout_effect_browser_esm_default(function () {
			while (layoutEffectActionsRef.current.length) {
				var _a = __read3(layoutEffectActionsRef.current.shift(), 2),
					layoutEffectAction = _a[0],
					effectState = _a[1];
				executeEffect(layoutEffectAction, effectState);
			}
		});
		(0, import_react2.useEffect)(function () {
			while (effectActionsRef.current.length) {
				var _a = __read3(effectActionsRef.current.shift(), 2),
					effectAction = _a[0],
					effectState = _a[1];
				executeEffect(effectAction, effectState);
			}
		});
	}

	// ../../node_modules/@xstate/react/es/useInterpret.js
	var __assign3 = function () {
		__assign3 =
			Object.assign ||
			function (t) {
				for (var s, i = 1, n = arguments.length; i < n; i++) {
					s = arguments[i];
					for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
				}
				return t;
			};
		return __assign3.apply(this, arguments);
	};
	var __rest2 = function (s, e) {
		var t = {};
		for (var p in s)
			if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
		if (s != null && typeof Object.getOwnPropertySymbols === "function")
			for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
				if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
					t[p[i]] = s[p[i]];
			}
		return t;
	};
	var __read4 = function (o, n) {
		var m = typeof Symbol === "function" && o[Symbol.iterator];
		if (!m) return o;
		var i = m.call(o),
			r,
			ar = [],
			e;
		try {
			while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
		} catch (error3) {
			e = { error: error3 };
		} finally {
			try {
				if (r && !r.done && (m = i["return"])) m.call(i);
			} finally {
				if (e) throw e.error;
			}
		}
		return ar;
	};
	function toObserver3(nextHandler, errorHandler, completionHandler) {
		if (typeof nextHandler === "object") {
			return nextHandler;
		}
		var noop = function () {
			return void 0;
		};
		return {
			next: nextHandler,
			error: errorHandler || noop,
			complete: completionHandler || noop,
		};
	}
	function useInterpret(getMachine, options, observerOrListener) {
		if (options === void 0) {
			options = {};
		}
		var machine2 = useConstant(function () {
			return typeof getMachine === "function" ? getMachine() : getMachine;
		});
		if (typeof getMachine !== "function") {
			var _a = __read4((0, import_react3.useState)(machine2), 1),
				initialMachine = _a[0];
			if (machine2 !== initialMachine) {
				console.warn(
					"Machine given to `useMachine` has changed between renders. This is not supported and might lead to unexpected results.\nPlease make sure that you pass the same Machine as argument each time."
				);
			}
		}
		var context = options.context,
			guards = options.guards,
			actions = options.actions,
			activities = options.activities,
			services = options.services,
			delays = options.delays,
			rehydratedState = options.state,
			interpreterOptions = __rest2(options, [
				"context",
				"guards",
				"actions",
				"activities",
				"services",
				"delays",
				"state",
			]);
		var service = useConstant(function () {
			var machineConfig = {
				context,
				guards,
				actions,
				activities,
				services,
				delays,
			};
			var machineWithConfig = machine2.withConfig(
				machineConfig,
				__assign3(__assign3({}, machine2.context), context)
			);
			return interpret(machineWithConfig, __assign3({ deferEvents: true }, interpreterOptions));
		});
		use_isomorphic_layout_effect_browser_esm_default(
			function () {
				var sub;
				if (observerOrListener) {
					sub = service.subscribe(toObserver3(observerOrListener));
				}
				return function () {
					sub === null || sub === void 0 ? void 0 : sub.unsubscribe();
				};
			},
			[observerOrListener]
		);
		use_isomorphic_layout_effect_browser_esm_default(function () {
			service.start(rehydratedState ? State.create(rehydratedState) : void 0);
			return function () {
				service.stop();
			};
		}, []);
		use_isomorphic_layout_effect_browser_esm_default(
			function () {
				Object.assign(service.machine.options.actions, actions);
			},
			[actions]
		);
		use_isomorphic_layout_effect_browser_esm_default(
			function () {
				Object.assign(service.machine.options.services, services);
			},
			[services]
		);
		useReactEffectActions(service);
		return service;
	}

	// ../../node_modules/@xstate/react/es/useActor.js
	var import_react4 = __toModule(require_react());
	function isActorWithState(actorRef) {
		return "state" in actorRef;
	}

	// ../../node_modules/@xstate/react/es/useService.js
	function getServiceSnapshot(service) {
		return ("status" in service ? service.status : service._status) !== 0
			? service.state
			: service.machine.initialState;
	}

	// ../../node_modules/@xstate/react/es/useSelector.js
	var import_react5 = __toModule(require_react());
	var __read5 = function (o, n) {
		var m = typeof Symbol === "function" && o[Symbol.iterator];
		if (!m) return o;
		var i = m.call(o),
			r,
			ar = [],
			e;
		try {
			while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
		} catch (error3) {
			e = { error: error3 };
		} finally {
			try {
				if (r && !r.done && (m = i["return"])) m.call(i);
			} finally {
				if (e) throw e.error;
			}
		}
		return ar;
	};
	function isService(actor) {
		return "state" in actor && "machine" in actor;
	}
	var defaultCompare = function (a, b) {
		return a === b;
	};
	var defaultGetSnapshot = function (a) {
		return isService(a) ? getServiceSnapshot(a) : isActorWithState(a) ? a.state : void 0;
	};
	function useSelector(actor, selector, compare, getSnapshot) {
		if (compare === void 0) {
			compare = defaultCompare;
		}
		if (getSnapshot === void 0) {
			getSnapshot = defaultGetSnapshot;
		}
		var _a = __read5(
				(0, import_react5.useState)(function () {
					return selector(getSnapshot(actor));
				}),
				2
			),
			selected = _a[0],
			setSelected = _a[1];
		var selectedRef = (0, import_react5.useRef)(selected);
		(0, import_react5.useEffect)(
			function () {
				var updateSelectedIfChanged = function (nextSelected) {
					if (!compare(selectedRef.current, nextSelected)) {
						setSelected(nextSelected);
						selectedRef.current = nextSelected;
					}
				};
				var initialSelected = selector(getSnapshot(actor));
				updateSelectedIfChanged(initialSelected);
				var sub = actor.subscribe(function (emitted) {
					var nextSelected = selector(emitted);
					updateSelectedIfChanged(nextSelected);
				});
				return function () {
					return sub.unsubscribe();
				};
			},
			[selector, compare]
		);
		return selected;
	}

	// src/react/AuthSystemProvider.tsx
	var import_react7 = __toModule(require_react());

	// src/auth-system.ts
	var import_model = __toModule(require_model());
	var AuthStateId;
	(function (AuthStateId2) {
		AuthStateId2["CheckingForSession"] = "CheckingForSession";
		AuthStateId2["INTERNAL__loginFlowCheck"] = "INTERNAL__loginFlowCheck";
		AuthStateId2["SubmittingOtpUsername"] = "SubmittingOtpUsername";
		AuthStateId2["SubmittingOtp"] = "SubmittingOtp";
		AuthStateId2["SubmittingUsernameAndPassword"] = "SubmittingUsernameAndPassword";
		AuthStateId2["SubmittingForceChangePassword"] = "SubmittingForceChangePassword";
		AuthStateId2["AuthenticatedChangingPassword"] = "AuthenticatedChangingPassword";
		AuthStateId2["ForgottenPasswordRequestingReset"] = "ForgottenPasswordRequestingReset";
		AuthStateId2["ForgottenPasswordSubmittingReset"] = "ForgottenPasswordSubmittingReset";
		AuthStateId2["INTERNAL__deviceSecurityCheck"] = "INTERNAL__deviceSecurityCheck";
		AuthStateId2["CheckingForPin"] = "CheckingForPin";
		AuthStateId2["SubmittingCurrentPin"] = "SubmittingCurrentPin";
		AuthStateId2["SubmittingNewPin"] = "SubmittingNewPin";
		AuthStateId2["ForgottenPinRequestingReset"] = "ForgottenPinRequestingReset";
		AuthStateId2["AuthenticatedValidatingPin"] = "AuthenticatedValidatingPin";
		AuthStateId2["AuthenticatedChangingPin"] = "AuthenticatedChangingPin";
		AuthStateId2["AuthenticatedPinChangeSuccess"] = "AuthenticatedPinChangeSuccess";
		AuthStateId2["AuthenticatedLoggingOut"] = "AuthenticatedLoggingOut";
		AuthStateId2["Authenticated"] = "Authenticated";
		AuthStateId2["AuthenticatedPasswordChangeSuccess"] = "AuthenticatedPasswordChangeSuccess";
		AuthStateId2["ForgottenPasswordResetSuccess"] = "ForgottenPasswordResetSuccess";
	})(AuthStateId || (AuthStateId = {}));
	var model = (0, import_model.createModel)({
		loginFlowType: "OTP",
		deviceSecurityType: "NONE",
	});
	var implementations = {
		guards: {
			isOtpLoginFlow: (ctx) => ctx.loginFlowType === "OTP",
			isUsernamePasswordLoginFlow: (ctx) => ctx.loginFlowType === "USERNAME_PASSWORD",
			isDeviceSecurityTypeNone: (ctx) => ctx.deviceSecurityType === "NONE",
			isDeviceSecurityTypePin: (ctx) => ctx.deviceSecurityType === "PIN",
			isDeviceSecurityTypeBiometric: (ctx) => ctx.deviceSecurityType === "BIOMETRIC",
		},
		actions: {
			assignError: model.assign((_, e) => {
				if ("error" in e) {
					return { error: e.error };
				}
				return {};
			}),
			assignUser: model.assign((_, e) => {
				if (
					e.type === "USERNAME_VALID" ||
					e.type === "USERNAME_AND_PASSWORD_VALID" ||
					e.type === "USERNAME_AND_PASSWORD_VALID_PASSWORD_CHANGE_REQUIRED"
				) {
					return { user: e.user };
				}
				return {};
			}),
			assignUsername: model.assign((_, e) => {
				if (
					e.type === "USERNAME_VALID" ||
					e.type === "USERNAME_AND_PASSWORD_VALID" ||
					e.type === "USERNAME_AND_PASSWORD_VALID_PASSWORD_CHANGE_REQUIRED" ||
					e.type === "PASSWORD_RESET_REQUEST_SUCCESS"
				) {
					return { username: e.username };
				}
				return {};
			}),
			clearError: model.assign({ error: void 0 }),
			clearUser: model.assign({ user: void 0 }),
			clearUsername: model.assign({ username: void 0 }),
		},
	};
	var machine = createMachine(
		{
			id: "authSystem",
			initial: AuthStateId.CheckingForSession,
			context: model.initialContext,
			states: {
				[AuthStateId.CheckingForSession]: {
					on: {
						SESSION_PRESENT: AuthStateId.INTERNAL__deviceSecurityCheck,
						SESSION_NOT_PRESENT: AuthStateId.INTERNAL__loginFlowCheck,
					},
				},
				[AuthStateId.INTERNAL__loginFlowCheck]: {
					entry: ["clearError"],
					always: [
						{ cond: "isOtpLoginFlow", target: AuthStateId.SubmittingOtpUsername },
						{
							cond: "isUsernamePasswordLoginFlow",
							target: AuthStateId.SubmittingUsernameAndPassword,
						},
					],
				},
				[AuthStateId.SubmittingOtpUsername]: {
					on: {
						USERNAME_VALID: {
							target: AuthStateId.SubmittingOtp,
							actions: ["assignUser", "assignUsername", "clearError"],
						},
						USERNAME_INVALID: {
							target: void 0,
							actions: ["assignError"],
						},
					},
				},
				[AuthStateId.SubmittingOtp]: {
					on: {
						OTP_VALID: {
							target: AuthStateId.INTERNAL__deviceSecurityCheck,
							actions: ["clearError"],
						},
						OTP_INVALID: {
							target: void 0,
							actions: ["assignError"],
						},
						OTP_INVALID_RETRIES_EXCEEDED: {
							target: AuthStateId.SubmittingOtpUsername,
							actions: ["assignError"],
						},
						GO_BACK: {
							target: AuthStateId.SubmittingOtpUsername,
							actions: ["clearError", "clearUser", "clearUsername"],
						},
					},
				},
				[AuthStateId.SubmittingUsernameAndPassword]: {
					on: {
						USERNAME_AND_PASSWORD_VALID: {
							target: AuthStateId.INTERNAL__deviceSecurityCheck,
							actions: ["assignUser", "assignUsername", "clearError"],
						},
						USERNAME_AND_PASSWORD_VALID_PASSWORD_CHANGE_REQUIRED: {
							target: AuthStateId.SubmittingForceChangePassword,
							actions: ["assignError", "assignUser", "assignUsername"],
						},
						USERNAME_AND_PASSWORD_INVALID: {
							target: void 0,
							actions: ["assignError"],
						},
						FORGOTTEN_PASSWORD: {
							target: AuthStateId.ForgottenPasswordRequestingReset,
							actions: ["clearError"],
						},
					},
				},
				[AuthStateId.SubmittingForceChangePassword]: {
					on: {
						PASSWORD_CHANGE_SUCCESS: {
							target: AuthStateId.INTERNAL__deviceSecurityCheck,
							actions: ["clearError"],
						},
						PASSWORD_CHANGE_FAILURE: {
							target: void 0,
							actions: ["assignError"],
						},
					},
				},
				[AuthStateId.ForgottenPasswordRequestingReset]: {
					on: {
						PASSWORD_RESET_REQUEST_SUCCESS: {
							target: AuthStateId.ForgottenPasswordSubmittingReset,
							actions: ["clearError", "assignUsername"],
						},
						PASSWORD_RESET_REQUEST_FAILURE: {
							target: void 0,
							actions: ["assignError"],
						},
						GO_BACK: {
							target: AuthStateId.SubmittingUsernameAndPassword,
							actions: ["clearError"],
						},
					},
				},
				[AuthStateId.ForgottenPasswordSubmittingReset]: {
					on: {
						PASSWORD_RESET_SUCCESS: {
							target: AuthStateId.ForgottenPasswordResetSuccess,
							actions: ["clearError"],
						},
						PASSWORD_RESET_FAILURE: {
							target: void 0,
							actions: ["assignError"],
						},
						GO_BACK: AuthStateId.ForgottenPasswordRequestingReset,
					},
				},
				[AuthStateId.ForgottenPasswordResetSuccess]: {
					on: {
						CONFIRM_PASSWORD_RESET: {
							target: AuthStateId.SubmittingUsernameAndPassword,
							actions: ["clearUsername"],
						},
					},
				},
				[AuthStateId.INTERNAL__deviceSecurityCheck]: {
					entry: ["clearError"],
					always: [
						{ cond: "isDeviceSecurityTypeNone", target: AuthStateId.Authenticated },
						{ cond: "isDeviceSecurityTypePin", target: AuthStateId.CheckingForPin },
					],
				},
				[AuthStateId.CheckingForPin]: {
					on: {
						PIN_IS_SET_UP: AuthStateId.SubmittingCurrentPin,
						PIN_IS_NOT_SET_UP: AuthStateId.SubmittingNewPin,
					},
				},
				[AuthStateId.SubmittingCurrentPin]: {
					on: {
						PIN_VALID: {
							target: AuthStateId.Authenticated,
							actions: ["clearError"],
						},
						PIN_INVALID: {
							target: void 0,
							actions: ["assignError"],
						},
						REQUEST_PIN_RESET: {
							target: AuthStateId.ForgottenPinRequestingReset,
							actions: ["clearError"],
						},
					},
				},
				[AuthStateId.ForgottenPinRequestingReset]: {
					on: {
						PIN_RESET_SUCCESS: {
							target: AuthStateId.CheckingForSession,
							actions: ["clearError"],
						},
						PIN_RESET_FAILURE: {
							target: void 0,
							actions: ["assignError"],
						},
						CANCEL_PIN_RESET: {
							target: AuthStateId.SubmittingCurrentPin,
							actions: ["clearError"],
						},
					},
				},
				[AuthStateId.SubmittingNewPin]: {
					on: {
						NEW_PIN_VALID: {
							target: AuthStateId.Authenticated,
							actions: ["clearError"],
						},
						NEW_PIN_INVALID: {
							target: void 0,
							actions: ["assignError"],
						},
					},
				},
				[AuthStateId.Authenticated]: {
					entry: ["clearError"],
					on: {
						REQUEST_LOG_OUT: AuthStateId.AuthenticatedLoggingOut,
						REQUEST_PIN_CHANGE: AuthStateId.AuthenticatedValidatingPin,
						REQUEST_PASSWORD_CHANGE: AuthStateId.AuthenticatedChangingPassword,
					},
				},
				[AuthStateId.AuthenticatedChangingPassword]: {
					on: {
						PASSWORD_CHANGE_SUCCESS: {
							target: AuthStateId.AuthenticatedPasswordChangeSuccess,
							actions: ["clearError"],
						},
						PASSWORD_CHANGE_FAILURE: {
							target: void 0,
							actions: ["assignError"],
						},
						CANCEL_PASSWORD_CHANGE: AuthStateId.Authenticated,
					},
				},
				[AuthStateId.AuthenticatedPasswordChangeSuccess]: {
					on: {
						CONFIRM_PASSWORD_CHANGE: AuthStateId.Authenticated,
					},
				},
				[AuthStateId.AuthenticatedValidatingPin]: {
					on: {
						PIN_VALID: {
							target: AuthStateId.AuthenticatedChangingPin,
							actions: ["clearError"],
						},
						PIN_INVALID: {
							target: void 0,
							actions: ["assignError"],
						},
						CANCEL_PIN_CHANGE: {
							target: AuthStateId.Authenticated,
							actions: ["clearError"],
						},
					},
				},
				[AuthStateId.AuthenticatedChangingPin]: {
					on: {
						PIN_CHANGE_SUCCESS: {
							target: AuthStateId.AuthenticatedPinChangeSuccess,
							actions: ["clearError"],
						},
						PIN_CHANGE_FAILURE: {
							target: void 0,
							actions: ["assignError"],
						},
						CANCEL_PIN_CHANGE: {
							target: AuthStateId.Authenticated,
							actions: ["clearError"],
						},
					},
				},
				[AuthStateId.AuthenticatedPinChangeSuccess]: {
					on: {
						CONFIRM_PIN_CHANGE: AuthStateId.Authenticated,
					},
				},
				[AuthStateId.AuthenticatedLoggingOut]: {
					on: {
						LOG_OUT_SUCCESS: AuthStateId.CheckingForSession,
						LOG_OUT_FAILURE: {
							target: void 0,
							actions: ["assignError"],
						},
						CANCEL_LOG_OUT: AuthStateId.Authenticated,
					},
				},
			},
		},
		implementations
	);

	// src/react/selectors.ts
	var stateSelectors = {
		isCheckingForSession: (state) => state.matches(AuthStateId.CheckingForSession),
		isSubmittingOtpUsername: (state) => state.matches(AuthStateId.SubmittingOtpUsername),
		isSubmittingOtp: (state) => state.matches(AuthStateId.SubmittingOtp),
		isSubmittingUsernameAndPassword: (state) =>
			state.matches(AuthStateId.SubmittingUsernameAndPassword),
		isSubmittingForceChangePassword: (state) =>
			state.matches(AuthStateId.SubmittingForceChangePassword),
		isForgottenPasswordRequestingReset: (state) =>
			state.matches(AuthStateId.ForgottenPasswordRequestingReset),
		isForgottenPasswordSubmittingReset: (state) =>
			state.matches(AuthStateId.ForgottenPasswordSubmittingReset),
		isForgottenPasswordResetSuccess: (state) =>
			state.matches(AuthStateId.ForgottenPasswordResetSuccess),
		isCheckingForPin: (state) => state.matches(AuthStateId.CheckingForPin),
		isSubmittingCurrentPin: (state) => state.matches(AuthStateId.SubmittingCurrentPin),
		isSubmittingNewPin: (state) => state.matches(AuthStateId.SubmittingNewPin),
		isForgottenPinRequestingReset: (state) =>
			state.matches(AuthStateId.ForgottenPinRequestingReset),
		isAuthenticated: (state) => state.matches(AuthStateId.Authenticated),
		isAuthenticatedValidatingPin: (state) => state.matches(AuthStateId.AuthenticatedValidatingPin),
		isAuthenticatedChangingPin: (state) => state.matches(AuthStateId.AuthenticatedChangingPin),
		isAuthenticatedChangingPassword: (state) =>
			state.matches(AuthStateId.AuthenticatedChangingPassword),
		isAuthenticatedPasswordChangeSuccess: (state) =>
			state.matches(AuthStateId.AuthenticatedPasswordChangeSuccess),
		isAuthenticatedPinChangeSuccess: (state) =>
			state.matches(AuthStateId.AuthenticatedPinChangeSuccess),
		isAuthenticatedLoggingOut: (state) => state.matches(AuthStateId.AuthenticatedLoggingOut),
	};
	var isInStateAccessibleWhileAuthenticated = (state) => {
		return (
			state.matches(AuthStateId.Authenticated) ||
			state.matches(AuthStateId.AuthenticatedValidatingPin) ||
			state.matches(AuthStateId.AuthenticatedChangingPin) ||
			state.matches(AuthStateId.AuthenticatedPinChangeSuccess) ||
			state.matches(AuthStateId.AuthenticatedChangingPassword) ||
			state.matches(AuthStateId.AuthenticatedPasswordChangeSuccess) ||
			state.matches(AuthStateId.AuthenticatedLoggingOut)
		);
	};
	var currentStateSelector = (state) => {
		return state.value;
	};
	var contextSelectors = {
		error: (state) => state.context.error,
		loginFlowType: (state) => state.context.loginFlowType,
		deviceSecurityType: (state) => state.context.deviceSecurityType,
		user: (state) => state.context.user,
		username: (state) => state.context.username,
	};

	// src/react/AuthSystemProvider.tsx
	var AuthProviderContext = (0, import_react7.createContext)(null);
	function AuthProvider({
		children: children2,
		deviceSecurityType,
		loginFlowType,
		useDevTools = false,
		eventSink = void 0,
	}) {
		console.log(`Creating auth system, ${loginFlowType}, ${deviceSecurityType}`);
		const authenticationSystem = machine.withContext({ deviceSecurityType, loginFlowType });
		const authenticator = useInterpret(authenticationSystem, { devTools: useDevTools }, (state) => {
			if (eventSink) {
				if (state.changed) {
					eventSink(state);
				}
			}
		});
		return /* @__PURE__ */ import_react7.default.createElement(
			AuthProviderContext.Provider,
			{
				value: { authenticator },
			},
			children2
		);
	}
	function useAuthInterpreter() {
		const ctx = (0, import_react7.useContext)(AuthProviderContext);
		if (!ctx)
			throw new Error(
				"`useAuthInterpreter` can only be used in a component tree beneath the `AuthProvider` component"
			);
		return ctx.authenticator;
	}
	function useAuthProvider() {
		const authSystem = useAuthInterpreter();
		const currentState = useSelector(authSystem, currentStateSelector);
		const loginFlowType = useSelector(authSystem, contextSelectors.loginFlowType);
		const deviceSecurityType = useSelector(authSystem, contextSelectors.deviceSecurityType);
		return {
			currentState,
			loginFlowType,
			deviceSecurityType,
		};
	}

	// src/react/useAuthenticated.ts
	function useAuthenticated() {
		const authenticator = useAuthInterpreter();
		const isActive = useSelector(authenticator, stateSelectors.isAuthenticated);
		const isAuthenticated = useSelector(authenticator, isInStateAccessibleWhileAuthenticated);
		const requestLogOut = () => authenticator.send({ type: "REQUEST_LOG_OUT" });
		const requestPasswordChange = () => authenticator.send({ type: "REQUEST_PASSWORD_CHANGE" });
		const requestPinChange = () => authenticator.send({ type: "REQUEST_PIN_CHANGE" });
		return {
			isActive,
			isAuthenticated,
			requestLogOut,
			requestPasswordChange,
			requestPinChange,
		};
	}

	// src/react/useAuthenticatedChangingPassword.ts
	var import_logger = __toModule(require_lib());
	var import_react10 = __toModule(require_react());

	// src/react/input-validation.ts
	function validateInputs(inputValidations, inputValues) {
		return Object.fromEntries(
			Object.entries(inputValues).map(([k, v]) => {
				const failedValidations = inputValidations[k]
					.filter(({ pattern }) => !pattern.test(v))
					.map(({ failureMessage }) => failureMessage);
				return [k, failedValidations];
			})
		);
	}

	// src/react/useAuthenticatedChangingPassword.ts
	function useAuthenticatedChangingPassword(cb, validators = { oldPassword: [], newPassword: [] }) {
		const authenticator = useAuthInterpreter();
		const error3 = useSelector(authenticator, contextSelectors.error);
		const isActive = useSelector(authenticator, stateSelectors.isAuthenticatedChangingPassword);
		const logger14 = (0, import_logger.useLogger)();
		const [validationErrors, setValidationErrors] = (0, import_react10.useState)({
			oldPassword: [],
			newPassword: [],
		});
		const [isLoading, setIsLoading] = (0, import_react10.useState)(false);
		const submitNewPassword = (0, import_react10.useCallback)(
			async (oldPassword, newPassword) => {
				const validationErrors2 = validateInputs(validators, { oldPassword, newPassword });
				if (validationErrors2.oldPassword.length > 0 || validationErrors2.newPassword.length > 0) {
					setValidationErrors(validationErrors2);
					return;
				} else {
					setIsLoading(true);
					try {
						const res = await cb(oldPassword, newPassword);
						logger14.log(res);
						setIsLoading(false);
						authenticator.send({ type: "PASSWORD_CHANGE_SUCCESS" });
					} catch (err) {
						logger14.log(err);
						setIsLoading(false);
						authenticator.send({
							type: "PASSWORD_CHANGE_FAILURE",
							error: "PASSWORD_CHANGE_FAILURE",
						});
					}
				}
			},
			[authenticator, isActive, isLoading, error3, validationErrors]
		);
		const cancelChangePassword = () => authenticator.send({ type: "CANCEL_PASSWORD_CHANGE" });
		return {
			error: error3,
			isActive,
			isLoading,
			submitNewPassword,
			cancelChangePassword,
			validationErrors,
		};
	}

	// src/react/useAuthenticatedChangingPin.ts
	var import_logger2 = __toModule(require_lib());
	var import_react12 = __toModule(require_react());
	function useAuthenticatedChangingPin(cb, validators = { newPin: [] }) {
		const authenticator = useAuthInterpreter();
		const error3 = useSelector(authenticator, contextSelectors.error);
		const isActive = useSelector(authenticator, stateSelectors.isAuthenticatedChangingPin);
		const logger14 = (0, import_logger2.useLogger)();
		const [validationErrors, setValidationErrors] = (0, import_react12.useState)({ newPin: [] });
		const [isLoading, setIsLoading] = (0, import_react12.useState)(false);
		const changePin = (0, import_react12.useCallback)(
			async (newPin) => {
				const validationErrors2 = validateInputs(validators, { newPin });
				if (validationErrors2.newPin.length > 0) {
					setValidationErrors(validationErrors2);
					return;
				} else {
					setIsLoading(true);
					logger14.info(
						"Attempting to change the current PIN. If the check resolves, the attempt was successful and they may return to the Authenticated state."
					);
					try {
						const res = await cb(newPin);
						logger14.log(res);
						logger14.log("PIN change succeeded");
						setIsLoading(false);
						authenticator.send({ type: "PIN_CHANGE_SUCCESS" });
					} catch (err) {
						logger14.log(err);
						logger14.log("PIN change failed");
						setIsLoading(false);
						authenticator.send({ type: "PIN_CHANGE_FAILURE", error: "PIN_CHANGE_FAILURE" });
					}
				}
			},
			[authenticator, isActive, isLoading, error3, validationErrors]
		);
		const cancelChangePin = () => authenticator.send({ type: "CANCEL_PIN_CHANGE" });
		return {
			error: error3,
			isActive,
			isLoading,
			changePin,
			cancelChangePin,
			validationErrors,
		};
	}

	// src/react/useAuthenticatedLoggingOut.ts
	var import_logger3 = __toModule(require_lib());
	var import_react14 = __toModule(require_react());
	function useAuthenticatedLoggingOut(cb) {
		const authenticator = useAuthInterpreter();
		const error3 = useSelector(authenticator, contextSelectors.error);
		const isActive = useSelector(authenticator, stateSelectors.isAuthenticatedLoggingOut);
		const logger14 = (0, import_logger3.useLogger)();
		const [isLoading, setIsLoading] = (0, import_react14.useState)(false);
		const logOut = (0, import_react14.useCallback)(async () => {
			logger14.info(
				"Logging out. This call should always succeed: if it hasn't then there is an underlying issue with the system."
			);
			setIsLoading(true);
			try {
				const res = await cb();
				logger14.log(res);
				logger14.info("Logged out!");
				setIsLoading(false);
				authenticator.send({ type: "LOG_OUT_SUCCESS" });
			} catch (err) {
				logger14.error(err);
				logger14.error(
					"There has been an issue logging out. This should not have occured, so this indicates a serious underlying issue with the system."
				);
				setIsLoading(false);
				authenticator.send({ type: "LOG_OUT_FAILURE", error: "LOG_OUT_FAILURE" });
			}
		}, [authenticator, error3, isActive, isLoading]);
		const cancelLogOut = () => authenticator.send({ type: "CANCEL_LOG_OUT" });
		return {
			error: error3,
			isActive,
			isLoading,
			logOut,
			cancelLogOut,
		};
	}

	// src/react/useAuthenticatedPasswordChangeSuccess.ts
	var import_logger4 = __toModule(require_lib());
	function useAuthenticatedPasswordChangeSuccess() {
		const authenticator = useAuthInterpreter();
		const isActive = useSelector(
			authenticator,
			stateSelectors.isAuthenticatedPasswordChangeSuccess
		);
		const logger14 = (0, import_logger4.useLogger)();
		const confirmPasswordChange = () => {
			logger14.info("Confirmation of successful password change sent to system");
			authenticator.send({ type: "CONFIRM_PASSWORD_RESET" });
		};
		return {
			isActive,
			confirmPasswordChange,
		};
	}

	// src/react/useAuthenticatedPinChangeSuccess.ts
	var import_logger5 = __toModule(require_lib());
	function useAuthenticatedPinChangeSuccess() {
		const authenticator = useAuthInterpreter();
		const isActive = useSelector(authenticator, stateSelectors.isAuthenticatedPinChangeSuccess);
		const logger14 = (0, import_logger5.useLogger)();
		const confirmPinChange = () => {
			logger14.info("Confirmation of successful pin change");
			authenticator.send({ type: "PIN_CHANGE_SUCCESS" });
		};
		return {
			isActive,
			confirmPinChange,
		};
	}

	// src/react/useAuthenticatedValidatingPin.ts
	var import_logger6 = __toModule(require_lib());
	var import_react18 = __toModule(require_react());
	function useAuthenticatedValidatingPin(cb, validators = { pin: [] }) {
		const authenticator = useAuthInterpreter();
		const error3 = useSelector(authenticator, contextSelectors.error);
		const isActive = useSelector(authenticator, stateSelectors.isAuthenticatedValidatingPin);
		const logger14 = (0, import_logger6.useLogger)();
		const [validationErrors, setValidationErrors] = (0, import_react18.useState)({ pin: [] });
		const [isLoading, setIsLoading] = (0, import_react18.useState)(false);
		const validatePin = (0, import_react18.useCallback)(
			async (pin) => {
				const validationErrors2 = validateInputs(validators, { pin });
				if (validationErrors2.pin.length > 0) {
					setValidationErrors(validationErrors2);
					return;
				} else {
					setIsLoading(true);
					logger14.info(
						"Initiating a check against the existing PIN. If the check resolves, user passes authentication."
					);
					try {
						const res = await cb(pin);
						logger14.log(res);
						logger14.info("PIN validated");
						setIsLoading(false);
						authenticator.send({ type: "PIN_VALID" });
					} catch (err) {
						logger14.log(err);
						logger14.log("PIN validation failed");
						setIsLoading(false);
						authenticator.send({ type: "PIN_INVALID", error: "PIN_INVALID" });
					}
				}
			},
			[authenticator, error3, isActive, isLoading, validationErrors]
		);
		const cancelChangePin = () => authenticator.send({ type: "CANCEL_PIN_CHANGE" });
		return {
			error: error3,
			isActive,
			isLoading,
			validatePin,
			validationErrors,
			cancelChangePin,
		};
	}

	// src/react/useCheckingForPin.ts
	var import_logger7 = __toModule(require_lib());
	var import_react20 = __toModule(require_react());
	function useCheckingForPin(cb) {
		const authenticator = useAuthInterpreter();
		const error3 = useSelector(authenticator, contextSelectors.error);
		const isActive = useSelector(authenticator, stateSelectors.isCheckingForPin);
		const logger14 = (0, import_logger7.useLogger)();
		const [isLoading, setIsLoading] = (0, import_react20.useState)(false);
		const checkForExistingPin = (0, import_react20.useCallback)(async () => {
			setIsLoading(true);
			logger14.info(
				"Initiating a check for an existing PIN. If the check resolves, user has a pin to validate. If not, they will need to create one."
			);
			try {
				const res = await cb();
				logger14.log(res);
				logger14.info("There is a PIN already stored on the device.");
				setIsLoading(false);
				authenticator.send({ type: "PIN_IS_SET_UP" });
			} catch (err) {
				logger14.log(err);
				logger14.info("There is no PIN stored on this device.");
				setIsLoading(false);
				authenticator.send({ type: "PIN_IS_NOT_SET_UP" });
			}
		}, [authenticator, error3, isActive, isLoading]);
		return {
			error: error3,
			isActive,
			isLoading,
			checkForExistingPin,
		};
	}

	// src/react/useCheckingForSession.ts
	var import_logger8 = __toModule(require_lib());
	var import_react22 = __toModule(require_react());
	function useCheckingForSession(cb) {
		const authenticator = useAuthInterpreter();
		const error3 = useSelector(authenticator, contextSelectors.error);
		const isActive = useSelector(authenticator, stateSelectors.isCheckingForSession);
		const logger14 = (0, import_logger8.useLogger)();
		const [isLoading, setIsLoading] = (0, import_react22.useState)(false);
		const checkSession = (0, import_react22.useCallback)(async () => {
			setIsLoading(true);
			logger14.info(
				"Session check initiated: if it resolves, there is a session present. If not, move to login."
			);
			try {
				const res = await cb();
				logger14.info("Session present");
				logger14.log(res);
				setIsLoading(false);
				authenticator.send({ type: "SESSION_PRESENT" });
			} catch (err) {
				logger14.info("No session present");
				logger14.log(err);
				setIsLoading(false);
				authenticator.send({ type: "SESSION_NOT_PRESENT" });
			}
		}, [authenticator, error3, isActive, isLoading]);
		return {
			error: error3,
			isActive,
			isLoading,
			checkSession,
		};
	}

	// src/react/useForgottenPasswordRequestingReset.ts
	var import_logger9 = __toModule(require_lib());
	var import_react24 = __toModule(require_react());
	function useForgottenPasswordRequestingReset(cb, validators = { username: [] }) {
		const authenticator = useAuthInterpreter();
		const error3 = useSelector(authenticator, contextSelectors.error);
		const isActive = useSelector(authenticator, stateSelectors.isForgottenPasswordRequestingReset);
		const logger14 = (0, import_logger9.useLogger)();
		const [validationErrors, setValidationErrors] = (0, import_react24.useState)({
			username: [],
		});
		const [isLoading, setIsLoading] = (0, import_react24.useState)(false);
		const requestNewPassword = (0, import_react24.useCallback)(
			async (username) => {
				const validationErrors2 = validateInputs(validators, { username });
				if (validationErrors2.username.length > 0) {
					setValidationErrors(validationErrors2);
					return;
				} else {
					setIsLoading(true);
					try {
						const res = await cb(username);
						logger14.log(res);
						setIsLoading(false);
						authenticator.send({ type: "PASSWORD_RESET_REQUEST_SUCCESS", username });
					} catch (err) {
						logger14.log(err);
						setIsLoading(false);
						authenticator.send({
							type: "PASSWORD_RESET_REQUEST_FAILURE",
							error: "PASSWORD_RESET_REQUEST_FAILURE",
						});
					}
				}
			},
			[authenticator, error3, isActive, isLoading]
		);
		const cancelResetPasswordRequest = () => authenticator.send({ type: "GO_BACK" });
		return {
			error: error3,
			isActive,
			isLoading,
			cancelResetPasswordRequest,
			requestNewPassword,
			validationErrors,
		};
	}

	// src/react/useForgottenPasswordResetSuccess.ts
	var import_logger10 = __toModule(require_lib());
	function useForgottenPasswordResetSuccess() {
		const authenticator = useAuthInterpreter();
		const isActive = useSelector(authenticator, stateSelectors.isForgottenPasswordResetSuccess);
		const logger14 = (0, import_logger10.useLogger)();
		const confirmPasswordReset = () => {
			logger14.info(
				"Confirmation of successful password reset sent to system to allow transition back to unsername/password input"
			);
			authenticator.send({ type: "CONFIRM_PASSWORD_RESET" });
		};
		return {
			isActive,
			confirmPasswordReset,
		};
	}

	// src/react/useForgottenPasswordSubmittingReset.ts
	var import_logger11 = __toModule(require_lib());
	var import_react27 = __toModule(require_react());
	function useForgottenPasswordSubmittingReset(
		cb,
		validators = {
			code: [],
			newPassword: [],
		}
	) {
		const authenticator = useAuthInterpreter();
		const error3 = useSelector(authenticator, contextSelectors.error);
		const isActive = useSelector(authenticator, stateSelectors.isForgottenPasswordSubmittingReset);
		const username = useSelector(authenticator, contextSelectors.username);
		const logger14 = (0, import_logger11.useLogger)();
		const [validationErrors, setValidationErrors] = (0, import_react27.useState)({
			code: [],
			newPassword: [],
		});
		const [isLoading, setIsLoading] = (0, import_react27.useState)(false);
		const submitNewPassword = (0, import_react27.useCallback)(
			async (code, newPassword) => {
				const validationErrors2 = validateInputs(validators, { code, newPassword });
				if (validationErrors2.code.length > 0 || validationErrors2.newPassword.length > 0) {
					setValidationErrors(validationErrors2);
					return;
				} else {
					setIsLoading(true);
					try {
						const res = await cb(username, code, newPassword);
						logger14.log(res);
						setIsLoading(false);
						authenticator.send({ type: "PASSWORD_RESET_SUCCESS" });
					} catch (err) {
						logger14.log(err);
						setIsLoading(false);
						authenticator.send({ type: "PASSWORD_RESET_FAILURE", error: "PASSWORD_RESET_FAILURE" });
					}
				}
			},
			[authenticator, error3, isActive, isLoading, username, validationErrors]
		);
		const cancelPasswordReset = () => authenticator.send({ type: "GO_BACK" });
		return {
			error: error3,
			isActive,
			isLoading,
			cancelPasswordReset,
			submitNewPassword,
			validationErrors,
		};
	}

	// src/react/useForgottenPinRequestingReset.ts
	var import_logger12 = __toModule(require_lib());
	var import_react29 = __toModule(require_react());
	function useForgottenPinRequestingReset(cb) {
		const authenticator = useAuthInterpreter();
		const error3 = useSelector(authenticator, contextSelectors.error);
		const isActive = useSelector(authenticator, stateSelectors.isForgottenPinRequestingReset);
		const logger14 = (0, import_logger12.useLogger)();
		const [isLoading, setIsLoading] = (0, import_react29.useState)(false);
		const resetPin = (0, import_react29.useCallback)(async () => {
			logger14.info(
				"Resetting PIN. This will log the user out and wipe the current pin. This call should always succeed: if it hasn't then there is an underlying issue with the system."
			);
			setIsLoading(true);
			try {
				const res = await cb();
				logger14.log(res);
				logger14.info("Pin reset, logged out!");
				setIsLoading(false);
				authenticator.send({ type: "PIN_RESET_SUCCESS" });
			} catch (err) {
				logger14.error(err);
				logger14.error(
					"There has been an issue logging out. This should not have occured, so this indicates a serious underlying issue with the system."
				);
				setIsLoading(false);
				authenticator.send({ type: "PIN_RESET_FAILURE", error: "PIN_RESET_FAILURE" });
			}
		}, [authenticator, error3, isActive, isLoading]);
		const cancelResetPin = () => authenticator.send({ type: "CANCEL_PIN_RESET" });
		return {
			error: error3,
			isActive,
			isLoading,
			resetPin,
			cancelResetPin,
		};
	}

	// src/react/useSubmittingCurrentPin.ts
	var import_logger13 = __toModule(require_lib());
	var import_react31 = __toModule(require_react());
	function useSubmittingCurrentPin(cb, validators = { pin: [] }) {
		const authenticator = useAuthInterpreter();
		const error3 = useSelector(authenticator, contextSelectors.error);
		const isActive = useSelector(authenticator, stateSelectors.isSubmittingCurrentPin);
		const logger14 = (0, import_logger13.useLogger)();
		const [validationErrors, setValidationErrors] = (0, import_react31.useState)({ pin: [] });
		const [isLoading, setIsLoading] = (0, import_react31.useState)(false);
		const validatePin = (0, import_react31.useCallback)(
			async (pin) => {
				const validationErrors2 = validateInputs(validators, { pin });
				if (validationErrors2.pin.length > 0) {
					setValidationErrors(validationErrors2);
					return;
				} else {
					setIsLoading(true);
					logger14.info(
						"Initiating a check against the existing PIN. If the check resolves, user passes authentication."
					);
					try {
						const res = await cb(pin);
						logger14.log(res);
						logger14.info("PIN validated");
						setIsLoading(false);
						authenticator.send({ type: "PIN_VALID" });
					} catch (err) {
						logger14.log(err);
						logger14.log("PIN validation failed");
						setIsLoading(false);
						authenticator.send({ type: "PIN_INVALID", error: "PIN_INVALID" });
					}
				}
			},
			[authenticator, error3, isActive, isLoading, validationErrors]
		);
		const requestPinReset = () => authenticator.send({ type: "REQUEST_PIN_RESET" });
		return {
			error: error3,
			isActive,
			isLoading,
			validatePin,
			validationErrors,
			requestPinReset,
		};
	}

	// src/react/useSubmittingForceChangePassword.ts
	var import_logger14 = __toModule(require_lib());
	var import_react33 = __toModule(require_react());
	function useSubmittingForceChangePassword(cb, validators = { password: [] }) {
		const authenticator = useAuthInterpreter();
		const error3 = useSelector(authenticator, contextSelectors.error);
		const isActive = useSelector(authenticator, stateSelectors.isSubmittingForceChangePassword);
		const currentUserData = useSelector(authenticator, contextSelectors.user);
		const logger14 = (0, import_logger14.useLogger)();
		const [validationErrors, setValidationErrors] = (0, import_react33.useState)({
			password: [],
		});
		const [isLoading, setIsLoading] = (0, import_react33.useState)(false);
		const validateNewPassword = (0, import_react33.useCallback)(
			async (password) => {
				const validationErrors2 = validateInputs(validators, { password });
				if (validationErrors2.password.length > 0) {
					setValidationErrors(validationErrors2);
					return;
				} else {
					setIsLoading(true);
					try {
						const user = await cb(currentUserData, password);
						logger14.log(user);
						setIsLoading(false);
						authenticator.send({ type: "PASSWORD_CHANGE_SUCCESS" });
					} catch (err) {
						logger14.log(err);
						setIsLoading(false);
						authenticator.send({
							type: "PASSWORD_CHANGE_FAILURE",
							error: "PASSWORD_CHANGE_FAILURE",
						});
					}
				}
			},
			[authenticator, error3, isActive, isLoading, currentUserData, validationErrors]
		);
		return {
			error: error3,
			isActive,
			isLoading,
			validateNewPassword,
			validationErrors,
		};
	}

	// src/react/useSubmittingNewPin.ts
	var import_logger15 = __toModule(require_lib());
	var import_react35 = __toModule(require_react());
	function useSubmittingNewPin(cb, validators = { pin: [] }) {
		const authenticator = useAuthInterpreter();
		const error3 = useSelector(authenticator, contextSelectors.error);
		const isActive = useSelector(authenticator, stateSelectors.isSubmittingNewPin);
		const logger14 = (0, import_logger15.useLogger)();
		const [validationErrors, setValidationErrors] = (0, import_react35.useState)({ pin: [] });
		const [isLoading, setIsLoading] = (0, import_react35.useState)(false);
		const setNewPin = (0, import_react35.useCallback)(
			async (pin) => {
				const validationErrors2 = validateInputs(validators, { pin });
				if (validationErrors2.pin.length > 0) {
					setValidationErrors(validationErrors2);
					return;
				} else {
					setIsLoading(true);
					logger14.info(
						"Attempting to set a new PIN. If the check resolves, attempts was successful and they are now Authenticated. If it fails there may be a problem with saving to storage."
					);
					try {
						const res = await cb(pin);
						logger14.log(res);
						logger14.info("New PIN successfully set.");
						setIsLoading(false);
						authenticator.send({ type: "NEW_PIN_VALID" });
					} catch (err) {
						logger14.log(err);
						logger14.log("Set PIN action failed.");
						setIsLoading(false);
						authenticator.send({ type: "NEW_PIN_INVALID", error: "NEW_PIN_INVALID" });
					}
				}
			},
			[authenticator, isActive, isLoading, error3, validationErrors]
		);
		return {
			error: error3,
			isActive,
			isLoading,
			setNewPin,
			validationErrors,
		};
	}

	// src/react/useSubmittingOtp.ts
	var import_logger16 = __toModule(require_lib());
	var import_react37 = __toModule(require_react());
	function useSubmittingOtp(cb, validators = { password: [] }) {
		const authenticator = useAuthInterpreter();
		const error3 = useSelector(authenticator, contextSelectors.error);
		const isActive = useSelector(authenticator, stateSelectors.isSubmittingOtp);
		const currentUserData = useSelector(authenticator, contextSelectors.user);
		const logger14 = (0, import_logger16.useLogger)();
		const [validationErrors, setValidationErrors] = (0, import_react37.useState)({
			password: [],
		});
		const [attemptsMade, setAttemptsMade] = (0, import_react37.useState)(0);
		const [isLoading, setIsLoading] = (0, import_react37.useState)(false);
		const validateOtp = (0, import_react37.useCallback)(
			async (password) => {
				const validationErrors2 = validateInputs(validators, { password });
				if (validationErrors2.password.length > 0) {
					setValidationErrors(validationErrors2);
					return;
				} else {
					setIsLoading(true);
					const currentAttempts = attemptsMade + 1;
					logger14.info(
						`OTP validation initiated (attempt ${
							attemptsMade + 1
						}): if successful, this stage of authentication is passed. If not, ${
							attemptsMade + 1 === 3
								? "system will require username input again"
								: "system will allow a retry"
						}.`
					);
					try {
						const user = await cb(currentUserData, password);
						logger14.log(user);
						setIsLoading(false);
						authenticator.send({ type: "OTP_VALID" });
					} catch (err) {
						logger14.log(err);
						if (currentAttempts >= 3) {
							logger14.log(err);
							logger14.info("OTP retries exceeded");
							setIsLoading(false);
							authenticator.send({
								type: "OTP_INVALID_RETRIES_EXCEEDED",
								error: "PASSWORD_RETRIES_EXCEEDED",
							});
							setAttemptsMade(0);
						} else {
							logger14.log(err);
							logger14.info(`OTP invalid, ${3 - currentAttempts} tries remaining`);
							setIsLoading(false);
							authenticator.send({
								type: "OTP_INVALID",
								error: `PASSWORD_INVALID_${3 - currentAttempts}_RETRIES_REMAINING`,
							});
							setAttemptsMade(currentAttempts);
						}
					}
				}
			},
			[attemptsMade, authenticator, currentUserData, error3, isActive, isLoading, validationErrors]
		);
		const goBack = () => authenticator.send({ type: "GO_BACK" });
		return {
			error: error3,
			isActive,
			isLoading,
			attemptsMade,
			validateOtp,
			validationErrors,
			goBack,
		};
	}

	// src/react/useSubmittingOtpUsername.ts
	var import_logger17 = __toModule(require_lib());
	var import_react39 = __toModule(require_react());
	function useSubmittingOtpUsername(cb, validators = { username: [] }) {
		const authenticator = useAuthInterpreter();
		const error3 = useSelector(authenticator, contextSelectors.error);
		const isActive = useSelector(authenticator, stateSelectors.isSubmittingOtpUsername);
		const logger14 = (0, import_logger17.useLogger)();
		const [validationErrors, setValidationErrors] = (0, import_react39.useState)({
			username: [],
		});
		const [isLoading, setIsLoading] = (0, import_react39.useState)(false);
		const validateUsername = (0, import_react39.useCallback)(
			async (username) => {
				const validationErrors2 = validateInputs(validators, { username });
				if (validationErrors2.username.length > 0) {
					setValidationErrors(validationErrors2);
					return;
				} else {
					setIsLoading(true);
					logger14.info(
						"OTP username validation initiated: if it resolves, the system will send out an OTP and user can move to the OTP input stage. If not, something is wrong with the username."
					);
					try {
						const user = await cb(username);
						logger14.log(user);
						logger14.info("OTP username valid");
						setIsLoading(false);
						authenticator.send({ type: "USERNAME_VALID", username, user });
					} catch (err) {
						logger14.log(err);
						logger14.info("OTP username invalid");
						setIsLoading(false);
						authenticator.send({ type: "USERNAME_INVALID", error: "USERNAME_INVALID" });
					}
				}
			},
			[authenticator, error3, isActive, isLoading, validationErrors]
		);
		return {
			error: error3,
			isActive,
			isLoading,
			validateUsername,
			validationErrors,
		};
	}

	// src/react/useSubmittingUsernameAndPassword.ts
	var import_logger18 = __toModule(require_lib());
	var import_react41 = __toModule(require_react());
	function useSubmittingUsernameAndPassword(cb, validators = { username: [], password: [] }) {
		const authenticator = useAuthInterpreter();
		const error3 = useSelector(authenticator, contextSelectors.error);
		const isActive = useSelector(authenticator, stateSelectors.isSubmittingUsernameAndPassword);
		const logger14 = (0, import_logger18.useLogger)();
		const [validationErrors, setValidationErrors] = (0, import_react41.useState)({
			username: [],
			password: [],
		});
		const [isLoading, setIsLoading] = (0, import_react41.useState)(false);
		const validateUsernameAndPassword = (0, import_react41.useCallback)(
			async (username, password) => {
				const validationErrors2 = validateInputs(validators, { username, password });
				if (validationErrors2.username.length > 0 || validationErrors2.password.length > 0) {
					setValidationErrors(validationErrors2);
					return;
				} else {
					setIsLoading(true);
					try {
						const resp = await cb(username, password);
						logger14.log(resp);
						setIsLoading(false);
						if (Array.isArray(resp) && resp[0] === "NEW_PASSWORD_REQUIRED") {
							authenticator.send({
								type: "USERNAME_AND_PASSWORD_VALID_PASSWORD_CHANGE_REQUIRED",
								user: resp[1],
								username,
								error: "PASSWORD_CHANGE_REQUIRED",
							});
						} else {
							authenticator.send({ type: "USERNAME_AND_PASSWORD_VALID", user: resp, username });
						}
					} catch (err) {
						logger14.log(err);
						setIsLoading(false);
						authenticator.send({
							type: "USERNAME_AND_PASSWORD_INVALID",
							error: "USERNAME_AND_PASSWORD_INVALID",
						});
					}
				}
			},
			[authenticator, isLoading, isActive, error3, validationErrors]
		);
		const forgottenPassword = () => {
			authenticator.send({ type: "FORGOTTEN_PASSWORD" });
		};
		return {
			error: error3,
			isActive,
			isLoading,
			validateUsernameAndPassword,
			validationErrors,
			forgottenPassword,
		};
	}

	// ../../node_modules/@aws-amplify/auth/lib-esm/types/Auth.js
	var CognitoHostedUIIdentityProvider;
	(function (CognitoHostedUIIdentityProvider2) {
		CognitoHostedUIIdentityProvider2["Cognito"] = "COGNITO";
		CognitoHostedUIIdentityProvider2["Google"] = "Google";
		CognitoHostedUIIdentityProvider2["Facebook"] = "Facebook";
		CognitoHostedUIIdentityProvider2["Amazon"] = "LoginWithAmazon";
		CognitoHostedUIIdentityProvider2["Apple"] = "SignInWithApple";
	})(CognitoHostedUIIdentityProvider || (CognitoHostedUIIdentityProvider = {}));
	function isFederatedSignInOptions(obj) {
		var keys2 = ["provider"];
		return (
			obj &&
			!!keys2.find(function (k) {
				return obj.hasOwnProperty(k);
			})
		);
	}
	function isFederatedSignInOptionsCustom(obj) {
		var keys2 = ["customProvider"];
		return (
			obj &&
			!!keys2.find(function (k) {
				return obj.hasOwnProperty(k);
			})
		);
	}
	function hasCustomState(obj) {
		var keys2 = ["customState"];
		return (
			obj &&
			!!keys2.find(function (k) {
				return obj.hasOwnProperty(k);
			})
		);
	}
	function isCognitoHostedOpts(oauth) {
		return oauth.redirectSignIn !== void 0;
	}
	var AuthErrorTypes;
	(function (AuthErrorTypes2) {
		AuthErrorTypes2["NoConfig"] = "noConfig";
		AuthErrorTypes2["MissingAuthConfig"] = "missingAuthConfig";
		AuthErrorTypes2["EmptyUsername"] = "emptyUsername";
		AuthErrorTypes2["InvalidUsername"] = "invalidUsername";
		AuthErrorTypes2["EmptyPassword"] = "emptyPassword";
		AuthErrorTypes2["EmptyCode"] = "emptyCode";
		AuthErrorTypes2["SignUpError"] = "signUpError";
		AuthErrorTypes2["NoMFA"] = "noMFA";
		AuthErrorTypes2["InvalidMFA"] = "invalidMFA";
		AuthErrorTypes2["EmptyChallengeResponse"] = "emptyChallengeResponse";
		AuthErrorTypes2["NoUserSession"] = "noUserSession";
		AuthErrorTypes2["Default"] = "default";
		AuthErrorTypes2["DeviceConfig"] = "deviceConfig";
		AuthErrorTypes2["NetworkError"] = "networkError";
	})(AuthErrorTypes || (AuthErrorTypes = {}));
	function isUsernamePasswordOpts(obj) {
		return !!obj.username;
	}

	// ../../node_modules/@aws-amplify/core/lib-esm/Util/Constants.js
	var AWS_CLOUDWATCH_CATEGORY = "Logging";

	// ../../node_modules/@aws-amplify/core/lib-esm/Logger/ConsoleLogger.js
	var __values3 = function (o) {
		var s = typeof Symbol === "function" && Symbol.iterator,
			m = s && o[s],
			i = 0;
		if (m) return m.call(o);
		if (o && typeof o.length === "number")
			return {
				next: function () {
					if (o && i >= o.length) o = void 0;
					return { value: o && o[i++], done: !o };
				},
			};
		throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
	};
	var __read6 = function (o, n) {
		var m = typeof Symbol === "function" && o[Symbol.iterator];
		if (!m) return o;
		var i = m.call(o),
			r,
			ar = [],
			e;
		try {
			while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
		} catch (error3) {
			e = { error: error3 };
		} finally {
			try {
				if (r && !r.done && (m = i["return"])) m.call(i);
			} finally {
				if (e) throw e.error;
			}
		}
		return ar;
	};
	var __spread = function () {
		for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read6(arguments[i]));
		return ar;
	};
	var LOG_LEVELS = {
		VERBOSE: 1,
		DEBUG: 2,
		INFO: 3,
		WARN: 4,
		ERROR: 5,
	};
	var LOG_TYPE;
	(function (LOG_TYPE2) {
		LOG_TYPE2["DEBUG"] = "DEBUG";
		LOG_TYPE2["ERROR"] = "ERROR";
		LOG_TYPE2["INFO"] = "INFO";
		LOG_TYPE2["WARN"] = "WARN";
		LOG_TYPE2["VERBOSE"] = "VERBOSE";
	})(LOG_TYPE || (LOG_TYPE = {}));
	var ConsoleLogger = (function () {
		function ConsoleLogger2(name2, level) {
			if (level === void 0) {
				level = LOG_TYPE.WARN;
			}
			this.name = name2;
			this.level = level;
			this._pluggables = [];
		}
		ConsoleLogger2.prototype._padding = function (n) {
			return n < 10 ? "0" + n : "" + n;
		};
		ConsoleLogger2.prototype._ts = function () {
			var dt = new Date();
			return (
				[this._padding(dt.getMinutes()), this._padding(dt.getSeconds())].join(":") +
				"." +
				dt.getMilliseconds()
			);
		};
		ConsoleLogger2.prototype.configure = function (config) {
			if (!config) return this._config;
			this._config = config;
			return this._config;
		};
		ConsoleLogger2.prototype._log = function (type) {
			var e_1, _a;
			var msg = [];
			for (var _i = 1; _i < arguments.length; _i++) {
				msg[_i - 1] = arguments[_i];
			}
			var logger_level_name = this.level;
			if (ConsoleLogger2.LOG_LEVEL) {
				logger_level_name = ConsoleLogger2.LOG_LEVEL;
			}
			if (typeof window !== "undefined" && window.LOG_LEVEL) {
				logger_level_name = window.LOG_LEVEL;
			}
			var logger_level = LOG_LEVELS[logger_level_name];
			var type_level = LOG_LEVELS[type];
			if (!(type_level >= logger_level)) {
				return;
			}
			var log2 = console.log.bind(console);
			if (type === LOG_TYPE.ERROR && console.error) {
				log2 = console.error.bind(console);
			}
			if (type === LOG_TYPE.WARN && console.warn) {
				log2 = console.warn.bind(console);
			}
			var prefix = "[" + type + "] " + this._ts() + " " + this.name;
			var message = "";
			if (msg.length === 1 && typeof msg[0] === "string") {
				message = prefix + " - " + msg[0];
				log2(message);
			} else if (msg.length === 1) {
				message = prefix + " " + msg[0];
				log2(prefix, msg[0]);
			} else if (typeof msg[0] === "string") {
				var obj = msg.slice(1);
				if (obj.length === 1) {
					obj = obj[0];
				}
				message = prefix + " - " + msg[0] + " " + obj;
				log2(prefix + " - " + msg[0], obj);
			} else {
				message = prefix + " " + msg;
				log2(prefix, msg);
			}
			try {
				for (var _b = __values3(this._pluggables), _c = _b.next(); !_c.done; _c = _b.next()) {
					var plugin = _c.value;
					var logEvent = { message, timestamp: Date.now() };
					plugin.pushLogs([logEvent]);
				}
			} catch (e_1_1) {
				e_1 = { error: e_1_1 };
			} finally {
				try {
					if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
				} finally {
					if (e_1) throw e_1.error;
				}
			}
		};
		ConsoleLogger2.prototype.log = function () {
			var msg = [];
			for (var _i = 0; _i < arguments.length; _i++) {
				msg[_i] = arguments[_i];
			}
			this._log.apply(this, __spread([LOG_TYPE.INFO], msg));
		};
		ConsoleLogger2.prototype.info = function () {
			var msg = [];
			for (var _i = 0; _i < arguments.length; _i++) {
				msg[_i] = arguments[_i];
			}
			this._log.apply(this, __spread([LOG_TYPE.INFO], msg));
		};
		ConsoleLogger2.prototype.warn = function () {
			var msg = [];
			for (var _i = 0; _i < arguments.length; _i++) {
				msg[_i] = arguments[_i];
			}
			this._log.apply(this, __spread([LOG_TYPE.WARN], msg));
		};
		ConsoleLogger2.prototype.error = function () {
			var msg = [];
			for (var _i = 0; _i < arguments.length; _i++) {
				msg[_i] = arguments[_i];
			}
			this._log.apply(this, __spread([LOG_TYPE.ERROR], msg));
		};
		ConsoleLogger2.prototype.debug = function () {
			var msg = [];
			for (var _i = 0; _i < arguments.length; _i++) {
				msg[_i] = arguments[_i];
			}
			this._log.apply(this, __spread([LOG_TYPE.DEBUG], msg));
		};
		ConsoleLogger2.prototype.verbose = function () {
			var msg = [];
			for (var _i = 0; _i < arguments.length; _i++) {
				msg[_i] = arguments[_i];
			}
			this._log.apply(this, __spread([LOG_TYPE.VERBOSE], msg));
		};
		ConsoleLogger2.prototype.addPluggable = function (pluggable) {
			if (pluggable && pluggable.getCategoryName() === AWS_CLOUDWATCH_CATEGORY) {
				this._pluggables.push(pluggable);
				pluggable.configure(this._config);
			}
		};
		ConsoleLogger2.prototype.listPluggables = function () {
			return this._pluggables;
		};
		ConsoleLogger2.LOG_LEVEL = null;
		return ConsoleLogger2;
	})();

	// ../../node_modules/@aws-amplify/core/lib-esm/Amplify.js
	var __read7 = function (o, n) {
		var m = typeof Symbol === "function" && o[Symbol.iterator];
		if (!m) return o;
		var i = m.call(o),
			r,
			ar = [],
			e;
		try {
			while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
		} catch (error3) {
			e = { error: error3 };
		} finally {
			try {
				if (r && !r.done && (m = i["return"])) m.call(i);
			} finally {
				if (e) throw e.error;
			}
		}
		return ar;
	};
	var logger = new ConsoleLogger("Amplify");
	var AmplifyClass = (function () {
		function AmplifyClass2() {
			this._components = [];
			this._config = {};
			this._modules = {};
			this.Auth = null;
			this.Analytics = null;
			this.API = null;
			this.Credentials = null;
			this.Storage = null;
			this.I18n = null;
			this.Cache = null;
			this.PubSub = null;
			this.Interactions = null;
			this.Pushnotification = null;
			this.UI = null;
			this.XR = null;
			this.Predictions = null;
			this.DataStore = null;
			this.Logger = ConsoleLogger;
			this.ServiceWorker = null;
		}
		AmplifyClass2.prototype.register = function (comp) {
			logger.debug("component registered in amplify", comp);
			this._components.push(comp);
			if (typeof comp.getModuleName === "function") {
				this._modules[comp.getModuleName()] = comp;
				this[comp.getModuleName()] = comp;
			} else {
				logger.debug("no getModuleName method for component", comp);
			}
			comp.configure(this._config);
		};
		AmplifyClass2.prototype.configure = function (config) {
			var _this = this;
			if (!config) return this._config;
			this._config = Object.assign(this._config, config);
			logger.debug("amplify config", this._config);
			Object.entries(this._modules).forEach(function (_a) {
				var _b = __read7(_a, 2),
					Name = _b[0],
					comp = _b[1];
				Object.keys(comp).forEach(function (property) {
					if (_this._modules[property]) {
						comp[property] = _this._modules[property];
					}
				});
			});
			this._components.map(function (comp) {
				comp.configure(_this._config);
			});
			return this._config;
		};
		AmplifyClass2.prototype.addPluggable = function (pluggable) {
			if (pluggable && pluggable["getCategory"] && typeof pluggable["getCategory"] === "function") {
				this._components.map(function (comp) {
					if (comp["addPluggable"] && typeof comp["addPluggable"] === "function") {
						comp.addPluggable(pluggable);
					}
				});
			}
		};
		return AmplifyClass2;
	})();
	var Amplify = new AmplifyClass();

	// ../../node_modules/@aws-amplify/core/lib-esm/Platform/version.js
	var version = "4.2.2";

	// ../../node_modules/@aws-amplify/core/lib-esm/Platform/index.js
	var BASE_USER_AGENT = "aws-amplify/" + version;
	var Platform = {
		userAgent: BASE_USER_AGENT + " js",
		product: "",
		navigator: null,
		isReactNative: false,
	};
	if (typeof navigator !== "undefined" && navigator.product) {
		Platform.product = navigator.product || "";
		Platform.navigator = navigator || null;
		switch (navigator.product) {
			case "ReactNative":
				Platform.userAgent = BASE_USER_AGENT + " react-native";
				Platform.isReactNative = true;
				break;
			default:
				Platform.userAgent = BASE_USER_AGENT + " js";
				Platform.isReactNative = false;
				break;
		}
	}
	var getAmplifyUserAgent = function () {
		return Platform.userAgent;
	};

	// ../../node_modules/@aws-amplify/core/lib-esm/Hub.js
	var __assign4 = function () {
		__assign4 =
			Object.assign ||
			function (t) {
				for (var s, i = 1, n = arguments.length; i < n; i++) {
					s = arguments[i];
					for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
				}
				return t;
			};
		return __assign4.apply(this, arguments);
	};
	var __read8 = function (o, n) {
		var m = typeof Symbol === "function" && o[Symbol.iterator];
		if (!m) return o;
		var i = m.call(o),
			r,
			ar = [],
			e;
		try {
			while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
		} catch (error3) {
			e = { error: error3 };
		} finally {
			try {
				if (r && !r.done && (m = i["return"])) m.call(i);
			} finally {
				if (e) throw e.error;
			}
		}
		return ar;
	};
	var __spread2 = function () {
		for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read8(arguments[i]));
		return ar;
	};
	var logger2 = new ConsoleLogger("Hub");
	var AMPLIFY_SYMBOL =
		typeof Symbol !== "undefined" && typeof Symbol.for === "function"
			? Symbol.for("amplify_default")
			: "@@amplify_default";
	function isLegacyCallback(callback) {
		return callback.onHubCapsule !== void 0;
	}
	var HubClass = (function () {
		function HubClass2(name2) {
			this.listeners = [];
			this.patterns = [];
			this.protectedChannels = [
				"core",
				"auth",
				"api",
				"analytics",
				"interactions",
				"pubsub",
				"storage",
				"xr",
			];
			this.name = name2;
		}
		HubClass2.prototype.remove = function (channel, listener) {
			if (channel instanceof RegExp) {
				var pattern_1 = this.patterns.find(function (_a) {
					var pattern = _a.pattern;
					return pattern.source === channel.source;
				});
				if (!pattern_1) {
					logger2.warn("No listeners for " + channel);
					return;
				}
				this.patterns = __spread2(
					this.patterns.filter(function (x) {
						return x !== pattern_1;
					})
				);
			} else {
				var holder = this.listeners[channel];
				if (!holder) {
					logger2.warn("No listeners for " + channel);
					return;
				}
				this.listeners[channel] = __spread2(
					holder.filter(function (_a) {
						var callback = _a.callback;
						return callback !== listener;
					})
				);
			}
		};
		HubClass2.prototype.dispatch = function (channel, payload, source, ampSymbol) {
			if (source === void 0) {
				source = "";
			}
			if (this.protectedChannels.indexOf(channel) > -1) {
				var hasAccess = ampSymbol === AMPLIFY_SYMBOL;
				if (!hasAccess) {
					logger2.warn(
						"WARNING: " +
							channel +
							" is protected and dispatching on it can have unintended consequences"
					);
				}
			}
			var capsule = {
				channel,
				payload: __assign4({}, payload),
				source,
				patternInfo: [],
			};
			try {
				this._toListeners(capsule);
			} catch (e) {
				logger2.error(e);
			}
		};
		HubClass2.prototype.listen = function (channel, callback, listenerName) {
			var _this = this;
			if (listenerName === void 0) {
				listenerName = "noname";
			}
			var cb;
			if (isLegacyCallback(callback)) {
				logger2.warn("WARNING onHubCapsule is Deprecated. Please pass in a callback.");
				cb = callback.onHubCapsule.bind(callback);
			} else if (typeof callback !== "function") {
				throw new Error("No callback supplied to Hub");
			} else {
				cb = callback;
			}
			if (channel instanceof RegExp) {
				this.patterns.push({
					pattern: channel,
					callback: cb,
				});
			} else {
				var holder = this.listeners[channel];
				if (!holder) {
					holder = [];
					this.listeners[channel] = holder;
				}
				holder.push({
					name: listenerName,
					callback: cb,
				});
			}
			return function () {
				_this.remove(channel, cb);
			};
		};
		HubClass2.prototype._toListeners = function (capsule) {
			var channel = capsule.channel,
				payload = capsule.payload;
			var holder = this.listeners[channel];
			if (holder) {
				holder.forEach(function (listener) {
					logger2.debug("Dispatching to " + channel + " with ", payload);
					try {
						listener.callback(capsule);
					} catch (e) {
						logger2.error(e);
					}
				});
			}
			if (this.patterns.length > 0) {
				if (!payload.message) {
					logger2.warn("Cannot perform pattern matching without a message key");
					return;
				}
				var payloadStr_1 = payload.message;
				this.patterns.forEach(function (pattern) {
					var match = payloadStr_1.match(pattern.pattern);
					if (match) {
						var _a = __read8(match),
							groups = _a.slice(1);
						var dispatchingCapsule = __assign4(__assign4({}, capsule), { patternInfo: groups });
						try {
							pattern.callback(dispatchingCapsule);
						} catch (e) {
							logger2.error(e);
						}
					}
				});
			}
		};
		return HubClass2;
	})();
	var Hub = new HubClass("__default__");

	// ../../node_modules/@aws-amplify/core/lib-esm/I18n/I18n.js
	var logger3 = new ConsoleLogger("I18n");
	var I18n = (function () {
		function I18n3(options) {
			this._options = null;
			this._lang = null;
			this._dict = {};
			this._options = Object.assign({}, options);
			this._lang = this._options.language;
			if (!this._lang && typeof window !== "undefined" && window && window.navigator) {
				this._lang = window.navigator.language;
			}
			logger3.debug(this._lang);
		}
		I18n3.prototype.setLanguage = function (lang) {
			this._lang = lang;
		};
		I18n3.prototype.get = function (key, defVal) {
			if (defVal === void 0) {
				defVal = void 0;
			}
			if (!this._lang) {
				return typeof defVal !== "undefined" ? defVal : key;
			}
			var lang = this._lang;
			var val = this.getByLanguage(key, lang);
			if (val) {
				return val;
			}
			if (lang.indexOf("-") > 0) {
				val = this.getByLanguage(key, lang.split("-")[0]);
			}
			if (val) {
				return val;
			}
			return typeof defVal !== "undefined" ? defVal : key;
		};
		I18n3.prototype.getByLanguage = function (key, language, defVal) {
			if (defVal === void 0) {
				defVal = null;
			}
			if (!language) {
				return defVal;
			}
			var lang_dict = this._dict[language];
			if (!lang_dict) {
				return defVal;
			}
			return lang_dict[key];
		};
		I18n3.prototype.putVocabulariesForLanguage = function (language, vocabularies) {
			var lang_dict = this._dict[language];
			if (!lang_dict) {
				lang_dict = this._dict[language] = {};
			}
			Object.assign(lang_dict, vocabularies);
		};
		I18n3.prototype.putVocabularies = function (vocabularies) {
			var _this = this;
			Object.keys(vocabularies).map(function (key) {
				_this.putVocabulariesForLanguage(key, vocabularies[key]);
			});
		};
		return I18n3;
	})();

	// ../../node_modules/@aws-amplify/core/lib-esm/I18n/index.js
	var logger4 = new ConsoleLogger("I18n");
	var _config = null;
	var _i18n = null;
	var I18n2 = (function () {
		function I18n3() {}
		I18n3.configure = function (config) {
			logger4.debug("configure I18n");
			if (!config) {
				return _config;
			}
			_config = Object.assign({}, _config, config.I18n || config);
			I18n3.createInstance();
			return _config;
		};
		I18n3.getModuleName = function () {
			return "I18n";
		};
		I18n3.createInstance = function () {
			logger4.debug("create I18n instance");
			if (_i18n) {
				return;
			}
			_i18n = new I18n(_config);
		};
		I18n3.setLanguage = function (lang) {
			I18n3.checkConfig();
			return _i18n.setLanguage(lang);
		};
		I18n3.get = function (key, defVal) {
			if (!I18n3.checkConfig()) {
				return typeof defVal === "undefined" ? key : defVal;
			}
			return _i18n.get(key, defVal);
		};
		I18n3.putVocabulariesForLanguage = function (language, vocabularies) {
			I18n3.checkConfig();
			return _i18n.putVocabulariesForLanguage(language, vocabularies);
		};
		I18n3.putVocabularies = function (vocabularies) {
			I18n3.checkConfig();
			return _i18n.putVocabularies(vocabularies);
		};
		I18n3.checkConfig = function () {
			if (!_i18n) {
				_i18n = new I18n(_config);
			}
			return true;
		};
		return I18n3;
	})();
	Amplify.register(I18n2);

	// ../../node_modules/@aws-amplify/core/lib-esm/JS.js
	var MIME_MAP = [
		{ type: "text/plain", ext: "txt" },
		{ type: "text/html", ext: "html" },
		{ type: "text/javascript", ext: "js" },
		{ type: "text/css", ext: "css" },
		{ type: "text/csv", ext: "csv" },
		{ type: "text/yaml", ext: "yml" },
		{ type: "text/yaml", ext: "yaml" },
		{ type: "text/calendar", ext: "ics" },
		{ type: "text/calendar", ext: "ical" },
		{ type: "image/apng", ext: "apng" },
		{ type: "image/bmp", ext: "bmp" },
		{ type: "image/gif", ext: "gif" },
		{ type: "image/x-icon", ext: "ico" },
		{ type: "image/x-icon", ext: "cur" },
		{ type: "image/jpeg", ext: "jpg" },
		{ type: "image/jpeg", ext: "jpeg" },
		{ type: "image/jpeg", ext: "jfif" },
		{ type: "image/jpeg", ext: "pjp" },
		{ type: "image/jpeg", ext: "pjpeg" },
		{ type: "image/png", ext: "png" },
		{ type: "image/svg+xml", ext: "svg" },
		{ type: "image/tiff", ext: "tif" },
		{ type: "image/tiff", ext: "tiff" },
		{ type: "image/webp", ext: "webp" },
		{ type: "application/json", ext: "json" },
		{ type: "application/xml", ext: "xml" },
		{ type: "application/x-sh", ext: "sh" },
		{ type: "application/zip", ext: "zip" },
		{ type: "application/x-rar-compressed", ext: "rar" },
		{ type: "application/x-tar", ext: "tar" },
		{ type: "application/x-bzip", ext: "bz" },
		{ type: "application/x-bzip2", ext: "bz2" },
		{ type: "application/pdf", ext: "pdf" },
		{ type: "application/java-archive", ext: "jar" },
		{ type: "application/msword", ext: "doc" },
		{ type: "application/vnd.ms-excel", ext: "xls" },
		{ type: "application/vnd.ms-excel", ext: "xlsx" },
		{ type: "message/rfc822", ext: "eml" },
	];
	var isEmpty = function (obj) {
		if (obj === void 0) {
			obj = {};
		}
		return Object.keys(obj).length === 0;
	};
	var sortByField = function (list, field, dir) {
		if (!list || !list.sort) {
			return false;
		}
		var dirX = dir && dir === "desc" ? -1 : 1;
		list.sort(function (a, b) {
			var a_val = a[field];
			var b_val = b[field];
			if (typeof b_val === "undefined") {
				return typeof a_val === "undefined" ? 0 : 1 * dirX;
			}
			if (typeof a_val === "undefined") {
				return -1 * dirX;
			}
			if (a_val < b_val) {
				return -1 * dirX;
			}
			if (a_val > b_val) {
				return 1 * dirX;
			}
			return 0;
		});
		return true;
	};
	var objectLessAttributes = function (obj, less) {
		var ret = Object.assign({}, obj);
		if (less) {
			if (typeof less === "string") {
				delete ret[less];
			} else {
				less.forEach(function (attr) {
					delete ret[attr];
				});
			}
		}
		return ret;
	};
	var filenameToContentType = function (filename, defVal) {
		if (defVal === void 0) {
			defVal = "application/octet-stream";
		}
		var name2 = filename.toLowerCase();
		var filtered = MIME_MAP.filter(function (mime) {
			return name2.endsWith("." + mime.ext);
		});
		return filtered.length > 0 ? filtered[0].type : defVal;
	};
	var isTextFile = function (contentType) {
		var type = contentType.toLowerCase();
		if (type.startsWith("text/")) {
			return true;
		}
		return type === "application/json" || type === "application/xml" || type === "application/sh";
	};
	var generateRandomString = function () {
		var result = "";
		var chars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
		for (var i = 32; i > 0; i -= 1) {
			result += chars[Math.floor(Math.random() * chars.length)];
		}
		return result;
	};
	var makeQuerablePromise = function (promise) {
		if (promise.isResolved) return promise;
		var isPending = true;
		var isRejected = false;
		var isFullfilled = false;
		var result = promise.then(
			function (data) {
				isFullfilled = true;
				isPending = false;
				return data;
			},
			function (e) {
				isRejected = true;
				isPending = false;
				throw e;
			}
		);
		result.isFullfilled = function () {
			return isFullfilled;
		};
		result.isPending = function () {
			return isPending;
		};
		result.isRejected = function () {
			return isRejected;
		};
		return result;
	};
	var isWebWorker = function () {
		if (typeof self === "undefined") {
			return false;
		}
		var selfContext = self;
		return (
			typeof selfContext.WorkerGlobalScope !== "undefined" &&
			self instanceof selfContext.WorkerGlobalScope
		);
	};
	var browserOrNode = function () {
		var isBrowser3 = typeof window !== "undefined" && typeof window.document !== "undefined";
		var isNode =
			typeof process !== "undefined" && process.versions != null && process.versions.node != null;
		return {
			isBrowser: isBrowser3,
			isNode,
		};
	};
	var transferKeyToLowerCase = function (obj, whiteListForItself, whiteListForChildren) {
		if (whiteListForItself === void 0) {
			whiteListForItself = [];
		}
		if (whiteListForChildren === void 0) {
			whiteListForChildren = [];
		}
		if (!isStrictObject(obj)) return obj;
		var ret = {};
		for (var key in obj) {
			if (obj.hasOwnProperty(key)) {
				var transferedKey = whiteListForItself.includes(key)
					? key
					: key[0].toLowerCase() + key.slice(1);
				ret[transferedKey] = whiteListForChildren.includes(key)
					? obj[key]
					: transferKeyToLowerCase(obj[key], whiteListForItself, whiteListForChildren);
			}
		}
		return ret;
	};
	var transferKeyToUpperCase = function (obj, whiteListForItself, whiteListForChildren) {
		if (whiteListForItself === void 0) {
			whiteListForItself = [];
		}
		if (whiteListForChildren === void 0) {
			whiteListForChildren = [];
		}
		if (!isStrictObject(obj)) return obj;
		var ret = {};
		for (var key in obj) {
			if (obj.hasOwnProperty(key)) {
				var transferredKey = whiteListForItself.includes(key)
					? key
					: key[0].toUpperCase() + key.slice(1);
				ret[transferredKey] = whiteListForChildren.includes(key)
					? obj[key]
					: transferKeyToUpperCase(obj[key], whiteListForItself, whiteListForChildren);
			}
		}
		return ret;
	};
	var isStrictObject = function (obj) {
		return (
			obj instanceof Object &&
			!(obj instanceof Array) &&
			!(obj instanceof Function) &&
			!(obj instanceof Number) &&
			!(obj instanceof String) &&
			!(obj instanceof Boolean)
		);
	};
	var JS = (function () {
		function JS2() {}
		JS2.isEmpty = isEmpty;
		JS2.sortByField = sortByField;
		JS2.objectLessAttributes = objectLessAttributes;
		JS2.filenameToContentType = filenameToContentType;
		JS2.isTextFile = isTextFile;
		JS2.generateRandomString = generateRandomString;
		JS2.makeQuerablePromise = makeQuerablePromise;
		JS2.isWebWorker = isWebWorker;
		JS2.browserOrNode = browserOrNode;
		JS2.transferKeyToLowerCase = transferKeyToLowerCase;
		JS2.transferKeyToUpperCase = transferKeyToUpperCase;
		JS2.isStrictObject = isStrictObject;
		return JS2;
	})();

	// ../../node_modules/@aws-sdk/util-hex-encoding/dist/es/index.js
	var SHORT_TO_HEX = {};
	var HEX_TO_SHORT = {};
	for (i = 0; i < 256; i++) {
		encodedByte = i.toString(16).toLowerCase();
		if (encodedByte.length === 1) {
			encodedByte = "0" + encodedByte;
		}
		SHORT_TO_HEX[i] = encodedByte;
		HEX_TO_SHORT[encodedByte] = i;
	}
	var encodedByte;
	var i;
	function toHex(bytes) {
		var out = "";
		for (var i = 0; i < bytes.byteLength; i++) {
			out += SHORT_TO_HEX[bytes[i]];
		}
		return out;
	}

	// ../../node_modules/@aws-amplify/core/lib-esm/Util/Retry.js
	var __extends = (function () {
		var extendStatics = function (d, b) {
			extendStatics =
				Object.setPrototypeOf ||
				({ __proto__: [] } instanceof Array &&
					function (d2, b2) {
						d2.__proto__ = b2;
					}) ||
				function (d2, b2) {
					for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
				};
			return extendStatics(d, b);
		};
		return function (d, b) {
			extendStatics(d, b);
			function __() {
				this.constructor = d;
			}
			d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
		};
	})();
	var __awaiter = function (thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P
				? value
				: new P(function (resolve) {
						resolve(value);
				  });
		}
		return new (P || (P = Promise))(function (resolve, reject) {
			function fulfilled(value) {
				try {
					step(generator.next(value));
				} catch (e) {
					reject(e);
				}
			}
			function rejected(value) {
				try {
					step(generator["throw"](value));
				} catch (e) {
					reject(e);
				}
			}
			function step(result) {
				result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	var __generator = function (thisArg, body) {
		var _ = {
				label: 0,
				sent: function () {
					if (t[0] & 1) throw t[1];
					return t[1];
				},
				trys: [],
				ops: [],
			},
			f,
			y,
			t,
			g;
		return (
			(g = { next: verb(0), throw: verb(1), return: verb(2) }),
			typeof Symbol === "function" &&
				(g[Symbol.iterator] = function () {
					return this;
				}),
			g
		);
		function verb(n) {
			return function (v) {
				return step([n, v]);
			};
		}
		function step(op) {
			if (f) throw new TypeError("Generator is already executing.");
			while (_)
				try {
					if (
						((f = 1),
						y &&
							(t =
								op[0] & 2
									? y["return"]
									: op[0]
									? y["throw"] || ((t = y["return"]) && t.call(y), 0)
									: y.next) &&
							!(t = t.call(y, op[1])).done)
					)
						return t;
					if (((y = 0), t)) op = [op[0] & 2, t.value];
					switch (op[0]) {
						case 0:
						case 1:
							t = op;
							break;
						case 4:
							_.label++;
							return { value: op[1], done: false };
						case 5:
							_.label++;
							y = op[1];
							op = [0];
							continue;
						case 7:
							op = _.ops.pop();
							_.trys.pop();
							continue;
						default:
							if (
								!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) &&
								(op[0] === 6 || op[0] === 2)
							) {
								_ = 0;
								continue;
							}
							if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
								_.label = op[1];
								break;
							}
							if (op[0] === 6 && _.label < t[1]) {
								_.label = t[1];
								t = op;
								break;
							}
							if (t && _.label < t[2]) {
								_.label = t[2];
								_.ops.push(op);
								break;
							}
							if (t[2]) _.ops.pop();
							_.trys.pop();
							continue;
					}
					op = body.call(thisArg, _);
				} catch (e) {
					op = [6, e];
					y = 0;
				} finally {
					f = t = 0;
				}
			if (op[0] & 5) throw op[1];
			return { value: op[0] ? op[1] : void 0, done: true };
		}
	};
	var __read9 = function (o, n) {
		var m = typeof Symbol === "function" && o[Symbol.iterator];
		if (!m) return o;
		var i = m.call(o),
			r,
			ar = [],
			e;
		try {
			while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
		} catch (error3) {
			e = { error: error3 };
		} finally {
			try {
				if (r && !r.done && (m = i["return"])) m.call(i);
			} finally {
				if (e) throw e.error;
			}
		}
		return ar;
	};
	var __spread3 = function () {
		for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read9(arguments[i]));
		return ar;
	};
	var logger5 = new ConsoleLogger("Util");
	var NonRetryableError = (function (_super) {
		__extends(NonRetryableError2, _super);
		function NonRetryableError2(message) {
			var _this = _super.call(this, message) || this;
			_this.nonRetryable = true;
			return _this;
		}
		return NonRetryableError2;
	})(Error);
	var isNonRetryableError = function (obj) {
		var key = "nonRetryable";
		return obj && obj[key];
	};
	function retry(functionToRetry, args, delayFn, attempt) {
		if (attempt === void 0) {
			attempt = 1;
		}
		return __awaiter(this, void 0, void 0, function () {
			var err_1, retryIn_1;
			return __generator(this, function (_a) {
				switch (_a.label) {
					case 0:
						if (typeof functionToRetry !== "function") {
							throw Error("functionToRetry must be a function");
						}
						logger5.debug(
							functionToRetry.name +
								" attempt #" +
								attempt +
								" with this vars: " +
								JSON.stringify(args)
						);
						_a.label = 1;
					case 1:
						_a.trys.push([1, 3, , 8]);
						return [4, functionToRetry.apply(void 0, __spread3(args))];
					case 2:
						return [2, _a.sent()];
					case 3:
						err_1 = _a.sent();
						logger5.debug("error on " + functionToRetry.name, err_1);
						if (isNonRetryableError(err_1)) {
							logger5.debug(functionToRetry.name + " non retryable error", err_1);
							throw err_1;
						}
						retryIn_1 = delayFn(attempt, args, err_1);
						logger5.debug(functionToRetry.name + " retrying in " + retryIn_1 + " ms");
						if (!(retryIn_1 !== false)) return [3, 6];
						return [
							4,
							new Promise(function (res) {
								return setTimeout(res, retryIn_1);
							}),
						];
					case 4:
						_a.sent();
						return [4, retry(functionToRetry, args, delayFn, attempt + 1)];
					case 5:
						return [2, _a.sent()];
					case 6:
						throw err_1;
					case 7:
						return [3, 8];
					case 8:
						return [2];
				}
			});
		});
	}
	var MAX_DELAY_MS = 5 * 60 * 1e3;
	function jitteredBackoff(maxDelayMs) {
		var BASE_TIME_MS = 100;
		var JITTER_FACTOR = 100;
		return function (attempt) {
			var delay = Math.pow(2, attempt) * BASE_TIME_MS + JITTER_FACTOR * Math.random();
			return delay > maxDelayMs ? false : delay;
		};
	}
	var jitteredExponentialRetry = function (functionToRetry, args, maxDelayMs) {
		if (maxDelayMs === void 0) {
			maxDelayMs = MAX_DELAY_MS;
		}
		return retry(functionToRetry, args, jitteredBackoff(maxDelayMs));
	};

	// ../../node_modules/@aws-amplify/core/lib-esm/Util/StringUtils.js
	function urlSafeEncode(str) {
		return str
			.split("")
			.map(function (char) {
				return char.charCodeAt(0).toString(16).padStart(2, "0");
			})
			.join("");
	}
	function urlSafeDecode(hex) {
		return hex
			.match(/.{2}/g)
			.map(function (char) {
				return String.fromCharCode(parseInt(char, 16));
			})
			.join("");
	}

	// ../../node_modules/@aws-amplify/core/lib-esm/Parser.js
	var __assign5 = function () {
		__assign5 =
			Object.assign ||
			function (t) {
				for (var s, i = 1, n = arguments.length; i < n; i++) {
					s = arguments[i];
					for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
				}
				return t;
			};
		return __assign5.apply(this, arguments);
	};
	var logger6 = new ConsoleLogger("Parser");
	var parseMobileHubConfig = function (config) {
		var amplifyConfig = {};
		if (config["aws_mobile_analytics_app_id"]) {
			var Analytics = {
				AWSPinpoint: {
					appId: config["aws_mobile_analytics_app_id"],
					region: config["aws_mobile_analytics_app_region"],
				},
			};
			amplifyConfig.Analytics = Analytics;
		}
		if (config["aws_cognito_identity_pool_id"] || config["aws_user_pools_id"]) {
			amplifyConfig.Auth = {
				userPoolId: config["aws_user_pools_id"],
				userPoolWebClientId: config["aws_user_pools_web_client_id"],
				region: config["aws_cognito_region"],
				identityPoolId: config["aws_cognito_identity_pool_id"],
				identityPoolRegion: config["aws_cognito_region"],
				mandatorySignIn: config["aws_mandatory_sign_in"] === "enable",
			};
		}
		var storageConfig;
		if (config["aws_user_files_s3_bucket"]) {
			storageConfig = {
				AWSS3: {
					bucket: config["aws_user_files_s3_bucket"],
					region: config["aws_user_files_s3_bucket_region"],
					dangerouslyConnectToHttpEndpointForTesting:
						config["aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing"],
				},
			};
		} else {
			storageConfig = config ? config.Storage || config : {};
		}
		if (config["Logging"]) {
			amplifyConfig.Logging = __assign5(__assign5({}, config["Logging"]), {
				region: config["aws_project_region"],
			});
		}
		amplifyConfig.Analytics = Object.assign({}, amplifyConfig.Analytics, config.Analytics);
		amplifyConfig.Auth = Object.assign({}, amplifyConfig.Auth, config.Auth);
		amplifyConfig.Storage = Object.assign({}, storageConfig);
		amplifyConfig.Logging = Object.assign({}, amplifyConfig.Logging, config.Logging);
		logger6.debug("parse config", config, "to amplifyconfig", amplifyConfig);
		return amplifyConfig;
	};
	var Parser = (function () {
		function Parser2() {}
		Parser2.parseMobilehubConfig = parseMobileHubConfig;
		return Parser2;
	})();

	// ../../node_modules/tslib/modules/index.js
	var import_tslib11 = __toModule(require_tslib2());
	var {
		__extends: __extends2,
		__assign: __assign6,
		__rest: __rest3,
		__decorate,
		__param,
		__metadata,
		__awaiter: __awaiter2,
		__generator: __generator2,
		__exportStar,
		__createBinding,
		__values: __values4,
		__read: __read10,
		__spread: __spread4,
		__spreadArrays,
		__await,
		__asyncGenerator,
		__asyncDelegator,
		__asyncValues,
		__makeTemplateObject,
		__importStar,
		__importDefault,
		__classPrivateFieldGet,
		__classPrivateFieldSet,
	} = import_tslib11.default;

	// ../../node_modules/@aws-sdk/protocol-http/dist/es/httpResponse.js
	var HttpResponse = (function () {
		function HttpResponse2(options) {
			this.statusCode = options.statusCode;
			this.headers = options.headers || {};
			this.body = options.body;
		}
		HttpResponse2.isInstance = function (response) {
			if (!response) return false;
			var resp = response;
			return typeof resp.statusCode === "number" && typeof resp.headers === "object";
		};
		return HttpResponse2;
	})();

	// ../../node_modules/@aws-sdk/protocol-http/dist/es/httpRequest.js
	var HttpRequest = (function () {
		function HttpRequest2(options) {
			this.method = options.method || "GET";
			this.hostname = options.hostname || "localhost";
			this.port = options.port;
			this.query = options.query || {};
			this.headers = options.headers || {};
			this.body = options.body;
			this.protocol = options.protocol
				? options.protocol.substr(-1) !== ":"
					? options.protocol + ":"
					: options.protocol
				: "https:";
			this.path = options.path
				? options.path.charAt(0) !== "/"
					? "/" + options.path
					: options.path
				: "/";
		}
		HttpRequest2.isInstance = function (request) {
			if (!request) return false;
			var req = request;
			return (
				"method" in req &&
				"protocol" in req &&
				"hostname" in req &&
				"path" in req &&
				typeof req["query"] === "object" &&
				typeof req["headers"] === "object"
			);
		};
		HttpRequest2.prototype.clone = function () {
			var cloned = new HttpRequest2(
				__assign6(__assign6({}, this), { headers: __assign6({}, this.headers) })
			);
			if (cloned.query) cloned.query = cloneQuery(cloned.query);
			return cloned;
		};
		return HttpRequest2;
	})();
	function cloneQuery(query) {
		return Object.keys(query).reduce(function (carry, paramName) {
			var _a;
			var param = query[paramName];
			return __assign6(
				__assign6({}, carry),
				((_a = {}), (_a[paramName] = Array.isArray(param) ? __spread4(param) : param), _a)
			);
		}, {});
	}

	// ../../node_modules/@aws-sdk/util-uri-escape/dist/es/escape-uri.js
	var escapeUri = function (uri) {
		return encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
	};
	var hexEncode = function (c20) {
		return "%" + c20.charCodeAt(0).toString(16).toUpperCase();
	};

	// ../../node_modules/@aws-sdk/querystring-builder/dist/es/index.js
	function buildQueryString(query) {
		var e_1, _a;
		var parts = [];
		try {
			for (
				var _b = __values4(Object.keys(query).sort()), _c = _b.next();
				!_c.done;
				_c = _b.next()
			) {
				var key = _c.value;
				var value = query[key];
				key = escapeUri(key);
				if (Array.isArray(value)) {
					for (var i = 0, iLen = value.length; i < iLen; i++) {
						parts.push(key + "=" + escapeUri(value[i]));
					}
				} else {
					var qsEntry = key;
					if (value || typeof value === "string") {
						qsEntry += "=" + escapeUri(value);
					}
					parts.push(qsEntry);
				}
			}
		} catch (e_1_1) {
			e_1 = { error: e_1_1 };
		} finally {
			try {
				if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
			} finally {
				if (e_1) throw e_1.error;
			}
		}
		return parts.join("&");
	}

	// ../../node_modules/@aws-sdk/fetch-http-handler/dist/es/request-timeout.js
	function requestTimeout(timeoutInMs) {
		if (timeoutInMs === void 0) {
			timeoutInMs = 0;
		}
		return new Promise(function (resolve, reject) {
			if (timeoutInMs) {
				setTimeout(function () {
					var timeoutError = new Error("Request did not complete within " + timeoutInMs + " ms");
					timeoutError.name = "TimeoutError";
					reject(timeoutError);
				}, timeoutInMs);
			}
		});
	}

	// ../../node_modules/@aws-sdk/fetch-http-handler/dist/es/fetch-http-handler.js
	var FetchHttpHandler = (function () {
		function FetchHttpHandler2(_a) {
			var _b = _a === void 0 ? {} : _a,
				requestTimeout2 = _b.requestTimeout;
			this.requestTimeout = requestTimeout2;
		}
		FetchHttpHandler2.prototype.destroy = function () {};
		FetchHttpHandler2.prototype.handle = function (request, _a) {
			var _b = _a === void 0 ? {} : _a,
				abortSignal = _b.abortSignal;
			var requestTimeoutInMs = this.requestTimeout;
			if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
				var abortError = new Error("Request aborted");
				abortError.name = "AbortError";
				return Promise.reject(abortError);
			}
			var path2 = request.path;
			if (request.query) {
				var queryString = buildQueryString(request.query);
				if (queryString) {
					path2 += "?" + queryString;
				}
			}
			var port = request.port,
				method = request.method;
			var url = request.protocol + "//" + request.hostname + (port ? ":" + port : "") + path2;
			var body = method === "GET" || method === "HEAD" ? void 0 : request.body;
			var requestOptions = {
				body,
				headers: new Headers(request.headers),
				method,
			};
			if (typeof AbortController !== "undefined") {
				requestOptions["signal"] = abortSignal;
			}
			var fetchRequest = new Request(url, requestOptions);
			var raceOfPromises = [
				fetch(fetchRequest).then(function (response) {
					var e_1, _a2;
					var fetchHeaders = response.headers;
					var transformedHeaders = {};
					try {
						for (
							var _b2 = __values4(fetchHeaders.entries()), _c = _b2.next();
							!_c.done;
							_c = _b2.next()
						) {
							var pair = _c.value;
							transformedHeaders[pair[0]] = pair[1];
						}
					} catch (e_1_1) {
						e_1 = { error: e_1_1 };
					} finally {
						try {
							if (_c && !_c.done && (_a2 = _b2.return)) _a2.call(_b2);
						} finally {
							if (e_1) throw e_1.error;
						}
					}
					var hasReadableStream = response.body !== void 0;
					if (!hasReadableStream) {
						return response.blob().then(function (body2) {
							return {
								response: new HttpResponse({
									headers: transformedHeaders,
									statusCode: response.status,
									body: body2,
								}),
							};
						});
					}
					return {
						response: new HttpResponse({
							headers: transformedHeaders,
							statusCode: response.status,
							body: response.body,
						}),
					};
				}),
				requestTimeout(requestTimeoutInMs),
			];
			if (abortSignal) {
				raceOfPromises.push(
					new Promise(function (resolve, reject) {
						abortSignal.onabort = function () {
							var abortError2 = new Error("Request aborted");
							abortError2.name = "AbortError";
							reject(abortError2);
						};
					})
				);
			}
			return Promise.race(raceOfPromises);
		};
		return FetchHttpHandler2;
	})();

	// ../../node_modules/@aws-sdk/util-base64-browser/dist/es/index.js
	var alphabetByEncoding = {};
	var alphabetByValue = new Array(64);
	for (i = 0, start3 = "A".charCodeAt(0), limit = "Z".charCodeAt(0); i + start3 <= limit; i++) {
		char = String.fromCharCode(i + start3);
		alphabetByEncoding[char] = i;
		alphabetByValue[i] = char;
	}
	var char;
	var i;
	var start3;
	var limit;
	for (i = 0, start3 = "a".charCodeAt(0), limit = "z".charCodeAt(0); i + start3 <= limit; i++) {
		char = String.fromCharCode(i + start3);
		index2 = i + 26;
		alphabetByEncoding[char] = index2;
		alphabetByValue[index2] = char;
	}
	var char;
	var index2;
	var i;
	var start3;
	var limit;
	for (i = 0; i < 10; i++) {
		alphabetByEncoding[i.toString(10)] = i + 52;
		char = i.toString(10);
		index2 = i + 52;
		alphabetByEncoding[char] = index2;
		alphabetByValue[index2] = char;
	}
	var char;
	var index2;
	var i;
	alphabetByEncoding["+"] = 62;
	alphabetByValue[62] = "+";
	alphabetByEncoding["/"] = 63;
	alphabetByValue[63] = "/";
	var bitsPerLetter = 6;
	var bitsPerByte = 8;
	var maxLetterValue = 63;
	function fromBase64(input) {
		var totalByteLength = (input.length / 4) * 3;
		if (input.substr(-2) === "==") {
			totalByteLength -= 2;
		} else if (input.substr(-1) === "=") {
			totalByteLength--;
		}
		var out = new ArrayBuffer(totalByteLength);
		var dataView = new DataView(out);
		for (var i = 0; i < input.length; i += 4) {
			var bits = 0;
			var bitLength = 0;
			for (var j = i, limit = i + 3; j <= limit; j++) {
				if (input[j] !== "=") {
					bits |= alphabetByEncoding[input[j]] << ((limit - j) * bitsPerLetter);
					bitLength += bitsPerLetter;
				} else {
					bits >>= bitsPerLetter;
				}
			}
			var chunkOffset = (i / 4) * 3;
			bits >>= bitLength % bitsPerByte;
			var byteLength = Math.floor(bitLength / bitsPerByte);
			for (var k = 0; k < byteLength; k++) {
				var offset = (byteLength - k - 1) * bitsPerByte;
				dataView.setUint8(chunkOffset + k, (bits & (255 << offset)) >> offset);
			}
		}
		return new Uint8Array(out);
	}
	function toBase64(input) {
		var str = "";
		for (var i = 0; i < input.length; i += 3) {
			var bits = 0;
			var bitLength = 0;
			for (var j = i, limit = Math.min(i + 3, input.length); j < limit; j++) {
				bits |= input[j] << ((limit - j - 1) * bitsPerByte);
				bitLength += bitsPerByte;
			}
			var bitClusterCount = Math.ceil(bitLength / bitsPerLetter);
			bits <<= bitClusterCount * bitsPerLetter - bitLength;
			for (var k = 1; k <= bitClusterCount; k++) {
				var offset = (bitClusterCount - k) * bitsPerLetter;
				str += alphabetByValue[(bits & (maxLetterValue << offset)) >> offset];
			}
			str += "==".slice(0, 4 - bitClusterCount);
		}
		return str;
	}

	// ../../node_modules/@aws-sdk/fetch-http-handler/dist/es/stream-collector.js
	var streamCollector = function (stream) {
		if (typeof Blob === "function" && stream instanceof Blob) {
			return collectBlob(stream);
		}
		return collectStream(stream);
	};
	function collectBlob(blob) {
		return __awaiter2(this, void 0, void 0, function () {
			var base64, arrayBuffer;
			return __generator2(this, function (_a) {
				switch (_a.label) {
					case 0:
						return [4, readToBase64(blob)];
					case 1:
						base64 = _a.sent();
						arrayBuffer = fromBase64(base64);
						return [2, new Uint8Array(arrayBuffer)];
				}
			});
		});
	}
	function collectStream(stream) {
		return __awaiter2(this, void 0, void 0, function () {
			var res, reader, isDone, _a, done2, value, prior;
			return __generator2(this, function (_b) {
				switch (_b.label) {
					case 0:
						res = new Uint8Array(0);
						reader = stream.getReader();
						isDone = false;
						_b.label = 1;
					case 1:
						if (!!isDone) return [3, 3];
						return [4, reader.read()];
					case 2:
						(_a = _b.sent()), (done2 = _a.done), (value = _a.value);
						if (value) {
							prior = res;
							res = new Uint8Array(prior.length + value.length);
							res.set(prior);
							res.set(value, prior.length);
						}
						isDone = done2;
						return [3, 1];
					case 3:
						return [2, res];
				}
			});
		});
	}
	function readToBase64(blob) {
		return new Promise(function (resolve, reject) {
			var reader = new FileReader();
			reader.onloadend = function () {
				var _a;
				if (reader.readyState !== 2) {
					return reject(new Error("Reader aborted too early"));
				}
				var result = (_a = reader.result) !== null && _a !== void 0 ? _a : "";
				var commaIndex = result.indexOf(",");
				var dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;
				resolve(result.substring(dataOffset));
			};
			reader.onabort = function () {
				return reject(new Error("Read aborted"));
			};
			reader.onerror = function () {
				return reject(reader.error);
			};
			reader.readAsDataURL(blob);
		});
	}

	// ../../node_modules/@aws-sdk/invalid-dependency/dist/es/invalidProvider.js
	var invalidProvider = function (message) {
		return function () {
			return Promise.reject(message);
		};
	};

	// ../../node_modules/@aws-sdk/middleware-retry/dist/es/retryMiddleware.js
	var retryMiddleware = function (options) {
		return function (next, context) {
			return function (args) {
				return __awaiter2(void 0, void 0, void 0, function () {
					var _a;
					return __generator2(this, function (_b) {
						if (
							(_a = options === null || options === void 0 ? void 0 : options.retryStrategy) ===
								null || _a === void 0
								? void 0
								: _a.mode
						)
							context.userAgent = __spread4(context.userAgent || [], [
								["cfg/retry-mode", options.retryStrategy.mode],
							]);
						return [2, options.retryStrategy.retry(next, args)];
					});
				});
			};
		};
	};
	var retryMiddlewareOptions = {
		name: "retryMiddleware",
		tags: ["RETRY"],
		step: "finalizeRequest",
		priority: "high",
		override: true,
	};
	var getRetryPlugin = function (options) {
		return {
			applyToStack: function (clientStack) {
				clientStack.add(retryMiddleware(options), retryMiddlewareOptions);
			},
		};
	};

	// ../../node_modules/@aws-sdk/middleware-retry/dist/es/constants.js
	var DEFAULT_RETRY_DELAY_BASE = 100;
	var MAXIMUM_RETRY_DELAY = 20 * 1e3;
	var THROTTLING_RETRY_DELAY_BASE = 500;
	var INITIAL_RETRY_TOKENS = 500;
	var RETRY_COST = 5;
	var TIMEOUT_RETRY_COST = 10;
	var NO_RETRY_INCREMENT = 1;
	var INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
	var REQUEST_HEADER = "amz-sdk-request";

	// ../../node_modules/@aws-sdk/service-error-classification/dist/es/constants.js
	var CLOCK_SKEW_ERROR_CODES = [
		"AuthFailure",
		"InvalidSignatureException",
		"RequestExpired",
		"RequestInTheFuture",
		"RequestTimeTooSkewed",
		"SignatureDoesNotMatch",
	];
	var THROTTLING_ERROR_CODES = [
		"BandwidthLimitExceeded",
		"EC2ThrottledException",
		"LimitExceededException",
		"PriorRequestNotComplete",
		"ProvisionedThroughputExceededException",
		"RequestLimitExceeded",
		"RequestThrottled",
		"RequestThrottledException",
		"SlowDown",
		"ThrottledException",
		"Throttling",
		"ThrottlingException",
		"TooManyRequestsException",
		"TransactionInProgressException",
	];
	var TRANSIENT_ERROR_CODES = [
		"AbortError",
		"TimeoutError",
		"RequestTimeout",
		"RequestTimeoutException",
	];
	var TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];

	// ../../node_modules/@aws-sdk/service-error-classification/dist/es/index.js
	var isRetryableByTrait = function (error3) {
		return error3.$retryable !== void 0;
	};
	var isClockSkewError = function (error3) {
		return CLOCK_SKEW_ERROR_CODES.includes(error3.name);
	};
	var isThrottlingError = function (error3) {
		var _a, _b;
		return (
			((_a = error3.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 429 ||
			THROTTLING_ERROR_CODES.includes(error3.name) ||
			((_b = error3.$retryable) === null || _b === void 0 ? void 0 : _b.throttling) == true
		);
	};
	var isTransientError = function (error3) {
		var _a;
		return (
			TRANSIENT_ERROR_CODES.includes(error3.name) ||
			TRANSIENT_ERROR_STATUS_CODES.includes(
				((_a = error3.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) || 0
			)
		);
	};

	// ../../node_modules/@aws-sdk/middleware-retry/dist/es/defaultStrategy.js
	var import_uuid = __toModule(require_uuid());

	// ../../node_modules/@aws-sdk/middleware-retry/dist/es/defaultRetryQuota.js
	var getDefaultRetryQuota = function (initialRetryTokens) {
		var MAX_CAPACITY = initialRetryTokens;
		var availableCapacity = initialRetryTokens;
		var getCapacityAmount = function (error3) {
			return error3.name === "TimeoutError" ? TIMEOUT_RETRY_COST : RETRY_COST;
		};
		var hasRetryTokens = function (error3) {
			return getCapacityAmount(error3) <= availableCapacity;
		};
		var retrieveRetryTokens = function (error3) {
			if (!hasRetryTokens(error3)) {
				throw new Error("No retry token available");
			}
			var capacityAmount = getCapacityAmount(error3);
			availableCapacity -= capacityAmount;
			return capacityAmount;
		};
		var releaseRetryTokens = function (capacityReleaseAmount) {
			availableCapacity +=
				capacityReleaseAmount !== null && capacityReleaseAmount !== void 0
					? capacityReleaseAmount
					: NO_RETRY_INCREMENT;
			availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
		};
		return Object.freeze({
			hasRetryTokens,
			retrieveRetryTokens,
			releaseRetryTokens,
		});
	};

	// ../../node_modules/@aws-sdk/middleware-retry/dist/es/delayDecider.js
	var defaultDelayDecider = function (delayBase, attempts) {
		return Math.floor(
			Math.min(MAXIMUM_RETRY_DELAY, Math.random() * Math.pow(2, attempts) * delayBase)
		);
	};

	// ../../node_modules/@aws-sdk/middleware-retry/dist/es/retryDecider.js
	var defaultRetryDecider = function (error3) {
		if (!error3) {
			return false;
		}
		return (
			isRetryableByTrait(error3) ||
			isClockSkewError(error3) ||
			isThrottlingError(error3) ||
			isTransientError(error3)
		);
	};

	// ../../node_modules/@aws-sdk/middleware-retry/dist/es/defaultStrategy.js
	var DEFAULT_MAX_ATTEMPTS = 3;
	var DEFAULT_RETRY_MODE = "standard";
	var StandardRetryStrategy = (function () {
		function StandardRetryStrategy2(maxAttemptsProvider, options) {
			var _a, _b, _c;
			this.maxAttemptsProvider = maxAttemptsProvider;
			this.mode = DEFAULT_RETRY_MODE;
			this.retryDecider =
				(_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null &&
				_a !== void 0
					? _a
					: defaultRetryDecider;
			this.delayDecider =
				(_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null &&
				_b !== void 0
					? _b
					: defaultDelayDecider;
			this.retryQuota =
				(_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null &&
				_c !== void 0
					? _c
					: getDefaultRetryQuota(INITIAL_RETRY_TOKENS);
		}
		StandardRetryStrategy2.prototype.shouldRetry = function (error3, attempts, maxAttempts) {
			return (
				attempts < maxAttempts &&
				this.retryDecider(error3) &&
				this.retryQuota.hasRetryTokens(error3)
			);
		};
		StandardRetryStrategy2.prototype.getMaxAttempts = function () {
			return __awaiter2(this, void 0, void 0, function () {
				var maxAttempts, error_1;
				return __generator2(this, function (_a) {
					switch (_a.label) {
						case 0:
							_a.trys.push([0, 2, , 3]);
							return [4, this.maxAttemptsProvider()];
						case 1:
							maxAttempts = _a.sent();
							return [3, 3];
						case 2:
							error_1 = _a.sent();
							maxAttempts = DEFAULT_MAX_ATTEMPTS;
							return [3, 3];
						case 3:
							return [2, maxAttempts];
					}
				});
			});
		};
		StandardRetryStrategy2.prototype.retry = function (next, args) {
			return __awaiter2(this, void 0, void 0, function () {
				var retryTokenAmount, attempts, totalDelay, maxAttempts, request, _loop_1, this_1, state_1;
				return __generator2(this, function (_a) {
					switch (_a.label) {
						case 0:
							attempts = 0;
							totalDelay = 0;
							return [4, this.getMaxAttempts()];
						case 1:
							maxAttempts = _a.sent();
							request = args.request;
							if (HttpRequest.isInstance(request)) {
								request.headers[INVOCATION_ID_HEADER] = (0, import_uuid.v4)();
							}
							_loop_1 = function () {
								var _a2, response, output, err_1, delay_1;
								return __generator2(this, function (_b) {
									switch (_b.label) {
										case 0:
											_b.trys.push([0, 2, , 5]);
											if (HttpRequest.isInstance(request)) {
												request.headers[REQUEST_HEADER] =
													"attempt=" + (attempts + 1) + "; max=" + maxAttempts;
											}
											return [4, next(args)];
										case 1:
											(_a2 = _b.sent()), (response = _a2.response), (output = _a2.output);
											this_1.retryQuota.releaseRetryTokens(retryTokenAmount);
											output.$metadata.attempts = attempts + 1;
											output.$metadata.totalRetryDelay = totalDelay;
											return [2, { value: { response, output } }];
										case 2:
											err_1 = _b.sent();
											attempts++;
											if (!this_1.shouldRetry(err_1, attempts, maxAttempts)) return [3, 4];
											retryTokenAmount = this_1.retryQuota.retrieveRetryTokens(err_1);
											delay_1 = this_1.delayDecider(
												isThrottlingError(err_1)
													? THROTTLING_RETRY_DELAY_BASE
													: DEFAULT_RETRY_DELAY_BASE,
												attempts
											);
											totalDelay += delay_1;
											return [
												4,
												new Promise(function (resolve) {
													return setTimeout(resolve, delay_1);
												}),
											];
										case 3:
											_b.sent();
											return [2, "continue"];
										case 4:
											if (!err_1.$metadata) {
												err_1.$metadata = {};
											}
											err_1.$metadata.attempts = attempts;
											err_1.$metadata.totalRetryDelay = totalDelay;
											throw err_1;
										case 5:
											return [2];
									}
								});
							};
							this_1 = this;
							_a.label = 2;
						case 2:
							if (false) return [3, 4];
							return [5, _loop_1()];
						case 3:
							state_1 = _a.sent();
							if (typeof state_1 === "object") return [2, state_1.value];
							return [3, 2];
						case 4:
							return [2];
					}
				});
			});
		};
		return StandardRetryStrategy2;
	})();

	// ../../node_modules/@aws-sdk/middleware-retry/dist/es/configurations.js
	var resolveRetryConfig = function (input) {
		var maxAttempts = normalizeMaxAttempts(input.maxAttempts);
		return __assign6(__assign6({}, input), {
			maxAttempts,
			retryStrategy: input.retryStrategy || new StandardRetryStrategy(maxAttempts),
		});
	};
	var normalizeMaxAttempts = function (maxAttempts) {
		if (maxAttempts === void 0) {
			maxAttempts = DEFAULT_MAX_ATTEMPTS;
		}
		if (typeof maxAttempts === "number") {
			var promisified_1 = Promise.resolve(maxAttempts);
			return function () {
				return promisified_1;
			};
		}
		return maxAttempts;
	};

	// ../../node_modules/@aws-sdk/util-body-length-browser/dist/es/index.js
	function calculateBodyLength(body) {
		if (typeof body === "string") {
			var len = body.length;
			for (var i = len - 1; i >= 0; i--) {
				var code = body.charCodeAt(i);
				if (code > 127 && code <= 2047) len++;
				else if (code > 2047 && code <= 65535) len += 2;
			}
			return len;
		} else if (typeof body.byteLength === "number") {
			return body.byteLength;
		} else if (typeof body.size === "number") {
			return body.size;
		}
	}

	// ../../node_modules/@aws-sdk/util-user-agent-browser/dist/es/index.js
	var import_bowser = __toModule(require_es5());
	var defaultUserAgent = function (_a) {
		var serviceId = _a.serviceId,
			clientVersion = _a.clientVersion;
		return function () {
			return __awaiter2(void 0, void 0, void 0, function () {
				var parsedUA, sections;
				var _a2, _b, _c, _d, _e, _f, _g;
				return __generator2(this, function (_h) {
					parsedUA = (
						(_a2 = window === null || window === void 0 ? void 0 : window.navigator) === null ||
						_a2 === void 0
							? void 0
							: _a2.userAgent
					)
						? import_bowser.default.parse(window.navigator.userAgent)
						: void 0;
					sections = [
						["aws-sdk-js", clientVersion],
						[
							"os/" +
								(((_b = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.os) === null ||
								_b === void 0
									? void 0
									: _b.name) || "other"),
							(_c = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.os) === null ||
							_c === void 0
								? void 0
								: _c.version,
						],
						["lang/js"],
						[
							"md/browser",
							((_e =
								(_d = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.browser) ===
									null || _d === void 0
									? void 0
									: _d.name) !== null && _e !== void 0
								? _e
								: "unknown") +
								"_" +
								((_g =
									(_f = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.browser) ===
										null || _f === void 0
										? void 0
										: _f.version) !== null && _g !== void 0
									? _g
									: "unknown"),
						],
					];
					if (serviceId) {
						sections.push(["api/" + serviceId, clientVersion]);
					}
					return [2, sections];
				});
			});
		};
	};

	// ../../node_modules/@aws-sdk/querystring-parser/dist/es/index.js
	function parseQueryString(querystring) {
		var e_1, _a;
		var query = {};
		querystring = querystring.replace(/^\?/, "");
		if (querystring) {
			try {
				for (var _b = __values4(querystring.split("&")), _c = _b.next(); !_c.done; _c = _b.next()) {
					var pair = _c.value;
					var _d = __read10(pair.split("="), 2),
						key = _d[0],
						_e = _d[1],
						value = _e === void 0 ? null : _e;
					key = decodeURIComponent(key);
					if (value) {
						value = decodeURIComponent(value);
					}
					if (!(key in query)) {
						query[key] = value;
					} else if (Array.isArray(query[key])) {
						query[key].push(value);
					} else {
						query[key] = [query[key], value];
					}
				}
			} catch (e_1_1) {
				e_1 = { error: e_1_1 };
			} finally {
				try {
					if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
				} finally {
					if (e_1) throw e_1.error;
				}
			}
		}
		return query;
	}

	// ../../node_modules/@aws-sdk/url-parser/dist/es/index.js
	var parseUrl = function (url) {
		var _a = new URL(url),
			hostname = _a.hostname,
			pathname = _a.pathname,
			port = _a.port,
			protocol = _a.protocol,
			search = _a.search;
		var query;
		if (search) {
			query = parseQueryString(search);
		}
		return {
			hostname,
			port: port ? parseInt(port) : void 0,
			protocol,
			path: pathname,
			query,
		};
	};

	// ../../node_modules/@aws-sdk/config-resolver/dist/es/EndpointsConfig.js
	var resolveEndpointsConfig = function (input) {
		var _a;
		return __assign6(__assign6({}, input), {
			tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,
			endpoint: input.endpoint
				? normalizeEndpoint(input)
				: function () {
						return getEndPointFromRegion(input);
				  },
			isCustomEndpoint: input.endpoint ? true : false,
		});
	};
	var normalizeEndpoint = function (input) {
		var endpoint = input.endpoint,
			urlParser = input.urlParser;
		if (typeof endpoint === "string") {
			var promisified_1 = Promise.resolve(urlParser(endpoint));
			return function () {
				return promisified_1;
			};
		} else if (typeof endpoint === "object") {
			var promisified_2 = Promise.resolve(endpoint);
			return function () {
				return promisified_2;
			};
		}
		return endpoint;
	};
	var getEndPointFromRegion = function (input) {
		return __awaiter2(void 0, void 0, void 0, function () {
			var _a, tls, region, dnsHostRegex, hostname;
			var _b;
			return __generator2(this, function (_c) {
				switch (_c.label) {
					case 0:
						(_a = input.tls), (tls = _a === void 0 ? true : _a);
						return [4, input.region()];
					case 1:
						region = _c.sent();
						dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
						if (!dnsHostRegex.test(region)) {
							throw new Error("Invalid region in client config");
						}
						return [4, input.regionInfoProvider(region)];
					case 2:
						hostname = ((_b = _c.sent()) !== null && _b !== void 0 ? _b : {}).hostname;
						if (!hostname) {
							throw new Error("Cannot resolve hostname from client config");
						}
						return [2, input.urlParser((tls ? "https:" : "http:") + "//" + hostname)];
				}
			});
		});
	};

	// ../../node_modules/@aws-sdk/config-resolver/dist/es/RegionConfig.js
	var resolveRegionConfig = function (input) {
		if (!input.region) {
			throw new Error("Region is missing");
		}
		return __assign6(__assign6({}, input), { region: normalizeRegion(input.region) });
	};
	var normalizeRegion = function (region) {
		if (typeof region === "string") {
			var promisified_1 = Promise.resolve(region);
			return function () {
				return promisified_1;
			};
		}
		return region;
	};

	// ../../node_modules/@aws-sdk/middleware-content-length/dist/es/index.js
	var CONTENT_LENGTH_HEADER = "content-length";
	function contentLengthMiddleware(bodyLengthChecker) {
		var _this = this;
		return function (next) {
			return function (args) {
				return __awaiter2(_this, void 0, void 0, function () {
					var request, body, headers, length;
					var _a;
					return __generator2(this, function (_b) {
						request = args.request;
						if (HttpRequest.isInstance(request)) {
							(body = request.body), (headers = request.headers);
							if (
								body &&
								Object.keys(headers)
									.map(function (str) {
										return str.toLowerCase();
									})
									.indexOf(CONTENT_LENGTH_HEADER) === -1
							) {
								length = bodyLengthChecker(body);
								if (length !== void 0) {
									request.headers = __assign6(
										__assign6({}, request.headers),
										((_a = {}), (_a[CONTENT_LENGTH_HEADER] = String(length)), _a)
									);
								}
							}
						}
						return [2, next(__assign6(__assign6({}, args), { request }))];
					});
				});
			};
		};
	}
	var contentLengthMiddlewareOptions = {
		step: "build",
		tags: ["SET_CONTENT_LENGTH", "CONTENT_LENGTH"],
		name: "contentLengthMiddleware",
		override: true,
	};
	var getContentLengthPlugin = function (options) {
		return {
			applyToStack: function (clientStack) {
				clientStack.add(
					contentLengthMiddleware(options.bodyLengthChecker),
					contentLengthMiddlewareOptions
				);
			},
		};
	};

	// ../../node_modules/@aws-sdk/middleware-host-header/dist/es/index.js
	function resolveHostHeaderConfig(input) {
		return input;
	}
	var hostHeaderMiddleware = function (options) {
		return function (next) {
			return function (args) {
				return __awaiter2(void 0, void 0, void 0, function () {
					var request, _a, handlerProtocol;
					return __generator2(this, function (_b) {
						if (!HttpRequest.isInstance(args.request)) return [2, next(args)];
						request = args.request;
						(_a = (options.requestHandler.metadata || {}).handlerProtocol),
							(handlerProtocol = _a === void 0 ? "" : _a);
						if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
							delete request.headers["host"];
							request.headers[":authority"] = "";
						} else if (!request.headers["host"]) {
							request.headers["host"] = request.hostname;
						}
						return [2, next(args)];
					});
				});
			};
		};
	};
	var hostHeaderMiddlewareOptions = {
		name: "hostHeaderMiddleware",
		step: "build",
		priority: "low",
		tags: ["HOST"],
		override: true,
	};
	var getHostHeaderPlugin = function (options) {
		return {
			applyToStack: function (clientStack) {
				clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);
			},
		};
	};

	// ../../node_modules/@aws-sdk/middleware-logger/dist/es/loggerMiddleware.js
	var loggerMiddleware = function () {
		return function (next, context) {
			return function (args) {
				return __awaiter2(void 0, void 0, void 0, function () {
					var clientName,
						commandName,
						inputFilterSensitiveLog,
						logger14,
						outputFilterSensitiveLog,
						response,
						_a,
						$metadata,
						outputWithoutMetadata;
					return __generator2(this, function (_b) {
						switch (_b.label) {
							case 0:
								(clientName = context.clientName),
									(commandName = context.commandName),
									(inputFilterSensitiveLog = context.inputFilterSensitiveLog),
									(logger14 = context.logger),
									(outputFilterSensitiveLog = context.outputFilterSensitiveLog);
								return [4, next(args)];
							case 1:
								response = _b.sent();
								if (!logger14) {
									return [2, response];
								}
								if (typeof logger14.info === "function") {
									(_a = response.output),
										($metadata = _a.$metadata),
										(outputWithoutMetadata = __rest3(_a, ["$metadata"]));
									logger14.info({
										clientName,
										commandName,
										input: inputFilterSensitiveLog(args.input),
										output: outputFilterSensitiveLog(outputWithoutMetadata),
										metadata: $metadata,
									});
								}
								return [2, response];
						}
					});
				});
			};
		};
	};
	var loggerMiddlewareOptions = {
		name: "loggerMiddleware",
		tags: ["LOGGER"],
		step: "initialize",
		override: true,
	};
	var getLoggerPlugin = function (options) {
		return {
			applyToStack: function (clientStack) {
				clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);
			},
		};
	};

	// ../../node_modules/@aws-sdk/signature-v4/dist/es/constants.js
	var ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
	var CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
	var AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
	var SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
	var EXPIRES_QUERY_PARAM = "X-Amz-Expires";
	var SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
	var TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
	var AUTH_HEADER = "authorization";
	var AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase();
	var DATE_HEADER = "date";
	var GENERATED_HEADERS = [AUTH_HEADER, AMZ_DATE_HEADER, DATE_HEADER];
	var SIGNATURE_HEADER = SIGNATURE_QUERY_PARAM.toLowerCase();
	var SHA256_HEADER = "x-amz-content-sha256";
	var TOKEN_HEADER = TOKEN_QUERY_PARAM.toLowerCase();
	var ALWAYS_UNSIGNABLE_HEADERS = {
		authorization: true,
		"cache-control": true,
		connection: true,
		expect: true,
		from: true,
		"keep-alive": true,
		"max-forwards": true,
		pragma: true,
		referer: true,
		te: true,
		trailer: true,
		"transfer-encoding": true,
		upgrade: true,
		"user-agent": true,
		"x-amzn-trace-id": true,
	};
	var PROXY_HEADER_PATTERN = /^proxy-/;
	var SEC_HEADER_PATTERN = /^sec-/;
	var ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
	var EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
	var UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
	var MAX_CACHE_SIZE = 50;
	var KEY_TYPE_IDENTIFIER = "aws4_request";
	var MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;

	// ../../node_modules/@aws-sdk/signature-v4/dist/es/credentialDerivation.js
	var signingKeyCache = {};
	var cacheQueue = [];
	function createScope(shortDate, region, service) {
		return shortDate + "/" + region + "/" + service + "/" + KEY_TYPE_IDENTIFIER;
	}
	var getSigningKey = function (sha256Constructor, credentials, shortDate, region, service) {
		return __awaiter2(void 0, void 0, void 0, function () {
			var credsHash, cacheKey, key, _a, _b, signable, e_1_1;
			var e_1, _c;
			return __generator2(this, function (_d) {
				switch (_d.label) {
					case 0:
						return [
							4,
							hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId),
						];
					case 1:
						credsHash = _d.sent();
						cacheKey =
							shortDate +
							":" +
							region +
							":" +
							service +
							":" +
							toHex(credsHash) +
							":" +
							credentials.sessionToken;
						if (cacheKey in signingKeyCache) {
							return [2, signingKeyCache[cacheKey]];
						}
						cacheQueue.push(cacheKey);
						while (cacheQueue.length > MAX_CACHE_SIZE) {
							delete signingKeyCache[cacheQueue.shift()];
						}
						key = "AWS4" + credentials.secretAccessKey;
						_d.label = 2;
					case 2:
						_d.trys.push([2, 7, 8, 9]);
						(_a = __values4([shortDate, region, service, KEY_TYPE_IDENTIFIER])), (_b = _a.next());
						_d.label = 3;
					case 3:
						if (!!_b.done) return [3, 6];
						signable = _b.value;
						return [4, hmac(sha256Constructor, key, signable)];
					case 4:
						key = _d.sent();
						_d.label = 5;
					case 5:
						_b = _a.next();
						return [3, 3];
					case 6:
						return [3, 9];
					case 7:
						e_1_1 = _d.sent();
						e_1 = { error: e_1_1 };
						return [3, 9];
					case 8:
						try {
							if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
						} finally {
							if (e_1) throw e_1.error;
						}
						return [7];
					case 9:
						return [2, (signingKeyCache[cacheKey] = key)];
				}
			});
		});
	};
	function hmac(ctor, secret, data) {
		var hash = new ctor(secret);
		hash.update(data);
		return hash.digest();
	}

	// ../../node_modules/@aws-sdk/signature-v4/dist/es/getCanonicalHeaders.js
	function getCanonicalHeaders(_a, unsignableHeaders, signableHeaders) {
		var e_1, _b;
		var headers = _a.headers;
		var canonical = {};
		try {
			for (
				var _c = __values4(Object.keys(headers).sort()), _d = _c.next();
				!_d.done;
				_d = _c.next()
			) {
				var headerName = _d.value;
				var canonicalHeaderName = headerName.toLowerCase();
				if (
					canonicalHeaderName in ALWAYS_UNSIGNABLE_HEADERS ||
					(unsignableHeaders === null || unsignableHeaders === void 0
						? void 0
						: unsignableHeaders.has(canonicalHeaderName)) ||
					PROXY_HEADER_PATTERN.test(canonicalHeaderName) ||
					SEC_HEADER_PATTERN.test(canonicalHeaderName)
				) {
					if (!signableHeaders || (signableHeaders && !signableHeaders.has(canonicalHeaderName))) {
						continue;
					}
				}
				canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
			}
		} catch (e_1_1) {
			e_1 = { error: e_1_1 };
		} finally {
			try {
				if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
			} finally {
				if (e_1) throw e_1.error;
			}
		}
		return canonical;
	}

	// ../../node_modules/@aws-sdk/signature-v4/dist/es/getCanonicalQuery.js
	function getCanonicalQuery(_a) {
		var e_1, _b;
		var _c = _a.query,
			query = _c === void 0 ? {} : _c;
		var keys2 = [];
		var serialized = {};
		var _loop_1 = function (key2) {
			if (key2.toLowerCase() === SIGNATURE_HEADER) {
				return "continue";
			}
			keys2.push(key2);
			var value = query[key2];
			if (typeof value === "string") {
				serialized[key2] = escapeUri(key2) + "=" + escapeUri(value);
			} else if (Array.isArray(value)) {
				serialized[key2] = value
					.slice(0)
					.sort()
					.reduce(function (encoded, value2) {
						return encoded.concat([escapeUri(key2) + "=" + escapeUri(value2)]);
					}, [])
					.join("&");
			}
		};
		try {
			for (
				var _d = __values4(Object.keys(query).sort()), _e = _d.next();
				!_e.done;
				_e = _d.next()
			) {
				var key = _e.value;
				_loop_1(key);
			}
		} catch (e_1_1) {
			e_1 = { error: e_1_1 };
		} finally {
			try {
				if (_e && !_e.done && (_b = _d.return)) _b.call(_d);
			} finally {
				if (e_1) throw e_1.error;
			}
		}
		return keys2
			.map(function (key2) {
				return serialized[key2];
			})
			.filter(function (serialized2) {
				return serialized2;
			})
			.join("&");
	}

	// ../../node_modules/@aws-sdk/is-array-buffer/dist/es/index.js
	var isArrayBuffer = function (arg) {
		return (
			(typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer) ||
			Object.prototype.toString.call(arg) === "[object ArrayBuffer]"
		);
	};

	// ../../node_modules/@aws-sdk/signature-v4/dist/es/getPayloadHash.js
	function getPayloadHash(_a, hashConstructor) {
		var headers = _a.headers,
			body = _a.body;
		return __awaiter2(this, void 0, void 0, function () {
			var _b, _c, headerName, hashCtor, _d;
			var e_1, _e;
			return __generator2(this, function (_f) {
				switch (_f.label) {
					case 0:
						try {
							for (_b = __values4(Object.keys(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {
								headerName = _c.value;
								if (headerName.toLowerCase() === SHA256_HEADER) {
									return [2, headers[headerName]];
								}
							}
						} catch (e_1_1) {
							e_1 = { error: e_1_1 };
						} finally {
							try {
								if (_c && !_c.done && (_e = _b.return)) _e.call(_b);
							} finally {
								if (e_1) throw e_1.error;
							}
						}
						if (!(body == void 0)) return [3, 1];
						return [2, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"];
					case 1:
						if (!(typeof body === "string" || ArrayBuffer.isView(body) || isArrayBuffer(body)))
							return [3, 3];
						hashCtor = new hashConstructor();
						hashCtor.update(body);
						_d = toHex;
						return [4, hashCtor.digest()];
					case 2:
						return [2, _d.apply(void 0, [_f.sent()])];
					case 3:
						return [2, UNSIGNED_PAYLOAD];
				}
			});
		});
	}

	// ../../node_modules/@aws-sdk/signature-v4/dist/es/hasHeader.js
	function hasHeader(soughtHeader, headers) {
		var e_1, _a;
		soughtHeader = soughtHeader.toLowerCase();
		try {
			for (var _b = __values4(Object.keys(headers)), _c = _b.next(); !_c.done; _c = _b.next()) {
				var headerName = _c.value;
				if (soughtHeader === headerName.toLowerCase()) {
					return true;
				}
			}
		} catch (e_1_1) {
			e_1 = { error: e_1_1 };
		} finally {
			try {
				if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
			} finally {
				if (e_1) throw e_1.error;
			}
		}
		return false;
	}

	// ../../node_modules/@aws-sdk/signature-v4/dist/es/cloneRequest.js
	function cloneRequest(_a) {
		var headers = _a.headers,
			query = _a.query,
			rest = __rest3(_a, ["headers", "query"]);
		return __assign6(__assign6({}, rest), {
			headers: __assign6({}, headers),
			query: query ? cloneQuery2(query) : void 0,
		});
	}
	function cloneQuery2(query) {
		return Object.keys(query).reduce(function (carry, paramName) {
			var _a;
			var param = query[paramName];
			return __assign6(
				__assign6({}, carry),
				((_a = {}), (_a[paramName] = Array.isArray(param) ? __spread4(param) : param), _a)
			);
		}, {});
	}

	// ../../node_modules/@aws-sdk/signature-v4/dist/es/moveHeadersToQuery.js
	function moveHeadersToQuery(request, options) {
		var e_1, _a;
		var _b;
		if (options === void 0) {
			options = {};
		}
		var _c = typeof request.clone === "function" ? request.clone() : cloneRequest(request),
			headers = _c.headers,
			_d = _c.query,
			query = _d === void 0 ? {} : _d;
		try {
			for (var _e = __values4(Object.keys(headers)), _f = _e.next(); !_f.done; _f = _e.next()) {
				var name2 = _f.value;
				var lname = name2.toLowerCase();
				if (
					lname.substr(0, 6) === "x-amz-" &&
					!((_b = options.unhoistableHeaders) === null || _b === void 0 ? void 0 : _b.has(lname))
				) {
					query[name2] = headers[name2];
					delete headers[name2];
				}
			}
		} catch (e_1_1) {
			e_1 = { error: e_1_1 };
		} finally {
			try {
				if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
			} finally {
				if (e_1) throw e_1.error;
			}
		}
		return __assign6(__assign6({}, request), {
			headers,
			query,
		});
	}

	// ../../node_modules/@aws-sdk/signature-v4/dist/es/prepareRequest.js
	function prepareRequest(request) {
		var e_1, _a;
		request = typeof request.clone === "function" ? request.clone() : cloneRequest(request);
		try {
			for (
				var _b = __values4(Object.keys(request.headers)), _c = _b.next();
				!_c.done;
				_c = _b.next()
			) {
				var headerName = _c.value;
				if (GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
					delete request.headers[headerName];
				}
			}
		} catch (e_1_1) {
			e_1 = { error: e_1_1 };
		} finally {
			try {
				if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
			} finally {
				if (e_1) throw e_1.error;
			}
		}
		return request;
	}

	// ../../node_modules/@aws-sdk/signature-v4/dist/es/utilDate.js
	function iso8601(time) {
		return toDate(time)
			.toISOString()
			.replace(/\.\d{3}Z$/, "Z");
	}
	function toDate(time) {
		if (typeof time === "number") {
			return new Date(time * 1e3);
		}
		if (typeof time === "string") {
			if (Number(time)) {
				return new Date(Number(time) * 1e3);
			}
			return new Date(time);
		}
		return time;
	}

	// ../../node_modules/@aws-sdk/signature-v4/dist/es/SignatureV4.js
	var SignatureV4 = (function () {
		function SignatureV42(_a) {
			var applyChecksum = _a.applyChecksum,
				credentials = _a.credentials,
				region = _a.region,
				service = _a.service,
				sha2562 = _a.sha256,
				_b = _a.uriEscapePath,
				uriEscapePath = _b === void 0 ? true : _b;
			this.service = service;
			this.sha256 = sha2562;
			this.uriEscapePath = uriEscapePath;
			this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
			this.regionProvider = normalizeRegionProvider(region);
			this.credentialProvider = normalizeCredentialsProvider(credentials);
		}
		SignatureV42.prototype.presign = function (originalRequest, options) {
			if (options === void 0) {
				options = {};
			}
			return __awaiter2(this, void 0, void 0, function () {
				var _a,
					signingDate,
					_b,
					expiresIn,
					unsignableHeaders,
					unhoistableHeaders,
					signableHeaders,
					signingRegion,
					signingService,
					credentials,
					region,
					_c,
					_d,
					longDate,
					shortDate,
					scope,
					request,
					canonicalHeaders,
					_e,
					_f,
					_g,
					_h,
					_j,
					_k;
				return __generator2(this, function (_l) {
					switch (_l.label) {
						case 0:
							(_a = options.signingDate),
								(signingDate = _a === void 0 ? new Date() : _a),
								(_b = options.expiresIn),
								(expiresIn = _b === void 0 ? 3600 : _b),
								(unsignableHeaders = options.unsignableHeaders),
								(unhoistableHeaders = options.unhoistableHeaders),
								(signableHeaders = options.signableHeaders),
								(signingRegion = options.signingRegion),
								(signingService = options.signingService);
							return [4, this.credentialProvider()];
						case 1:
							credentials = _l.sent();
							if (!(signingRegion !== null && signingRegion !== void 0)) return [3, 2];
							_c = signingRegion;
							return [3, 4];
						case 2:
							return [4, this.regionProvider()];
						case 3:
							_c = _l.sent();
							_l.label = 4;
						case 4:
							region = _c;
							(_d = formatDate(signingDate)), (longDate = _d.longDate), (shortDate = _d.shortDate);
							if (expiresIn > MAX_PRESIGNED_TTL) {
								return [
									2,
									Promise.reject(
										"Signature version 4 presigned URLs must have an expiration date less than one week in the future"
									),
								];
							}
							scope = createScope(
								shortDate,
								region,
								signingService !== null && signingService !== void 0 ? signingService : this.service
							);
							request = moveHeadersToQuery(prepareRequest(originalRequest), { unhoistableHeaders });
							if (credentials.sessionToken) {
								request.query[TOKEN_QUERY_PARAM] = credentials.sessionToken;
							}
							request.query[ALGORITHM_QUERY_PARAM] = ALGORITHM_IDENTIFIER;
							request.query[CREDENTIAL_QUERY_PARAM] = credentials.accessKeyId + "/" + scope;
							request.query[AMZ_DATE_QUERY_PARAM] = longDate;
							request.query[EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
							canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);
							request.query[SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);
							_e = request.query;
							_f = SIGNATURE_QUERY_PARAM;
							_g = this.getSignature;
							_h = [
								longDate,
								scope,
								this.getSigningKey(credentials, region, shortDate, signingService),
							];
							_j = this.createCanonicalRequest;
							_k = [request, canonicalHeaders];
							return [4, getPayloadHash(originalRequest, this.sha256)];
						case 5:
							return [4, _g.apply(this, _h.concat([_j.apply(this, _k.concat([_l.sent()]))]))];
						case 6:
							_e[_f] = _l.sent();
							return [2, request];
					}
				});
			});
		};
		SignatureV42.prototype.sign = function (toSign, options) {
			return __awaiter2(this, void 0, void 0, function () {
				return __generator2(this, function (_a) {
					if (typeof toSign === "string") {
						return [2, this.signString(toSign, options)];
					} else if (toSign.headers && toSign.payload) {
						return [2, this.signEvent(toSign, options)];
					} else {
						return [2, this.signRequest(toSign, options)];
					}
					return [2];
				});
			});
		};
		SignatureV42.prototype.signEvent = function (_a, _b) {
			var headers = _a.headers,
				payload = _a.payload;
			var _c = _b.signingDate,
				signingDate = _c === void 0 ? new Date() : _c,
				priorSignature = _b.priorSignature,
				signingRegion = _b.signingRegion,
				signingService = _b.signingService;
			return __awaiter2(this, void 0, void 0, function () {
				var region,
					_d,
					_e,
					shortDate,
					longDate,
					scope,
					hashedPayload,
					hash,
					hashedHeaders,
					_f,
					stringToSign;
				return __generator2(this, function (_g) {
					switch (_g.label) {
						case 0:
							if (!(signingRegion !== null && signingRegion !== void 0)) return [3, 1];
							_d = signingRegion;
							return [3, 3];
						case 1:
							return [4, this.regionProvider()];
						case 2:
							_d = _g.sent();
							_g.label = 3;
						case 3:
							region = _d;
							(_e = formatDate(signingDate)), (shortDate = _e.shortDate), (longDate = _e.longDate);
							scope = createScope(
								shortDate,
								region,
								signingService !== null && signingService !== void 0 ? signingService : this.service
							);
							return [4, getPayloadHash({ headers: {}, body: payload }, this.sha256)];
						case 4:
							hashedPayload = _g.sent();
							hash = new this.sha256();
							hash.update(headers);
							_f = toHex;
							return [4, hash.digest()];
						case 5:
							hashedHeaders = _f.apply(void 0, [_g.sent()]);
							stringToSign = [
								EVENT_ALGORITHM_IDENTIFIER,
								longDate,
								scope,
								priorSignature,
								hashedHeaders,
								hashedPayload,
							].join("\n");
							return [
								2,
								this.signString(stringToSign, {
									signingDate,
									signingRegion: region,
									signingService,
								}),
							];
					}
				});
			});
		};
		SignatureV42.prototype.signString = function (stringToSign, _a) {
			var _b = _a === void 0 ? {} : _a,
				_c = _b.signingDate,
				signingDate = _c === void 0 ? new Date() : _c,
				signingRegion = _b.signingRegion,
				signingService = _b.signingService;
			return __awaiter2(this, void 0, void 0, function () {
				var credentials, region, _d, shortDate, hash, _e, _f, _g;
				return __generator2(this, function (_h) {
					switch (_h.label) {
						case 0:
							return [4, this.credentialProvider()];
						case 1:
							credentials = _h.sent();
							if (!(signingRegion !== null && signingRegion !== void 0)) return [3, 2];
							_d = signingRegion;
							return [3, 4];
						case 2:
							return [4, this.regionProvider()];
						case 3:
							_d = _h.sent();
							_h.label = 4;
						case 4:
							region = _d;
							shortDate = formatDate(signingDate).shortDate;
							_f = (_e = this.sha256).bind;
							return [4, this.getSigningKey(credentials, region, shortDate, signingService)];
						case 5:
							hash = new (_f.apply(_e, [void 0, _h.sent()]))();
							hash.update(stringToSign);
							_g = toHex;
							return [4, hash.digest()];
						case 6:
							return [2, _g.apply(void 0, [_h.sent()])];
					}
				});
			});
		};
		SignatureV42.prototype.signRequest = function (requestToSign, _a) {
			var _b = _a === void 0 ? {} : _a,
				_c = _b.signingDate,
				signingDate = _c === void 0 ? new Date() : _c,
				signableHeaders = _b.signableHeaders,
				unsignableHeaders = _b.unsignableHeaders,
				signingRegion = _b.signingRegion,
				signingService = _b.signingService;
			return __awaiter2(this, void 0, void 0, function () {
				var credentials,
					region,
					_d,
					request,
					_e,
					longDate,
					shortDate,
					scope,
					payloadHash,
					canonicalHeaders,
					signature;
				return __generator2(this, function (_f) {
					switch (_f.label) {
						case 0:
							return [4, this.credentialProvider()];
						case 1:
							credentials = _f.sent();
							if (!(signingRegion !== null && signingRegion !== void 0)) return [3, 2];
							_d = signingRegion;
							return [3, 4];
						case 2:
							return [4, this.regionProvider()];
						case 3:
							_d = _f.sent();
							_f.label = 4;
						case 4:
							region = _d;
							request = prepareRequest(requestToSign);
							(_e = formatDate(signingDate)), (longDate = _e.longDate), (shortDate = _e.shortDate);
							scope = createScope(
								shortDate,
								region,
								signingService !== null && signingService !== void 0 ? signingService : this.service
							);
							request.headers[AMZ_DATE_HEADER] = longDate;
							if (credentials.sessionToken) {
								request.headers[TOKEN_HEADER] = credentials.sessionToken;
							}
							return [4, getPayloadHash(request, this.sha256)];
						case 5:
							payloadHash = _f.sent();
							if (!hasHeader(SHA256_HEADER, request.headers) && this.applyChecksum) {
								request.headers[SHA256_HEADER] = payloadHash;
							}
							canonicalHeaders = getCanonicalHeaders(request, unsignableHeaders, signableHeaders);
							return [
								4,
								this.getSignature(
									longDate,
									scope,
									this.getSigningKey(credentials, region, shortDate, signingService),
									this.createCanonicalRequest(request, canonicalHeaders, payloadHash)
								),
							];
						case 6:
							signature = _f.sent();
							request.headers[AUTH_HEADER] =
								ALGORITHM_IDENTIFIER +
								" " +
								("Credential=" + credentials.accessKeyId + "/" + scope + ", ") +
								("SignedHeaders=" + getCanonicalHeaderList(canonicalHeaders) + ", ") +
								("Signature=" + signature);
							return [2, request];
					}
				});
			});
		};
		SignatureV42.prototype.createCanonicalRequest = function (
			request,
			canonicalHeaders,
			payloadHash
		) {
			var sortedHeaders = Object.keys(canonicalHeaders).sort();
			return (
				request.method +
				"\n" +
				this.getCanonicalPath(request) +
				"\n" +
				getCanonicalQuery(request) +
				"\n" +
				sortedHeaders
					.map(function (name2) {
						return name2 + ":" + canonicalHeaders[name2];
					})
					.join("\n") +
				"\n\n" +
				sortedHeaders.join(";") +
				"\n" +
				payloadHash
			);
		};
		SignatureV42.prototype.createStringToSign = function (
			longDate,
			credentialScope,
			canonicalRequest
		) {
			return __awaiter2(this, void 0, void 0, function () {
				var hash, hashedRequest;
				return __generator2(this, function (_a) {
					switch (_a.label) {
						case 0:
							hash = new this.sha256();
							hash.update(canonicalRequest);
							return [4, hash.digest()];
						case 1:
							hashedRequest = _a.sent();
							return [
								2,
								ALGORITHM_IDENTIFIER +
									"\n" +
									longDate +
									"\n" +
									credentialScope +
									"\n" +
									toHex(hashedRequest),
							];
					}
				});
			});
		};
		SignatureV42.prototype.getCanonicalPath = function (_a) {
			var path2 = _a.path;
			if (this.uriEscapePath) {
				var doubleEncoded = encodeURIComponent(path2.replace(/^\//, ""));
				return "/" + doubleEncoded.replace(/%2F/g, "/");
			}
			return path2;
		};
		SignatureV42.prototype.getSignature = function (
			longDate,
			credentialScope,
			keyPromise,
			canonicalRequest
		) {
			return __awaiter2(this, void 0, void 0, function () {
				var stringToSign, hash, _a, _b, _c;
				return __generator2(this, function (_d) {
					switch (_d.label) {
						case 0:
							return [4, this.createStringToSign(longDate, credentialScope, canonicalRequest)];
						case 1:
							stringToSign = _d.sent();
							_b = (_a = this.sha256).bind;
							return [4, keyPromise];
						case 2:
							hash = new (_b.apply(_a, [void 0, _d.sent()]))();
							hash.update(stringToSign);
							_c = toHex;
							return [4, hash.digest()];
						case 3:
							return [2, _c.apply(void 0, [_d.sent()])];
					}
				});
			});
		};
		SignatureV42.prototype.getSigningKey = function (credentials, region, shortDate, service) {
			return getSigningKey(this.sha256, credentials, shortDate, region, service || this.service);
		};
		return SignatureV42;
	})();
	var formatDate = function (now) {
		var longDate = iso8601(now).replace(/[\-:]/g, "");
		return {
			longDate,
			shortDate: longDate.substr(0, 8),
		};
	};
	var getCanonicalHeaderList = function (headers) {
		return Object.keys(headers).sort().join(";");
	};
	var normalizeRegionProvider = function (region) {
		if (typeof region === "string") {
			var promisified_1 = Promise.resolve(region);
			return function () {
				return promisified_1;
			};
		} else {
			return region;
		}
	};
	var normalizeCredentialsProvider = function (credentials) {
		if (typeof credentials === "object") {
			var promisified_2 = Promise.resolve(credentials);
			return function () {
				return promisified_2;
			};
		} else {
			return credentials;
		}
	};

	// ../../node_modules/@aws-sdk/middleware-signing/dist/es/configurations.js
	function resolveAwsAuthConfig(input) {
		var _this = this;
		var credentials = input.credentials || input.credentialDefaultProvider(input);
		var normalizedCreds = normalizeProvider(credentials);
		var _a = input.signingEscapePath,
			signingEscapePath = _a === void 0 ? true : _a,
			_b = input.systemClockOffset,
			systemClockOffset = _b === void 0 ? input.systemClockOffset || 0 : _b,
			sha2562 = input.sha256;
		var signer;
		if (input.signer) {
			signer = normalizeProvider(input.signer);
		} else {
			signer = function () {
				return normalizeProvider(input.region)()
					.then(function (region) {
						return __awaiter2(_this, void 0, void 0, function () {
							return __generator2(this, function (_a2) {
								switch (_a2.label) {
									case 0:
										return [4, input.regionInfoProvider(region)];
									case 1:
										return [2, [_a2.sent() || {}, region]];
								}
							});
						});
					})
					.then(function (_a2) {
						var _b2 = __read10(_a2, 2),
							regionInfo = _b2[0],
							region = _b2[1];
						var signingRegion = regionInfo.signingRegion,
							signingService = regionInfo.signingService;
						input.signingRegion = input.signingRegion || signingRegion || region;
						input.signingName = input.signingName || signingService || input.serviceId;
						return new SignatureV4({
							credentials: normalizedCreds,
							region: input.signingRegion,
							service: input.signingName,
							sha256: sha2562,
							uriEscapePath: signingEscapePath,
						});
					});
			};
		}
		return __assign6(__assign6({}, input), {
			systemClockOffset,
			signingEscapePath,
			credentials: normalizedCreds,
			signer,
		});
	}
	function normalizeProvider(input) {
		if (typeof input === "object") {
			var promisified_1 = Promise.resolve(input);
			return function () {
				return promisified_1;
			};
		}
		return input;
	}

	// ../../node_modules/@aws-sdk/middleware-user-agent/dist/es/configurations.js
	function resolveUserAgentConfig(input) {
		return __assign6(__assign6({}, input), {
			customUserAgent:
				typeof input.customUserAgent === "string"
					? [[input.customUserAgent]]
					: input.customUserAgent,
		});
	}

	// ../../node_modules/@aws-sdk/middleware-user-agent/dist/es/constants.js
	var USER_AGENT = "user-agent";
	var X_AMZ_USER_AGENT = "x-amz-user-agent";
	var SPACE = " ";
	var UA_ESCAPE_REGEX = /[^\!\#\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;

	// ../../node_modules/@aws-sdk/middleware-user-agent/dist/es/user-agent-middleware.js
	var userAgentMiddleware = function (options) {
		return function (next, context) {
			return function (args) {
				return __awaiter2(void 0, void 0, void 0, function () {
					var request, headers, userAgent2, defaultUserAgent2, customUserAgent, normalUAValue;
					var _a, _b;
					return __generator2(this, function (_c) {
						switch (_c.label) {
							case 0:
								request = args.request;
								if (!HttpRequest.isInstance(request)) return [2, next(args)];
								headers = request.headers;
								userAgent2 =
									((_a = context === null || context === void 0 ? void 0 : context.userAgent) ===
										null || _a === void 0
										? void 0
										: _a.map(escapeUserAgent)) || [];
								return [4, options.defaultUserAgentProvider()];
							case 1:
								defaultUserAgent2 = _c.sent().map(escapeUserAgent);
								customUserAgent =
									((_b =
										options === null || options === void 0 ? void 0 : options.customUserAgent) ===
										null || _b === void 0
										? void 0
										: _b.map(escapeUserAgent)) || [];
								headers[X_AMZ_USER_AGENT] = __spread4(
									defaultUserAgent2,
									userAgent2,
									customUserAgent
								).join(SPACE);
								normalUAValue = __spread4(
									defaultUserAgent2.filter(function (section) {
										return section.startsWith("aws-sdk-");
									}),
									customUserAgent
								).join(SPACE);
								if (options.runtime !== "browser" && normalUAValue) {
									headers[USER_AGENT] = headers[USER_AGENT]
										? headers[USER_AGENT] + " " + normalUAValue
										: normalUAValue;
								}
								return [2, next(__assign6(__assign6({}, args), { request }))];
						}
					});
				});
			};
		};
	};
	var escapeUserAgent = function (_a) {
		var _b = __read10(_a, 2),
			name2 = _b[0],
			version4 = _b[1];
		var prefixSeparatorIndex = name2.indexOf("/");
		var prefix = name2.substring(0, prefixSeparatorIndex);
		var uaName = name2.substring(prefixSeparatorIndex + 1);
		if (prefix === "api") {
			uaName = uaName.toLowerCase();
		}
		return [prefix, uaName, version4]
			.filter(function (item) {
				return item && item.length > 0;
			})
			.map(function (item) {
				return item === null || item === void 0 ? void 0 : item.replace(UA_ESCAPE_REGEX, "_");
			})
			.join("/");
	};
	var getUserAgentMiddlewareOptions = {
		name: "getUserAgentMiddleware",
		step: "build",
		priority: "low",
		tags: ["SET_USER_AGENT", "USER_AGENT"],
		override: true,
	};
	var getUserAgentPlugin = function (config) {
		return {
			applyToStack: function (clientStack) {
				clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);
			},
		};
	};

	// ../../node_modules/@aws-sdk/middleware-stack/dist/es/MiddlewareStack.js
	var constructStack = function () {
		var absoluteEntries = [];
		var relativeEntries = [];
		var entriesNameSet = new Set();
		var sort = function (entries) {
			return entries.sort(function (a, b) {
				return (
					stepWeights[b.step] - stepWeights[a.step] ||
					priorityWeights[b.priority || "normal"] - priorityWeights[a.priority || "normal"]
				);
			});
		};
		var removeByName = function (toRemove) {
			var isRemoved = false;
			var filterCb = function (entry) {
				if (entry.name && entry.name === toRemove) {
					isRemoved = true;
					entriesNameSet.delete(toRemove);
					return false;
				}
				return true;
			};
			absoluteEntries = absoluteEntries.filter(filterCb);
			relativeEntries = relativeEntries.filter(filterCb);
			return isRemoved;
		};
		var removeByReference = function (toRemove) {
			var isRemoved = false;
			var filterCb = function (entry) {
				if (entry.middleware === toRemove) {
					isRemoved = true;
					if (entry.name) entriesNameSet.delete(entry.name);
					return false;
				}
				return true;
			};
			absoluteEntries = absoluteEntries.filter(filterCb);
			relativeEntries = relativeEntries.filter(filterCb);
			return isRemoved;
		};
		var cloneTo = function (toStack) {
			absoluteEntries.forEach(function (entry) {
				toStack.add(entry.middleware, __assign6({}, entry));
			});
			relativeEntries.forEach(function (entry) {
				toStack.addRelativeTo(entry.middleware, __assign6({}, entry));
			});
			return toStack;
		};
		var expandRelativeMiddlewareList = function (from) {
			var expandedMiddlewareList = [];
			from.before.forEach(function (entry) {
				if (entry.before.length === 0 && entry.after.length === 0) {
					expandedMiddlewareList.push(entry);
				} else {
					expandedMiddlewareList.push.apply(
						expandedMiddlewareList,
						__spread4(expandRelativeMiddlewareList(entry))
					);
				}
			});
			expandedMiddlewareList.push(from);
			from.after.reverse().forEach(function (entry) {
				if (entry.before.length === 0 && entry.after.length === 0) {
					expandedMiddlewareList.push(entry);
				} else {
					expandedMiddlewareList.push.apply(
						expandedMiddlewareList,
						__spread4(expandRelativeMiddlewareList(entry))
					);
				}
			});
			return expandedMiddlewareList;
		};
		var getMiddlewareList = function () {
			var normalizedAbsoluteEntries = [];
			var normalizedRelativeEntries = [];
			var normalizedEntriesNameMap = {};
			absoluteEntries.forEach(function (entry) {
				var normalizedEntry = __assign6(__assign6({}, entry), { before: [], after: [] });
				if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
				normalizedAbsoluteEntries.push(normalizedEntry);
			});
			relativeEntries.forEach(function (entry) {
				var normalizedEntry = __assign6(__assign6({}, entry), { before: [], after: [] });
				if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
				normalizedRelativeEntries.push(normalizedEntry);
			});
			normalizedRelativeEntries.forEach(function (entry) {
				if (entry.toMiddleware) {
					var toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
					if (toMiddleware === void 0) {
						throw new Error(
							entry.toMiddleware +
								" is not found when adding " +
								(entry.name || "anonymous") +
								" middleware " +
								entry.relation +
								" " +
								entry.toMiddleware
						);
					}
					if (entry.relation === "after") {
						toMiddleware.after.push(entry);
					}
					if (entry.relation === "before") {
						toMiddleware.before.push(entry);
					}
				}
			});
			var mainChain = sort(normalizedAbsoluteEntries)
				.map(expandRelativeMiddlewareList)
				.reduce(function (wholeList, expendedMiddlewareList) {
					wholeList.push.apply(wholeList, __spread4(expendedMiddlewareList));
					return wholeList;
				}, []);
			return mainChain.map(function (entry) {
				return entry.middleware;
			});
		};
		var stack = {
			add: function (middleware, options) {
				if (options === void 0) {
					options = {};
				}
				var name2 = options.name,
					override = options.override;
				var entry = __assign6({ step: "initialize", priority: "normal", middleware }, options);
				if (name2) {
					if (entriesNameSet.has(name2)) {
						if (!override) throw new Error("Duplicate middleware name '" + name2 + "'");
						var toOverrideIndex = absoluteEntries.findIndex(function (entry2) {
							return entry2.name === name2;
						});
						var toOverride = absoluteEntries[toOverrideIndex];
						if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {
							throw new Error(
								'"' +
									name2 +
									'" middleware with ' +
									toOverride.priority +
									" priority in " +
									toOverride.step +
									" step cannot be " +
									("overridden by same-name middleware with " +
										entry.priority +
										" priority in " +
										entry.step +
										" step.")
							);
						}
						absoluteEntries.splice(toOverrideIndex, 1);
					}
					entriesNameSet.add(name2);
				}
				absoluteEntries.push(entry);
			},
			addRelativeTo: function (middleware, options) {
				var name2 = options.name,
					override = options.override;
				var entry = __assign6({ middleware }, options);
				if (name2) {
					if (entriesNameSet.has(name2)) {
						if (!override) throw new Error("Duplicate middleware name '" + name2 + "'");
						var toOverrideIndex = relativeEntries.findIndex(function (entry2) {
							return entry2.name === name2;
						});
						var toOverride = relativeEntries[toOverrideIndex];
						if (
							toOverride.toMiddleware !== entry.toMiddleware ||
							toOverride.relation !== entry.relation
						) {
							throw new Error(
								'"' +
									name2 +
									'" middleware ' +
									toOverride.relation +
									' "' +
									toOverride.toMiddleware +
									'" middleware cannot be overridden ' +
									("by same-name middleware " +
										entry.relation +
										' "' +
										entry.toMiddleware +
										'" middleware.')
							);
						}
						relativeEntries.splice(toOverrideIndex, 1);
					}
					entriesNameSet.add(name2);
				}
				relativeEntries.push(entry);
			},
			clone: function () {
				return cloneTo(constructStack());
			},
			use: function (plugin) {
				plugin.applyToStack(stack);
			},
			remove: function (toRemove) {
				if (typeof toRemove === "string") return removeByName(toRemove);
				else return removeByReference(toRemove);
			},
			removeByTag: function (toRemove) {
				var isRemoved = false;
				var filterCb = function (entry) {
					var tags = entry.tags,
						name2 = entry.name;
					if (tags && tags.includes(toRemove)) {
						if (name2) entriesNameSet.delete(name2);
						isRemoved = true;
						return false;
					}
					return true;
				};
				absoluteEntries = absoluteEntries.filter(filterCb);
				relativeEntries = relativeEntries.filter(filterCb);
				return isRemoved;
			},
			concat: function (from) {
				var cloned = cloneTo(constructStack());
				cloned.use(from);
				return cloned;
			},
			applyToStack: cloneTo,
			resolve: function (handler, context) {
				var e_1, _a;
				try {
					for (
						var _b = __values4(getMiddlewareList().reverse()), _c = _b.next();
						!_c.done;
						_c = _b.next()
					) {
						var middleware = _c.value;
						handler = middleware(handler, context);
					}
				} catch (e_1_1) {
					e_1 = { error: e_1_1 };
				} finally {
					try {
						if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
					} finally {
						if (e_1) throw e_1.error;
					}
				}
				return handler;
			},
		};
		return stack;
	};
	var stepWeights = {
		initialize: 5,
		serialize: 4,
		build: 3,
		finalizeRequest: 2,
		deserialize: 1,
	};
	var priorityWeights = {
		high: 3,
		normal: 2,
		low: 1,
	};

	// ../../node_modules/@aws-sdk/smithy-client/dist/es/client.js
	var Client = (function () {
		function Client3(config) {
			this.middlewareStack = constructStack();
			this.config = config;
		}
		Client3.prototype.send = function (command, optionsOrCb, cb) {
			var options = typeof optionsOrCb !== "function" ? optionsOrCb : void 0;
			var callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
			var handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
			if (callback) {
				handler(command)
					.then(
						function (result) {
							return callback(null, result.output);
						},
						function (err) {
							return callback(err);
						}
					)
					.catch(function () {});
			} else {
				return handler(command).then(function (result) {
					return result.output;
				});
			}
		};
		Client3.prototype.destroy = function () {
			if (this.config.requestHandler.destroy) this.config.requestHandler.destroy();
		};
		return Client3;
	})();

	// ../../node_modules/@aws-sdk/smithy-client/dist/es/command.js
	var Command = (function () {
		function Command2() {
			this.middlewareStack = constructStack();
		}
		return Command2;
	})();

	// ../../node_modules/@aws-sdk/smithy-client/dist/es/lazy-json.js
	var StringWrapper = function () {
		var Class = Object.getPrototypeOf(this).constructor;
		var Constructor = Function.bind.apply(String, __spread4([null], arguments));
		var instance = new Constructor();
		Object.setPrototypeOf(instance, Class.prototype);
		return instance;
	};
	StringWrapper.prototype = Object.create(String.prototype, {
		constructor: {
			value: StringWrapper,
			enumerable: false,
			writable: true,
			configurable: true,
		},
	});
	Object.setPrototypeOf(StringWrapper, String);
	var LazyJsonString = (function (_super) {
		__extends2(LazyJsonString2, _super);
		function LazyJsonString2() {
			return (_super !== null && _super.apply(this, arguments)) || this;
		}
		LazyJsonString2.prototype.deserializeJSON = function () {
			return JSON.parse(_super.prototype.toString.call(this));
		};
		LazyJsonString2.prototype.toJSON = function () {
			return _super.prototype.toString.call(this);
		};
		LazyJsonString2.fromObject = function (object) {
			if (object instanceof LazyJsonString2) {
				return object;
			} else if (object instanceof String || typeof object === "string") {
				return new LazyJsonString2(object);
			}
			return new LazyJsonString2(JSON.stringify(object));
		};
		return LazyJsonString2;
	})(StringWrapper);

	// ../../node_modules/@aws-sdk/middleware-serde/dist/es/deserializerMiddleware.js
	var deserializerMiddleware = function (options, deserializer) {
		return function (next, context) {
			return function (args) {
				return __awaiter2(void 0, void 0, void 0, function () {
					var response, parsed;
					return __generator2(this, function (_a) {
						switch (_a.label) {
							case 0:
								return [4, next(args)];
							case 1:
								response = _a.sent().response;
								return [4, deserializer(response, options)];
							case 2:
								parsed = _a.sent();
								return [
									2,
									{
										response,
										output: parsed,
									},
								];
						}
					});
				});
			};
		};
	};

	// ../../node_modules/@aws-sdk/middleware-serde/dist/es/serializerMiddleware.js
	var serializerMiddleware = function (options, serializer) {
		return function (next, context) {
			return function (args) {
				return __awaiter2(void 0, void 0, void 0, function () {
					var request;
					return __generator2(this, function (_a) {
						switch (_a.label) {
							case 0:
								return [4, serializer(args.input, options)];
							case 1:
								request = _a.sent();
								return [2, next(__assign6(__assign6({}, args), { request }))];
						}
					});
				});
			};
		};
	};

	// ../../node_modules/@aws-sdk/middleware-serde/dist/es/serdePlugin.js
	var deserializerMiddlewareOption = {
		name: "deserializerMiddleware",
		step: "deserialize",
		tags: ["DESERIALIZER"],
		override: true,
	};
	var serializerMiddlewareOption = {
		name: "serializerMiddleware",
		step: "serialize",
		tags: ["SERIALIZER"],
		override: true,
	};
	function getSerdePlugin(config, serializer, deserializer) {
		return {
			applyToStack: function (commandStack) {
				commandStack.add(
					deserializerMiddleware(config, deserializer),
					deserializerMiddlewareOption
				);
				commandStack.add(serializerMiddleware(config, serializer), serializerMiddlewareOption);
			},
		};
	}

	// ../../node_modules/@aws-amplify/core/lib-esm/OAuthHelper/GoogleOAuth.js
	var __awaiter3 = function (thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P
				? value
				: new P(function (resolve) {
						resolve(value);
				  });
		}
		return new (P || (P = Promise))(function (resolve, reject) {
			function fulfilled(value) {
				try {
					step(generator.next(value));
				} catch (e) {
					reject(e);
				}
			}
			function rejected(value) {
				try {
					step(generator["throw"](value));
				} catch (e) {
					reject(e);
				}
			}
			function step(result) {
				result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	var __generator3 = function (thisArg, body) {
		var _ = {
				label: 0,
				sent: function () {
					if (t[0] & 1) throw t[1];
					return t[1];
				},
				trys: [],
				ops: [],
			},
			f,
			y,
			t,
			g;
		return (
			(g = { next: verb(0), throw: verb(1), return: verb(2) }),
			typeof Symbol === "function" &&
				(g[Symbol.iterator] = function () {
					return this;
				}),
			g
		);
		function verb(n) {
			return function (v) {
				return step([n, v]);
			};
		}
		function step(op) {
			if (f) throw new TypeError("Generator is already executing.");
			while (_)
				try {
					if (
						((f = 1),
						y &&
							(t =
								op[0] & 2
									? y["return"]
									: op[0]
									? y["throw"] || ((t = y["return"]) && t.call(y), 0)
									: y.next) &&
							!(t = t.call(y, op[1])).done)
					)
						return t;
					if (((y = 0), t)) op = [op[0] & 2, t.value];
					switch (op[0]) {
						case 0:
						case 1:
							t = op;
							break;
						case 4:
							_.label++;
							return { value: op[1], done: false };
						case 5:
							_.label++;
							y = op[1];
							op = [0];
							continue;
						case 7:
							op = _.ops.pop();
							_.trys.pop();
							continue;
						default:
							if (
								!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) &&
								(op[0] === 6 || op[0] === 2)
							) {
								_ = 0;
								continue;
							}
							if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
								_.label = op[1];
								break;
							}
							if (op[0] === 6 && _.label < t[1]) {
								_.label = t[1];
								t = op;
								break;
							}
							if (t && _.label < t[2]) {
								_.label = t[2];
								_.ops.push(op);
								break;
							}
							if (t[2]) _.ops.pop();
							_.trys.pop();
							continue;
					}
					op = body.call(thisArg, _);
				} catch (e) {
					op = [6, e];
					y = 0;
				} finally {
					f = t = 0;
				}
			if (op[0] & 5) throw op[1];
			return { value: op[0] ? op[1] : void 0, done: true };
		}
	};
	var logger7 = new ConsoleLogger("CognitoCredentials");
	var waitForInit = new Promise(function (res, rej) {
		if (!browserOrNode().isBrowser) {
			logger7.debug("not in the browser, directly resolved");
			return res();
		}
		var ga = window["gapi"] && window["gapi"].auth2 ? window["gapi"].auth2 : null;
		if (ga) {
			logger7.debug("google api already loaded");
			return res();
		} else {
			setTimeout(function () {
				return res();
			}, 2e3);
		}
	});
	var GoogleOAuth = (function () {
		function GoogleOAuth3() {
			this.initialized = false;
			this.refreshGoogleToken = this.refreshGoogleToken.bind(this);
			this._refreshGoogleTokenImpl = this._refreshGoogleTokenImpl.bind(this);
		}
		GoogleOAuth3.prototype.refreshGoogleToken = function () {
			return __awaiter3(this, void 0, void 0, function () {
				return __generator3(this, function (_a) {
					switch (_a.label) {
						case 0:
							if (!!this.initialized) return [3, 2];
							logger7.debug("need to wait for the Google SDK loaded");
							return [4, waitForInit];
						case 1:
							_a.sent();
							this.initialized = true;
							logger7.debug("finish waiting");
							_a.label = 2;
						case 2:
							return [2, this._refreshGoogleTokenImpl()];
					}
				});
			});
		};
		GoogleOAuth3.prototype._refreshGoogleTokenImpl = function () {
			var ga = null;
			if (browserOrNode().isBrowser)
				ga = window["gapi"] && window["gapi"].auth2 ? window["gapi"].auth2 : null;
			if (!ga) {
				logger7.debug("no gapi auth2 available");
				return Promise.reject("no gapi auth2 available");
			}
			return new Promise(function (res, rej) {
				ga.getAuthInstance()
					.then(function (googleAuth) {
						if (!googleAuth) {
							logger7.debug("google Auth undefined");
							rej(new NonRetryableError("google Auth undefined"));
						}
						var googleUser = googleAuth.currentUser.get();
						if (googleUser.isSignedIn()) {
							logger7.debug("refreshing the google access token");
							googleUser
								.reloadAuthResponse()
								.then(function (authResponse) {
									var id_token = authResponse.id_token,
										expires_at = authResponse.expires_at;
									res({ token: id_token, expires_at });
								})
								.catch(function (err) {
									if (err && err.error === "network_error") {
										rej("Network error reloading google auth response");
									} else {
										rej(new NonRetryableError("Failed to reload google auth response"));
									}
								});
						} else {
							rej(new NonRetryableError("User is not signed in with Google"));
						}
					})
					.catch(function (err) {
						logger7.debug("Failed to refresh google token", err);
						rej(new NonRetryableError("Failed to refresh google token"));
					});
			});
		};
		return GoogleOAuth3;
	})();

	// ../../node_modules/@aws-amplify/core/lib-esm/OAuthHelper/FacebookOAuth.js
	var __awaiter4 = function (thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P
				? value
				: new P(function (resolve) {
						resolve(value);
				  });
		}
		return new (P || (P = Promise))(function (resolve, reject) {
			function fulfilled(value) {
				try {
					step(generator.next(value));
				} catch (e) {
					reject(e);
				}
			}
			function rejected(value) {
				try {
					step(generator["throw"](value));
				} catch (e) {
					reject(e);
				}
			}
			function step(result) {
				result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	var __generator4 = function (thisArg, body) {
		var _ = {
				label: 0,
				sent: function () {
					if (t[0] & 1) throw t[1];
					return t[1];
				},
				trys: [],
				ops: [],
			},
			f,
			y,
			t,
			g;
		return (
			(g = { next: verb(0), throw: verb(1), return: verb(2) }),
			typeof Symbol === "function" &&
				(g[Symbol.iterator] = function () {
					return this;
				}),
			g
		);
		function verb(n) {
			return function (v) {
				return step([n, v]);
			};
		}
		function step(op) {
			if (f) throw new TypeError("Generator is already executing.");
			while (_)
				try {
					if (
						((f = 1),
						y &&
							(t =
								op[0] & 2
									? y["return"]
									: op[0]
									? y["throw"] || ((t = y["return"]) && t.call(y), 0)
									: y.next) &&
							!(t = t.call(y, op[1])).done)
					)
						return t;
					if (((y = 0), t)) op = [op[0] & 2, t.value];
					switch (op[0]) {
						case 0:
						case 1:
							t = op;
							break;
						case 4:
							_.label++;
							return { value: op[1], done: false };
						case 5:
							_.label++;
							y = op[1];
							op = [0];
							continue;
						case 7:
							op = _.ops.pop();
							_.trys.pop();
							continue;
						default:
							if (
								!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) &&
								(op[0] === 6 || op[0] === 2)
							) {
								_ = 0;
								continue;
							}
							if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
								_.label = op[1];
								break;
							}
							if (op[0] === 6 && _.label < t[1]) {
								_.label = t[1];
								t = op;
								break;
							}
							if (t && _.label < t[2]) {
								_.label = t[2];
								_.ops.push(op);
								break;
							}
							if (t[2]) _.ops.pop();
							_.trys.pop();
							continue;
					}
					op = body.call(thisArg, _);
				} catch (e) {
					op = [6, e];
					y = 0;
				} finally {
					f = t = 0;
				}
			if (op[0] & 5) throw op[1];
			return { value: op[0] ? op[1] : void 0, done: true };
		}
	};
	var logger8 = new ConsoleLogger("CognitoCredentials");
	var waitForInit2 = new Promise(function (res, rej) {
		if (!browserOrNode().isBrowser) {
			logger8.debug("not in the browser, directly resolved");
			return res();
		}
		var fb = window["FB"];
		if (fb) {
			logger8.debug("FB SDK already loaded");
			return res();
		} else {
			setTimeout(function () {
				return res();
			}, 2e3);
		}
	});
	var FacebookOAuth = (function () {
		function FacebookOAuth3() {
			this.initialized = false;
			this.refreshFacebookToken = this.refreshFacebookToken.bind(this);
			this._refreshFacebookTokenImpl = this._refreshFacebookTokenImpl.bind(this);
		}
		FacebookOAuth3.prototype.refreshFacebookToken = function () {
			return __awaiter4(this, void 0, void 0, function () {
				return __generator4(this, function (_a) {
					switch (_a.label) {
						case 0:
							if (!!this.initialized) return [3, 2];
							logger8.debug("need to wait for the Facebook SDK loaded");
							return [4, waitForInit2];
						case 1:
							_a.sent();
							this.initialized = true;
							logger8.debug("finish waiting");
							_a.label = 2;
						case 2:
							return [2, this._refreshFacebookTokenImpl()];
					}
				});
			});
		};
		FacebookOAuth3.prototype._refreshFacebookTokenImpl = function () {
			var fb = null;
			if (browserOrNode().isBrowser) fb = window["FB"];
			if (!fb) {
				var errorMessage = "no fb sdk available";
				logger8.debug(errorMessage);
				return Promise.reject(new NonRetryableError(errorMessage));
			}
			return new Promise(function (res, rej) {
				fb.getLoginStatus(
					function (fbResponse) {
						if (!fbResponse || !fbResponse.authResponse) {
							var errorMessage2 = "no response from facebook when refreshing the jwt token";
							logger8.debug(errorMessage2);
							rej(new NonRetryableError(errorMessage2));
						} else {
							var response = fbResponse.authResponse;
							var accessToken = response.accessToken,
								expiresIn = response.expiresIn;
							var date = new Date();
							var expires_at = expiresIn * 1e3 + date.getTime();
							if (!accessToken) {
								var errorMessage2 = "the jwtToken is undefined";
								logger8.debug(errorMessage2);
								rej(new NonRetryableError(errorMessage2));
							}
							res({
								token: accessToken,
								expires_at,
							});
						}
					},
					{ scope: "public_profile,email" }
				);
			});
		};
		return FacebookOAuth3;
	})();

	// ../../node_modules/@aws-amplify/core/lib-esm/OAuthHelper/index.js
	var GoogleOAuth2 = new GoogleOAuth();
	var FacebookOAuth2 = new FacebookOAuth();

	// ../../node_modules/@aws-amplify/core/lib-esm/StorageHelper/index.js
	var dataMemory = {};
	var MemoryStorage = (function () {
		function MemoryStorage3() {}
		MemoryStorage3.setItem = function (key, value) {
			dataMemory[key] = value;
			return dataMemory[key];
		};
		MemoryStorage3.getItem = function (key) {
			return Object.prototype.hasOwnProperty.call(dataMemory, key) ? dataMemory[key] : void 0;
		};
		MemoryStorage3.removeItem = function (key) {
			return delete dataMemory[key];
		};
		MemoryStorage3.clear = function () {
			dataMemory = {};
			return dataMemory;
		};
		return MemoryStorage3;
	})();
	var StorageHelper = (function () {
		function StorageHelper3() {
			try {
				this.storageWindow = window.localStorage;
				this.storageWindow.setItem("aws.amplify.test-ls", 1);
				this.storageWindow.removeItem("aws.amplify.test-ls");
			} catch (exception) {
				this.storageWindow = MemoryStorage;
			}
		}
		StorageHelper3.prototype.getStorage = function () {
			return this.storageWindow;
		};
		return StorageHelper3;
	})();

	// ../../node_modules/@aws-sdk/client-cognito-identity/node_modules/tslib/modules/index.js
	var import_tslib44 = __toModule(require_tslib3());
	var {
		__extends: __extends3,
		__assign: __assign7,
		__rest: __rest4,
		__decorate: __decorate2,
		__param: __param2,
		__metadata: __metadata2,
		__awaiter: __awaiter5,
		__generator: __generator5,
		__exportStar: __exportStar2,
		__createBinding: __createBinding2,
		__values: __values5,
		__read: __read11,
		__spread: __spread5,
		__spreadArrays: __spreadArrays2,
		__spreadArray: __spreadArray3,
		__await: __await2,
		__asyncGenerator: __asyncGenerator2,
		__asyncDelegator: __asyncDelegator2,
		__asyncValues: __asyncValues2,
		__makeTemplateObject: __makeTemplateObject2,
		__importStar: __importStar2,
		__importDefault: __importDefault2,
		__classPrivateFieldGet: __classPrivateFieldGet2,
		__classPrivateFieldSet: __classPrivateFieldSet2,
	} = import_tslib44.default;

	// ../../node_modules/@aws-sdk/client-cognito-identity/dist/es/package.json
	var name = "@aws-sdk/client-cognito-identity";
	var description =
		"AWS SDK for JavaScript Cognito Identity Client for Node.js, Browser and React Native";
	var version2 = "3.6.1";
	var scripts = {
		clean: "yarn remove-definitions && yarn remove-dist && yarn remove-documentation",
		"build-documentation": "yarn remove-documentation && typedoc ./",
		prepublishOnly: "yarn build",
		pretest: "yarn build:cjs",
		"remove-definitions": "rimraf ./types",
		"remove-dist": "rimraf ./dist",
		"remove-documentation": "rimraf ./docs",
		"test:unit": "mocha **/cjs/**/*.spec.js",
		"test:e2e": "mocha **/cjs/**/*.ispec.js && karma start karma.conf.js",
		test: "yarn test:unit",
		"build:cjs": "tsc -p tsconfig.json",
		"build:es": "tsc -p tsconfig.es.json",
		build: "yarn build:cjs && yarn build:es",
		postbuild: "downlevel-dts types types/ts3.4",
	};
	var main = "./dist/cjs/index.js";
	var types = "./types/index.d.ts";
	var module = "./dist/es/index.js";
	var browser = {
		"./runtimeConfig": "./runtimeConfig.browser",
	};
	var react_native = {
		"./runtimeConfig": "./runtimeConfig.native",
	};
	var sideEffects = false;
	var dependencies = {
		"@aws-crypto/sha256-browser": "^1.0.0",
		"@aws-crypto/sha256-js": "^1.0.0",
		"@aws-sdk/config-resolver": "3.6.1",
		"@aws-sdk/credential-provider-node": "3.6.1",
		"@aws-sdk/fetch-http-handler": "3.6.1",
		"@aws-sdk/hash-node": "3.6.1",
		"@aws-sdk/invalid-dependency": "3.6.1",
		"@aws-sdk/middleware-content-length": "3.6.1",
		"@aws-sdk/middleware-host-header": "3.6.1",
		"@aws-sdk/middleware-logger": "3.6.1",
		"@aws-sdk/middleware-retry": "3.6.1",
		"@aws-sdk/middleware-serde": "3.6.1",
		"@aws-sdk/middleware-signing": "3.6.1",
		"@aws-sdk/middleware-stack": "3.6.1",
		"@aws-sdk/middleware-user-agent": "3.6.1",
		"@aws-sdk/node-config-provider": "3.6.1",
		"@aws-sdk/node-http-handler": "3.6.1",
		"@aws-sdk/protocol-http": "3.6.1",
		"@aws-sdk/smithy-client": "3.6.1",
		"@aws-sdk/types": "3.6.1",
		"@aws-sdk/url-parser": "3.6.1",
		"@aws-sdk/url-parser-native": "3.6.1",
		"@aws-sdk/util-base64-browser": "3.6.1",
		"@aws-sdk/util-base64-node": "3.6.1",
		"@aws-sdk/util-body-length-browser": "3.6.1",
		"@aws-sdk/util-body-length-node": "3.6.1",
		"@aws-sdk/util-user-agent-browser": "3.6.1",
		"@aws-sdk/util-user-agent-node": "3.6.1",
		"@aws-sdk/util-utf8-browser": "3.6.1",
		"@aws-sdk/util-utf8-node": "3.6.1",
		tslib: "^2.0.0",
	};
	var devDependencies = {
		"@aws-sdk/client-documentation-generator": "3.6.1",
		"@aws-sdk/client-iam": "3.6.1",
		"@types/chai": "^4.2.11",
		"@types/mocha": "^8.0.4",
		"@types/node": "^12.7.5",
		"downlevel-dts": "0.7.0",
		jest: "^26.1.0",
		rimraf: "^3.0.0",
		typedoc: "^0.19.2",
		typescript: "~4.1.2",
	};
	var engines = {
		node: ">=10.0.0",
	};
	var typesVersions = {
		"<4.0": {
			"types/*": ["types/ts3.4/*"],
		},
	};
	var author = {
		name: "AWS SDK for JavaScript Team",
		url: "https://aws.amazon.com/javascript/",
	};
	var license = "Apache-2.0";
	var homepage = "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-cognito-identity";
	var repository = {
		type: "git",
		url: "https://github.com/aws/aws-sdk-js-v3.git",
		directory: "clients/client-cognito-identity",
	};
	var package_default = {
		name,
		description,
		version: version2,
		scripts,
		main,
		types,
		module,
		browser,
		"react-native": react_native,
		sideEffects,
		dependencies,
		devDependencies,
		engines,
		typesVersions,
		author,
		license,
		homepage,
		repository,
	};

	// ../../node_modules/@aws-sdk/client-cognito-identity/dist/es/runtimeConfig.browser.js
	var import_sha256_browser = __toModule(require_build4());

	// ../../node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/util-utf8-browser/dist/es/pureJs.js
	var fromUtf8 = function (input) {
		var bytes = [];
		for (var i = 0, len = input.length; i < len; i++) {
			var value = input.charCodeAt(i);
			if (value < 128) {
				bytes.push(value);
			} else if (value < 2048) {
				bytes.push((value >> 6) | 192, (value & 63) | 128);
			} else if (
				i + 1 < input.length &&
				(value & 64512) === 55296 &&
				(input.charCodeAt(i + 1) & 64512) === 56320
			) {
				var surrogatePair = 65536 + ((value & 1023) << 10) + (input.charCodeAt(++i) & 1023);
				bytes.push(
					(surrogatePair >> 18) | 240,
					((surrogatePair >> 12) & 63) | 128,
					((surrogatePair >> 6) & 63) | 128,
					(surrogatePair & 63) | 128
				);
			} else {
				bytes.push((value >> 12) | 224, ((value >> 6) & 63) | 128, (value & 63) | 128);
			}
		}
		return Uint8Array.from(bytes);
	};
	var toUtf8 = function (input) {
		var decoded = "";
		for (var i = 0, len = input.length; i < len; i++) {
			var byte = input[i];
			if (byte < 128) {
				decoded += String.fromCharCode(byte);
			} else if (192 <= byte && byte < 224) {
				var nextByte = input[++i];
				decoded += String.fromCharCode(((byte & 31) << 6) | (nextByte & 63));
			} else if (240 <= byte && byte < 365) {
				var surrogatePair = [byte, input[++i], input[++i], input[++i]];
				var encoded =
					"%" +
					surrogatePair
						.map(function (byteValue) {
							return byteValue.toString(16);
						})
						.join("%");
				decoded += decodeURIComponent(encoded);
			} else {
				decoded += String.fromCharCode(
					((byte & 15) << 12) | ((input[++i] & 63) << 6) | (input[++i] & 63)
				);
			}
		}
		return decoded;
	};

	// ../../node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/util-utf8-browser/dist/es/whatwgEncodingApi.js
	function fromUtf82(input) {
		return new TextEncoder().encode(input);
	}
	function toUtf82(input) {
		return new TextDecoder("utf-8").decode(input);
	}

	// ../../node_modules/@aws-sdk/client-cognito-identity/node_modules/@aws-sdk/util-utf8-browser/dist/es/index.js
	var fromUtf83 = function (input) {
		return typeof TextEncoder === "function" ? fromUtf82(input) : fromUtf8(input);
	};
	var toUtf83 = function (input) {
		return typeof TextDecoder === "function" ? toUtf82(input) : toUtf8(input);
	};

	// ../../node_modules/@aws-sdk/client-cognito-identity/dist/es/endpoints.js
	var AWS_TEMPLATE = "cognito-identity.{region}.amazonaws.com";
	var AWS_CN_TEMPLATE = "cognito-identity.{region}.amazonaws.com.cn";
	var AWS_ISO_TEMPLATE = "cognito-identity.{region}.c2s.ic.gov";
	var AWS_ISO_B_TEMPLATE = "cognito-identity.{region}.sc2s.sgov.gov";
	var AWS_US_GOV_TEMPLATE = "cognito-identity.{region}.amazonaws.com";
	var AWS_REGIONS = new Set([
		"af-south-1",
		"ap-east-1",
		"ap-northeast-1",
		"ap-northeast-2",
		"ap-south-1",
		"ap-southeast-1",
		"ap-southeast-2",
		"ca-central-1",
		"eu-central-1",
		"eu-north-1",
		"eu-south-1",
		"eu-west-1",
		"eu-west-2",
		"eu-west-3",
		"me-south-1",
		"sa-east-1",
		"us-east-1",
		"us-east-2",
		"us-west-1",
		"us-west-2",
	]);
	var AWS_CN_REGIONS = new Set(["cn-north-1", "cn-northwest-1"]);
	var AWS_ISO_REGIONS = new Set(["us-iso-east-1"]);
	var AWS_ISO_B_REGIONS = new Set(["us-isob-east-1"]);
	var AWS_US_GOV_REGIONS = new Set(["us-gov-east-1", "us-gov-west-1"]);
	var defaultRegionInfoProvider = function (region, options) {
		var regionInfo = void 0;
		switch (region) {
			case "ap-northeast-1":
				regionInfo = {
					hostname: "cognito-identity.ap-northeast-1.amazonaws.com",
					partition: "aws",
				};
				break;
			case "ap-northeast-2":
				regionInfo = {
					hostname: "cognito-identity.ap-northeast-2.amazonaws.com",
					partition: "aws",
				};
				break;
			case "ap-south-1":
				regionInfo = {
					hostname: "cognito-identity.ap-south-1.amazonaws.com",
					partition: "aws",
				};
				break;
			case "ap-southeast-1":
				regionInfo = {
					hostname: "cognito-identity.ap-southeast-1.amazonaws.com",
					partition: "aws",
				};
				break;
			case "ap-southeast-2":
				regionInfo = {
					hostname: "cognito-identity.ap-southeast-2.amazonaws.com",
					partition: "aws",
				};
				break;
			case "ca-central-1":
				regionInfo = {
					hostname: "cognito-identity.ca-central-1.amazonaws.com",
					partition: "aws",
				};
				break;
			case "cn-north-1":
				regionInfo = {
					hostname: "cognito-identity.cn-north-1.amazonaws.com.cn",
					partition: "aws-cn",
				};
				break;
			case "eu-central-1":
				regionInfo = {
					hostname: "cognito-identity.eu-central-1.amazonaws.com",
					partition: "aws",
				};
				break;
			case "eu-north-1":
				regionInfo = {
					hostname: "cognito-identity.eu-north-1.amazonaws.com",
					partition: "aws",
				};
				break;
			case "eu-west-1":
				regionInfo = {
					hostname: "cognito-identity.eu-west-1.amazonaws.com",
					partition: "aws",
				};
				break;
			case "eu-west-2":
				regionInfo = {
					hostname: "cognito-identity.eu-west-2.amazonaws.com",
					partition: "aws",
				};
				break;
			case "eu-west-3":
				regionInfo = {
					hostname: "cognito-identity.eu-west-3.amazonaws.com",
					partition: "aws",
				};
				break;
			case "fips-us-east-1":
				regionInfo = {
					hostname: "cognito-identity-fips.us-east-1.amazonaws.com",
					partition: "aws",
					signingRegion: "us-east-1",
				};
				break;
			case "fips-us-east-2":
				regionInfo = {
					hostname: "cognito-identity-fips.us-east-2.amazonaws.com",
					partition: "aws",
					signingRegion: "us-east-2",
				};
				break;
			case "fips-us-gov-west-1":
				regionInfo = {
					hostname: "cognito-identity-fips.us-gov-west-1.amazonaws.com",
					partition: "aws-us-gov",
					signingRegion: "us-gov-west-1",
				};
				break;
			case "fips-us-west-2":
				regionInfo = {
					hostname: "cognito-identity-fips.us-west-2.amazonaws.com",
					partition: "aws",
					signingRegion: "us-west-2",
				};
				break;
			case "sa-east-1":
				regionInfo = {
					hostname: "cognito-identity.sa-east-1.amazonaws.com",
					partition: "aws",
				};
				break;
			case "us-east-1":
				regionInfo = {
					hostname: "cognito-identity.us-east-1.amazonaws.com",
					partition: "aws",
				};
				break;
			case "us-east-2":
				regionInfo = {
					hostname: "cognito-identity.us-east-2.amazonaws.com",
					partition: "aws",
				};
				break;
			case "us-gov-west-1":
				regionInfo = {
					hostname: "cognito-identity.us-gov-west-1.amazonaws.com",
					partition: "aws-us-gov",
				};
				break;
			case "us-west-1":
				regionInfo = {
					hostname: "cognito-identity.us-west-1.amazonaws.com",
					partition: "aws",
				};
				break;
			case "us-west-2":
				regionInfo = {
					hostname: "cognito-identity.us-west-2.amazonaws.com",
					partition: "aws",
				};
				break;
			default:
				if (AWS_REGIONS.has(region)) {
					regionInfo = {
						hostname: AWS_TEMPLATE.replace("{region}", region),
						partition: "aws",
					};
				}
				if (AWS_CN_REGIONS.has(region)) {
					regionInfo = {
						hostname: AWS_CN_TEMPLATE.replace("{region}", region),
						partition: "aws-cn",
					};
				}
				if (AWS_ISO_REGIONS.has(region)) {
					regionInfo = {
						hostname: AWS_ISO_TEMPLATE.replace("{region}", region),
						partition: "aws-iso",
					};
				}
				if (AWS_ISO_B_REGIONS.has(region)) {
					regionInfo = {
						hostname: AWS_ISO_B_TEMPLATE.replace("{region}", region),
						partition: "aws-iso-b",
					};
				}
				if (AWS_US_GOV_REGIONS.has(region)) {
					regionInfo = {
						hostname: AWS_US_GOV_TEMPLATE.replace("{region}", region),
						partition: "aws-us-gov",
					};
				}
				if (regionInfo === void 0) {
					regionInfo = {
						hostname: AWS_TEMPLATE.replace("{region}", region),
						partition: "aws",
					};
				}
		}
		return Promise.resolve(__assign7({ signingService: "cognito-identity" }, regionInfo));
	};

	// ../../node_modules/@aws-sdk/client-cognito-identity/dist/es/runtimeConfig.shared.js
	var ClientSharedValues = {
		apiVersion: "2014-06-30",
		disableHostPrefix: false,
		logger: {},
		regionInfoProvider: defaultRegionInfoProvider,
		serviceId: "Cognito Identity",
		urlParser: parseUrl,
	};

	// ../../node_modules/@aws-sdk/client-cognito-identity/dist/es/runtimeConfig.browser.js
	var ClientDefaultValues = __assign7(__assign7({}, ClientSharedValues), {
		runtime: "browser",
		base64Decoder: fromBase64,
		base64Encoder: toBase64,
		bodyLengthChecker: calculateBodyLength,
		credentialDefaultProvider: function (_) {
			return function () {
				return Promise.reject(new Error("Credential is missing"));
			};
		},
		defaultUserAgentProvider: defaultUserAgent({
			serviceId: ClientSharedValues.serviceId,
			clientVersion: package_default.version,
		}),
		maxAttempts: DEFAULT_MAX_ATTEMPTS,
		region: invalidProvider("Region is missing"),
		requestHandler: new FetchHttpHandler(),
		sha256: import_sha256_browser.Sha256,
		streamCollector,
		utf8Decoder: fromUtf83,
		utf8Encoder: toUtf83,
	});

	// ../../node_modules/@aws-sdk/client-cognito-identity/dist/es/CognitoIdentityClient.js
	var CognitoIdentityClient = (function (_super) {
		__extends3(CognitoIdentityClient2, _super);
		function CognitoIdentityClient2(configuration) {
			var _this = this;
			var _config_0 = __assign7(__assign7({}, ClientDefaultValues), configuration);
			var _config_1 = resolveRegionConfig(_config_0);
			var _config_2 = resolveEndpointsConfig(_config_1);
			var _config_3 = resolveAwsAuthConfig(_config_2);
			var _config_4 = resolveRetryConfig(_config_3);
			var _config_5 = resolveHostHeaderConfig(_config_4);
			var _config_6 = resolveUserAgentConfig(_config_5);
			_this = _super.call(this, _config_6) || this;
			_this.config = _config_6;
			_this.middlewareStack.use(getRetryPlugin(_this.config));
			_this.middlewareStack.use(getContentLengthPlugin(_this.config));
			_this.middlewareStack.use(getHostHeaderPlugin(_this.config));
			_this.middlewareStack.use(getLoggerPlugin(_this.config));
			_this.middlewareStack.use(getUserAgentPlugin(_this.config));
			return _this;
		}
		CognitoIdentityClient2.prototype.destroy = function () {
			_super.prototype.destroy.call(this);
		};
		return CognitoIdentityClient2;
	})(Client);

	// ../../node_modules/@aws-sdk/client-cognito-identity/dist/es/models/models_0.js
	var AmbiguousRoleResolutionType;
	(function (AmbiguousRoleResolutionType2) {
		AmbiguousRoleResolutionType2["AUTHENTICATED_ROLE"] = "AuthenticatedRole";
		AmbiguousRoleResolutionType2["DENY"] = "Deny";
	})(AmbiguousRoleResolutionType || (AmbiguousRoleResolutionType = {}));
	var CognitoIdentityProvider;
	(function (CognitoIdentityProvider2) {
		CognitoIdentityProvider2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(CognitoIdentityProvider || (CognitoIdentityProvider = {}));
	var CreateIdentityPoolInput;
	(function (CreateIdentityPoolInput2) {
		CreateIdentityPoolInput2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(CreateIdentityPoolInput || (CreateIdentityPoolInput = {}));
	var IdentityPool;
	(function (IdentityPool2) {
		IdentityPool2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(IdentityPool || (IdentityPool = {}));
	var InternalErrorException;
	(function (InternalErrorException2) {
		InternalErrorException2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(InternalErrorException || (InternalErrorException = {}));
	var InvalidParameterException;
	(function (InvalidParameterException2) {
		InvalidParameterException2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(InvalidParameterException || (InvalidParameterException = {}));
	var LimitExceededException;
	(function (LimitExceededException2) {
		LimitExceededException2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(LimitExceededException || (LimitExceededException = {}));
	var NotAuthorizedException;
	(function (NotAuthorizedException2) {
		NotAuthorizedException2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(NotAuthorizedException || (NotAuthorizedException = {}));
	var ResourceConflictException;
	(function (ResourceConflictException2) {
		ResourceConflictException2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(ResourceConflictException || (ResourceConflictException = {}));
	var TooManyRequestsException;
	(function (TooManyRequestsException2) {
		TooManyRequestsException2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(TooManyRequestsException || (TooManyRequestsException = {}));
	var DeleteIdentitiesInput;
	(function (DeleteIdentitiesInput2) {
		DeleteIdentitiesInput2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(DeleteIdentitiesInput || (DeleteIdentitiesInput = {}));
	var ErrorCode;
	(function (ErrorCode2) {
		ErrorCode2["ACCESS_DENIED"] = "AccessDenied";
		ErrorCode2["INTERNAL_SERVER_ERROR"] = "InternalServerError";
	})(ErrorCode || (ErrorCode = {}));
	var UnprocessedIdentityId;
	(function (UnprocessedIdentityId2) {
		UnprocessedIdentityId2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(UnprocessedIdentityId || (UnprocessedIdentityId = {}));
	var DeleteIdentitiesResponse;
	(function (DeleteIdentitiesResponse2) {
		DeleteIdentitiesResponse2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(DeleteIdentitiesResponse || (DeleteIdentitiesResponse = {}));
	var DeleteIdentityPoolInput;
	(function (DeleteIdentityPoolInput2) {
		DeleteIdentityPoolInput2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(DeleteIdentityPoolInput || (DeleteIdentityPoolInput = {}));
	var ResourceNotFoundException;
	(function (ResourceNotFoundException2) {
		ResourceNotFoundException2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(ResourceNotFoundException || (ResourceNotFoundException = {}));
	var DescribeIdentityInput;
	(function (DescribeIdentityInput2) {
		DescribeIdentityInput2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(DescribeIdentityInput || (DescribeIdentityInput = {}));
	var IdentityDescription;
	(function (IdentityDescription2) {
		IdentityDescription2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(IdentityDescription || (IdentityDescription = {}));
	var DescribeIdentityPoolInput;
	(function (DescribeIdentityPoolInput2) {
		DescribeIdentityPoolInput2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(DescribeIdentityPoolInput || (DescribeIdentityPoolInput = {}));
	var ExternalServiceException;
	(function (ExternalServiceException2) {
		ExternalServiceException2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(ExternalServiceException || (ExternalServiceException = {}));
	var GetCredentialsForIdentityInput;
	(function (GetCredentialsForIdentityInput2) {
		GetCredentialsForIdentityInput2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(GetCredentialsForIdentityInput || (GetCredentialsForIdentityInput = {}));
	var Credentials;
	(function (Credentials3) {
		Credentials3.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(Credentials || (Credentials = {}));
	var GetCredentialsForIdentityResponse;
	(function (GetCredentialsForIdentityResponse2) {
		GetCredentialsForIdentityResponse2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(GetCredentialsForIdentityResponse || (GetCredentialsForIdentityResponse = {}));
	var InvalidIdentityPoolConfigurationException;
	(function (InvalidIdentityPoolConfigurationException2) {
		InvalidIdentityPoolConfigurationException2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(InvalidIdentityPoolConfigurationException || (InvalidIdentityPoolConfigurationException = {}));
	var GetIdInput;
	(function (GetIdInput2) {
		GetIdInput2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(GetIdInput || (GetIdInput = {}));
	var GetIdResponse;
	(function (GetIdResponse2) {
		GetIdResponse2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(GetIdResponse || (GetIdResponse = {}));
	var GetIdentityPoolRolesInput;
	(function (GetIdentityPoolRolesInput2) {
		GetIdentityPoolRolesInput2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(GetIdentityPoolRolesInput || (GetIdentityPoolRolesInput = {}));
	var MappingRuleMatchType;
	(function (MappingRuleMatchType2) {
		MappingRuleMatchType2["CONTAINS"] = "Contains";
		MappingRuleMatchType2["EQUALS"] = "Equals";
		MappingRuleMatchType2["NOT_EQUAL"] = "NotEqual";
		MappingRuleMatchType2["STARTS_WITH"] = "StartsWith";
	})(MappingRuleMatchType || (MappingRuleMatchType = {}));
	var MappingRule;
	(function (MappingRule2) {
		MappingRule2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(MappingRule || (MappingRule = {}));
	var RulesConfigurationType;
	(function (RulesConfigurationType2) {
		RulesConfigurationType2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(RulesConfigurationType || (RulesConfigurationType = {}));
	var RoleMappingType;
	(function (RoleMappingType2) {
		RoleMappingType2["RULES"] = "Rules";
		RoleMappingType2["TOKEN"] = "Token";
	})(RoleMappingType || (RoleMappingType = {}));
	var RoleMapping;
	(function (RoleMapping2) {
		RoleMapping2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(RoleMapping || (RoleMapping = {}));
	var GetIdentityPoolRolesResponse;
	(function (GetIdentityPoolRolesResponse2) {
		GetIdentityPoolRolesResponse2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(GetIdentityPoolRolesResponse || (GetIdentityPoolRolesResponse = {}));
	var GetOpenIdTokenInput;
	(function (GetOpenIdTokenInput2) {
		GetOpenIdTokenInput2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(GetOpenIdTokenInput || (GetOpenIdTokenInput = {}));
	var GetOpenIdTokenResponse;
	(function (GetOpenIdTokenResponse2) {
		GetOpenIdTokenResponse2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(GetOpenIdTokenResponse || (GetOpenIdTokenResponse = {}));
	var DeveloperUserAlreadyRegisteredException;
	(function (DeveloperUserAlreadyRegisteredException2) {
		DeveloperUserAlreadyRegisteredException2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(DeveloperUserAlreadyRegisteredException || (DeveloperUserAlreadyRegisteredException = {}));
	var GetOpenIdTokenForDeveloperIdentityInput;
	(function (GetOpenIdTokenForDeveloperIdentityInput2) {
		GetOpenIdTokenForDeveloperIdentityInput2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(GetOpenIdTokenForDeveloperIdentityInput || (GetOpenIdTokenForDeveloperIdentityInput = {}));
	var GetOpenIdTokenForDeveloperIdentityResponse;
	(function (GetOpenIdTokenForDeveloperIdentityResponse2) {
		GetOpenIdTokenForDeveloperIdentityResponse2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(
		GetOpenIdTokenForDeveloperIdentityResponse || (GetOpenIdTokenForDeveloperIdentityResponse = {})
	);
	var ListIdentitiesInput;
	(function (ListIdentitiesInput2) {
		ListIdentitiesInput2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(ListIdentitiesInput || (ListIdentitiesInput = {}));
	var ListIdentitiesResponse;
	(function (ListIdentitiesResponse2) {
		ListIdentitiesResponse2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(ListIdentitiesResponse || (ListIdentitiesResponse = {}));
	var ListIdentityPoolsInput;
	(function (ListIdentityPoolsInput2) {
		ListIdentityPoolsInput2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(ListIdentityPoolsInput || (ListIdentityPoolsInput = {}));
	var IdentityPoolShortDescription;
	(function (IdentityPoolShortDescription2) {
		IdentityPoolShortDescription2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(IdentityPoolShortDescription || (IdentityPoolShortDescription = {}));
	var ListIdentityPoolsResponse;
	(function (ListIdentityPoolsResponse2) {
		ListIdentityPoolsResponse2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(ListIdentityPoolsResponse || (ListIdentityPoolsResponse = {}));
	var ListTagsForResourceInput;
	(function (ListTagsForResourceInput2) {
		ListTagsForResourceInput2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(ListTagsForResourceInput || (ListTagsForResourceInput = {}));
	var ListTagsForResourceResponse;
	(function (ListTagsForResourceResponse2) {
		ListTagsForResourceResponse2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(ListTagsForResourceResponse || (ListTagsForResourceResponse = {}));
	var LookupDeveloperIdentityInput;
	(function (LookupDeveloperIdentityInput2) {
		LookupDeveloperIdentityInput2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(LookupDeveloperIdentityInput || (LookupDeveloperIdentityInput = {}));
	var LookupDeveloperIdentityResponse;
	(function (LookupDeveloperIdentityResponse2) {
		LookupDeveloperIdentityResponse2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(LookupDeveloperIdentityResponse || (LookupDeveloperIdentityResponse = {}));
	var MergeDeveloperIdentitiesInput;
	(function (MergeDeveloperIdentitiesInput2) {
		MergeDeveloperIdentitiesInput2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(MergeDeveloperIdentitiesInput || (MergeDeveloperIdentitiesInput = {}));
	var MergeDeveloperIdentitiesResponse;
	(function (MergeDeveloperIdentitiesResponse2) {
		MergeDeveloperIdentitiesResponse2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(MergeDeveloperIdentitiesResponse || (MergeDeveloperIdentitiesResponse = {}));
	var ConcurrentModificationException;
	(function (ConcurrentModificationException2) {
		ConcurrentModificationException2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(ConcurrentModificationException || (ConcurrentModificationException = {}));
	var SetIdentityPoolRolesInput;
	(function (SetIdentityPoolRolesInput2) {
		SetIdentityPoolRolesInput2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(SetIdentityPoolRolesInput || (SetIdentityPoolRolesInput = {}));
	var TagResourceInput;
	(function (TagResourceInput2) {
		TagResourceInput2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(TagResourceInput || (TagResourceInput = {}));
	var TagResourceResponse;
	(function (TagResourceResponse2) {
		TagResourceResponse2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(TagResourceResponse || (TagResourceResponse = {}));
	var UnlinkDeveloperIdentityInput;
	(function (UnlinkDeveloperIdentityInput2) {
		UnlinkDeveloperIdentityInput2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(UnlinkDeveloperIdentityInput || (UnlinkDeveloperIdentityInput = {}));
	var UnlinkIdentityInput;
	(function (UnlinkIdentityInput2) {
		UnlinkIdentityInput2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(UnlinkIdentityInput || (UnlinkIdentityInput = {}));
	var UntagResourceInput;
	(function (UntagResourceInput2) {
		UntagResourceInput2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(UntagResourceInput || (UntagResourceInput = {}));
	var UntagResourceResponse;
	(function (UntagResourceResponse2) {
		UntagResourceResponse2.filterSensitiveLog = function (obj) {
			return __assign7({}, obj);
		};
	})(UntagResourceResponse || (UntagResourceResponse = {}));

	// ../../node_modules/@aws-sdk/client-cognito-identity/dist/es/protocols/Aws_json1_1.js
	var serializeAws_json1_1GetCredentialsForIdentityCommand = function (input, context) {
		return __awaiter5(void 0, void 0, void 0, function () {
			var headers, body;
			return __generator5(this, function (_a) {
				headers = {
					"content-type": "application/x-amz-json-1.1",
					"x-amz-target": "AWSCognitoIdentityService.GetCredentialsForIdentity",
				};
				body = JSON.stringify(serializeAws_json1_1GetCredentialsForIdentityInput(input, context));
				return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
			});
		});
	};
	var serializeAws_json1_1GetIdCommand = function (input, context) {
		return __awaiter5(void 0, void 0, void 0, function () {
			var headers, body;
			return __generator5(this, function (_a) {
				headers = {
					"content-type": "application/x-amz-json-1.1",
					"x-amz-target": "AWSCognitoIdentityService.GetId",
				};
				body = JSON.stringify(serializeAws_json1_1GetIdInput(input, context));
				return [2, buildHttpRpcRequest(context, headers, "/", void 0, body)];
			});
		});
	};
	var deserializeAws_json1_1GetCredentialsForIdentityCommand = function (output, context) {
		return __awaiter5(void 0, void 0, void 0, function () {
			var data, contents, response;
			return __generator5(this, function (_a) {
				switch (_a.label) {
					case 0:
						if (output.statusCode >= 300) {
							return [
								2,
								deserializeAws_json1_1GetCredentialsForIdentityCommandError(output, context),
							];
						}
						return [4, parseBody(output.body, context)];
					case 1:
						data = _a.sent();
						contents = {};
						contents = deserializeAws_json1_1GetCredentialsForIdentityResponse(data, context);
						response = __assign7({ $metadata: deserializeMetadata(output) }, contents);
						return [2, Promise.resolve(response)];
				}
			});
		});
	};
	var deserializeAws_json1_1GetCredentialsForIdentityCommandError = function (output, context) {
		return __awaiter5(void 0, void 0, void 0, function () {
			var parsedOutput,
				_a,
				response,
				errorCode,
				_b,
				_c,
				_d,
				_e,
				_f,
				_g,
				_h,
				_j,
				_k,
				parsedBody,
				message;
			var _l;
			return __generator5(this, function (_m) {
				switch (_m.label) {
					case 0:
						_a = [__assign7({}, output)];
						_l = {};
						return [4, parseBody(output.body, context)];
					case 1:
						parsedOutput = __assign7.apply(void 0, _a.concat([((_l.body = _m.sent()), _l)]));
						errorCode = "UnknownError";
						errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
						_b = errorCode;
						switch (_b) {
							case "ExternalServiceException":
								return [3, 2];
							case "com.amazonaws.cognitoidentity#ExternalServiceException":
								return [3, 2];
							case "InternalErrorException":
								return [3, 4];
							case "com.amazonaws.cognitoidentity#InternalErrorException":
								return [3, 4];
							case "InvalidIdentityPoolConfigurationException":
								return [3, 6];
							case "com.amazonaws.cognitoidentity#InvalidIdentityPoolConfigurationException":
								return [3, 6];
							case "InvalidParameterException":
								return [3, 8];
							case "com.amazonaws.cognitoidentity#InvalidParameterException":
								return [3, 8];
							case "NotAuthorizedException":
								return [3, 10];
							case "com.amazonaws.cognitoidentity#NotAuthorizedException":
								return [3, 10];
							case "ResourceConflictException":
								return [3, 12];
							case "com.amazonaws.cognitoidentity#ResourceConflictException":
								return [3, 12];
							case "ResourceNotFoundException":
								return [3, 14];
							case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
								return [3, 14];
							case "TooManyRequestsException":
								return [3, 16];
							case "com.amazonaws.cognitoidentity#TooManyRequestsException":
								return [3, 16];
						}
						return [3, 18];
					case 2:
						_c = [{}];
						return [
							4,
							deserializeAws_json1_1ExternalServiceExceptionResponse(parsedOutput, context),
						];
					case 3:
						response = __assign7.apply(void 0, [
							__assign7.apply(void 0, _c.concat([_m.sent()])),
							{ name: errorCode, $metadata: deserializeMetadata(output) },
						]);
						return [3, 19];
					case 4:
						_d = [{}];
						return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
					case 5:
						response = __assign7.apply(void 0, [
							__assign7.apply(void 0, _d.concat([_m.sent()])),
							{ name: errorCode, $metadata: deserializeMetadata(output) },
						]);
						return [3, 19];
					case 6:
						_e = [{}];
						return [
							4,
							deserializeAws_json1_1InvalidIdentityPoolConfigurationExceptionResponse(
								parsedOutput,
								context
							),
						];
					case 7:
						response = __assign7.apply(void 0, [
							__assign7.apply(void 0, _e.concat([_m.sent()])),
							{ name: errorCode, $metadata: deserializeMetadata(output) },
						]);
						return [3, 19];
					case 8:
						_f = [{}];
						return [
							4,
							deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context),
						];
					case 9:
						response = __assign7.apply(void 0, [
							__assign7.apply(void 0, _f.concat([_m.sent()])),
							{ name: errorCode, $metadata: deserializeMetadata(output) },
						]);
						return [3, 19];
					case 10:
						_g = [{}];
						return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
					case 11:
						response = __assign7.apply(void 0, [
							__assign7.apply(void 0, _g.concat([_m.sent()])),
							{ name: errorCode, $metadata: deserializeMetadata(output) },
						]);
						return [3, 19];
					case 12:
						_h = [{}];
						return [
							4,
							deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context),
						];
					case 13:
						response = __assign7.apply(void 0, [
							__assign7.apply(void 0, _h.concat([_m.sent()])),
							{ name: errorCode, $metadata: deserializeMetadata(output) },
						]);
						return [3, 19];
					case 14:
						_j = [{}];
						return [
							4,
							deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context),
						];
					case 15:
						response = __assign7.apply(void 0, [
							__assign7.apply(void 0, _j.concat([_m.sent()])),
							{ name: errorCode, $metadata: deserializeMetadata(output) },
						]);
						return [3, 19];
					case 16:
						_k = [{}];
						return [
							4,
							deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context),
						];
					case 17:
						response = __assign7.apply(void 0, [
							__assign7.apply(void 0, _k.concat([_m.sent()])),
							{ name: errorCode, $metadata: deserializeMetadata(output) },
						]);
						return [3, 19];
					case 18:
						parsedBody = parsedOutput.body;
						errorCode = parsedBody.code || parsedBody.Code || errorCode;
						response = __assign7(__assign7({}, parsedBody), {
							name: "" + errorCode,
							message: parsedBody.message || parsedBody.Message || errorCode,
							$fault: "client",
							$metadata: deserializeMetadata(output),
						});
						_m.label = 19;
					case 19:
						message = response.message || response.Message || errorCode;
						response.message = message;
						delete response.Message;
						return [2, Promise.reject(Object.assign(new Error(message), response))];
				}
			});
		});
	};
	var deserializeAws_json1_1GetIdCommand = function (output, context) {
		return __awaiter5(void 0, void 0, void 0, function () {
			var data, contents, response;
			return __generator5(this, function (_a) {
				switch (_a.label) {
					case 0:
						if (output.statusCode >= 300) {
							return [2, deserializeAws_json1_1GetIdCommandError(output, context)];
						}
						return [4, parseBody(output.body, context)];
					case 1:
						data = _a.sent();
						contents = {};
						contents = deserializeAws_json1_1GetIdResponse(data, context);
						response = __assign7({ $metadata: deserializeMetadata(output) }, contents);
						return [2, Promise.resolve(response)];
				}
			});
		});
	};
	var deserializeAws_json1_1GetIdCommandError = function (output, context) {
		return __awaiter5(void 0, void 0, void 0, function () {
			var parsedOutput,
				_a,
				response,
				errorCode,
				_b,
				_c,
				_d,
				_e,
				_f,
				_g,
				_h,
				_j,
				_k,
				parsedBody,
				message;
			var _l;
			return __generator5(this, function (_m) {
				switch (_m.label) {
					case 0:
						_a = [__assign7({}, output)];
						_l = {};
						return [4, parseBody(output.body, context)];
					case 1:
						parsedOutput = __assign7.apply(void 0, _a.concat([((_l.body = _m.sent()), _l)]));
						errorCode = "UnknownError";
						errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
						_b = errorCode;
						switch (_b) {
							case "ExternalServiceException":
								return [3, 2];
							case "com.amazonaws.cognitoidentity#ExternalServiceException":
								return [3, 2];
							case "InternalErrorException":
								return [3, 4];
							case "com.amazonaws.cognitoidentity#InternalErrorException":
								return [3, 4];
							case "InvalidParameterException":
								return [3, 6];
							case "com.amazonaws.cognitoidentity#InvalidParameterException":
								return [3, 6];
							case "LimitExceededException":
								return [3, 8];
							case "com.amazonaws.cognitoidentity#LimitExceededException":
								return [3, 8];
							case "NotAuthorizedException":
								return [3, 10];
							case "com.amazonaws.cognitoidentity#NotAuthorizedException":
								return [3, 10];
							case "ResourceConflictException":
								return [3, 12];
							case "com.amazonaws.cognitoidentity#ResourceConflictException":
								return [3, 12];
							case "ResourceNotFoundException":
								return [3, 14];
							case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
								return [3, 14];
							case "TooManyRequestsException":
								return [3, 16];
							case "com.amazonaws.cognitoidentity#TooManyRequestsException":
								return [3, 16];
						}
						return [3, 18];
					case 2:
						_c = [{}];
						return [
							4,
							deserializeAws_json1_1ExternalServiceExceptionResponse(parsedOutput, context),
						];
					case 3:
						response = __assign7.apply(void 0, [
							__assign7.apply(void 0, _c.concat([_m.sent()])),
							{ name: errorCode, $metadata: deserializeMetadata(output) },
						]);
						return [3, 19];
					case 4:
						_d = [{}];
						return [4, deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)];
					case 5:
						response = __assign7.apply(void 0, [
							__assign7.apply(void 0, _d.concat([_m.sent()])),
							{ name: errorCode, $metadata: deserializeMetadata(output) },
						]);
						return [3, 19];
					case 6:
						_e = [{}];
						return [
							4,
							deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context),
						];
					case 7:
						response = __assign7.apply(void 0, [
							__assign7.apply(void 0, _e.concat([_m.sent()])),
							{ name: errorCode, $metadata: deserializeMetadata(output) },
						]);
						return [3, 19];
					case 8:
						_f = [{}];
						return [4, deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)];
					case 9:
						response = __assign7.apply(void 0, [
							__assign7.apply(void 0, _f.concat([_m.sent()])),
							{ name: errorCode, $metadata: deserializeMetadata(output) },
						]);
						return [3, 19];
					case 10:
						_g = [{}];
						return [4, deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)];
					case 11:
						response = __assign7.apply(void 0, [
							__assign7.apply(void 0, _g.concat([_m.sent()])),
							{ name: errorCode, $metadata: deserializeMetadata(output) },
						]);
						return [3, 19];
					case 12:
						_h = [{}];
						return [
							4,
							deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context),
						];
					case 13:
						response = __assign7.apply(void 0, [
							__assign7.apply(void 0, _h.concat([_m.sent()])),
							{ name: errorCode, $metadata: deserializeMetadata(output) },
						]);
						return [3, 19];
					case 14:
						_j = [{}];
						return [
							4,
							deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context),
						];
					case 15:
						response = __assign7.apply(void 0, [
							__assign7.apply(void 0, _j.concat([_m.sent()])),
							{ name: errorCode, $metadata: deserializeMetadata(output) },
						]);
						return [3, 19];
					case 16:
						_k = [{}];
						return [
							4,
							deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context),
						];
					case 17:
						response = __assign7.apply(void 0, [
							__assign7.apply(void 0, _k.concat([_m.sent()])),
							{ name: errorCode, $metadata: deserializeMetadata(output) },
						]);
						return [3, 19];
					case 18:
						parsedBody = parsedOutput.body;
						errorCode = parsedBody.code || parsedBody.Code || errorCode;
						response = __assign7(__assign7({}, parsedBody), {
							name: "" + errorCode,
							message: parsedBody.message || parsedBody.Message || errorCode,
							$fault: "client",
							$metadata: deserializeMetadata(output),
						});
						_m.label = 19;
					case 19:
						message = response.message || response.Message || errorCode;
						response.message = message;
						delete response.Message;
						return [2, Promise.reject(Object.assign(new Error(message), response))];
				}
			});
		});
	};
	var deserializeAws_json1_1ExternalServiceExceptionResponse = function (parsedOutput, context) {
		return __awaiter5(void 0, void 0, void 0, function () {
			var body, deserialized, contents;
			return __generator5(this, function (_a) {
				body = parsedOutput.body;
				deserialized = deserializeAws_json1_1ExternalServiceException(body, context);
				contents = __assign7(
					{
						name: "ExternalServiceException",
						$fault: "client",
						$metadata: deserializeMetadata(parsedOutput),
					},
					deserialized
				);
				return [2, contents];
			});
		});
	};
	var deserializeAws_json1_1InternalErrorExceptionResponse = function (parsedOutput, context) {
		return __awaiter5(void 0, void 0, void 0, function () {
			var body, deserialized, contents;
			return __generator5(this, function (_a) {
				body = parsedOutput.body;
				deserialized = deserializeAws_json1_1InternalErrorException(body, context);
				contents = __assign7(
					{
						name: "InternalErrorException",
						$fault: "server",
						$metadata: deserializeMetadata(parsedOutput),
					},
					deserialized
				);
				return [2, contents];
			});
		});
	};
	var deserializeAws_json1_1InvalidIdentityPoolConfigurationExceptionResponse = function (
		parsedOutput,
		context
	) {
		return __awaiter5(void 0, void 0, void 0, function () {
			var body, deserialized, contents;
			return __generator5(this, function (_a) {
				body = parsedOutput.body;
				deserialized = deserializeAws_json1_1InvalidIdentityPoolConfigurationException(
					body,
					context
				);
				contents = __assign7(
					{
						name: "InvalidIdentityPoolConfigurationException",
						$fault: "client",
						$metadata: deserializeMetadata(parsedOutput),
					},
					deserialized
				);
				return [2, contents];
			});
		});
	};
	var deserializeAws_json1_1InvalidParameterExceptionResponse = function (parsedOutput, context) {
		return __awaiter5(void 0, void 0, void 0, function () {
			var body, deserialized, contents;
			return __generator5(this, function (_a) {
				body = parsedOutput.body;
				deserialized = deserializeAws_json1_1InvalidParameterException(body, context);
				contents = __assign7(
					{
						name: "InvalidParameterException",
						$fault: "client",
						$metadata: deserializeMetadata(parsedOutput),
					},
					deserialized
				);
				return [2, contents];
			});
		});
	};
	var deserializeAws_json1_1LimitExceededExceptionResponse = function (parsedOutput, context) {
		return __awaiter5(void 0, void 0, void 0, function () {
			var body, deserialized, contents;
			return __generator5(this, function (_a) {
				body = parsedOutput.body;
				deserialized = deserializeAws_json1_1LimitExceededException(body, context);
				contents = __assign7(
					{
						name: "LimitExceededException",
						$fault: "client",
						$metadata: deserializeMetadata(parsedOutput),
					},
					deserialized
				);
				return [2, contents];
			});
		});
	};
	var deserializeAws_json1_1NotAuthorizedExceptionResponse = function (parsedOutput, context) {
		return __awaiter5(void 0, void 0, void 0, function () {
			var body, deserialized, contents;
			return __generator5(this, function (_a) {
				body = parsedOutput.body;
				deserialized = deserializeAws_json1_1NotAuthorizedException(body, context);
				contents = __assign7(
					{
						name: "NotAuthorizedException",
						$fault: "client",
						$metadata: deserializeMetadata(parsedOutput),
					},
					deserialized
				);
				return [2, contents];
			});
		});
	};
	var deserializeAws_json1_1ResourceConflictExceptionResponse = function (parsedOutput, context) {
		return __awaiter5(void 0, void 0, void 0, function () {
			var body, deserialized, contents;
			return __generator5(this, function (_a) {
				body = parsedOutput.body;
				deserialized = deserializeAws_json1_1ResourceConflictException(body, context);
				contents = __assign7(
					{
						name: "ResourceConflictException",
						$fault: "client",
						$metadata: deserializeMetadata(parsedOutput),
					},
					deserialized
				);
				return [2, contents];
			});
		});
	};
	var deserializeAws_json1_1ResourceNotFoundExceptionResponse = function (parsedOutput, context) {
		return __awaiter5(void 0, void 0, void 0, function () {
			var body, deserialized, contents;
			return __generator5(this, function (_a) {
				body = parsedOutput.body;
				deserialized = deserializeAws_json1_1ResourceNotFoundException(body, context);
				contents = __assign7(
					{
						name: "ResourceNotFoundException",
						$fault: "client",
						$metadata: deserializeMetadata(parsedOutput),
					},
					deserialized
				);
				return [2, contents];
			});
		});
	};
	var deserializeAws_json1_1TooManyRequestsExceptionResponse = function (parsedOutput, context) {
		return __awaiter5(void 0, void 0, void 0, function () {
			var body, deserialized, contents;
			return __generator5(this, function (_a) {
				body = parsedOutput.body;
				deserialized = deserializeAws_json1_1TooManyRequestsException(body, context);
				contents = __assign7(
					{
						name: "TooManyRequestsException",
						$fault: "client",
						$metadata: deserializeMetadata(parsedOutput),
					},
					deserialized
				);
				return [2, contents];
			});
		});
	};
	var serializeAws_json1_1GetCredentialsForIdentityInput = function (input, context) {
		return __assign7(
			__assign7(
				__assign7(
					{},
					input.CustomRoleArn !== void 0 &&
						input.CustomRoleArn !== null && { CustomRoleArn: input.CustomRoleArn }
				),
				input.IdentityId !== void 0 && input.IdentityId !== null && { IdentityId: input.IdentityId }
			),
			input.Logins !== void 0 &&
				input.Logins !== null && { Logins: serializeAws_json1_1LoginsMap(input.Logins, context) }
		);
	};
	var serializeAws_json1_1GetIdInput = function (input, context) {
		return __assign7(
			__assign7(
				__assign7(
					{},
					input.AccountId !== void 0 && input.AccountId !== null && { AccountId: input.AccountId }
				),
				input.IdentityPoolId !== void 0 &&
					input.IdentityPoolId !== null && { IdentityPoolId: input.IdentityPoolId }
			),
			input.Logins !== void 0 &&
				input.Logins !== null && { Logins: serializeAws_json1_1LoginsMap(input.Logins, context) }
		);
	};
	var serializeAws_json1_1LoginsMap = function (input, context) {
		return Object.entries(input).reduce(function (acc, _a) {
			var _b;
			var _c = __read11(_a, 2),
				key = _c[0],
				value = _c[1];
			if (value === null) {
				return acc;
			}
			return __assign7(__assign7({}, acc), ((_b = {}), (_b[key] = value), _b));
		}, {});
	};
	var deserializeAws_json1_1Credentials = function (output, context) {
		return {
			AccessKeyId:
				output.AccessKeyId !== void 0 && output.AccessKeyId !== null ? output.AccessKeyId : void 0,
			Expiration:
				output.Expiration !== void 0 && output.Expiration !== null
					? new Date(Math.round(output.Expiration * 1e3))
					: void 0,
			SecretKey:
				output.SecretKey !== void 0 && output.SecretKey !== null ? output.SecretKey : void 0,
			SessionToken:
				output.SessionToken !== void 0 && output.SessionToken !== null
					? output.SessionToken
					: void 0,
		};
	};
	var deserializeAws_json1_1ExternalServiceException = function (output, context) {
		return {
			message: output.message !== void 0 && output.message !== null ? output.message : void 0,
		};
	};
	var deserializeAws_json1_1GetCredentialsForIdentityResponse = function (output, context) {
		return {
			Credentials:
				output.Credentials !== void 0 && output.Credentials !== null
					? deserializeAws_json1_1Credentials(output.Credentials, context)
					: void 0,
			IdentityId:
				output.IdentityId !== void 0 && output.IdentityId !== null ? output.IdentityId : void 0,
		};
	};
	var deserializeAws_json1_1GetIdResponse = function (output, context) {
		return {
			IdentityId:
				output.IdentityId !== void 0 && output.IdentityId !== null ? output.IdentityId : void 0,
		};
	};
	var deserializeAws_json1_1InternalErrorException = function (output, context) {
		return {
			message: output.message !== void 0 && output.message !== null ? output.message : void 0,
		};
	};
	var deserializeAws_json1_1InvalidIdentityPoolConfigurationException = function (output, context) {
		return {
			message: output.message !== void 0 && output.message !== null ? output.message : void 0,
		};
	};
	var deserializeAws_json1_1InvalidParameterException = function (output, context) {
		return {
			message: output.message !== void 0 && output.message !== null ? output.message : void 0,
		};
	};
	var deserializeAws_json1_1LimitExceededException = function (output, context) {
		return {
			message: output.message !== void 0 && output.message !== null ? output.message : void 0,
		};
	};
	var deserializeAws_json1_1NotAuthorizedException = function (output, context) {
		return {
			message: output.message !== void 0 && output.message !== null ? output.message : void 0,
		};
	};
	var deserializeAws_json1_1ResourceConflictException = function (output, context) {
		return {
			message: output.message !== void 0 && output.message !== null ? output.message : void 0,
		};
	};
	var deserializeAws_json1_1ResourceNotFoundException = function (output, context) {
		return {
			message: output.message !== void 0 && output.message !== null ? output.message : void 0,
		};
	};
	var deserializeAws_json1_1TooManyRequestsException = function (output, context) {
		return {
			message: output.message !== void 0 && output.message !== null ? output.message : void 0,
		};
	};
	var deserializeMetadata = function (output) {
		var _a;
		return {
			httpStatusCode: output.statusCode,
			requestId:
				(_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0
					? _a
					: output.headers["x-amzn-request-id"],
			extendedRequestId: output.headers["x-amz-id-2"],
			cfId: output.headers["x-amz-cf-id"],
		};
	};
	var collectBody = function (streamBody, context) {
		if (streamBody === void 0) {
			streamBody = new Uint8Array();
		}
		if (streamBody instanceof Uint8Array) {
			return Promise.resolve(streamBody);
		}
		return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
	};
	var collectBodyString = function (streamBody, context) {
		return collectBody(streamBody, context).then(function (body) {
			return context.utf8Encoder(body);
		});
	};
	var buildHttpRpcRequest = function (context, headers, path2, resolvedHostname, body) {
		return __awaiter5(void 0, void 0, void 0, function () {
			var _a, hostname, _b, protocol, port, contents;
			return __generator5(this, function (_c) {
				switch (_c.label) {
					case 0:
						return [4, context.endpoint()];
					case 1:
						(_a = _c.sent()),
							(hostname = _a.hostname),
							(_b = _a.protocol),
							(protocol = _b === void 0 ? "https" : _b),
							(port = _a.port);
						contents = {
							protocol,
							hostname,
							port,
							method: "POST",
							path: path2,
							headers,
						};
						if (resolvedHostname !== void 0) {
							contents.hostname = resolvedHostname;
						}
						if (body !== void 0) {
							contents.body = body;
						}
						return [2, new HttpRequest(contents)];
				}
			});
		});
	};
	var parseBody = function (streamBody, context) {
		return collectBodyString(streamBody, context).then(function (encoded) {
			if (encoded.length) {
				return JSON.parse(encoded);
			}
			return {};
		});
	};
	var loadRestJsonErrorCode = function (output, data) {
		var findKey = function (object, key) {
			return Object.keys(object).find(function (k) {
				return k.toLowerCase() === key.toLowerCase();
			});
		};
		var sanitizeErrorCode = function (rawValue) {
			var cleanValue = rawValue;
			if (cleanValue.indexOf(":") >= 0) {
				cleanValue = cleanValue.split(":")[0];
			}
			if (cleanValue.indexOf("#") >= 0) {
				cleanValue = cleanValue.split("#")[1];
			}
			return cleanValue;
		};
		var headerKey = findKey(output.headers, "x-amzn-errortype");
		if (headerKey !== void 0) {
			return sanitizeErrorCode(output.headers[headerKey]);
		}
		if (data.code !== void 0) {
			return sanitizeErrorCode(data.code);
		}
		if (data["__type"] !== void 0) {
			return sanitizeErrorCode(data["__type"]);
		}
		return "";
	};

	// ../../node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/GetCredentialsForIdentityCommand.js
	var GetCredentialsForIdentityCommand = (function (_super) {
		__extends3(GetCredentialsForIdentityCommand2, _super);
		function GetCredentialsForIdentityCommand2(input) {
			var _this = _super.call(this) || this;
			_this.input = input;
			return _this;
		}
		GetCredentialsForIdentityCommand2.prototype.resolveMiddleware = function (
			clientStack,
			configuration,
			options
		) {
			this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
			var stack = clientStack.concat(this.middlewareStack);
			var logger14 = configuration.logger;
			var clientName = "CognitoIdentityClient";
			var commandName = "GetCredentialsForIdentityCommand";
			var handlerExecutionContext = {
				logger: logger14,
				clientName,
				commandName,
				inputFilterSensitiveLog: GetCredentialsForIdentityInput.filterSensitiveLog,
				outputFilterSensitiveLog: GetCredentialsForIdentityResponse.filterSensitiveLog,
			};
			var requestHandler = configuration.requestHandler;
			return stack.resolve(function (request) {
				return requestHandler.handle(request.request, options || {});
			}, handlerExecutionContext);
		};
		GetCredentialsForIdentityCommand2.prototype.serialize = function (input, context) {
			return serializeAws_json1_1GetCredentialsForIdentityCommand(input, context);
		};
		GetCredentialsForIdentityCommand2.prototype.deserialize = function (output, context) {
			return deserializeAws_json1_1GetCredentialsForIdentityCommand(output, context);
		};
		return GetCredentialsForIdentityCommand2;
	})(Command);

	// ../../node_modules/@aws-sdk/client-cognito-identity/dist/es/commands/GetIdCommand.js
	var GetIdCommand = (function (_super) {
		__extends3(GetIdCommand2, _super);
		function GetIdCommand2(input) {
			var _this = _super.call(this) || this;
			_this.input = input;
			return _this;
		}
		GetIdCommand2.prototype.resolveMiddleware = function (clientStack, configuration, options) {
			this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));
			var stack = clientStack.concat(this.middlewareStack);
			var logger14 = configuration.logger;
			var clientName = "CognitoIdentityClient";
			var commandName = "GetIdCommand";
			var handlerExecutionContext = {
				logger: logger14,
				clientName,
				commandName,
				inputFilterSensitiveLog: GetIdInput.filterSensitiveLog,
				outputFilterSensitiveLog: GetIdResponse.filterSensitiveLog,
			};
			var requestHandler = configuration.requestHandler;
			return stack.resolve(function (request) {
				return requestHandler.handle(request.request, options || {});
			}, handlerExecutionContext);
		};
		GetIdCommand2.prototype.serialize = function (input, context) {
			return serializeAws_json1_1GetIdCommand(input, context);
		};
		GetIdCommand2.prototype.deserialize = function (output, context) {
			return deserializeAws_json1_1GetIdCommand(output, context);
		};
		return GetIdCommand2;
	})(Command);

	// ../../node_modules/@aws-sdk/property-provider/dist/es/ProviderError.js
	var ProviderError = (function (_super) {
		__extends2(ProviderError2, _super);
		function ProviderError2(message, tryNextLink) {
			if (tryNextLink === void 0) {
				tryNextLink = true;
			}
			var _this = _super.call(this, message) || this;
			_this.tryNextLink = tryNextLink;
			return _this;
		}
		return ProviderError2;
	})(Error);

	// ../../node_modules/@aws-sdk/credential-provider-cognito-identity/dist/es/resolveLogins.js
	function resolveLogins(logins) {
		return Promise.all(
			Object.keys(logins).reduce(function (arr, name2) {
				var tokenOrProvider = logins[name2];
				if (typeof tokenOrProvider === "string") {
					arr.push([name2, tokenOrProvider]);
				} else {
					arr.push(
						tokenOrProvider().then(function (token) {
							return [name2, token];
						})
					);
				}
				return arr;
			}, [])
		).then(function (resolvedPairs) {
			return resolvedPairs.reduce(function (logins2, _a) {
				var _b = __read10(_a, 2),
					key = _b[0],
					value = _b[1];
				logins2[key] = value;
				return logins2;
			}, {});
		});
	}

	// ../../node_modules/@aws-sdk/credential-provider-cognito-identity/dist/es/fromCognitoIdentity.js
	function fromCognitoIdentity(parameters) {
		var _this = this;
		return function () {
			return __awaiter2(_this, void 0, void 0, function () {
				var _a, _b, _c, AccessKeyId, Expiration, _d, SecretKey, SessionToken, _e, _f, _g, _h;
				var _j;
				return __generator2(this, function (_k) {
					switch (_k.label) {
						case 0:
							_f = (_e = parameters.client).send;
							_g = GetCredentialsForIdentityCommand.bind;
							_j = {
								CustomRoleArn: parameters.customRoleArn,
								IdentityId: parameters.identityId,
							};
							if (!parameters.logins) return [3, 2];
							return [4, resolveLogins(parameters.logins)];
						case 1:
							_h = _k.sent();
							return [3, 3];
						case 2:
							_h = void 0;
							_k.label = 3;
						case 3:
							return [
								4,
								_f.apply(_e, [
									new (_g.apply(GetCredentialsForIdentityCommand, [
										void 0,
										((_j.Logins = _h), _j),
									]))(),
								]),
							];
						case 4:
							(_a = _k.sent().Credentials),
								(_b = _a === void 0 ? throwOnMissingCredentials() : _a),
								(_c = _b.AccessKeyId),
								(AccessKeyId = _c === void 0 ? throwOnMissingAccessKeyId() : _c),
								(Expiration = _b.Expiration),
								(_d = _b.SecretKey),
								(SecretKey = _d === void 0 ? throwOnMissingSecretKey() : _d),
								(SessionToken = _b.SessionToken);
							return [
								2,
								{
									identityId: parameters.identityId,
									accessKeyId: AccessKeyId,
									secretAccessKey: SecretKey,
									sessionToken: SessionToken,
									expiration: Expiration,
								},
							];
					}
				});
			});
		};
	}
	function throwOnMissingAccessKeyId() {
		throw new ProviderError("Response from Amazon Cognito contained no access key ID");
	}
	function throwOnMissingCredentials() {
		throw new ProviderError("Response from Amazon Cognito contained no credentials");
	}
	function throwOnMissingSecretKey() {
		throw new ProviderError("Response from Amazon Cognito contained no secret key");
	}

	// ../../node_modules/@aws-sdk/credential-provider-cognito-identity/dist/es/IndexedDbStorage.js
	var STORE_NAME = "IdentityIds";
	var IndexedDbStorage = (function () {
		function IndexedDbStorage2(dbName) {
			if (dbName === void 0) {
				dbName = "aws:cognito-identity-ids";
			}
			this.dbName = dbName;
		}
		IndexedDbStorage2.prototype.getItem = function (key) {
			return this.withObjectStore("readonly", function (store) {
				var req = store.get(key);
				return new Promise(function (resolve) {
					req.onerror = function () {
						return resolve(null);
					};
					req.onsuccess = function () {
						return resolve(req.result ? req.result.value : null);
					};
				});
			}).catch(function () {
				return null;
			});
		};
		IndexedDbStorage2.prototype.removeItem = function (key) {
			return this.withObjectStore("readwrite", function (store) {
				var req = store.delete(key);
				return new Promise(function (resolve, reject) {
					req.onerror = function () {
						return reject(req.error);
					};
					req.onsuccess = function () {
						return resolve();
					};
				});
			});
		};
		IndexedDbStorage2.prototype.setItem = function (id, value) {
			return this.withObjectStore("readwrite", function (store) {
				var req = store.put({ id, value });
				return new Promise(function (resolve, reject) {
					req.onerror = function () {
						return reject(req.error);
					};
					req.onsuccess = function () {
						return resolve();
					};
				});
			});
		};
		IndexedDbStorage2.prototype.getDb = function () {
			var openDbRequest = self.indexedDB.open(this.dbName, 1);
			return new Promise(function (resolve, reject) {
				openDbRequest.onsuccess = function () {
					resolve(openDbRequest.result);
				};
				openDbRequest.onerror = function () {
					reject(openDbRequest.error);
				};
				openDbRequest.onblocked = function () {
					reject(new Error("Unable to access DB"));
				};
				openDbRequest.onupgradeneeded = function () {
					var db = openDbRequest.result;
					db.onerror = function () {
						reject(new Error("Failed to create object store"));
					};
					db.createObjectStore(STORE_NAME, { keyPath: "id" });
				};
			});
		};
		IndexedDbStorage2.prototype.withObjectStore = function (mode, action) {
			return this.getDb().then(function (db) {
				var tx = db.transaction(STORE_NAME, mode);
				tx.oncomplete = function () {
					return db.close();
				};
				return new Promise(function (resolve, reject) {
					tx.onerror = function () {
						return reject(tx.error);
					};
					resolve(action(tx.objectStore(STORE_NAME)));
				}).catch(function (err) {
					db.close();
					throw err;
				});
			});
		};
		return IndexedDbStorage2;
	})();

	// ../../node_modules/@aws-sdk/credential-provider-cognito-identity/dist/es/InMemoryStorage.js
	var InMemoryStorage = (function () {
		function InMemoryStorage2(store) {
			if (store === void 0) {
				store = {};
			}
			this.store = store;
		}
		InMemoryStorage2.prototype.getItem = function (key) {
			if (key in this.store) {
				return this.store[key];
			}
			return null;
		};
		InMemoryStorage2.prototype.removeItem = function (key) {
			delete this.store[key];
		};
		InMemoryStorage2.prototype.setItem = function (key, value) {
			this.store[key] = value;
		};
		return InMemoryStorage2;
	})();

	// ../../node_modules/@aws-sdk/credential-provider-cognito-identity/dist/es/localStorage.js
	var inMemoryStorage = new InMemoryStorage();
	function localStorage2() {
		if (typeof self === "object" && self.indexedDB) {
			return new IndexedDbStorage();
		}
		if (typeof window === "object" && window.localStorage) {
			return window.localStorage;
		}
		return inMemoryStorage;
	}

	// ../../node_modules/@aws-sdk/credential-provider-cognito-identity/dist/es/fromCognitoIdentityPool.js
	function fromCognitoIdentityPool(_a) {
		var _this = this;
		var accountId = _a.accountId,
			_b = _a.cache,
			cache = _b === void 0 ? localStorage2() : _b,
			client = _a.client,
			customRoleArn = _a.customRoleArn,
			identityPoolId = _a.identityPoolId,
			logins = _a.logins,
			_c = _a.userIdentifier,
			userIdentifier =
				_c === void 0 ? (!logins || Object.keys(logins).length === 0 ? "ANONYMOUS" : void 0) : _c;
		var cacheKey = userIdentifier
			? "aws:cognito-identity-credentials:" + identityPoolId + ":" + userIdentifier
			: void 0;
		var provider = function () {
			return __awaiter2(_this, void 0, void 0, function () {
				var identityId, _a2, _b2, IdentityId, _c2, _d, _e, _f;
				var _g;
				return __generator2(this, function (_h) {
					switch (_h.label) {
						case 0:
							_a2 = cacheKey;
							if (!_a2) return [3, 2];
							return [4, cache.getItem(cacheKey)];
						case 1:
							_a2 = _h.sent();
							_h.label = 2;
						case 2:
							identityId = _a2;
							if (!!identityId) return [3, 7];
							_d = (_c2 = client).send;
							_e = GetIdCommand.bind;
							_g = {
								AccountId: accountId,
								IdentityPoolId: identityPoolId,
							};
							if (!logins) return [3, 4];
							return [4, resolveLogins(logins)];
						case 3:
							_f = _h.sent();
							return [3, 5];
						case 4:
							_f = void 0;
							_h.label = 5;
						case 5:
							return [
								4,
								_d.apply(_c2, [new (_e.apply(GetIdCommand, [void 0, ((_g.Logins = _f), _g)]))()]),
							];
						case 6:
							(_b2 = _h.sent().IdentityId),
								(IdentityId = _b2 === void 0 ? throwOnMissingId() : _b2);
							identityId = IdentityId;
							if (cacheKey) {
								Promise.resolve(cache.setItem(cacheKey, identityId)).catch(function () {});
							}
							_h.label = 7;
						case 7:
							provider = fromCognitoIdentity({
								client,
								customRoleArn,
								logins,
								identityId,
							});
							return [2, provider()];
					}
				});
			});
		};
		return function () {
			return provider().catch(function (err) {
				return __awaiter2(_this, void 0, void 0, function () {
					return __generator2(this, function (_a2) {
						if (cacheKey) {
							Promise.resolve(cache.removeItem(cacheKey)).catch(function () {});
						}
						throw err;
					});
				});
			});
		};
	}
	function throwOnMissingId() {
		throw new ProviderError("Response from Amazon Cognito contained no identity ID");
	}

	// ../../node_modules/@aws-amplify/core/lib-esm/Credentials.js
	var __assign8 = function () {
		__assign8 =
			Object.assign ||
			function (t) {
				for (var s, i = 1, n = arguments.length; i < n; i++) {
					s = arguments[i];
					for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
				}
				return t;
			};
		return __assign8.apply(this, arguments);
	};
	var __awaiter6 = function (thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P
				? value
				: new P(function (resolve) {
						resolve(value);
				  });
		}
		return new (P || (P = Promise))(function (resolve, reject) {
			function fulfilled(value) {
				try {
					step(generator.next(value));
				} catch (e) {
					reject(e);
				}
			}
			function rejected(value) {
				try {
					step(generator["throw"](value));
				} catch (e) {
					reject(e);
				}
			}
			function step(result) {
				result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	var __generator6 = function (thisArg, body) {
		var _ = {
				label: 0,
				sent: function () {
					if (t[0] & 1) throw t[1];
					return t[1];
				},
				trys: [],
				ops: [],
			},
			f,
			y,
			t,
			g;
		return (
			(g = { next: verb(0), throw: verb(1), return: verb(2) }),
			typeof Symbol === "function" &&
				(g[Symbol.iterator] = function () {
					return this;
				}),
			g
		);
		function verb(n) {
			return function (v) {
				return step([n, v]);
			};
		}
		function step(op) {
			if (f) throw new TypeError("Generator is already executing.");
			while (_)
				try {
					if (
						((f = 1),
						y &&
							(t =
								op[0] & 2
									? y["return"]
									: op[0]
									? y["throw"] || ((t = y["return"]) && t.call(y), 0)
									: y.next) &&
							!(t = t.call(y, op[1])).done)
					)
						return t;
					if (((y = 0), t)) op = [op[0] & 2, t.value];
					switch (op[0]) {
						case 0:
						case 1:
							t = op;
							break;
						case 4:
							_.label++;
							return { value: op[1], done: false };
						case 5:
							_.label++;
							y = op[1];
							op = [0];
							continue;
						case 7:
							op = _.ops.pop();
							_.trys.pop();
							continue;
						default:
							if (
								!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) &&
								(op[0] === 6 || op[0] === 2)
							) {
								_ = 0;
								continue;
							}
							if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
								_.label = op[1];
								break;
							}
							if (op[0] === 6 && _.label < t[1]) {
								_.label = t[1];
								t = op;
								break;
							}
							if (t && _.label < t[2]) {
								_.label = t[2];
								_.ops.push(op);
								break;
							}
							if (t[2]) _.ops.pop();
							_.trys.pop();
							continue;
					}
					op = body.call(thisArg, _);
				} catch (e) {
					op = [6, e];
					y = 0;
				} finally {
					f = t = 0;
				}
			if (op[0] & 5) throw op[1];
			return { value: op[0] ? op[1] : void 0, done: true };
		}
	};
	var logger9 = new ConsoleLogger("Credentials");
	var CREDENTIALS_TTL = 50 * 60 * 1e3;
	var COGNITO_IDENTITY_KEY_PREFIX = "CognitoIdentityId-";
	var CredentialsClass = (function () {
		function CredentialsClass2(config) {
			this._gettingCredPromise = null;
			this._refreshHandlers = {};
			this.Auth = void 0;
			this.configure(config);
			this._refreshHandlers["google"] = GoogleOAuth2.refreshGoogleToken;
			this._refreshHandlers["facebook"] = FacebookOAuth2.refreshFacebookToken;
		}
		CredentialsClass2.prototype.getModuleName = function () {
			return "Credentials";
		};
		CredentialsClass2.prototype.getCredSource = function () {
			return this._credentials_source;
		};
		CredentialsClass2.prototype.configure = function (config) {
			if (!config) return this._config || {};
			this._config = Object.assign({}, this._config, config);
			var refreshHandlers = this._config.refreshHandlers;
			if (refreshHandlers) {
				this._refreshHandlers = __assign8(__assign8({}, this._refreshHandlers), refreshHandlers);
			}
			this._storage = this._config.storage;
			if (!this._storage) {
				this._storage = new StorageHelper().getStorage();
			}
			this._storageSync = Promise.resolve();
			if (typeof this._storage["sync"] === "function") {
				this._storageSync = this._storage["sync"]();
			}
			return this._config;
		};
		CredentialsClass2.prototype.get = function () {
			logger9.debug("getting credentials");
			return this._pickupCredentials();
		};
		CredentialsClass2.prototype._getCognitoIdentityIdStorageKey = function (identityPoolId) {
			return "" + COGNITO_IDENTITY_KEY_PREFIX + identityPoolId;
		};
		CredentialsClass2.prototype._pickupCredentials = function () {
			logger9.debug("picking up credentials");
			if (!this._gettingCredPromise || !this._gettingCredPromise.isPending()) {
				logger9.debug("getting new cred promise");
				this._gettingCredPromise = makeQuerablePromise(this._keepAlive());
			} else {
				logger9.debug("getting old cred promise");
			}
			return this._gettingCredPromise;
		};
		CredentialsClass2.prototype._keepAlive = function () {
			return __awaiter6(this, void 0, void 0, function () {
				var cred, _a, Auth2, user_1, session, refreshToken_1, refreshRequest, err_1;
				return __generator6(this, function (_b) {
					switch (_b.label) {
						case 0:
							logger9.debug("checking if credentials exists and not expired");
							cred = this._credentials;
							if (cred && !this._isExpired(cred) && !this._isPastTTL()) {
								logger9.debug("credentials not changed and not expired, directly return");
								return [2, Promise.resolve(cred)];
							}
							logger9.debug("need to get a new credential or refresh the existing one");
							(_a = this.Auth), (Auth2 = _a === void 0 ? Amplify.Auth : _a);
							if (!Auth2 || typeof Auth2.currentUserCredentials !== "function") {
								return [2, Promise.reject("No Auth module registered in Amplify")];
							}
							if (!(!this._isExpired(cred) && this._isPastTTL())) return [3, 6];
							logger9.debug("ttl has passed but token is not yet expired");
							_b.label = 1;
						case 1:
							_b.trys.push([1, 5, , 6]);
							return [4, Auth2.currentUserPoolUser()];
						case 2:
							user_1 = _b.sent();
							return [4, Auth2.currentSession()];
						case 3:
							session = _b.sent();
							refreshToken_1 = session.refreshToken;
							refreshRequest = new Promise(function (res, rej) {
								user_1.refreshSession(refreshToken_1, function (err, data) {
									return err ? rej(err) : res(data);
								});
							});
							return [4, refreshRequest];
						case 4:
							_b.sent();
							return [3, 6];
						case 5:
							err_1 = _b.sent();
							logger9.debug("Error attempting to refreshing the session", err_1);
							return [3, 6];
						case 6:
							return [2, Auth2.currentUserCredentials()];
					}
				});
			});
		};
		CredentialsClass2.prototype.refreshFederatedToken = function (federatedInfo) {
			logger9.debug("Getting federated credentials");
			var provider = federatedInfo.provider,
				user = federatedInfo.user,
				token = federatedInfo.token,
				identity_id = federatedInfo.identity_id;
			var expires_at = federatedInfo.expires_at;
			expires_at = new Date(expires_at).getFullYear() === 1970 ? expires_at * 1e3 : expires_at;
			var that = this;
			logger9.debug("checking if federated jwt token expired");
			if (expires_at > new Date().getTime()) {
				logger9.debug("token not expired");
				return this._setCredentialsFromFederation({
					provider,
					token,
					user,
					identity_id,
					expires_at,
				});
			} else {
				if (
					that._refreshHandlers[provider] &&
					typeof that._refreshHandlers[provider] === "function"
				) {
					logger9.debug("getting refreshed jwt token from federation provider");
					return this._providerRefreshWithRetry({
						refreshHandler: that._refreshHandlers[provider],
						provider,
						user,
					});
				} else {
					logger9.debug("no refresh handler for provider:", provider);
					this.clear();
					return Promise.reject("no refresh handler for provider");
				}
			}
		};
		CredentialsClass2.prototype._providerRefreshWithRetry = function (_a) {
			var _this = this;
			var refreshHandler = _a.refreshHandler,
				provider = _a.provider,
				user = _a.user;
			var MAX_DELAY_MS3 = 10 * 1e3;
			return jitteredExponentialRetry(refreshHandler, [], MAX_DELAY_MS3)
				.then(function (data) {
					logger9.debug("refresh federated token sucessfully", data);
					return _this._setCredentialsFromFederation({
						provider,
						token: data.token,
						user,
						identity_id: data.identity_id,
						expires_at: data.expires_at,
					});
				})
				.catch(function (e) {
					var isNetworkError =
						typeof e === "string" && e.toLowerCase().lastIndexOf("network error", e.length) === 0;
					if (!isNetworkError) {
						_this.clear();
					}
					logger9.debug("refresh federated token failed", e);
					return Promise.reject("refreshing federation token failed: " + e);
				});
		};
		CredentialsClass2.prototype._isExpired = function (credentials) {
			if (!credentials) {
				logger9.debug("no credentials for expiration check");
				return true;
			}
			logger9.debug("are these credentials expired?", credentials);
			var ts = Date.now();
			var expiration = credentials.expiration;
			return expiration.getTime() <= ts;
		};
		CredentialsClass2.prototype._isPastTTL = function () {
			return this._nextCredentialsRefresh <= Date.now();
		};
		CredentialsClass2.prototype._setCredentialsForGuest = function () {
			return __awaiter6(this, void 0, void 0, function () {
				var _a,
					identityPoolId,
					region,
					mandatorySignIn,
					identityId,
					_b,
					cognitoClient,
					credentials,
					cognitoIdentityParams,
					credentialsProvider;
				var _this = this;
				return __generator6(this, function (_c) {
					switch (_c.label) {
						case 0:
							logger9.debug("setting credentials for guest");
							(_a = this._config),
								(identityPoolId = _a.identityPoolId),
								(region = _a.region),
								(mandatorySignIn = _a.mandatorySignIn);
							if (mandatorySignIn) {
								return [
									2,
									Promise.reject("cannot get guest credentials when mandatory signin enabled"),
								];
							}
							if (!identityPoolId) {
								logger9.debug("No Cognito Identity pool provided for unauthenticated access");
								return [
									2,
									Promise.reject("No Cognito Identity pool provided for unauthenticated access"),
								];
							}
							if (!region) {
								logger9.debug("region is not configured for getting the credentials");
								return [2, Promise.reject("region is not configured for getting the credentials")];
							}
							_b = this;
							return [4, this._getGuestIdentityId()];
						case 1:
							identityId = _b._identityId = _c.sent();
							cognitoClient = new CognitoIdentityClient({
								region,
								customUserAgent: getAmplifyUserAgent(),
							});
							credentials = void 0;
							if (identityId) {
								cognitoIdentityParams = {
									identityId,
									client: cognitoClient,
								};
								credentials = fromCognitoIdentity(cognitoIdentityParams)();
							} else {
								credentialsProvider = function () {
									return __awaiter6(_this, void 0, void 0, function () {
										var IdentityId, cognitoIdentityParams2, credentialsFromCognitoIdentity;
										return __generator6(this, function (_a2) {
											switch (_a2.label) {
												case 0:
													return [
														4,
														cognitoClient.send(
															new GetIdCommand({
																IdentityPoolId: identityPoolId,
															})
														),
													];
												case 1:
													IdentityId = _a2.sent().IdentityId;
													this._identityId = IdentityId;
													cognitoIdentityParams2 = {
														client: cognitoClient,
														identityId: IdentityId,
													};
													credentialsFromCognitoIdentity =
														fromCognitoIdentity(cognitoIdentityParams2);
													return [2, credentialsFromCognitoIdentity()];
											}
										});
									});
								};
								credentials = credentialsProvider().catch(function (err) {
									return __awaiter6(_this, void 0, void 0, function () {
										return __generator6(this, function (_a2) {
											throw err;
										});
									});
								});
							}
							return [
								2,
								this._loadCredentials(credentials, "guest", false, null)
									.then(function (res) {
										return res;
									})
									.catch(function (e) {
										return __awaiter6(_this, void 0, void 0, function () {
											var credentialsProvider2;
											var _this2 = this;
											return __generator6(this, function (_a2) {
												switch (_a2.label) {
													case 0:
														if (
															!(
																e.name === "ResourceNotFoundException" &&
																e.message === "Identity '" + identityId + "' not found."
															)
														)
															return [3, 2];
														logger9.debug("Failed to load guest credentials");
														return [4, this._removeGuestIdentityId()];
													case 1:
														_a2.sent();
														credentialsProvider2 = function () {
															return __awaiter6(_this2, void 0, void 0, function () {
																var IdentityId,
																	cognitoIdentityParams2,
																	credentialsFromCognitoIdentity;
																return __generator6(this, function (_a3) {
																	switch (_a3.label) {
																		case 0:
																			return [
																				4,
																				cognitoClient.send(
																					new GetIdCommand({
																						IdentityPoolId: identityPoolId,
																					})
																				),
																			];
																		case 1:
																			IdentityId = _a3.sent().IdentityId;
																			this._identityId = IdentityId;
																			cognitoIdentityParams2 = {
																				client: cognitoClient,
																				identityId: IdentityId,
																			};
																			credentialsFromCognitoIdentity =
																				fromCognitoIdentity(cognitoIdentityParams2);
																			return [2, credentialsFromCognitoIdentity()];
																	}
																});
															});
														};
														credentials = credentialsProvider2().catch(function (err) {
															return __awaiter6(_this2, void 0, void 0, function () {
																return __generator6(this, function (_a3) {
																	throw err;
																});
															});
														});
														return [2, this._loadCredentials(credentials, "guest", false, null)];
													case 2:
														return [2, e];
												}
											});
										});
									}),
							];
					}
				});
			});
		};
		CredentialsClass2.prototype._setCredentialsFromFederation = function (params) {
			var provider = params.provider,
				token = params.token,
				identity_id = params.identity_id;
			var domains = {
				google: "accounts.google.com",
				facebook: "graph.facebook.com",
				amazon: "www.amazon.com",
				developer: "cognito-identity.amazonaws.com",
			};
			var domain = domains[provider] || provider;
			if (!domain) {
				return Promise.reject("You must specify a federated provider");
			}
			var logins = {};
			logins[domain] = token;
			var _a = this._config,
				identityPoolId = _a.identityPoolId,
				region = _a.region;
			if (!identityPoolId) {
				logger9.debug("No Cognito Federated Identity pool provided");
				return Promise.reject("No Cognito Federated Identity pool provided");
			}
			if (!region) {
				logger9.debug("region is not configured for getting the credentials");
				return Promise.reject("region is not configured for getting the credentials");
			}
			var cognitoClient = new CognitoIdentityClient({
				region,
				customUserAgent: getAmplifyUserAgent(),
			});
			var credentials = void 0;
			if (identity_id) {
				var cognitoIdentityParams = {
					identityId: identity_id,
					logins,
					client: cognitoClient,
				};
				credentials = fromCognitoIdentity(cognitoIdentityParams)();
			} else {
				var cognitoIdentityParams = {
					logins,
					identityPoolId,
					client: cognitoClient,
				};
				credentials = fromCognitoIdentityPool(cognitoIdentityParams)();
			}
			return this._loadCredentials(credentials, "federated", true, params);
		};
		CredentialsClass2.prototype._setCredentialsFromSession = function (session) {
			var _this = this;
			logger9.debug("set credentials from session");
			var idToken = session.getIdToken().getJwtToken();
			var _a = this._config,
				region = _a.region,
				userPoolId = _a.userPoolId,
				identityPoolId = _a.identityPoolId;
			if (!identityPoolId) {
				logger9.debug("No Cognito Federated Identity pool provided");
				return Promise.reject("No Cognito Federated Identity pool provided");
			}
			if (!region) {
				logger9.debug("region is not configured for getting the credentials");
				return Promise.reject("region is not configured for getting the credentials");
			}
			var key = "cognito-idp." + region + ".amazonaws.com/" + userPoolId;
			var logins = {};
			logins[key] = idToken;
			var cognitoClient = new CognitoIdentityClient({
				region,
				customUserAgent: getAmplifyUserAgent(),
			});
			var credentialsProvider = function () {
				return __awaiter6(_this, void 0, void 0, function () {
					var guestIdentityId,
						generatedOrRetrievedIdentityId,
						IdentityId,
						_a2,
						_b,
						AccessKeyId,
						Expiration,
						SecretKey,
						SessionToken,
						primaryIdentityId;
					return __generator6(this, function (_c) {
						switch (_c.label) {
							case 0:
								return [4, this._getGuestIdentityId()];
							case 1:
								guestIdentityId = _c.sent();
								if (!!guestIdentityId) return [3, 3];
								return [
									4,
									cognitoClient.send(
										new GetIdCommand({
											IdentityPoolId: identityPoolId,
											Logins: logins,
										})
									),
								];
							case 2:
								IdentityId = _c.sent().IdentityId;
								generatedOrRetrievedIdentityId = IdentityId;
								_c.label = 3;
							case 3:
								return [
									4,
									cognitoClient.send(
										new GetCredentialsForIdentityCommand({
											IdentityId: guestIdentityId || generatedOrRetrievedIdentityId,
											Logins: logins,
										})
									),
								];
							case 4:
								(_a2 = _c.sent()),
									(_b = _a2.Credentials),
									(AccessKeyId = _b.AccessKeyId),
									(Expiration = _b.Expiration),
									(SecretKey = _b.SecretKey),
									(SessionToken = _b.SessionToken),
									(primaryIdentityId = _a2.IdentityId);
								this._identityId = primaryIdentityId;
								if (!guestIdentityId) return [3, 6];
								logger9.debug(
									"The guest identity " +
										guestIdentityId +
										" has been successfully linked to the logins"
								);
								if (guestIdentityId === primaryIdentityId) {
									logger9.debug(
										"The guest identity " + guestIdentityId + " has become the primary identity"
									);
								}
								return [4, this._removeGuestIdentityId()];
							case 5:
								_c.sent();
								_c.label = 6;
							case 6:
								return [
									2,
									{
										accessKeyId: AccessKeyId,
										secretAccessKey: SecretKey,
										sessionToken: SessionToken,
										expiration: Expiration,
										identityId: primaryIdentityId,
									},
								];
						}
					});
				});
			};
			var credentials = credentialsProvider().catch(function (err) {
				return __awaiter6(_this, void 0, void 0, function () {
					return __generator6(this, function (_a2) {
						throw err;
					});
				});
			});
			return this._loadCredentials(credentials, "userPool", true, null);
		};
		CredentialsClass2.prototype._loadCredentials = function (
			credentials,
			source,
			authenticated,
			info
		) {
			var _this = this;
			var that = this;
			return new Promise(function (res, rej) {
				credentials
					.then(function (credentials2) {
						return __awaiter6(_this, void 0, void 0, function () {
							var user, provider, token, expires_at, identity_id;
							return __generator6(this, function (_a) {
								switch (_a.label) {
									case 0:
										logger9.debug("Load credentials successfully", credentials2);
										if (this._identityId && !credentials2.identityId) {
											credentials2["identityId"] = this._identityId;
										}
										that._credentials = credentials2;
										that._credentials.authenticated = authenticated;
										that._credentials_source = source;
										that._nextCredentialsRefresh = new Date().getTime() + CREDENTIALS_TTL;
										if (source === "federated") {
											user = Object.assign({ id: this._credentials.identityId }, info.user);
											(provider = info.provider),
												(token = info.token),
												(expires_at = info.expires_at),
												(identity_id = info.identity_id);
											try {
												this._storage.setItem(
													"aws-amplify-federatedInfo",
													JSON.stringify({
														provider,
														token,
														user,
														expires_at,
														identity_id,
													})
												);
											} catch (e) {
												logger9.debug("Failed to put federated info into auth storage", e);
											}
										}
										if (!(source === "guest")) return [3, 2];
										return [4, this._setGuestIdentityId(credentials2.identityId)];
									case 1:
										_a.sent();
										_a.label = 2;
									case 2:
										res(that._credentials);
										return [2];
								}
							});
						});
					})
					.catch(function (err) {
						if (err) {
							logger9.debug("Failed to load credentials", credentials);
							logger9.debug("Error loading credentials", err);
							rej(err);
							return;
						}
					});
			});
		};
		CredentialsClass2.prototype.set = function (params, source) {
			if (source === "session") {
				return this._setCredentialsFromSession(params);
			} else if (source === "federation") {
				return this._setCredentialsFromFederation(params);
			} else if (source === "guest") {
				return this._setCredentialsForGuest();
			} else {
				logger9.debug("no source specified for setting credentials");
				return Promise.reject("invalid source");
			}
		};
		CredentialsClass2.prototype.clear = function () {
			return __awaiter6(this, void 0, void 0, function () {
				return __generator6(this, function (_a) {
					this._credentials = null;
					this._credentials_source = null;
					logger9.debug("removing aws-amplify-federatedInfo from storage");
					this._storage.removeItem("aws-amplify-federatedInfo");
					return [2];
				});
			});
		};
		CredentialsClass2.prototype._getGuestIdentityId = function () {
			return __awaiter6(this, void 0, void 0, function () {
				var identityPoolId, e_1;
				return __generator6(this, function (_a) {
					switch (_a.label) {
						case 0:
							identityPoolId = this._config.identityPoolId;
							_a.label = 1;
						case 1:
							_a.trys.push([1, 3, , 4]);
							return [4, this._storageSync];
						case 2:
							_a.sent();
							return [
								2,
								this._storage.getItem(this._getCognitoIdentityIdStorageKey(identityPoolId)),
							];
						case 3:
							e_1 = _a.sent();
							logger9.debug("Failed to get the cached guest identityId", e_1);
							return [3, 4];
						case 4:
							return [2];
					}
				});
			});
		};
		CredentialsClass2.prototype._setGuestIdentityId = function (identityId) {
			return __awaiter6(this, void 0, void 0, function () {
				var identityPoolId, e_2;
				return __generator6(this, function (_a) {
					switch (_a.label) {
						case 0:
							identityPoolId = this._config.identityPoolId;
							_a.label = 1;
						case 1:
							_a.trys.push([1, 3, , 4]);
							return [4, this._storageSync];
						case 2:
							_a.sent();
							this._storage.setItem(
								this._getCognitoIdentityIdStorageKey(identityPoolId),
								identityId
							);
							return [3, 4];
						case 3:
							e_2 = _a.sent();
							logger9.debug("Failed to cache guest identityId", e_2);
							return [3, 4];
						case 4:
							return [2];
					}
				});
			});
		};
		CredentialsClass2.prototype._removeGuestIdentityId = function () {
			return __awaiter6(this, void 0, void 0, function () {
				var identityPoolId;
				return __generator6(this, function (_a) {
					identityPoolId = this._config.identityPoolId;
					logger9.debug(
						"removing " + this._getCognitoIdentityIdStorageKey(identityPoolId) + " from storage"
					);
					this._storage.removeItem(this._getCognitoIdentityIdStorageKey(identityPoolId));
					return [2];
				});
			});
		};
		CredentialsClass2.prototype.shear = function (credentials) {
			return {
				accessKeyId: credentials.accessKeyId,
				sessionToken: credentials.sessionToken,
				secretAccessKey: credentials.secretAccessKey,
				identityId: credentials.identityId,
				authenticated: credentials.authenticated,
			};
		};
		return CredentialsClass2;
	})();
	var Credentials2 = new CredentialsClass(null);
	Amplify.register(Credentials2);

	// ../../node_modules/universal-cookie/es6/Cookies.js
	var cookie2 = __toModule(require_cookie());

	// ../../node_modules/universal-cookie/es6/utils.js
	var cookie = __toModule(require_cookie());
	function hasDocumentCookie() {
		return typeof document === "object" && typeof document.cookie === "string";
	}
	function parseCookies(cookies, options) {
		if (typeof cookies === "string") {
			return cookie.parse(cookies, options);
		} else if (typeof cookies === "object" && cookies !== null) {
			return cookies;
		} else {
			return {};
		}
	}
	function isParsingCookie(value, doNotParse) {
		if (typeof doNotParse === "undefined") {
			doNotParse = !value || (value[0] !== "{" && value[0] !== "[" && value[0] !== '"');
		}
		return !doNotParse;
	}
	function readCookie(value, options) {
		if (options === void 0) {
			options = {};
		}
		var cleanValue = cleanupCookieValue(value);
		if (isParsingCookie(cleanValue, options.doNotParse)) {
			try {
				return JSON.parse(cleanValue);
			} catch (e) {}
		}
		return value;
	}
	function cleanupCookieValue(value) {
		if (value && value[0] === "j" && value[1] === ":") {
			return value.substr(2);
		}
		return value;
	}

	// ../../node_modules/universal-cookie/es6/Cookies.js
	var __assign9 = function () {
		__assign9 =
			Object.assign ||
			function (t) {
				for (var s, i = 1, n = arguments.length; i < n; i++) {
					s = arguments[i];
					for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
				}
				return t;
			};
		return __assign9.apply(this, arguments);
	};
	var Cookies = (function () {
		function Cookies3(cookies, options) {
			var _this = this;
			this.changeListeners = [];
			this.HAS_DOCUMENT_COOKIE = false;
			this.cookies = parseCookies(cookies, options);
			new Promise(function () {
				_this.HAS_DOCUMENT_COOKIE = hasDocumentCookie();
			}).catch(function () {});
		}
		Cookies3.prototype._updateBrowserValues = function (parseOptions) {
			if (!this.HAS_DOCUMENT_COOKIE) {
				return;
			}
			this.cookies = cookie2.parse(document.cookie, parseOptions);
		};
		Cookies3.prototype._emitChange = function (params) {
			for (var i = 0; i < this.changeListeners.length; ++i) {
				this.changeListeners[i](params);
			}
		};
		Cookies3.prototype.get = function (name2, options, parseOptions) {
			if (options === void 0) {
				options = {};
			}
			this._updateBrowserValues(parseOptions);
			return readCookie(this.cookies[name2], options);
		};
		Cookies3.prototype.getAll = function (options, parseOptions) {
			if (options === void 0) {
				options = {};
			}
			this._updateBrowserValues(parseOptions);
			var result = {};
			for (var name_1 in this.cookies) {
				result[name_1] = readCookie(this.cookies[name_1], options);
			}
			return result;
		};
		Cookies3.prototype.set = function (name2, value, options) {
			var _a;
			if (typeof value === "object") {
				value = JSON.stringify(value);
			}
			this.cookies = __assign9(__assign9({}, this.cookies), ((_a = {}), (_a[name2] = value), _a));
			if (this.HAS_DOCUMENT_COOKIE) {
				document.cookie = cookie2.serialize(name2, value, options);
			}
			this._emitChange({ name: name2, value, options });
		};
		Cookies3.prototype.remove = function (name2, options) {
			var finalOptions = (options = __assign9(__assign9({}, options), {
				expires: new Date(1970, 1, 1, 0, 0, 1),
				maxAge: 0,
			}));
			this.cookies = __assign9({}, this.cookies);
			delete this.cookies[name2];
			if (this.HAS_DOCUMENT_COOKIE) {
				document.cookie = cookie2.serialize(name2, "", finalOptions);
			}
			this._emitChange({ name: name2, value: void 0, options });
		};
		Cookies3.prototype.addChangeListener = function (callback) {
			this.changeListeners.push(callback);
		};
		Cookies3.prototype.removeChangeListener = function (callback) {
			var idx = this.changeListeners.indexOf(callback);
			if (idx >= 0) {
				this.changeListeners.splice(idx, 1);
			}
		};
		return Cookies3;
	})();
	var Cookies_default = Cookies;

	// ../../node_modules/universal-cookie/es6/index.js
	var es6_default = Cookies_default;

	// ../../node_modules/@aws-amplify/core/lib-esm/UniversalStorage/index.js
	var isBrowser = browserOrNode().isBrowser;
	var UniversalStorage = (function () {
		function UniversalStorage2(context) {
			if (context === void 0) {
				context = {};
			}
			this.cookies = new es6_default();
			this.store = isBrowser ? window.localStorage : Object.create(null);
			this.cookies = context.req ? new es6_default(context.req.headers.cookie) : new es6_default();
			Object.assign(this.store, this.cookies.getAll());
		}
		Object.defineProperty(UniversalStorage2.prototype, "length", {
			get: function () {
				return Object.entries(this.store).length;
			},
			enumerable: true,
			configurable: true,
		});
		UniversalStorage2.prototype.clear = function () {
			var _this = this;
			Array.from(new Array(this.length))
				.map(function (_, i) {
					return _this.key(i);
				})
				.forEach(function (key) {
					return _this.removeItem(key);
				});
		};
		UniversalStorage2.prototype.getItem = function (key) {
			return this.getLocalItem(key);
		};
		UniversalStorage2.prototype.getLocalItem = function (key) {
			return Object.prototype.hasOwnProperty.call(this.store, key) ? this.store[key] : null;
		};
		UniversalStorage2.prototype.getUniversalItem = function (key) {
			return this.cookies.get(key);
		};
		UniversalStorage2.prototype.key = function (index2) {
			return Object.keys(this.store)[index2];
		};
		UniversalStorage2.prototype.removeItem = function (key) {
			this.removeLocalItem(key);
			this.removeUniversalItem(key);
		};
		UniversalStorage2.prototype.removeLocalItem = function (key) {
			delete this.store[key];
		};
		UniversalStorage2.prototype.removeUniversalItem = function (key) {
			this.cookies.remove(key, {
				path: "/",
			});
		};
		UniversalStorage2.prototype.setItem = function (key, value) {
			this.setLocalItem(key, value);
			var tokenType = key.split(".").pop();
			switch (tokenType) {
				case "LastAuthUser":
				case "accessToken":
				case "refreshToken":
				case "idToken":
					isBrowser ? this.setUniversalItem(key, value) : this.setLocalItem(key, value);
			}
		};
		UniversalStorage2.prototype.setLocalItem = function (key, value) {
			this.store[key] = value;
		};
		UniversalStorage2.prototype.setUniversalItem = function (key, value) {
			this.cookies.set(key, value, {
				path: "/",
				sameSite: true,
				secure: window.location.hostname === "localhost" ? false : true,
			});
		};
		return UniversalStorage2;
	})();

	// ../../node_modules/@aws-amplify/core/lib-esm/index.js
	var Constants = {
		userAgent: Platform.userAgent,
	};

	// ../../node_modules/amazon-cognito-identity-js/es/AuthenticationDetails.js
	var AuthenticationDetails = /* @__PURE__ */ (function () {
		function AuthenticationDetails2(data) {
			var _ref = data || {},
				ValidationData = _ref.ValidationData,
				Username = _ref.Username,
				Password = _ref.Password,
				AuthParameters = _ref.AuthParameters,
				ClientMetadata = _ref.ClientMetadata;
			this.validationData = ValidationData || {};
			this.authParameters = AuthParameters || {};
			this.clientMetadata = ClientMetadata || {};
			this.username = Username;
			this.password = Password;
		}
		var _proto = AuthenticationDetails2.prototype;
		_proto.getUsername = function getUsername() {
			return this.username;
		};
		_proto.getPassword = function getPassword() {
			return this.password;
		};
		_proto.getValidationData = function getValidationData() {
			return this.validationData;
		};
		_proto.getAuthParameters = function getAuthParameters() {
			return this.authParameters;
		};
		_proto.getClientMetadata = function getClientMetadata() {
			return this.clientMetadata;
		};
		return AuthenticationDetails2;
	})();

	// ../../node_modules/amazon-cognito-identity-js/es/AuthenticationHelper.js
	var import_buffer = __toModule(require_buffer());
	var import_core = __toModule(require_core());
	var import_lib_typedarrays = __toModule(require_lib_typedarrays());
	var import_sha256 = __toModule(require_sha256());
	var import_hmac_sha256 = __toModule(require_hmac_sha256());

	// ../../node_modules/amazon-cognito-identity-js/es/utils/cryptoSecureRandomInt.js
	var crypto2;
	if (typeof window !== "undefined" && window.crypto) {
		crypto2 = window.crypto;
	}
	if (!crypto2 && typeof window !== "undefined" && window.msCrypto) {
		crypto2 = window.msCrypto;
	}
	if (!crypto2 && typeof global !== "undefined" && global.crypto) {
		crypto2 = global.crypto;
	}
	if (!crypto2 && typeof __require === "function") {
		try {
			crypto2 = require_crypto();
		} catch (err) {}
	}
	function cryptoSecureRandomInt() {
		if (crypto2) {
			if (typeof crypto2.getRandomValues === "function") {
				try {
					return crypto2.getRandomValues(new Uint32Array(1))[0];
				} catch (err) {}
			}
			if (typeof crypto2.randomBytes === "function") {
				try {
					return crypto2.randomBytes(4).readInt32LE();
				} catch (err) {}
			}
		}
		throw new Error("Native crypto module could not be used to get secure random number.");
	}

	// ../../node_modules/amazon-cognito-identity-js/es/utils/WordArray.js
	function hexStringify(wordArray) {
		var words = wordArray.words;
		var sigBytes = wordArray.sigBytes;
		var hexChars = [];
		for (var i = 0; i < sigBytes; i++) {
			var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 255;
			hexChars.push((bite >>> 4).toString(16));
			hexChars.push((bite & 15).toString(16));
		}
		return hexChars.join("");
	}
	var WordArray = /* @__PURE__ */ (function () {
		function WordArray2(words, sigBytes) {
			words = this.words = words || [];
			if (sigBytes != void 0) {
				this.sigBytes = sigBytes;
			} else {
				this.sigBytes = words.length * 4;
			}
		}
		var _proto = WordArray2.prototype;
		_proto.random = function random(nBytes) {
			var words = [];
			for (var i = 0; i < nBytes; i += 4) {
				words.push(cryptoSecureRandomInt());
			}
			return new WordArray2(words, nBytes);
		};
		_proto.toString = function toString() {
			return hexStringify(this);
		};
		return WordArray2;
	})();

	// ../../node_modules/amazon-cognito-identity-js/es/BigInteger.js
	var BigInteger_default = BigInteger;
	function BigInteger(a, b) {
		if (a != null) this.fromString(a, b);
	}
	function nbi() {
		return new BigInteger(null);
	}
	var dbits;
	var canary = 244837814094590;
	var j_lm = (canary & 16777215) == 15715070;
	function am1(i, x, w, j, c20, n) {
		while (--n >= 0) {
			var v = x * this[i++] + w[j] + c20;
			c20 = Math.floor(v / 67108864);
			w[j++] = v & 67108863;
		}
		return c20;
	}
	function am2(i, x, w, j, c20, n) {
		var xl = x & 32767,
			xh = x >> 15;
		while (--n >= 0) {
			var l = this[i] & 32767;
			var h = this[i++] >> 15;
			var m = xh * l + h * xl;
			l = xl * l + ((m & 32767) << 15) + w[j] + (c20 & 1073741823);
			c20 = (l >>> 30) + (m >>> 15) + xh * h + (c20 >>> 30);
			w[j++] = l & 1073741823;
		}
		return c20;
	}
	function am3(i, x, w, j, c20, n) {
		var xl = x & 16383,
			xh = x >> 14;
		while (--n >= 0) {
			var l = this[i] & 16383;
			var h = this[i++] >> 14;
			var m = xh * l + h * xl;
			l = xl * l + ((m & 16383) << 14) + w[j] + c20;
			c20 = (l >> 28) + (m >> 14) + xh * h;
			w[j++] = l & 268435455;
		}
		return c20;
	}
	var inBrowser = typeof navigator !== "undefined";
	if (inBrowser && j_lm && navigator.appName == "Microsoft Internet Explorer") {
		BigInteger.prototype.am = am2;
		dbits = 30;
	} else if (inBrowser && j_lm && navigator.appName != "Netscape") {
		BigInteger.prototype.am = am1;
		dbits = 26;
	} else {
		BigInteger.prototype.am = am3;
		dbits = 28;
	}
	BigInteger.prototype.DB = dbits;
	BigInteger.prototype.DM = (1 << dbits) - 1;
	BigInteger.prototype.DV = 1 << dbits;
	var BI_FP = 52;
	BigInteger.prototype.FV = Math.pow(2, BI_FP);
	BigInteger.prototype.F1 = BI_FP - dbits;
	BigInteger.prototype.F2 = 2 * dbits - BI_FP;
	var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
	var BI_RC = new Array();
	var rr;
	var vv;
	rr = "0".charCodeAt(0);
	for (vv = 0; vv <= 9; ++vv) {
		BI_RC[rr++] = vv;
	}
	rr = "a".charCodeAt(0);
	for (vv = 10; vv < 36; ++vv) {
		BI_RC[rr++] = vv;
	}
	rr = "A".charCodeAt(0);
	for (vv = 10; vv < 36; ++vv) {
		BI_RC[rr++] = vv;
	}
	function int2char(n) {
		return BI_RM.charAt(n);
	}
	function intAt(s, i) {
		var c20 = BI_RC[s.charCodeAt(i)];
		return c20 == null ? -1 : c20;
	}
	function bnpCopyTo(r) {
		for (var i = this.t - 1; i >= 0; --i) {
			r[i] = this[i];
		}
		r.t = this.t;
		r.s = this.s;
	}
	function bnpFromInt(x) {
		this.t = 1;
		this.s = x < 0 ? -1 : 0;
		if (x > 0) this[0] = x;
		else if (x < -1) this[0] = x + this.DV;
		else this.t = 0;
	}
	function nbv(i) {
		var r = nbi();
		r.fromInt(i);
		return r;
	}
	function bnpFromString(s, b) {
		var k;
		if (b == 16) k = 4;
		else if (b == 8) k = 3;
		else if (b == 2) k = 1;
		else if (b == 32) k = 5;
		else if (b == 4) k = 2;
		else throw new Error("Only radix 2, 4, 8, 16, 32 are supported");
		this.t = 0;
		this.s = 0;
		var i = s.length,
			mi = false,
			sh = 0;
		while (--i >= 0) {
			var x = intAt(s, i);
			if (x < 0) {
				if (s.charAt(i) == "-") mi = true;
				continue;
			}
			mi = false;
			if (sh == 0) this[this.t++] = x;
			else if (sh + k > this.DB) {
				this[this.t - 1] |= (x & ((1 << (this.DB - sh)) - 1)) << sh;
				this[this.t++] = x >> (this.DB - sh);
			} else this[this.t - 1] |= x << sh;
			sh += k;
			if (sh >= this.DB) sh -= this.DB;
		}
		this.clamp();
		if (mi) BigInteger.ZERO.subTo(this, this);
	}
	function bnpClamp() {
		var c20 = this.s & this.DM;
		while (this.t > 0 && this[this.t - 1] == c20) {
			--this.t;
		}
	}
	function bnToString(b) {
		if (this.s < 0) return "-" + this.negate().toString(b);
		var k;
		if (b == 16) k = 4;
		else if (b == 8) k = 3;
		else if (b == 2) k = 1;
		else if (b == 32) k = 5;
		else if (b == 4) k = 2;
		else throw new Error("Only radix 2, 4, 8, 16, 32 are supported");
		var km = (1 << k) - 1,
			d,
			m = false,
			r = "",
			i = this.t;
		var p = this.DB - ((i * this.DB) % k);
		if (i-- > 0) {
			if (p < this.DB && (d = this[i] >> p) > 0) {
				m = true;
				r = int2char(d);
			}
			while (i >= 0) {
				if (p < k) {
					d = (this[i] & ((1 << p) - 1)) << (k - p);
					d |= this[--i] >> (p += this.DB - k);
				} else {
					d = (this[i] >> (p -= k)) & km;
					if (p <= 0) {
						p += this.DB;
						--i;
					}
				}
				if (d > 0) m = true;
				if (m) r += int2char(d);
			}
		}
		return m ? r : "0";
	}
	function bnNegate() {
		var r = nbi();
		BigInteger.ZERO.subTo(this, r);
		return r;
	}
	function bnAbs() {
		return this.s < 0 ? this.negate() : this;
	}
	function bnCompareTo(a) {
		var r = this.s - a.s;
		if (r != 0) return r;
		var i = this.t;
		r = i - a.t;
		if (r != 0) return this.s < 0 ? -r : r;
		while (--i >= 0) {
			if ((r = this[i] - a[i]) != 0) return r;
		}
		return 0;
	}
	function nbits(x) {
		var r = 1,
			t;
		if ((t = x >>> 16) != 0) {
			x = t;
			r += 16;
		}
		if ((t = x >> 8) != 0) {
			x = t;
			r += 8;
		}
		if ((t = x >> 4) != 0) {
			x = t;
			r += 4;
		}
		if ((t = x >> 2) != 0) {
			x = t;
			r += 2;
		}
		if ((t = x >> 1) != 0) {
			x = t;
			r += 1;
		}
		return r;
	}
	function bnBitLength() {
		if (this.t <= 0) return 0;
		return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM));
	}
	function bnpDLShiftTo(n, r) {
		var i;
		for (i = this.t - 1; i >= 0; --i) {
			r[i + n] = this[i];
		}
		for (i = n - 1; i >= 0; --i) {
			r[i] = 0;
		}
		r.t = this.t + n;
		r.s = this.s;
	}
	function bnpDRShiftTo(n, r) {
		for (var i = n; i < this.t; ++i) {
			r[i - n] = this[i];
		}
		r.t = Math.max(this.t - n, 0);
		r.s = this.s;
	}
	function bnpLShiftTo(n, r) {
		var bs = n % this.DB;
		var cbs = this.DB - bs;
		var bm = (1 << cbs) - 1;
		var ds = Math.floor(n / this.DB),
			c20 = (this.s << bs) & this.DM,
			i;
		for (i = this.t - 1; i >= 0; --i) {
			r[i + ds + 1] = (this[i] >> cbs) | c20;
			c20 = (this[i] & bm) << bs;
		}
		for (i = ds - 1; i >= 0; --i) {
			r[i] = 0;
		}
		r[ds] = c20;
		r.t = this.t + ds + 1;
		r.s = this.s;
		r.clamp();
	}
	function bnpRShiftTo(n, r) {
		r.s = this.s;
		var ds = Math.floor(n / this.DB);
		if (ds >= this.t) {
			r.t = 0;
			return;
		}
		var bs = n % this.DB;
		var cbs = this.DB - bs;
		var bm = (1 << bs) - 1;
		r[0] = this[ds] >> bs;
		for (var i = ds + 1; i < this.t; ++i) {
			r[i - ds - 1] |= (this[i] & bm) << cbs;
			r[i - ds] = this[i] >> bs;
		}
		if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;
		r.t = this.t - ds;
		r.clamp();
	}
	function bnpSubTo(a, r) {
		var i = 0,
			c20 = 0,
			m = Math.min(a.t, this.t);
		while (i < m) {
			c20 += this[i] - a[i];
			r[i++] = c20 & this.DM;
			c20 >>= this.DB;
		}
		if (a.t < this.t) {
			c20 -= a.s;
			while (i < this.t) {
				c20 += this[i];
				r[i++] = c20 & this.DM;
				c20 >>= this.DB;
			}
			c20 += this.s;
		} else {
			c20 += this.s;
			while (i < a.t) {
				c20 -= a[i];
				r[i++] = c20 & this.DM;
				c20 >>= this.DB;
			}
			c20 -= a.s;
		}
		r.s = c20 < 0 ? -1 : 0;
		if (c20 < -1) r[i++] = this.DV + c20;
		else if (c20 > 0) r[i++] = c20;
		r.t = i;
		r.clamp();
	}
	function bnpMultiplyTo(a, r) {
		var x = this.abs(),
			y = a.abs();
		var i = x.t;
		r.t = i + y.t;
		while (--i >= 0) {
			r[i] = 0;
		}
		for (i = 0; i < y.t; ++i) {
			r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);
		}
		r.s = 0;
		r.clamp();
		if (this.s != a.s) BigInteger.ZERO.subTo(r, r);
	}
	function bnpSquareTo(r) {
		var x = this.abs();
		var i = (r.t = 2 * x.t);
		while (--i >= 0) {
			r[i] = 0;
		}
		for (i = 0; i < x.t - 1; ++i) {
			var c20 = x.am(i, x[i], r, 2 * i, 0, 1);
			if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c20, x.t - i - 1)) >= x.DV) {
				r[i + x.t] -= x.DV;
				r[i + x.t + 1] = 1;
			}
		}
		if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);
		r.s = 0;
		r.clamp();
	}
	function bnpDivRemTo(m, q, r) {
		var pm = m.abs();
		if (pm.t <= 0) return;
		var pt = this.abs();
		if (pt.t < pm.t) {
			if (q != null) q.fromInt(0);
			if (r != null) this.copyTo(r);
			return;
		}
		if (r == null) r = nbi();
		var y = nbi(),
			ts = this.s,
			ms = m.s;
		var nsh = this.DB - nbits(pm[pm.t - 1]);
		if (nsh > 0) {
			pm.lShiftTo(nsh, y);
			pt.lShiftTo(nsh, r);
		} else {
			pm.copyTo(y);
			pt.copyTo(r);
		}
		var ys = y.t;
		var y0 = y[ys - 1];
		if (y0 == 0) return;
		var yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);
		var d1 = this.FV / yt,
			d2 = (1 << this.F1) / yt,
			e = 1 << this.F2;
		var i = r.t,
			j = i - ys,
			t = q == null ? nbi() : q;
		y.dlShiftTo(j, t);
		if (r.compareTo(t) >= 0) {
			r[r.t++] = 1;
			r.subTo(t, r);
		}
		BigInteger.ONE.dlShiftTo(ys, t);
		t.subTo(y, y);
		while (y.t < ys) {
			y[y.t++] = 0;
		}
		while (--j >= 0) {
			var qd = r[--i] == y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);
			if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {
				y.dlShiftTo(j, t);
				r.subTo(t, r);
				while (r[i] < --qd) {
					r.subTo(t, r);
				}
			}
		}
		if (q != null) {
			r.drShiftTo(ys, q);
			if (ts != ms) BigInteger.ZERO.subTo(q, q);
		}
		r.t = ys;
		r.clamp();
		if (nsh > 0) r.rShiftTo(nsh, r);
		if (ts < 0) BigInteger.ZERO.subTo(r, r);
	}
	function bnMod(a) {
		var r = nbi();
		this.abs().divRemTo(a, null, r);
		if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);
		return r;
	}
	function bnpInvDigit() {
		if (this.t < 1) return 0;
		var x = this[0];
		if ((x & 1) == 0) return 0;
		var y = x & 3;
		y = (y * (2 - (x & 15) * y)) & 15;
		y = (y * (2 - (x & 255) * y)) & 255;
		y = (y * (2 - (((x & 65535) * y) & 65535))) & 65535;
		y = (y * (2 - ((x * y) % this.DV))) % this.DV;
		return y > 0 ? this.DV - y : -y;
	}
	function bnEquals(a) {
		return this.compareTo(a) == 0;
	}
	function bnpAddTo(a, r) {
		var i = 0,
			c20 = 0,
			m = Math.min(a.t, this.t);
		while (i < m) {
			c20 += this[i] + a[i];
			r[i++] = c20 & this.DM;
			c20 >>= this.DB;
		}
		if (a.t < this.t) {
			c20 += a.s;
			while (i < this.t) {
				c20 += this[i];
				r[i++] = c20 & this.DM;
				c20 >>= this.DB;
			}
			c20 += this.s;
		} else {
			c20 += this.s;
			while (i < a.t) {
				c20 += a[i];
				r[i++] = c20 & this.DM;
				c20 >>= this.DB;
			}
			c20 += a.s;
		}
		r.s = c20 < 0 ? -1 : 0;
		if (c20 > 0) r[i++] = c20;
		else if (c20 < -1) r[i++] = this.DV + c20;
		r.t = i;
		r.clamp();
	}
	function bnAdd(a) {
		var r = nbi();
		this.addTo(a, r);
		return r;
	}
	function bnSubtract(a) {
		var r = nbi();
		this.subTo(a, r);
		return r;
	}
	function bnMultiply(a) {
		var r = nbi();
		this.multiplyTo(a, r);
		return r;
	}
	function bnDivide(a) {
		var r = nbi();
		this.divRemTo(a, r, null);
		return r;
	}
	function Montgomery(m) {
		this.m = m;
		this.mp = m.invDigit();
		this.mpl = this.mp & 32767;
		this.mph = this.mp >> 15;
		this.um = (1 << (m.DB - 15)) - 1;
		this.mt2 = 2 * m.t;
	}
	function montConvert(x) {
		var r = nbi();
		x.abs().dlShiftTo(this.m.t, r);
		r.divRemTo(this.m, null, r);
		if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);
		return r;
	}
	function montRevert(x) {
		var r = nbi();
		x.copyTo(r);
		this.reduce(r);
		return r;
	}
	function montReduce(x) {
		while (x.t <= this.mt2) {
			x[x.t++] = 0;
		}
		for (var i = 0; i < this.m.t; ++i) {
			var j = x[i] & 32767;
			var u0 = (j * this.mpl + (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) & x.DM;
			j = i + this.m.t;
			x[j] += this.m.am(0, u0, x, i, 0, this.m.t);
			while (x[j] >= x.DV) {
				x[j] -= x.DV;
				x[++j]++;
			}
		}
		x.clamp();
		x.drShiftTo(this.m.t, x);
		if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);
	}
	function montSqrTo(x, r) {
		x.squareTo(r);
		this.reduce(r);
	}
	function montMulTo(x, y, r) {
		x.multiplyTo(y, r);
		this.reduce(r);
	}
	Montgomery.prototype.convert = montConvert;
	Montgomery.prototype.revert = montRevert;
	Montgomery.prototype.reduce = montReduce;
	Montgomery.prototype.mulTo = montMulTo;
	Montgomery.prototype.sqrTo = montSqrTo;
	function bnModPow(e, m, callback) {
		var i = e.bitLength(),
			k,
			r = nbv(1),
			z = new Montgomery(m);
		if (i <= 0) return r;
		else if (i < 18) k = 1;
		else if (i < 48) k = 3;
		else if (i < 144) k = 4;
		else if (i < 768) k = 5;
		else k = 6;
		var g = new Array(),
			n = 3,
			k1 = k - 1,
			km = (1 << k) - 1;
		g[1] = z.convert(this);
		if (k > 1) {
			var g2 = nbi();
			z.sqrTo(g[1], g2);
			while (n <= km) {
				g[n] = nbi();
				z.mulTo(g2, g[n - 2], g[n]);
				n += 2;
			}
		}
		var j = e.t - 1,
			w,
			is1 = true,
			r2 = nbi(),
			t;
		i = nbits(e[j]) - 1;
		while (j >= 0) {
			if (i >= k1) w = (e[j] >> (i - k1)) & km;
			else {
				w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i);
				if (j > 0) w |= e[j - 1] >> (this.DB + i - k1);
			}
			n = k;
			while ((w & 1) == 0) {
				w >>= 1;
				--n;
			}
			if ((i -= n) < 0) {
				i += this.DB;
				--j;
			}
			if (is1) {
				g[w].copyTo(r);
				is1 = false;
			} else {
				while (n > 1) {
					z.sqrTo(r, r2);
					z.sqrTo(r2, r);
					n -= 2;
				}
				if (n > 0) z.sqrTo(r, r2);
				else {
					t = r;
					r = r2;
					r2 = t;
				}
				z.mulTo(r2, g[w], r);
			}
			while (j >= 0 && (e[j] & (1 << i)) == 0) {
				z.sqrTo(r, r2);
				t = r;
				r = r2;
				r2 = t;
				if (--i < 0) {
					i = this.DB - 1;
					--j;
				}
			}
		}
		var result = z.revert(r);
		callback(null, result);
		return result;
	}
	BigInteger.prototype.copyTo = bnpCopyTo;
	BigInteger.prototype.fromInt = bnpFromInt;
	BigInteger.prototype.fromString = bnpFromString;
	BigInteger.prototype.clamp = bnpClamp;
	BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
	BigInteger.prototype.drShiftTo = bnpDRShiftTo;
	BigInteger.prototype.lShiftTo = bnpLShiftTo;
	BigInteger.prototype.rShiftTo = bnpRShiftTo;
	BigInteger.prototype.subTo = bnpSubTo;
	BigInteger.prototype.multiplyTo = bnpMultiplyTo;
	BigInteger.prototype.squareTo = bnpSquareTo;
	BigInteger.prototype.divRemTo = bnpDivRemTo;
	BigInteger.prototype.invDigit = bnpInvDigit;
	BigInteger.prototype.addTo = bnpAddTo;
	BigInteger.prototype.toString = bnToString;
	BigInteger.prototype.negate = bnNegate;
	BigInteger.prototype.abs = bnAbs;
	BigInteger.prototype.compareTo = bnCompareTo;
	BigInteger.prototype.bitLength = bnBitLength;
	BigInteger.prototype.mod = bnMod;
	BigInteger.prototype.equals = bnEquals;
	BigInteger.prototype.add = bnAdd;
	BigInteger.prototype.subtract = bnSubtract;
	BigInteger.prototype.multiply = bnMultiply;
	BigInteger.prototype.divide = bnDivide;
	BigInteger.prototype.modPow = bnModPow;
	BigInteger.ZERO = nbv(0);
	BigInteger.ONE = nbv(1);

	// ../../node_modules/amazon-cognito-identity-js/es/AuthenticationHelper.js
	function randomBytes(nBytes) {
		return import_buffer.Buffer.from(new WordArray().random(nBytes).toString(), "hex");
	}
	var HEX_MSB_REGEX = /^[89a-f]/i;
	var initN =
		"FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF";
	var newPasswordRequiredChallengeUserAttributePrefix = "userAttributes.";
	var AuthenticationHelper = /* @__PURE__ */ (function () {
		function AuthenticationHelper2(PoolName) {
			this.N = new BigInteger_default(initN, 16);
			this.g = new BigInteger_default("2", 16);
			this.k = new BigInteger_default(
				this.hexHash("" + this.padHex(this.N) + this.padHex(this.g)),
				16
			);
			this.smallAValue = this.generateRandomSmallA();
			this.getLargeAValue(function () {});
			this.infoBits = import_buffer.Buffer.from("Caldera Derived Key", "utf8");
			this.poolName = PoolName;
		}
		var _proto = AuthenticationHelper2.prototype;
		_proto.getSmallAValue = function getSmallAValue() {
			return this.smallAValue;
		};
		_proto.getLargeAValue = function getLargeAValue(callback) {
			var _this = this;
			if (this.largeAValue) {
				callback(null, this.largeAValue);
			} else {
				this.calculateA(this.smallAValue, function (err, largeAValue) {
					if (err) {
						callback(err, null);
					}
					_this.largeAValue = largeAValue;
					callback(null, _this.largeAValue);
				});
			}
		};
		_proto.generateRandomSmallA = function generateRandomSmallA() {
			var hexRandom = randomBytes(128).toString("hex");
			var randomBigInt = new BigInteger_default(hexRandom, 16);
			return randomBigInt;
		};
		_proto.generateRandomString = function generateRandomString2() {
			return randomBytes(40).toString("base64");
		};
		_proto.getRandomPassword = function getRandomPassword() {
			return this.randomPassword;
		};
		_proto.getSaltDevices = function getSaltDevices() {
			return this.SaltToHashDevices;
		};
		_proto.getVerifierDevices = function getVerifierDevices() {
			return this.verifierDevices;
		};
		_proto.generateHashDevice = function generateHashDevice(deviceGroupKey, username, callback) {
			var _this2 = this;
			this.randomPassword = this.generateRandomString();
			var combinedString = "" + deviceGroupKey + username + ":" + this.randomPassword;
			var hashedString = this.hash(combinedString);
			var hexRandom = randomBytes(16).toString("hex");
			this.SaltToHashDevices = this.padHex(new BigInteger_default(hexRandom, 16));
			this.g.modPow(
				new BigInteger_default(this.hexHash(this.SaltToHashDevices + hashedString), 16),
				this.N,
				function (err, verifierDevicesNotPadded) {
					if (err) {
						callback(err, null);
					}
					_this2.verifierDevices = _this2.padHex(verifierDevicesNotPadded);
					callback(null, null);
				}
			);
		};
		_proto.calculateA = function calculateA(a, callback) {
			var _this3 = this;
			this.g.modPow(a, this.N, function (err, A) {
				if (err) {
					callback(err, null);
				}
				if (A.mod(_this3.N).equals(BigInteger_default.ZERO)) {
					callback(new Error("Illegal paramater. A mod N cannot be 0."), null);
				}
				callback(null, A);
			});
		};
		_proto.calculateU = function calculateU(A, B) {
			this.UHexHash = this.hexHash(this.padHex(A) + this.padHex(B));
			var finalU = new BigInteger_default(this.UHexHash, 16);
			return finalU;
		};
		_proto.hash = function hash(buf) {
			var str =
				buf instanceof import_buffer.Buffer ? import_core.default.lib.WordArray.create(buf) : buf;
			var hashHex = (0, import_sha256.default)(str).toString();
			return new Array(64 - hashHex.length).join("0") + hashHex;
		};
		_proto.hexHash = function hexHash(hexStr) {
			return this.hash(import_buffer.Buffer.from(hexStr, "hex"));
		};
		_proto.computehkdf = function computehkdf(ikm, salt) {
			var infoBitsWordArray = import_core.default.lib.WordArray.create(
				import_buffer.Buffer.concat([
					this.infoBits,
					import_buffer.Buffer.from(String.fromCharCode(1), "utf8"),
				])
			);
			var ikmWordArray =
				ikm instanceof import_buffer.Buffer ? import_core.default.lib.WordArray.create(ikm) : ikm;
			var saltWordArray =
				salt instanceof import_buffer.Buffer
					? import_core.default.lib.WordArray.create(salt)
					: salt;
			var prk = (0, import_hmac_sha256.default)(ikmWordArray, saltWordArray);
			var hmac2 = (0, import_hmac_sha256.default)(infoBitsWordArray, prk);
			return import_buffer.Buffer.from(hmac2.toString(), "hex").slice(0, 16);
		};
		_proto.getPasswordAuthenticationKey = function getPasswordAuthenticationKey(
			username,
			password,
			serverBValue,
			salt,
			callback
		) {
			var _this4 = this;
			if (serverBValue.mod(this.N).equals(BigInteger_default.ZERO)) {
				throw new Error("B cannot be zero.");
			}
			this.UValue = this.calculateU(this.largeAValue, serverBValue);
			if (this.UValue.equals(BigInteger_default.ZERO)) {
				throw new Error("U cannot be zero.");
			}
			var usernamePassword = "" + this.poolName + username + ":" + password;
			var usernamePasswordHash = this.hash(usernamePassword);
			var xValue = new BigInteger_default(
				this.hexHash(this.padHex(salt) + usernamePasswordHash),
				16
			);
			this.calculateS(xValue, serverBValue, function (err, sValue) {
				if (err) {
					callback(err, null);
				}
				var hkdf = _this4.computehkdf(
					import_buffer.Buffer.from(_this4.padHex(sValue), "hex"),
					import_buffer.Buffer.from(_this4.padHex(_this4.UValue), "hex")
				);
				callback(null, hkdf);
			});
		};
		_proto.calculateS = function calculateS(xValue, serverBValue, callback) {
			var _this5 = this;
			this.g.modPow(xValue, this.N, function (err, gModPowXN) {
				if (err) {
					callback(err, null);
				}
				var intValue2 = serverBValue.subtract(_this5.k.multiply(gModPowXN));
				intValue2.modPow(
					_this5.smallAValue.add(_this5.UValue.multiply(xValue)),
					_this5.N,
					function (err2, result) {
						if (err2) {
							callback(err2, null);
						}
						callback(null, result.mod(_this5.N));
					}
				);
			});
		};
		_proto.getNewPasswordRequiredChallengeUserAttributePrefix =
			function getNewPasswordRequiredChallengeUserAttributePrefix() {
				return newPasswordRequiredChallengeUserAttributePrefix;
			};
		_proto.padHex = function padHex(bigInt) {
			if (!(bigInt instanceof BigInteger_default)) {
				throw new Error("Not a BigInteger");
			}
			var isNegative = bigInt.compareTo(BigInteger_default.ZERO) < 0;
			var hexStr = bigInt.abs().toString(16);
			hexStr = hexStr.length % 2 !== 0 ? "0" + hexStr : hexStr;
			hexStr = HEX_MSB_REGEX.test(hexStr) ? "00" + hexStr : hexStr;
			if (isNegative) {
				var invertedNibbles = hexStr
					.split("")
					.map(function (x) {
						var invertedNibble = ~parseInt(x, 16) & 15;
						return "0123456789ABCDEF".charAt(invertedNibble);
					})
					.join("");
				var flippedBitsBI = new BigInteger_default(invertedNibbles, 16).add(BigInteger_default.ONE);
				hexStr = flippedBitsBI.toString(16);
				if (hexStr.toUpperCase().startsWith("FF8")) {
					hexStr = hexStr.substring(2);
				}
			}
			return hexStr;
		};
		return AuthenticationHelper2;
	})();

	// ../../node_modules/amazon-cognito-identity-js/es/CognitoJwtToken.js
	var import_buffer2 = __toModule(require_buffer());
	var CognitoJwtToken = /* @__PURE__ */ (function () {
		function CognitoJwtToken2(token) {
			this.jwtToken = token || "";
			this.payload = this.decodePayload();
		}
		var _proto = CognitoJwtToken2.prototype;
		_proto.getJwtToken = function getJwtToken() {
			return this.jwtToken;
		};
		_proto.getExpiration = function getExpiration() {
			return this.payload.exp;
		};
		_proto.getIssuedAt = function getIssuedAt() {
			return this.payload.iat;
		};
		_proto.decodePayload = function decodePayload() {
			var payload = this.jwtToken.split(".")[1];
			try {
				return JSON.parse(import_buffer2.Buffer.from(payload, "base64").toString("utf8"));
			} catch (err) {
				return {};
			}
		};
		return CognitoJwtToken2;
	})();

	// ../../node_modules/amazon-cognito-identity-js/es/CognitoAccessToken.js
	function _inheritsLoose(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf(subClass, superClass);
	}
	function _setPrototypeOf(o, p) {
		_setPrototypeOf =
			Object.setPrototypeOf ||
			function _setPrototypeOf4(o2, p2) {
				o2.__proto__ = p2;
				return o2;
			};
		return _setPrototypeOf(o, p);
	}
	var CognitoAccessToken = /* @__PURE__ */ (function (_CognitoJwtToken) {
		_inheritsLoose(CognitoAccessToken2, _CognitoJwtToken);
		function CognitoAccessToken2(_temp) {
			var _ref = _temp === void 0 ? {} : _temp,
				AccessToken = _ref.AccessToken;
			return _CognitoJwtToken.call(this, AccessToken || "") || this;
		}
		return CognitoAccessToken2;
	})(CognitoJwtToken);

	// ../../node_modules/amazon-cognito-identity-js/es/CognitoIdToken.js
	function _inheritsLoose2(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf2(subClass, superClass);
	}
	function _setPrototypeOf2(o, p) {
		_setPrototypeOf2 =
			Object.setPrototypeOf ||
			function _setPrototypeOf4(o2, p2) {
				o2.__proto__ = p2;
				return o2;
			};
		return _setPrototypeOf2(o, p);
	}
	var CognitoIdToken = /* @__PURE__ */ (function (_CognitoJwtToken) {
		_inheritsLoose2(CognitoIdToken2, _CognitoJwtToken);
		function CognitoIdToken2(_temp) {
			var _ref = _temp === void 0 ? {} : _temp,
				IdToken = _ref.IdToken;
			return _CognitoJwtToken.call(this, IdToken || "") || this;
		}
		return CognitoIdToken2;
	})(CognitoJwtToken);

	// ../../node_modules/amazon-cognito-identity-js/es/CognitoRefreshToken.js
	var CognitoRefreshToken = /* @__PURE__ */ (function () {
		function CognitoRefreshToken2(_temp) {
			var _ref = _temp === void 0 ? {} : _temp,
				RefreshToken = _ref.RefreshToken;
			this.token = RefreshToken || "";
		}
		var _proto = CognitoRefreshToken2.prototype;
		_proto.getToken = function getToken() {
			return this.token;
		};
		return CognitoRefreshToken2;
	})();

	// ../../node_modules/amazon-cognito-identity-js/es/CognitoUser.js
	var import_buffer3 = __toModule(require_buffer());
	var import_core2 = __toModule(require_core());
	var import_lib_typedarrays2 = __toModule(require_lib_typedarrays());
	var import_enc_base64 = __toModule(require_enc_base64());
	var import_hmac_sha2562 = __toModule(require_hmac_sha256());

	// ../../node_modules/amazon-cognito-identity-js/es/CognitoUserSession.js
	var CognitoUserSession = /* @__PURE__ */ (function () {
		function CognitoUserSession2(_temp) {
			var _ref = _temp === void 0 ? {} : _temp,
				IdToken = _ref.IdToken,
				RefreshToken = _ref.RefreshToken,
				AccessToken = _ref.AccessToken,
				ClockDrift = _ref.ClockDrift;
			if (AccessToken == null || IdToken == null) {
				throw new Error("Id token and Access Token must be present.");
			}
			this.idToken = IdToken;
			this.refreshToken = RefreshToken;
			this.accessToken = AccessToken;
			this.clockDrift = ClockDrift === void 0 ? this.calculateClockDrift() : ClockDrift;
		}
		var _proto = CognitoUserSession2.prototype;
		_proto.getIdToken = function getIdToken() {
			return this.idToken;
		};
		_proto.getRefreshToken = function getRefreshToken() {
			return this.refreshToken;
		};
		_proto.getAccessToken = function getAccessToken() {
			return this.accessToken;
		};
		_proto.getClockDrift = function getClockDrift() {
			return this.clockDrift;
		};
		_proto.calculateClockDrift = function calculateClockDrift() {
			var now = Math.floor(new Date() / 1e3);
			var iat = Math.min(this.accessToken.getIssuedAt(), this.idToken.getIssuedAt());
			return now - iat;
		};
		_proto.isValid = function isValid() {
			var now = Math.floor(new Date() / 1e3);
			var adjusted = now - this.clockDrift;
			return adjusted < this.accessToken.getExpiration() && adjusted < this.idToken.getExpiration();
		};
		return CognitoUserSession2;
	})();

	// ../../node_modules/amazon-cognito-identity-js/es/DateHelper.js
	var monthNames = [
		"Jan",
		"Feb",
		"Mar",
		"Apr",
		"May",
		"Jun",
		"Jul",
		"Aug",
		"Sep",
		"Oct",
		"Nov",
		"Dec",
	];
	var weekNames = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
	var DateHelper = /* @__PURE__ */ (function () {
		function DateHelper2() {}
		var _proto = DateHelper2.prototype;
		_proto.getNowString = function getNowString() {
			var now = new Date();
			var weekDay = weekNames[now.getUTCDay()];
			var month = monthNames[now.getUTCMonth()];
			var day = now.getUTCDate();
			var hours = now.getUTCHours();
			if (hours < 10) {
				hours = "0" + hours;
			}
			var minutes = now.getUTCMinutes();
			if (minutes < 10) {
				minutes = "0" + minutes;
			}
			var seconds = now.getUTCSeconds();
			if (seconds < 10) {
				seconds = "0" + seconds;
			}
			var year = now.getUTCFullYear();
			var dateNow =
				weekDay +
				" " +
				month +
				" " +
				day +
				" " +
				hours +
				":" +
				minutes +
				":" +
				seconds +
				" UTC " +
				year;
			return dateNow;
		};
		return DateHelper2;
	})();

	// ../../node_modules/amazon-cognito-identity-js/es/CognitoUserAttribute.js
	var CognitoUserAttribute = /* @__PURE__ */ (function () {
		function CognitoUserAttribute2(_temp) {
			var _ref = _temp === void 0 ? {} : _temp,
				Name = _ref.Name,
				Value = _ref.Value;
			this.Name = Name || "";
			this.Value = Value || "";
		}
		var _proto = CognitoUserAttribute2.prototype;
		_proto.getValue = function getValue2() {
			return this.Value;
		};
		_proto.setValue = function setValue(value) {
			this.Value = value;
			return this;
		};
		_proto.getName = function getName() {
			return this.Name;
		};
		_proto.setName = function setName(name2) {
			this.Name = name2;
			return this;
		};
		_proto.toString = function toString() {
			return JSON.stringify(this);
		};
		_proto.toJSON = function toJSON() {
			return {
				Name: this.Name,
				Value: this.Value,
			};
		};
		return CognitoUserAttribute2;
	})();

	// ../../node_modules/amazon-cognito-identity-js/es/StorageHelper.js
	var dataMemory2 = {};
	var MemoryStorage2 = /* @__PURE__ */ (function () {
		function MemoryStorage3() {}
		MemoryStorage3.setItem = function setItem(key, value) {
			dataMemory2[key] = value;
			return dataMemory2[key];
		};
		MemoryStorage3.getItem = function getItem(key) {
			return Object.prototype.hasOwnProperty.call(dataMemory2, key) ? dataMemory2[key] : void 0;
		};
		MemoryStorage3.removeItem = function removeItem(key) {
			return delete dataMemory2[key];
		};
		MemoryStorage3.clear = function clear() {
			dataMemory2 = {};
			return dataMemory2;
		};
		return MemoryStorage3;
	})();
	var StorageHelper2 = /* @__PURE__ */ (function () {
		function StorageHelper3() {
			try {
				this.storageWindow = window.localStorage;
				this.storageWindow.setItem("aws.cognito.test-ls", 1);
				this.storageWindow.removeItem("aws.cognito.test-ls");
			} catch (exception) {
				this.storageWindow = MemoryStorage2;
			}
		}
		var _proto = StorageHelper3.prototype;
		_proto.getStorage = function getStorage() {
			return this.storageWindow;
		};
		return StorageHelper3;
	})();

	// ../../node_modules/amazon-cognito-identity-js/es/CognitoUser.js
	var isBrowser2 = typeof navigator !== "undefined";
	var userAgent = isBrowser2 ? navigator.userAgent : "nodejs";
	var CognitoUser = /* @__PURE__ */ (function () {
		function CognitoUser2(data) {
			if (data == null || data.Username == null || data.Pool == null) {
				throw new Error("Username and Pool information are required.");
			}
			this.username = data.Username || "";
			this.pool = data.Pool;
			this.Session = null;
			this.client = data.Pool.client;
			this.signInUserSession = null;
			this.authenticationFlowType = "USER_SRP_AUTH";
			this.storage = data.Storage || new StorageHelper2().getStorage();
			this.keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId();
			this.userDataKey = this.keyPrefix + "." + this.username + ".userData";
		}
		var _proto = CognitoUser2.prototype;
		_proto.setSignInUserSession = function setSignInUserSession(signInUserSession) {
			this.clearCachedUserData();
			this.signInUserSession = signInUserSession;
			this.cacheTokens();
		};
		_proto.getSignInUserSession = function getSignInUserSession() {
			return this.signInUserSession;
		};
		_proto.getUsername = function getUsername() {
			return this.username;
		};
		_proto.getAuthenticationFlowType = function getAuthenticationFlowType() {
			return this.authenticationFlowType;
		};
		_proto.setAuthenticationFlowType = function setAuthenticationFlowType(authenticationFlowType) {
			this.authenticationFlowType = authenticationFlowType;
		};
		_proto.initiateAuth = function initiateAuth(authDetails, callback) {
			var _this = this;
			var authParameters = authDetails.getAuthParameters();
			authParameters.USERNAME = this.username;
			var clientMetaData =
				Object.keys(authDetails.getValidationData()).length !== 0
					? authDetails.getValidationData()
					: authDetails.getClientMetadata();
			var jsonReq = {
				AuthFlow: "CUSTOM_AUTH",
				ClientId: this.pool.getClientId(),
				AuthParameters: authParameters,
				ClientMetadata: clientMetaData,
			};
			if (this.getUserContextData()) {
				jsonReq.UserContextData = this.getUserContextData();
			}
			this.client.request("InitiateAuth", jsonReq, function (err, data) {
				if (err) {
					return callback.onFailure(err);
				}
				var challengeName = data.ChallengeName;
				var challengeParameters = data.ChallengeParameters;
				if (challengeName === "CUSTOM_CHALLENGE") {
					_this.Session = data.Session;
					return callback.customChallenge(challengeParameters);
				}
				_this.signInUserSession = _this.getCognitoUserSession(data.AuthenticationResult);
				_this.cacheTokens();
				return callback.onSuccess(_this.signInUserSession);
			});
		};
		_proto.authenticateUser = function authenticateUser(authDetails, callback) {
			if (this.authenticationFlowType === "USER_PASSWORD_AUTH") {
				return this.authenticateUserPlainUsernamePassword(authDetails, callback);
			} else if (
				this.authenticationFlowType === "USER_SRP_AUTH" ||
				this.authenticationFlowType === "CUSTOM_AUTH"
			) {
				return this.authenticateUserDefaultAuth(authDetails, callback);
			}
			return callback.onFailure(new Error("Authentication flow type is invalid."));
		};
		_proto.authenticateUserDefaultAuth = function authenticateUserDefaultAuth(
			authDetails,
			callback
		) {
			var _this2 = this;
			var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split("_")[1]);
			var dateHelper = new DateHelper();
			var serverBValue;
			var salt;
			var authParameters = {};
			if (this.deviceKey != null) {
				authParameters.DEVICE_KEY = this.deviceKey;
			}
			authParameters.USERNAME = this.username;
			authenticationHelper.getLargeAValue(function (errOnAValue, aValue) {
				if (errOnAValue) {
					callback.onFailure(errOnAValue);
				}
				authParameters.SRP_A = aValue.toString(16);
				if (_this2.authenticationFlowType === "CUSTOM_AUTH") {
					authParameters.CHALLENGE_NAME = "SRP_A";
				}
				var clientMetaData =
					Object.keys(authDetails.getValidationData()).length !== 0
						? authDetails.getValidationData()
						: authDetails.getClientMetadata();
				var jsonReq = {
					AuthFlow: _this2.authenticationFlowType,
					ClientId: _this2.pool.getClientId(),
					AuthParameters: authParameters,
					ClientMetadata: clientMetaData,
				};
				if (_this2.getUserContextData(_this2.username)) {
					jsonReq.UserContextData = _this2.getUserContextData(_this2.username);
				}
				_this2.client.request("InitiateAuth", jsonReq, function (err, data) {
					if (err) {
						return callback.onFailure(err);
					}
					var challengeParameters = data.ChallengeParameters;
					_this2.username = challengeParameters.USER_ID_FOR_SRP;
					_this2.userDataKey = _this2.keyPrefix + "." + _this2.username + ".userData";
					serverBValue = new BigInteger_default(challengeParameters.SRP_B, 16);
					salt = new BigInteger_default(challengeParameters.SALT, 16);
					_this2.getCachedDeviceKeyAndPassword();
					authenticationHelper.getPasswordAuthenticationKey(
						_this2.username,
						authDetails.getPassword(),
						serverBValue,
						salt,
						function (errOnHkdf, hkdf) {
							if (errOnHkdf) {
								callback.onFailure(errOnHkdf);
							}
							var dateNow = dateHelper.getNowString();
							var message = import_core2.default.lib.WordArray.create(
								import_buffer3.Buffer.concat([
									import_buffer3.Buffer.from(_this2.pool.getUserPoolId().split("_")[1], "utf8"),
									import_buffer3.Buffer.from(_this2.username, "utf8"),
									import_buffer3.Buffer.from(challengeParameters.SECRET_BLOCK, "base64"),
									import_buffer3.Buffer.from(dateNow, "utf8"),
								])
							);
							var key = import_core2.default.lib.WordArray.create(hkdf);
							var signatureString = import_enc_base64.default.stringify(
								(0, import_hmac_sha2562.default)(message, key)
							);
							var challengeResponses = {};
							challengeResponses.USERNAME = _this2.username;
							challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;
							challengeResponses.TIMESTAMP = dateNow;
							challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;
							if (_this2.deviceKey != null) {
								challengeResponses.DEVICE_KEY = _this2.deviceKey;
							}
							var respondToAuthChallenge = function respondToAuthChallenge2(
								challenge,
								challengeCallback
							) {
								return _this2.client.request(
									"RespondToAuthChallenge",
									challenge,
									function (errChallenge, dataChallenge) {
										if (
											errChallenge &&
											errChallenge.code === "ResourceNotFoundException" &&
											errChallenge.message.toLowerCase().indexOf("device") !== -1
										) {
											challengeResponses.DEVICE_KEY = null;
											_this2.deviceKey = null;
											_this2.randomPassword = null;
											_this2.deviceGroupKey = null;
											_this2.clearCachedDeviceKeyAndPassword();
											return respondToAuthChallenge2(challenge, challengeCallback);
										}
										return challengeCallback(errChallenge, dataChallenge);
									}
								);
							};
							var jsonReqResp = {
								ChallengeName: "PASSWORD_VERIFIER",
								ClientId: _this2.pool.getClientId(),
								ChallengeResponses: challengeResponses,
								Session: data.Session,
								ClientMetadata: clientMetaData,
							};
							if (_this2.getUserContextData()) {
								jsonReqResp.UserContextData = _this2.getUserContextData();
							}
							respondToAuthChallenge(jsonReqResp, function (errAuthenticate, dataAuthenticate) {
								if (errAuthenticate) {
									return callback.onFailure(errAuthenticate);
								}
								return _this2.authenticateUserInternal(
									dataAuthenticate,
									authenticationHelper,
									callback
								);
							});
							return void 0;
						}
					);
					return void 0;
				});
			});
		};
		_proto.authenticateUserPlainUsernamePassword = function authenticateUserPlainUsernamePassword(
			authDetails,
			callback
		) {
			var _this3 = this;
			var authParameters = {};
			authParameters.USERNAME = this.username;
			authParameters.PASSWORD = authDetails.getPassword();
			if (!authParameters.PASSWORD) {
				callback.onFailure(new Error("PASSWORD parameter is required"));
				return;
			}
			var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split("_")[1]);
			this.getCachedDeviceKeyAndPassword();
			if (this.deviceKey != null) {
				authParameters.DEVICE_KEY = this.deviceKey;
			}
			var clientMetaData =
				Object.keys(authDetails.getValidationData()).length !== 0
					? authDetails.getValidationData()
					: authDetails.getClientMetadata();
			var jsonReq = {
				AuthFlow: "USER_PASSWORD_AUTH",
				ClientId: this.pool.getClientId(),
				AuthParameters: authParameters,
				ClientMetadata: clientMetaData,
			};
			if (this.getUserContextData(this.username)) {
				jsonReq.UserContextData = this.getUserContextData(this.username);
			}
			this.client.request("InitiateAuth", jsonReq, function (err, authResult) {
				if (err) {
					return callback.onFailure(err);
				}
				return _this3.authenticateUserInternal(authResult, authenticationHelper, callback);
			});
		};
		_proto.authenticateUserInternal = function authenticateUserInternal(
			dataAuthenticate,
			authenticationHelper,
			callback
		) {
			var _this4 = this;
			var challengeName = dataAuthenticate.ChallengeName;
			var challengeParameters = dataAuthenticate.ChallengeParameters;
			if (challengeName === "SMS_MFA") {
				this.Session = dataAuthenticate.Session;
				return callback.mfaRequired(challengeName, challengeParameters);
			}
			if (challengeName === "SELECT_MFA_TYPE") {
				this.Session = dataAuthenticate.Session;
				return callback.selectMFAType(challengeName, challengeParameters);
			}
			if (challengeName === "MFA_SETUP") {
				this.Session = dataAuthenticate.Session;
				return callback.mfaSetup(challengeName, challengeParameters);
			}
			if (challengeName === "SOFTWARE_TOKEN_MFA") {
				this.Session = dataAuthenticate.Session;
				return callback.totpRequired(challengeName, challengeParameters);
			}
			if (challengeName === "CUSTOM_CHALLENGE") {
				this.Session = dataAuthenticate.Session;
				return callback.customChallenge(challengeParameters);
			}
			if (challengeName === "NEW_PASSWORD_REQUIRED") {
				this.Session = dataAuthenticate.Session;
				var userAttributes = null;
				var rawRequiredAttributes = null;
				var requiredAttributes = [];
				var userAttributesPrefix =
					authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();
				if (challengeParameters) {
					userAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.userAttributes);
					rawRequiredAttributes = JSON.parse(
						dataAuthenticate.ChallengeParameters.requiredAttributes
					);
				}
				if (rawRequiredAttributes) {
					for (var i = 0; i < rawRequiredAttributes.length; i++) {
						requiredAttributes[i] = rawRequiredAttributes[i].substr(userAttributesPrefix.length);
					}
				}
				return callback.newPasswordRequired(userAttributes, requiredAttributes);
			}
			if (challengeName === "DEVICE_SRP_AUTH") {
				this.Session = dataAuthenticate.Session;
				this.getDeviceResponse(callback);
				return void 0;
			}
			this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);
			this.challengeName = challengeName;
			this.cacheTokens();
			var newDeviceMetadata = dataAuthenticate.AuthenticationResult.NewDeviceMetadata;
			if (newDeviceMetadata == null) {
				return callback.onSuccess(this.signInUserSession);
			}
			authenticationHelper.generateHashDevice(
				dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey,
				dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey,
				function (errGenHash) {
					if (errGenHash) {
						return callback.onFailure(errGenHash);
					}
					var deviceSecretVerifierConfig = {
						Salt: import_buffer3.Buffer.from(authenticationHelper.getSaltDevices(), "hex").toString(
							"base64"
						),
						PasswordVerifier: import_buffer3.Buffer.from(
							authenticationHelper.getVerifierDevices(),
							"hex"
						).toString("base64"),
					};
					_this4.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;
					_this4.deviceGroupKey = newDeviceMetadata.DeviceGroupKey;
					_this4.randomPassword = authenticationHelper.getRandomPassword();
					_this4.client.request(
						"ConfirmDevice",
						{
							DeviceKey: newDeviceMetadata.DeviceKey,
							AccessToken: _this4.signInUserSession.getAccessToken().getJwtToken(),
							DeviceSecretVerifierConfig: deviceSecretVerifierConfig,
							DeviceName: userAgent,
						},
						function (errConfirm, dataConfirm) {
							if (errConfirm) {
								return callback.onFailure(errConfirm);
							}
							_this4.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;
							_this4.cacheDeviceKeyAndPassword();
							if (dataConfirm.UserConfirmationNecessary === true) {
								return callback.onSuccess(
									_this4.signInUserSession,
									dataConfirm.UserConfirmationNecessary
								);
							}
							return callback.onSuccess(_this4.signInUserSession);
						}
					);
					return void 0;
				}
			);
			return void 0;
		};
		_proto.completeNewPasswordChallenge = function completeNewPasswordChallenge(
			newPassword,
			requiredAttributeData,
			callback,
			clientMetadata
		) {
			var _this5 = this;
			if (!newPassword) {
				return callback.onFailure(new Error("New password is required."));
			}
			var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split("_")[1]);
			var userAttributesPrefix =
				authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();
			var finalUserAttributes = {};
			if (requiredAttributeData) {
				Object.keys(requiredAttributeData).forEach(function (key) {
					finalUserAttributes[userAttributesPrefix + key] = requiredAttributeData[key];
				});
			}
			finalUserAttributes.NEW_PASSWORD = newPassword;
			finalUserAttributes.USERNAME = this.username;
			var jsonReq = {
				ChallengeName: "NEW_PASSWORD_REQUIRED",
				ClientId: this.pool.getClientId(),
				ChallengeResponses: finalUserAttributes,
				Session: this.Session,
				ClientMetadata: clientMetadata,
			};
			if (this.getUserContextData()) {
				jsonReq.UserContextData = this.getUserContextData();
			}
			this.client.request(
				"RespondToAuthChallenge",
				jsonReq,
				function (errAuthenticate, dataAuthenticate) {
					if (errAuthenticate) {
						return callback.onFailure(errAuthenticate);
					}
					return _this5.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);
				}
			);
			return void 0;
		};
		_proto.getDeviceResponse = function getDeviceResponse(callback, clientMetadata) {
			var _this6 = this;
			var authenticationHelper = new AuthenticationHelper(this.deviceGroupKey);
			var dateHelper = new DateHelper();
			var authParameters = {};
			authParameters.USERNAME = this.username;
			authParameters.DEVICE_KEY = this.deviceKey;
			authenticationHelper.getLargeAValue(function (errAValue, aValue) {
				if (errAValue) {
					callback.onFailure(errAValue);
				}
				authParameters.SRP_A = aValue.toString(16);
				var jsonReq = {
					ChallengeName: "DEVICE_SRP_AUTH",
					ClientId: _this6.pool.getClientId(),
					ChallengeResponses: authParameters,
					ClientMetadata: clientMetadata,
					Session: _this6.Session,
				};
				if (_this6.getUserContextData()) {
					jsonReq.UserContextData = _this6.getUserContextData();
				}
				_this6.client.request("RespondToAuthChallenge", jsonReq, function (err, data) {
					if (err) {
						return callback.onFailure(err);
					}
					var challengeParameters = data.ChallengeParameters;
					var serverBValue = new BigInteger_default(challengeParameters.SRP_B, 16);
					var salt = new BigInteger_default(challengeParameters.SALT, 16);
					authenticationHelper.getPasswordAuthenticationKey(
						_this6.deviceKey,
						_this6.randomPassword,
						serverBValue,
						salt,
						function (errHkdf, hkdf) {
							if (errHkdf) {
								return callback.onFailure(errHkdf);
							}
							var dateNow = dateHelper.getNowString();
							var message = import_core2.default.lib.WordArray.create(
								import_buffer3.Buffer.concat([
									import_buffer3.Buffer.from(_this6.deviceGroupKey, "utf8"),
									import_buffer3.Buffer.from(_this6.deviceKey, "utf8"),
									import_buffer3.Buffer.from(challengeParameters.SECRET_BLOCK, "base64"),
									import_buffer3.Buffer.from(dateNow, "utf8"),
								])
							);
							var key = import_core2.default.lib.WordArray.create(hkdf);
							var signatureString = import_enc_base64.default.stringify(
								(0, import_hmac_sha2562.default)(message, key)
							);
							var challengeResponses = {};
							challengeResponses.USERNAME = _this6.username;
							challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;
							challengeResponses.TIMESTAMP = dateNow;
							challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;
							challengeResponses.DEVICE_KEY = _this6.deviceKey;
							var jsonReqResp = {
								ChallengeName: "DEVICE_PASSWORD_VERIFIER",
								ClientId: _this6.pool.getClientId(),
								ChallengeResponses: challengeResponses,
								Session: data.Session,
							};
							if (_this6.getUserContextData()) {
								jsonReqResp.UserContextData = _this6.getUserContextData();
							}
							_this6.client.request(
								"RespondToAuthChallenge",
								jsonReqResp,
								function (errAuthenticate, dataAuthenticate) {
									if (errAuthenticate) {
										return callback.onFailure(errAuthenticate);
									}
									_this6.signInUserSession = _this6.getCognitoUserSession(
										dataAuthenticate.AuthenticationResult
									);
									_this6.cacheTokens();
									return callback.onSuccess(_this6.signInUserSession);
								}
							);
							return void 0;
						}
					);
					return void 0;
				});
			});
		};
		_proto.confirmRegistration = function confirmRegistration(
			confirmationCode,
			forceAliasCreation,
			callback,
			clientMetadata
		) {
			var jsonReq = {
				ClientId: this.pool.getClientId(),
				ConfirmationCode: confirmationCode,
				Username: this.username,
				ForceAliasCreation: forceAliasCreation,
				ClientMetadata: clientMetadata,
			};
			if (this.getUserContextData()) {
				jsonReq.UserContextData = this.getUserContextData();
			}
			this.client.request("ConfirmSignUp", jsonReq, function (err) {
				if (err) {
					return callback(err, null);
				}
				return callback(null, "SUCCESS");
			});
		};
		_proto.sendCustomChallengeAnswer = function sendCustomChallengeAnswer(
			answerChallenge,
			callback,
			clientMetadata
		) {
			var _this7 = this;
			var challengeResponses = {};
			challengeResponses.USERNAME = this.username;
			challengeResponses.ANSWER = answerChallenge;
			var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split("_")[1]);
			this.getCachedDeviceKeyAndPassword();
			if (this.deviceKey != null) {
				challengeResponses.DEVICE_KEY = this.deviceKey;
			}
			var jsonReq = {
				ChallengeName: "CUSTOM_CHALLENGE",
				ChallengeResponses: challengeResponses,
				ClientId: this.pool.getClientId(),
				Session: this.Session,
				ClientMetadata: clientMetadata,
			};
			if (this.getUserContextData()) {
				jsonReq.UserContextData = this.getUserContextData();
			}
			this.client.request("RespondToAuthChallenge", jsonReq, function (err, data) {
				if (err) {
					return callback.onFailure(err);
				}
				return _this7.authenticateUserInternal(data, authenticationHelper, callback);
			});
		};
		_proto.sendMFACode = function sendMFACode(confirmationCode, callback, mfaType, clientMetadata) {
			var _this8 = this;
			var challengeResponses = {};
			challengeResponses.USERNAME = this.username;
			challengeResponses.SMS_MFA_CODE = confirmationCode;
			var mfaTypeSelection = mfaType || "SMS_MFA";
			if (mfaTypeSelection === "SOFTWARE_TOKEN_MFA") {
				challengeResponses.SOFTWARE_TOKEN_MFA_CODE = confirmationCode;
			}
			if (this.deviceKey != null) {
				challengeResponses.DEVICE_KEY = this.deviceKey;
			}
			var jsonReq = {
				ChallengeName: mfaTypeSelection,
				ChallengeResponses: challengeResponses,
				ClientId: this.pool.getClientId(),
				Session: this.Session,
				ClientMetadata: clientMetadata,
			};
			if (this.getUserContextData()) {
				jsonReq.UserContextData = this.getUserContextData();
			}
			this.client.request("RespondToAuthChallenge", jsonReq, function (err, dataAuthenticate) {
				if (err) {
					return callback.onFailure(err);
				}
				var challengeName = dataAuthenticate.ChallengeName;
				if (challengeName === "DEVICE_SRP_AUTH") {
					_this8.getDeviceResponse(callback);
					return void 0;
				}
				_this8.signInUserSession = _this8.getCognitoUserSession(
					dataAuthenticate.AuthenticationResult
				);
				_this8.cacheTokens();
				if (dataAuthenticate.AuthenticationResult.NewDeviceMetadata == null) {
					return callback.onSuccess(_this8.signInUserSession);
				}
				var authenticationHelper = new AuthenticationHelper(
					_this8.pool.getUserPoolId().split("_")[1]
				);
				authenticationHelper.generateHashDevice(
					dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey,
					dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey,
					function (errGenHash) {
						if (errGenHash) {
							return callback.onFailure(errGenHash);
						}
						var deviceSecretVerifierConfig = {
							Salt: import_buffer3.Buffer.from(
								authenticationHelper.getSaltDevices(),
								"hex"
							).toString("base64"),
							PasswordVerifier: import_buffer3.Buffer.from(
								authenticationHelper.getVerifierDevices(),
								"hex"
							).toString("base64"),
						};
						_this8.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;
						_this8.deviceGroupKey =
							dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey;
						_this8.randomPassword = authenticationHelper.getRandomPassword();
						_this8.client.request(
							"ConfirmDevice",
							{
								DeviceKey: dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey,
								AccessToken: _this8.signInUserSession.getAccessToken().getJwtToken(),
								DeviceSecretVerifierConfig: deviceSecretVerifierConfig,
								DeviceName: userAgent,
							},
							function (errConfirm, dataConfirm) {
								if (errConfirm) {
									return callback.onFailure(errConfirm);
								}
								_this8.deviceKey =
									dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;
								_this8.cacheDeviceKeyAndPassword();
								if (dataConfirm.UserConfirmationNecessary === true) {
									return callback.onSuccess(
										_this8.signInUserSession,
										dataConfirm.UserConfirmationNecessary
									);
								}
								return callback.onSuccess(_this8.signInUserSession);
							}
						);
						return void 0;
					}
				);
				return void 0;
			});
		};
		_proto.changePassword = function changePassword(
			oldUserPassword,
			newUserPassword,
			callback,
			clientMetadata
		) {
			if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
				return callback(new Error("User is not authenticated"), null);
			}
			this.client.request(
				"ChangePassword",
				{
					PreviousPassword: oldUserPassword,
					ProposedPassword: newUserPassword,
					AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
					ClientMetadata: clientMetadata,
				},
				function (err) {
					if (err) {
						return callback(err, null);
					}
					return callback(null, "SUCCESS");
				}
			);
			return void 0;
		};
		_proto.enableMFA = function enableMFA(callback) {
			if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
				return callback(new Error("User is not authenticated"), null);
			}
			var mfaOptions = [];
			var mfaEnabled = {
				DeliveryMedium: "SMS",
				AttributeName: "phone_number",
			};
			mfaOptions.push(mfaEnabled);
			this.client.request(
				"SetUserSettings",
				{
					MFAOptions: mfaOptions,
					AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
				},
				function (err) {
					if (err) {
						return callback(err, null);
					}
					return callback(null, "SUCCESS");
				}
			);
			return void 0;
		};
		_proto.setUserMfaPreference = function setUserMfaPreference(
			smsMfaSettings,
			softwareTokenMfaSettings,
			callback
		) {
			if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
				return callback(new Error("User is not authenticated"), null);
			}
			this.client.request(
				"SetUserMFAPreference",
				{
					SMSMfaSettings: smsMfaSettings,
					SoftwareTokenMfaSettings: softwareTokenMfaSettings,
					AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
				},
				function (err) {
					if (err) {
						return callback(err, null);
					}
					return callback(null, "SUCCESS");
				}
			);
			return void 0;
		};
		_proto.disableMFA = function disableMFA(callback) {
			if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
				return callback(new Error("User is not authenticated"), null);
			}
			var mfaOptions = [];
			this.client.request(
				"SetUserSettings",
				{
					MFAOptions: mfaOptions,
					AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
				},
				function (err) {
					if (err) {
						return callback(err, null);
					}
					return callback(null, "SUCCESS");
				}
			);
			return void 0;
		};
		_proto.deleteUser = function deleteUser(callback, clientMetadata) {
			var _this9 = this;
			if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
				return callback(new Error("User is not authenticated"), null);
			}
			this.client.request(
				"DeleteUser",
				{
					AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
					ClientMetadata: clientMetadata,
				},
				function (err) {
					if (err) {
						return callback(err, null);
					}
					_this9.clearCachedUser();
					return callback(null, "SUCCESS");
				}
			);
			return void 0;
		};
		_proto.updateAttributes = function updateAttributes(attributes, callback, clientMetadata) {
			var _this10 = this;
			if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
				return callback(new Error("User is not authenticated"), null);
			}
			this.client.request(
				"UpdateUserAttributes",
				{
					AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
					UserAttributes: attributes,
					ClientMetadata: clientMetadata,
				},
				function (err) {
					if (err) {
						return callback(err, null);
					}
					return _this10.getUserData(
						function () {
							return callback(null, "SUCCESS");
						},
						{
							bypassCache: true,
						}
					);
				}
			);
			return void 0;
		};
		_proto.getUserAttributes = function getUserAttributes(callback) {
			if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
				return callback(new Error("User is not authenticated"), null);
			}
			this.client.request(
				"GetUser",
				{
					AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
				},
				function (err, userData) {
					if (err) {
						return callback(err, null);
					}
					var attributeList = [];
					for (var i = 0; i < userData.UserAttributes.length; i++) {
						var attribute = {
							Name: userData.UserAttributes[i].Name,
							Value: userData.UserAttributes[i].Value,
						};
						var userAttribute = new CognitoUserAttribute(attribute);
						attributeList.push(userAttribute);
					}
					return callback(null, attributeList);
				}
			);
			return void 0;
		};
		_proto.getMFAOptions = function getMFAOptions(callback) {
			if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
				return callback(new Error("User is not authenticated"), null);
			}
			this.client.request(
				"GetUser",
				{
					AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
				},
				function (err, userData) {
					if (err) {
						return callback(err, null);
					}
					return callback(null, userData.MFAOptions);
				}
			);
			return void 0;
		};
		_proto.createGetUserRequest = function createGetUserRequest() {
			return this.client.promisifyRequest("GetUser", {
				AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
			});
		};
		_proto.refreshSessionIfPossible = function refreshSessionIfPossible(options) {
			var _this11 = this;
			if (options === void 0) {
				options = {};
			}
			return new Promise(function (resolve) {
				var refresh = _this11.signInUserSession.getRefreshToken();
				if (refresh && refresh.getToken()) {
					_this11.refreshSession(refresh, resolve, options.clientMetadata);
				} else {
					resolve();
				}
			});
		};
		_proto.getUserData = function getUserData(callback, params) {
			var _this12 = this;
			if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
				this.clearCachedUserData();
				return callback(new Error("User is not authenticated"), null);
			}
			var userData = this.getUserDataFromCache();
			if (!userData) {
				this.fetchUserData()
					.then(function (data) {
						callback(null, data);
					})
					["catch"](callback);
				return;
			}
			if (this.isFetchUserDataAndTokenRequired(params)) {
				this.fetchUserData()
					.then(function (data) {
						return _this12.refreshSessionIfPossible(params).then(function () {
							return data;
						});
					})
					.then(function (data) {
						return callback(null, data);
					})
					["catch"](callback);
				return;
			}
			try {
				callback(null, JSON.parse(userData));
				return;
			} catch (err) {
				this.clearCachedUserData();
				callback(err, null);
				return;
			}
		};
		_proto.getUserDataFromCache = function getUserDataFromCache() {
			var userData = this.storage.getItem(this.userDataKey);
			return userData;
		};
		_proto.isFetchUserDataAndTokenRequired = function isFetchUserDataAndTokenRequired(params) {
			var _ref = params || {},
				_ref$bypassCache = _ref.bypassCache,
				bypassCache = _ref$bypassCache === void 0 ? false : _ref$bypassCache;
			return bypassCache;
		};
		_proto.fetchUserData = function fetchUserData() {
			var _this13 = this;
			return this.createGetUserRequest().then(function (data) {
				_this13.cacheUserData(data);
				return data;
			});
		};
		_proto.deleteAttributes = function deleteAttributes(attributeList, callback) {
			var _this14 = this;
			if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
				return callback(new Error("User is not authenticated"), null);
			}
			this.client.request(
				"DeleteUserAttributes",
				{
					UserAttributeNames: attributeList,
					AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
				},
				function (err) {
					if (err) {
						return callback(err, null);
					}
					return _this14.getUserData(
						function () {
							return callback(null, "SUCCESS");
						},
						{
							bypassCache: true,
						}
					);
				}
			);
			return void 0;
		};
		_proto.resendConfirmationCode = function resendConfirmationCode(callback, clientMetadata) {
			var jsonReq = {
				ClientId: this.pool.getClientId(),
				Username: this.username,
				ClientMetadata: clientMetadata,
			};
			this.client.request("ResendConfirmationCode", jsonReq, function (err, result) {
				if (err) {
					return callback(err, null);
				}
				return callback(null, result);
			});
		};
		_proto.getSession = function getSession(callback, options) {
			if (options === void 0) {
				options = {};
			}
			if (this.username == null) {
				return callback(new Error("Username is null. Cannot retrieve a new session"), null);
			}
			if (this.signInUserSession != null && this.signInUserSession.isValid()) {
				return callback(null, this.signInUserSession);
			}
			var keyPrefix =
				"CognitoIdentityServiceProvider." + this.pool.getClientId() + "." + this.username;
			var idTokenKey = keyPrefix + ".idToken";
			var accessTokenKey = keyPrefix + ".accessToken";
			var refreshTokenKey = keyPrefix + ".refreshToken";
			var clockDriftKey = keyPrefix + ".clockDrift";
			if (this.storage.getItem(idTokenKey)) {
				var idToken = new CognitoIdToken({
					IdToken: this.storage.getItem(idTokenKey),
				});
				var accessToken = new CognitoAccessToken({
					AccessToken: this.storage.getItem(accessTokenKey),
				});
				var refreshToken = new CognitoRefreshToken({
					RefreshToken: this.storage.getItem(refreshTokenKey),
				});
				var clockDrift = parseInt(this.storage.getItem(clockDriftKey), 0) || 0;
				var sessionData = {
					IdToken: idToken,
					AccessToken: accessToken,
					RefreshToken: refreshToken,
					ClockDrift: clockDrift,
				};
				var cachedSession = new CognitoUserSession(sessionData);
				if (cachedSession.isValid()) {
					this.signInUserSession = cachedSession;
					return callback(null, this.signInUserSession);
				}
				if (!refreshToken.getToken()) {
					return callback(new Error("Cannot retrieve a new session. Please authenticate."), null);
				}
				this.refreshSession(refreshToken, callback, options.clientMetadata);
			} else {
				callback(new Error("Local storage is missing an ID Token, Please authenticate"), null);
			}
			return void 0;
		};
		_proto.refreshSession = function refreshSession(refreshToken, callback, clientMetadata) {
			var _this15 = this;
			var wrappedCallback = this.pool.wrapRefreshSessionCallback
				? this.pool.wrapRefreshSessionCallback(callback)
				: callback;
			var authParameters = {};
			authParameters.REFRESH_TOKEN = refreshToken.getToken();
			var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId();
			var lastUserKey = keyPrefix + ".LastAuthUser";
			if (this.storage.getItem(lastUserKey)) {
				this.username = this.storage.getItem(lastUserKey);
				var deviceKeyKey = keyPrefix + "." + this.username + ".deviceKey";
				this.deviceKey = this.storage.getItem(deviceKeyKey);
				authParameters.DEVICE_KEY = this.deviceKey;
			}
			var jsonReq = {
				ClientId: this.pool.getClientId(),
				AuthFlow: "REFRESH_TOKEN_AUTH",
				AuthParameters: authParameters,
				ClientMetadata: clientMetadata,
			};
			if (this.getUserContextData()) {
				jsonReq.UserContextData = this.getUserContextData();
			}
			this.client.request("InitiateAuth", jsonReq, function (err, authResult) {
				if (err) {
					if (err.code === "NotAuthorizedException") {
						_this15.clearCachedUser();
					}
					return wrappedCallback(err, null);
				}
				if (authResult) {
					var authenticationResult = authResult.AuthenticationResult;
					if (!Object.prototype.hasOwnProperty.call(authenticationResult, "RefreshToken")) {
						authenticationResult.RefreshToken = refreshToken.getToken();
					}
					_this15.signInUserSession = _this15.getCognitoUserSession(authenticationResult);
					_this15.cacheTokens();
					return wrappedCallback(null, _this15.signInUserSession);
				}
				return void 0;
			});
		};
		_proto.cacheTokens = function cacheTokens() {
			var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId();
			var idTokenKey = keyPrefix + "." + this.username + ".idToken";
			var accessTokenKey = keyPrefix + "." + this.username + ".accessToken";
			var refreshTokenKey = keyPrefix + "." + this.username + ".refreshToken";
			var clockDriftKey = keyPrefix + "." + this.username + ".clockDrift";
			var lastUserKey = keyPrefix + ".LastAuthUser";
			this.storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());
			this.storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());
			this.storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());
			this.storage.setItem(clockDriftKey, "" + this.signInUserSession.getClockDrift());
			this.storage.setItem(lastUserKey, this.username);
		};
		_proto.cacheUserData = function cacheUserData(userData) {
			this.storage.setItem(this.userDataKey, JSON.stringify(userData));
		};
		_proto.clearCachedUserData = function clearCachedUserData() {
			this.storage.removeItem(this.userDataKey);
		};
		_proto.clearCachedUser = function clearCachedUser() {
			this.clearCachedTokens();
			this.clearCachedUserData();
		};
		_proto.cacheDeviceKeyAndPassword = function cacheDeviceKeyAndPassword() {
			var keyPrefix =
				"CognitoIdentityServiceProvider." + this.pool.getClientId() + "." + this.username;
			var deviceKeyKey = keyPrefix + ".deviceKey";
			var randomPasswordKey = keyPrefix + ".randomPasswordKey";
			var deviceGroupKeyKey = keyPrefix + ".deviceGroupKey";
			this.storage.setItem(deviceKeyKey, this.deviceKey);
			this.storage.setItem(randomPasswordKey, this.randomPassword);
			this.storage.setItem(deviceGroupKeyKey, this.deviceGroupKey);
		};
		_proto.getCachedDeviceKeyAndPassword = function getCachedDeviceKeyAndPassword() {
			var keyPrefix =
				"CognitoIdentityServiceProvider." + this.pool.getClientId() + "." + this.username;
			var deviceKeyKey = keyPrefix + ".deviceKey";
			var randomPasswordKey = keyPrefix + ".randomPasswordKey";
			var deviceGroupKeyKey = keyPrefix + ".deviceGroupKey";
			if (this.storage.getItem(deviceKeyKey)) {
				this.deviceKey = this.storage.getItem(deviceKeyKey);
				this.randomPassword = this.storage.getItem(randomPasswordKey);
				this.deviceGroupKey = this.storage.getItem(deviceGroupKeyKey);
			}
		};
		_proto.clearCachedDeviceKeyAndPassword = function clearCachedDeviceKeyAndPassword() {
			var keyPrefix =
				"CognitoIdentityServiceProvider." + this.pool.getClientId() + "." + this.username;
			var deviceKeyKey = keyPrefix + ".deviceKey";
			var randomPasswordKey = keyPrefix + ".randomPasswordKey";
			var deviceGroupKeyKey = keyPrefix + ".deviceGroupKey";
			this.storage.removeItem(deviceKeyKey);
			this.storage.removeItem(randomPasswordKey);
			this.storage.removeItem(deviceGroupKeyKey);
		};
		_proto.clearCachedTokens = function clearCachedTokens() {
			var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId();
			var idTokenKey = keyPrefix + "." + this.username + ".idToken";
			var accessTokenKey = keyPrefix + "." + this.username + ".accessToken";
			var refreshTokenKey = keyPrefix + "." + this.username + ".refreshToken";
			var lastUserKey = keyPrefix + ".LastAuthUser";
			var clockDriftKey = keyPrefix + "." + this.username + ".clockDrift";
			this.storage.removeItem(idTokenKey);
			this.storage.removeItem(accessTokenKey);
			this.storage.removeItem(refreshTokenKey);
			this.storage.removeItem(lastUserKey);
			this.storage.removeItem(clockDriftKey);
		};
		_proto.getCognitoUserSession = function getCognitoUserSession(authResult) {
			var idToken = new CognitoIdToken(authResult);
			var accessToken = new CognitoAccessToken(authResult);
			var refreshToken = new CognitoRefreshToken(authResult);
			var sessionData = {
				IdToken: idToken,
				AccessToken: accessToken,
				RefreshToken: refreshToken,
			};
			return new CognitoUserSession(sessionData);
		};
		_proto.forgotPassword = function forgotPassword(callback, clientMetadata) {
			var jsonReq = {
				ClientId: this.pool.getClientId(),
				Username: this.username,
				ClientMetadata: clientMetadata,
			};
			if (this.getUserContextData()) {
				jsonReq.UserContextData = this.getUserContextData();
			}
			this.client.request("ForgotPassword", jsonReq, function (err, data) {
				if (err) {
					return callback.onFailure(err);
				}
				if (typeof callback.inputVerificationCode === "function") {
					return callback.inputVerificationCode(data);
				}
				return callback.onSuccess(data);
			});
		};
		_proto.confirmPassword = function confirmPassword(
			confirmationCode,
			newPassword,
			callback,
			clientMetadata
		) {
			var jsonReq = {
				ClientId: this.pool.getClientId(),
				Username: this.username,
				ConfirmationCode: confirmationCode,
				Password: newPassword,
				ClientMetadata: clientMetadata,
			};
			if (this.getUserContextData()) {
				jsonReq.UserContextData = this.getUserContextData();
			}
			this.client.request("ConfirmForgotPassword", jsonReq, function (err) {
				if (err) {
					return callback.onFailure(err);
				}
				return callback.onSuccess();
			});
		};
		_proto.getAttributeVerificationCode = function getAttributeVerificationCode(
			attributeName,
			callback,
			clientMetadata
		) {
			if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
				return callback.onFailure(new Error("User is not authenticated"));
			}
			this.client.request(
				"GetUserAttributeVerificationCode",
				{
					AttributeName: attributeName,
					AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
					ClientMetadata: clientMetadata,
				},
				function (err, data) {
					if (err) {
						return callback.onFailure(err);
					}
					if (typeof callback.inputVerificationCode === "function") {
						return callback.inputVerificationCode(data);
					}
					return callback.onSuccess();
				}
			);
			return void 0;
		};
		_proto.verifyAttribute = function verifyAttribute(attributeName, confirmationCode, callback) {
			if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
				return callback.onFailure(new Error("User is not authenticated"));
			}
			this.client.request(
				"VerifyUserAttribute",
				{
					AttributeName: attributeName,
					Code: confirmationCode,
					AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
				},
				function (err) {
					if (err) {
						return callback.onFailure(err);
					}
					return callback.onSuccess("SUCCESS");
				}
			);
			return void 0;
		};
		_proto.getDevice = function getDevice(callback) {
			if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
				return callback.onFailure(new Error("User is not authenticated"));
			}
			this.client.request(
				"GetDevice",
				{
					AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
					DeviceKey: this.deviceKey,
				},
				function (err, data) {
					if (err) {
						return callback.onFailure(err);
					}
					return callback.onSuccess(data);
				}
			);
			return void 0;
		};
		_proto.forgetSpecificDevice = function forgetSpecificDevice(deviceKey, callback) {
			if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
				return callback.onFailure(new Error("User is not authenticated"));
			}
			this.client.request(
				"ForgetDevice",
				{
					AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
					DeviceKey: deviceKey,
				},
				function (err) {
					if (err) {
						return callback.onFailure(err);
					}
					return callback.onSuccess("SUCCESS");
				}
			);
			return void 0;
		};
		_proto.forgetDevice = function forgetDevice(callback) {
			var _this16 = this;
			this.forgetSpecificDevice(this.deviceKey, {
				onFailure: callback.onFailure,
				onSuccess: function onSuccess(result) {
					_this16.deviceKey = null;
					_this16.deviceGroupKey = null;
					_this16.randomPassword = null;
					_this16.clearCachedDeviceKeyAndPassword();
					return callback.onSuccess(result);
				},
			});
		};
		_proto.setDeviceStatusRemembered = function setDeviceStatusRemembered(callback) {
			if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
				return callback.onFailure(new Error("User is not authenticated"));
			}
			this.client.request(
				"UpdateDeviceStatus",
				{
					AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
					DeviceKey: this.deviceKey,
					DeviceRememberedStatus: "remembered",
				},
				function (err) {
					if (err) {
						return callback.onFailure(err);
					}
					return callback.onSuccess("SUCCESS");
				}
			);
			return void 0;
		};
		_proto.setDeviceStatusNotRemembered = function setDeviceStatusNotRemembered(callback) {
			if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
				return callback.onFailure(new Error("User is not authenticated"));
			}
			this.client.request(
				"UpdateDeviceStatus",
				{
					AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
					DeviceKey: this.deviceKey,
					DeviceRememberedStatus: "not_remembered",
				},
				function (err) {
					if (err) {
						return callback.onFailure(err);
					}
					return callback.onSuccess("SUCCESS");
				}
			);
			return void 0;
		};
		_proto.listDevices = function listDevices(limit, paginationToken, callback) {
			if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
				return callback.onFailure(new Error("User is not authenticated"));
			}
			var requestParams = {
				AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
				Limit: limit,
			};
			if (paginationToken) {
				requestParams.PaginationToken = paginationToken;
			}
			this.client.request("ListDevices", requestParams, function (err, data) {
				if (err) {
					return callback.onFailure(err);
				}
				return callback.onSuccess(data);
			});
			return void 0;
		};
		_proto.globalSignOut = function globalSignOut(callback) {
			var _this17 = this;
			if (this.signInUserSession == null || !this.signInUserSession.isValid()) {
				return callback.onFailure(new Error("User is not authenticated"));
			}
			this.client.request(
				"GlobalSignOut",
				{
					AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
				},
				function (err) {
					if (err) {
						return callback.onFailure(err);
					}
					_this17.clearCachedUser();
					return callback.onSuccess("SUCCESS");
				}
			);
			return void 0;
		};
		_proto.signOut = function signOut(revokeTokenCallback) {
			var _this18 = this;
			if (!revokeTokenCallback || typeof revokeTokenCallback !== "function") {
				this.cleanClientData();
				return;
			}
			this.getSession(function (error3, _session) {
				if (error3) {
					return revokeTokenCallback(error3);
				}
				_this18.revokeTokens(function (err) {
					_this18.cleanClientData();
					revokeTokenCallback(err);
				});
			});
		};
		_proto.revokeTokens = function revokeTokens(revokeTokenCallback) {
			if (revokeTokenCallback === void 0) {
				revokeTokenCallback = function revokeTokenCallback2() {};
			}
			if (typeof revokeTokenCallback !== "function") {
				throw new Error("Invalid revokeTokenCallback. It should be a function.");
			}
			var tokensToBeRevoked = [];
			if (!this.signInUserSession) {
				var error3 = new Error("User is not authenticated");
				return revokeTokenCallback(error3);
			}
			if (!this.signInUserSession.getAccessToken()) {
				var _error = new Error("No Access token available");
				return revokeTokenCallback(_error);
			}
			var refreshToken = this.signInUserSession.getRefreshToken().getToken();
			var accessToken = this.signInUserSession.getAccessToken();
			if (this.isSessionRevocable(accessToken)) {
				if (refreshToken) {
					return this.revokeToken({
						token: refreshToken,
						callback: revokeTokenCallback,
					});
				}
			}
			revokeTokenCallback();
		};
		_proto.isSessionRevocable = function isSessionRevocable(token) {
			if (token && typeof token.decodePayload === "function") {
				try {
					var _token$decodePayload = token.decodePayload(),
						origin_jti = _token$decodePayload.origin_jti;
					return !!origin_jti;
				} catch (err) {}
			}
			return false;
		};
		_proto.cleanClientData = function cleanClientData() {
			this.signInUserSession = null;
			this.clearCachedUser();
		};
		_proto.revokeToken = function revokeToken(_ref2) {
			var token = _ref2.token,
				callback = _ref2.callback;
			this.client.requestWithRetry(
				"RevokeToken",
				{
					Token: token,
					ClientId: this.pool.getClientId(),
				},
				function (err) {
					if (err) {
						return callback(err);
					}
					callback();
				}
			);
		};
		_proto.sendMFASelectionAnswer = function sendMFASelectionAnswer(answerChallenge, callback) {
			var _this19 = this;
			var challengeResponses = {};
			challengeResponses.USERNAME = this.username;
			challengeResponses.ANSWER = answerChallenge;
			var jsonReq = {
				ChallengeName: "SELECT_MFA_TYPE",
				ChallengeResponses: challengeResponses,
				ClientId: this.pool.getClientId(),
				Session: this.Session,
			};
			if (this.getUserContextData()) {
				jsonReq.UserContextData = this.getUserContextData();
			}
			this.client.request("RespondToAuthChallenge", jsonReq, function (err, data) {
				if (err) {
					return callback.onFailure(err);
				}
				_this19.Session = data.Session;
				if (answerChallenge === "SMS_MFA") {
					return callback.mfaRequired(data.ChallengeName, data.ChallengeParameters);
				}
				if (answerChallenge === "SOFTWARE_TOKEN_MFA") {
					return callback.totpRequired(data.ChallengeName, data.ChallengeParameters);
				}
				return void 0;
			});
		};
		_proto.getUserContextData = function getUserContextData() {
			var pool = this.pool;
			return pool.getUserContextData(this.username);
		};
		_proto.associateSoftwareToken = function associateSoftwareToken(callback) {
			var _this20 = this;
			if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
				this.client.request(
					"AssociateSoftwareToken",
					{
						Session: this.Session,
					},
					function (err, data) {
						if (err) {
							return callback.onFailure(err);
						}
						_this20.Session = data.Session;
						return callback.associateSecretCode(data.SecretCode);
					}
				);
			} else {
				this.client.request(
					"AssociateSoftwareToken",
					{
						AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
					},
					function (err, data) {
						if (err) {
							return callback.onFailure(err);
						}
						return callback.associateSecretCode(data.SecretCode);
					}
				);
			}
		};
		_proto.verifySoftwareToken = function verifySoftwareToken(
			totpCode,
			friendlyDeviceName,
			callback
		) {
			var _this21 = this;
			if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
				this.client.request(
					"VerifySoftwareToken",
					{
						Session: this.Session,
						UserCode: totpCode,
						FriendlyDeviceName: friendlyDeviceName,
					},
					function (err, data) {
						if (err) {
							return callback.onFailure(err);
						}
						_this21.Session = data.Session;
						var challengeResponses = {};
						challengeResponses.USERNAME = _this21.username;
						var jsonReq = {
							ChallengeName: "MFA_SETUP",
							ClientId: _this21.pool.getClientId(),
							ChallengeResponses: challengeResponses,
							Session: _this21.Session,
						};
						if (_this21.getUserContextData()) {
							jsonReq.UserContextData = _this21.getUserContextData();
						}
						_this21.client.request(
							"RespondToAuthChallenge",
							jsonReq,
							function (errRespond, dataRespond) {
								if (errRespond) {
									return callback.onFailure(errRespond);
								}
								_this21.signInUserSession = _this21.getCognitoUserSession(
									dataRespond.AuthenticationResult
								);
								_this21.cacheTokens();
								return callback.onSuccess(_this21.signInUserSession);
							}
						);
						return void 0;
					}
				);
			} else {
				this.client.request(
					"VerifySoftwareToken",
					{
						AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
						UserCode: totpCode,
						FriendlyDeviceName: friendlyDeviceName,
					},
					function (err, data) {
						if (err) {
							return callback.onFailure(err);
						}
						return callback.onSuccess(data);
					}
				);
			}
		};
		return CognitoUser2;
	})();

	// ../../node_modules/amazon-cognito-identity-js/es/Client.js
	var import_isomorphic_unfetch = __toModule(require_browser());

	// ../../node_modules/amazon-cognito-identity-js/es/Platform/version.js
	var version3 = "5.0.4";

	// ../../node_modules/amazon-cognito-identity-js/es/Platform/index.js
	var BASE_USER_AGENT2 = "aws-amplify/" + version3;
	var Platform2 = {
		userAgent: BASE_USER_AGENT2 + " js",
		product: "",
		navigator: null,
		isReactNative: false,
	};
	if (typeof navigator !== "undefined" && navigator.product) {
		Platform2.product = navigator.product || "";
		Platform2.navigator = navigator || null;
		switch (navigator.product) {
			case "ReactNative":
				Platform2.userAgent = BASE_USER_AGENT2 + " react-native";
				Platform2.isReactNative = true;
				break;
			default:
				Platform2.userAgent = BASE_USER_AGENT2 + " js";
				Platform2.isReactNative = false;
				break;
		}
	}
	var getUserAgent = function getUserAgent2() {
		return Platform2.userAgent;
	};

	// ../../node_modules/amazon-cognito-identity-js/es/UserAgent.js
	function UserAgent() {}
	UserAgent.prototype.userAgent = getUserAgent();
	var UserAgent_default = UserAgent;

	// ../../node_modules/amazon-cognito-identity-js/es/Client.js
	function _inheritsLoose3(subClass, superClass) {
		subClass.prototype = Object.create(superClass.prototype);
		subClass.prototype.constructor = subClass;
		_setPrototypeOf3(subClass, superClass);
	}
	function _wrapNativeSuper(Class) {
		var _cache = typeof Map === "function" ? new Map() : void 0;
		_wrapNativeSuper = function _wrapNativeSuper2(Class2) {
			if (Class2 === null || !_isNativeFunction(Class2)) return Class2;
			if (typeof Class2 !== "function") {
				throw new TypeError("Super expression must either be null or a function");
			}
			if (typeof _cache !== "undefined") {
				if (_cache.has(Class2)) return _cache.get(Class2);
				_cache.set(Class2, Wrapper);
			}
			function Wrapper() {
				return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
			}
			Wrapper.prototype = Object.create(Class2.prototype, {
				constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true },
			});
			return _setPrototypeOf3(Wrapper, Class2);
		};
		return _wrapNativeSuper(Class);
	}
	function _construct(Parent, args, Class) {
		if (_isNativeReflectConstruct()) {
			_construct = Reflect.construct;
		} else {
			_construct = function _construct2(Parent2, args2, Class2) {
				var a = [null];
				a.push.apply(a, args2);
				var Constructor = Function.bind.apply(Parent2, a);
				var instance = new Constructor();
				if (Class2) _setPrototypeOf3(instance, Class2.prototype);
				return instance;
			};
		}
		return _construct.apply(null, arguments);
	}
	function _isNativeReflectConstruct() {
		if (typeof Reflect === "undefined" || !Reflect.construct) return false;
		if (Reflect.construct.sham) return false;
		if (typeof Proxy === "function") return true;
		try {
			Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
			return true;
		} catch (e) {
			return false;
		}
	}
	function _isNativeFunction(fn) {
		return Function.toString.call(fn).indexOf("[native code]") !== -1;
	}
	function _setPrototypeOf3(o, p) {
		_setPrototypeOf3 =
			Object.setPrototypeOf ||
			function _setPrototypeOf4(o2, p2) {
				o2.__proto__ = p2;
				return o2;
			};
		return _setPrototypeOf3(o, p);
	}
	function _getPrototypeOf(o) {
		_getPrototypeOf = Object.setPrototypeOf
			? Object.getPrototypeOf
			: function _getPrototypeOf2(o2) {
					return o2.__proto__ || Object.getPrototypeOf(o2);
			  };
		return _getPrototypeOf(o);
	}
	var CognitoError = /* @__PURE__ */ (function (_Error) {
		_inheritsLoose3(CognitoError2, _Error);
		function CognitoError2(message, code, name2, statusCode) {
			var _this;
			_this = _Error.call(this, message) || this;
			_this.code = code;
			_this.name = name2;
			_this.statusCode = statusCode;
			return _this;
		}
		return CognitoError2;
	})(/* @__PURE__ */ _wrapNativeSuper(Error));
	var Client2 = /* @__PURE__ */ (function () {
		function Client3(region, endpoint, fetchOptions) {
			this.endpoint = endpoint || "https://cognito-idp." + region + ".amazonaws.com/";
			var _ref = fetchOptions || {},
				credentials = _ref.credentials;
			this.fetchOptions = credentials
				? {
						credentials,
				  }
				: {};
		}
		var _proto = Client3.prototype;
		_proto.promisifyRequest = function promisifyRequest(operation, params) {
			var _this2 = this;
			return new Promise(function (resolve, reject) {
				_this2.request(operation, params, function (err, data) {
					if (err) {
						reject(new CognitoError(err.message, err.code, err.name, err.statusCode));
					} else {
						resolve(data);
					}
				});
			});
		};
		_proto.requestWithRetry = function requestWithRetry(operation, params, callback) {
			var _this3 = this;
			var MAX_DELAY_IN_MILLIS = 5 * 1e3;
			jitteredExponentialRetry2(
				function (p) {
					return new Promise(function (res, rej) {
						_this3.request(operation, p, function (error3, result) {
							if (error3) {
								rej(error3);
							} else {
								res(result);
							}
						});
					});
				},
				[params],
				MAX_DELAY_IN_MILLIS
			)
				.then(function (result) {
					return callback(null, result);
				})
				["catch"](function (error3) {
					return callback(error3);
				});
		};
		_proto.request = function request(operation, params, callback) {
			var headers = {
				"Content-Type": "application/x-amz-json-1.1",
				"X-Amz-Target": "AWSCognitoIdentityProviderService." + operation,
				"X-Amz-User-Agent": UserAgent_default.prototype.userAgent,
			};
			var options = Object.assign({}, this.fetchOptions, {
				headers,
				method: "POST",
				mode: "cors",
				cache: "no-cache",
				body: JSON.stringify(params),
			});
			var response;
			var responseJsonData;
			fetch(this.endpoint, options)
				.then(
					function (resp) {
						response = resp;
						return resp;
					},
					function (err) {
						if (err instanceof TypeError) {
							throw new Error("Network error");
						}
						throw err;
					}
				)
				.then(function (resp) {
					return resp.json()["catch"](function () {
						return {};
					});
				})
				.then(function (data) {
					if (response.ok) return callback(null, data);
					responseJsonData = data;
					var code = (data.__type || data.code).split("#").pop();
					var error3 = {
						code,
						name: code,
						message: data.message || data.Message || null,
					};
					return callback(error3);
				})
				["catch"](function (err) {
					if (response && response.headers && response.headers.get("x-amzn-errortype")) {
						try {
							var code = response.headers.get("x-amzn-errortype").split(":")[0];
							var error3 = {
								code,
								name: code,
								statusCode: response.status,
								message: response.status ? response.status.toString() : null,
							};
							return callback(error3);
						} catch (ex) {
							return callback(err);
						}
					} else if (err instanceof Error && err.message === "Network error") {
						var _error = {
							code: "NetworkError",
							name: err.name,
							message: err.message,
						};
						return callback(_error);
					} else {
						return callback(err);
					}
				});
		};
		return Client3;
	})();
	var logger10 = {
		debug: function debug() {},
	};
	var isNonRetryableError2 = function isNonRetryableError3(obj) {
		var key = "nonRetryable";
		return obj && obj[key];
	};
	function retry2(functionToRetry, args, delayFn, attempt) {
		if (attempt === void 0) {
			attempt = 1;
		}
		if (typeof functionToRetry !== "function") {
			throw Error("functionToRetry must be a function");
		}
		logger10.debug(
			functionToRetry.name + " attempt #" + attempt + " with args: " + JSON.stringify(args)
		);
		return functionToRetry.apply(void 0, args)["catch"](function (err) {
			logger10.debug("error on " + functionToRetry.name, err);
			if (isNonRetryableError2(err)) {
				logger10.debug(functionToRetry.name + " non retryable error", err);
				throw err;
			}
			var retryIn = delayFn(attempt, args, err);
			logger10.debug(functionToRetry.name + " retrying in " + retryIn + " ms");
			if (retryIn !== false) {
				return new Promise(function (res) {
					return setTimeout(res, retryIn);
				}).then(function () {
					return retry2(functionToRetry, args, delayFn, attempt + 1);
				});
			} else {
				throw err;
			}
		});
	}
	function jitteredBackoff2(maxDelayMs) {
		var BASE_TIME_MS = 100;
		var JITTER_FACTOR = 100;
		return function (attempt) {
			var delay = Math.pow(2, attempt) * BASE_TIME_MS + JITTER_FACTOR * Math.random();
			return delay > maxDelayMs ? false : delay;
		};
	}
	var MAX_DELAY_MS2 = 5 * 60 * 1e3;
	function jitteredExponentialRetry2(functionToRetry, args, maxDelayMs) {
		if (maxDelayMs === void 0) {
			maxDelayMs = MAX_DELAY_MS2;
		}
		return retry2(functionToRetry, args, jitteredBackoff2(maxDelayMs));
	}

	// ../../node_modules/amazon-cognito-identity-js/es/CognitoUserPool.js
	var CognitoUserPool = /* @__PURE__ */ (function () {
		function CognitoUserPool2(data, wrapRefreshSessionCallback) {
			var _ref = data || {},
				UserPoolId = _ref.UserPoolId,
				ClientId = _ref.ClientId,
				endpoint = _ref.endpoint,
				fetchOptions = _ref.fetchOptions,
				AdvancedSecurityDataCollectionFlag = _ref.AdvancedSecurityDataCollectionFlag;
			if (!UserPoolId || !ClientId) {
				throw new Error("Both UserPoolId and ClientId are required.");
			}
			if (!/^[\w-]+_.+$/.test(UserPoolId)) {
				throw new Error("Invalid UserPoolId format.");
			}
			var region = UserPoolId.split("_")[0];
			this.userPoolId = UserPoolId;
			this.clientId = ClientId;
			this.client = new Client2(region, endpoint, fetchOptions);
			this.advancedSecurityDataCollectionFlag = AdvancedSecurityDataCollectionFlag !== false;
			this.storage = data.Storage || new StorageHelper2().getStorage();
			if (wrapRefreshSessionCallback) {
				this.wrapRefreshSessionCallback = wrapRefreshSessionCallback;
			}
		}
		var _proto = CognitoUserPool2.prototype;
		_proto.getUserPoolId = function getUserPoolId() {
			return this.userPoolId;
		};
		_proto.getClientId = function getClientId() {
			return this.clientId;
		};
		_proto.signUp = function signUp(
			username,
			password,
			userAttributes,
			validationData,
			callback,
			clientMetadata
		) {
			var _this = this;
			var jsonReq = {
				ClientId: this.clientId,
				Username: username,
				Password: password,
				UserAttributes: userAttributes,
				ValidationData: validationData,
				ClientMetadata: clientMetadata,
			};
			if (this.getUserContextData(username)) {
				jsonReq.UserContextData = this.getUserContextData(username);
			}
			this.client.request("SignUp", jsonReq, function (err, data) {
				if (err) {
					return callback(err, null);
				}
				var cognitoUser = {
					Username: username,
					Pool: _this,
					Storage: _this.storage,
				};
				var returnData = {
					user: new CognitoUser(cognitoUser),
					userConfirmed: data.UserConfirmed,
					userSub: data.UserSub,
					codeDeliveryDetails: data.CodeDeliveryDetails,
				};
				return callback(null, returnData);
			});
		};
		_proto.getCurrentUser = function getCurrentUser() {
			var lastUserKey = "CognitoIdentityServiceProvider." + this.clientId + ".LastAuthUser";
			var lastAuthUser = this.storage.getItem(lastUserKey);
			if (lastAuthUser) {
				var cognitoUser = {
					Username: lastAuthUser,
					Pool: this,
					Storage: this.storage,
				};
				return new CognitoUser(cognitoUser);
			}
			return null;
		};
		_proto.getUserContextData = function getUserContextData(username) {
			if (typeof AmazonCognitoAdvancedSecurityData === "undefined") {
				return void 0;
			}
			var amazonCognitoAdvancedSecurityDataConst = AmazonCognitoAdvancedSecurityData;
			if (this.advancedSecurityDataCollectionFlag) {
				var advancedSecurityData = amazonCognitoAdvancedSecurityDataConst.getData(
					username,
					this.userPoolId,
					this.clientId
				);
				if (advancedSecurityData) {
					var userContextData = {
						EncodedData: advancedSecurityData,
					};
					return userContextData;
				}
			}
			return {};
		};
		return CognitoUserPool2;
	})();

	// ../../node_modules/amazon-cognito-identity-js/es/CookieStorage.js
	var Cookies2 = __toModule(require_js_cookie());
	var CookieStorage = /* @__PURE__ */ (function () {
		function CookieStorage2(data) {
			if (data.domain) {
				this.domain = data.domain;
			} else {
				throw new Error("The domain of cookieStorage can not be undefined.");
			}
			if (data.path) {
				this.path = data.path;
			} else {
				this.path = "/";
			}
			if (Object.prototype.hasOwnProperty.call(data, "expires")) {
				this.expires = data.expires;
			} else {
				this.expires = 365;
			}
			if (Object.prototype.hasOwnProperty.call(data, "secure")) {
				this.secure = data.secure;
			} else {
				this.secure = true;
			}
			if (Object.prototype.hasOwnProperty.call(data, "sameSite")) {
				if (!["strict", "lax", "none"].includes(data.sameSite)) {
					throw new Error('The sameSite value of cookieStorage must be "lax", "strict" or "none".');
				}
				if (data.sameSite === "none" && !this.secure) {
					throw new Error(
						"sameSite = None requires the Secure attribute in latest browser versions."
					);
				}
				this.sameSite = data.sameSite;
			} else {
				this.sameSite = null;
			}
		}
		var _proto = CookieStorage2.prototype;
		_proto.setItem = function setItem(key, value) {
			var options = {
				path: this.path,
				expires: this.expires,
				domain: this.domain,
				secure: this.secure,
			};
			if (this.sameSite) {
				options.sameSite = this.sameSite;
			}
			Cookies2.set(key, value, options);
			return Cookies2.get(key);
		};
		_proto.getItem = function getItem(key) {
			return Cookies2.get(key);
		};
		_proto.removeItem = function removeItem(key) {
			var options = {
				path: this.path,
				expires: this.expires,
				domain: this.domain,
				secure: this.secure,
			};
			if (this.sameSite) {
				options.sameSite = this.sameSite;
			}
			return Cookies2.remove(key, options);
		};
		_proto.clear = function clear() {
			var cookies = Cookies2.get();
			var numKeys = Object.keys(cookies).length;
			for (var index2 = 0; index2 < numKeys; ++index2) {
				this.removeItem(Object.keys(cookies)[index2]);
			}
			return {};
		};
		return CookieStorage2;
	})();

	// ../../node_modules/@aws-amplify/auth/lib-esm/Auth.js
	var import_url2 = __toModule(require_url());

	// ../../node_modules/@aws-amplify/auth/lib-esm/OAuth/OAuth.js
	var import_url = __toModule(require_url());

	// ../../node_modules/@aws-amplify/auth/lib-esm/OAuth/urlOpener.js
	var SELF = "_self";
	var launchUri = function (url) {
		var windowProxy = window.open(url, SELF);
		if (windowProxy) {
			return Promise.resolve(windowProxy);
		} else {
			return Promise.reject();
		}
	};

	// ../../node_modules/@aws-amplify/auth/lib-esm/OAuth/oauthStorage.js
	var setState = function (state) {
		window.sessionStorage.setItem("oauth_state", state);
	};
	var getState = function () {
		var oauth_state = window.sessionStorage.getItem("oauth_state");
		window.sessionStorage.removeItem("oauth_state");
		return oauth_state;
	};
	var setPKCE = function (private_key) {
		window.sessionStorage.setItem("ouath_pkce_key", private_key);
	};
	var getPKCE = function () {
		var ouath_pkce_key = window.sessionStorage.getItem("ouath_pkce_key");
		window.sessionStorage.removeItem("ouath_pkce_key");
		return ouath_pkce_key;
	};

	// ../../node_modules/@aws-amplify/auth/lib-esm/OAuth/OAuth.js
	var import_sha2562 = __toModule(require_sha256());
	var import_enc_base642 = __toModule(require_enc_base64());
	var __assign10 = function () {
		__assign10 =
			Object.assign ||
			function (t) {
				for (var s, i = 1, n = arguments.length; i < n; i++) {
					s = arguments[i];
					for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
				}
				return t;
			};
		return __assign10.apply(this, arguments);
	};
	var __awaiter7 = function (thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P
				? value
				: new P(function (resolve) {
						resolve(value);
				  });
		}
		return new (P || (P = Promise))(function (resolve, reject) {
			function fulfilled(value) {
				try {
					step(generator.next(value));
				} catch (e) {
					reject(e);
				}
			}
			function rejected(value) {
				try {
					step(generator["throw"](value));
				} catch (e) {
					reject(e);
				}
			}
			function step(result) {
				result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	var __generator7 = function (thisArg, body) {
		var _ = {
				label: 0,
				sent: function () {
					if (t[0] & 1) throw t[1];
					return t[1];
				},
				trys: [],
				ops: [],
			},
			f,
			y,
			t,
			g;
		return (
			(g = { next: verb(0), throw: verb(1), return: verb(2) }),
			typeof Symbol === "function" &&
				(g[Symbol.iterator] = function () {
					return this;
				}),
			g
		);
		function verb(n) {
			return function (v) {
				return step([n, v]);
			};
		}
		function step(op) {
			if (f) throw new TypeError("Generator is already executing.");
			while (_)
				try {
					if (
						((f = 1),
						y &&
							(t =
								op[0] & 2
									? y["return"]
									: op[0]
									? y["throw"] || ((t = y["return"]) && t.call(y), 0)
									: y.next) &&
							!(t = t.call(y, op[1])).done)
					)
						return t;
					if (((y = 0), t)) op = [op[0] & 2, t.value];
					switch (op[0]) {
						case 0:
						case 1:
							t = op;
							break;
						case 4:
							_.label++;
							return { value: op[1], done: false };
						case 5:
							_.label++;
							y = op[1];
							op = [0];
							continue;
						case 7:
							op = _.ops.pop();
							_.trys.pop();
							continue;
						default:
							if (
								!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) &&
								(op[0] === 6 || op[0] === 2)
							) {
								_ = 0;
								continue;
							}
							if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
								_.label = op[1];
								break;
							}
							if (op[0] === 6 && _.label < t[1]) {
								_.label = t[1];
								t = op;
								break;
							}
							if (t && _.label < t[2]) {
								_.label = t[2];
								_.ops.push(op);
								break;
							}
							if (t[2]) _.ops.pop();
							_.trys.pop();
							continue;
					}
					op = body.call(thisArg, _);
				} catch (e) {
					op = [6, e];
					y = 0;
				} finally {
					f = t = 0;
				}
			if (op[0] & 5) throw op[1];
			return { value: op[0] ? op[1] : void 0, done: true };
		}
	};
	var __read12 = function (o, n) {
		var m = typeof Symbol === "function" && o[Symbol.iterator];
		if (!m) return o;
		var i = m.call(o),
			r,
			ar = [],
			e;
		try {
			while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
		} catch (error3) {
			e = { error: error3 };
		} finally {
			try {
				if (r && !r.done && (m = i["return"])) m.call(i);
			} finally {
				if (e) throw e.error;
			}
		}
		return ar;
	};
	var AMPLIFY_SYMBOL2 =
		typeof Symbol !== "undefined" && typeof Symbol.for === "function"
			? Symbol.for("amplify_default")
			: "@@amplify_default";
	var dispatchAuthEvent = function (event2, data, message) {
		Hub.dispatch("auth", { event: event2, data, message }, "Auth", AMPLIFY_SYMBOL2);
	};
	var logger11 = new ConsoleLogger("OAuth");
	var OAuth = (function () {
		function OAuth2(_a) {
			var config = _a.config,
				cognitoClientId = _a.cognitoClientId,
				_b = _a.scopes,
				scopes = _b === void 0 ? [] : _b;
			this._urlOpener = config.urlOpener || launchUri;
			this._config = config;
			this._cognitoClientId = cognitoClientId;
			if (!this.isValidScopes(scopes)) throw Error("scopes must be a String Array");
			this._scopes = scopes;
		}
		OAuth2.prototype.isValidScopes = function (scopes) {
			return (
				Array.isArray(scopes) &&
				scopes.every(function (scope) {
					return typeof scope === "string";
				})
			);
		};
		OAuth2.prototype.oauthSignIn = function (
			responseType,
			domain,
			redirectSignIn,
			clientId,
			provider,
			customState
		) {
			if (responseType === void 0) {
				responseType = "code";
			}
			if (provider === void 0) {
				provider = CognitoHostedUIIdentityProvider.Cognito;
			}
			var generatedState = this._generateState(32);
			var state = customState ? generatedState + "-" + urlSafeEncode(customState) : generatedState;
			setState(state);
			var pkce_key = this._generateRandom(128);
			setPKCE(pkce_key);
			var code_challenge = this._generateChallenge(pkce_key);
			var code_challenge_method = "S256";
			var scopesString = this._scopes.join(" ");
			var queryString = Object.entries(
				__assign10(
					__assign10(
						{
							redirect_uri: redirectSignIn,
							response_type: responseType,
							client_id: clientId,
							identity_provider: provider,
							scope: scopesString,
							state,
						},
						responseType === "code" ? { code_challenge } : {}
					),
					responseType === "code" ? { code_challenge_method } : {}
				)
			)
				.map(function (_a) {
					var _b = __read12(_a, 2),
						k = _b[0],
						v = _b[1];
					return encodeURIComponent(k) + "=" + encodeURIComponent(v);
				})
				.join("&");
			var URL2 = "https://" + domain + "/oauth2/authorize?" + queryString;
			logger11.debug("Redirecting to " + URL2);
			this._urlOpener(URL2, redirectSignIn);
		};
		OAuth2.prototype._handleCodeFlow = function (currentUrl) {
			return __awaiter7(this, void 0, void 0, function () {
				var code,
					currentUrlPathname,
					redirectSignInPathname,
					oAuthTokenEndpoint,
					client_id,
					redirect_uri,
					code_verifier,
					oAuthTokenBody,
					body,
					_a,
					access_token,
					refresh_token,
					id_token,
					error3;
				return __generator7(this, function (_b) {
					switch (_b.label) {
						case 0:
							code = ((0, import_url.parse)(currentUrl).query || "")
								.split("&")
								.map(function (pairings) {
									return pairings.split("=");
								})
								.reduce(
									function (accum, _a2) {
										var _b2;
										var _c = __read12(_a2, 2),
											k = _c[0],
											v = _c[1];
										return __assign10(__assign10({}, accum), ((_b2 = {}), (_b2[k] = v), _b2));
									},
									{ code: void 0 }
								).code;
							currentUrlPathname = (0, import_url.parse)(currentUrl).pathname || "/";
							redirectSignInPathname =
								(0, import_url.parse)(this._config.redirectSignIn).pathname || "/";
							if (!code || currentUrlPathname !== redirectSignInPathname) {
								return [2];
							}
							oAuthTokenEndpoint = "https://" + this._config.domain + "/oauth2/token";
							dispatchAuthEvent("codeFlow", {}, "Retrieving tokens from " + oAuthTokenEndpoint);
							client_id = isCognitoHostedOpts(this._config)
								? this._cognitoClientId
								: this._config.clientID;
							redirect_uri = isCognitoHostedOpts(this._config)
								? this._config.redirectSignIn
								: this._config.redirectUri;
							code_verifier = getPKCE();
							oAuthTokenBody = __assign10(
								{
									grant_type: "authorization_code",
									code,
									client_id,
									redirect_uri,
								},
								code_verifier ? { code_verifier } : {}
							);
							logger11.debug(
								"Calling token endpoint: " + oAuthTokenEndpoint + " with",
								oAuthTokenBody
							);
							body = Object.entries(oAuthTokenBody)
								.map(function (_a2) {
									var _b2 = __read12(_a2, 2),
										k = _b2[0],
										v = _b2[1];
									return encodeURIComponent(k) + "=" + encodeURIComponent(v);
								})
								.join("&");
							return [
								4,
								fetch(oAuthTokenEndpoint, {
									method: "POST",
									headers: {
										"Content-Type": "application/x-www-form-urlencoded",
									},
									body,
								}),
							];
						case 1:
							return [4, _b.sent().json()];
						case 2:
							(_a = _b.sent()),
								(access_token = _a.access_token),
								(refresh_token = _a.refresh_token),
								(id_token = _a.id_token),
								(error3 = _a.error);
							if (error3) {
								throw new Error(error3);
							}
							return [
								2,
								{
									accessToken: access_token,
									refreshToken: refresh_token,
									idToken: id_token,
								},
							];
					}
				});
			});
		};
		OAuth2.prototype._handleImplicitFlow = function (currentUrl) {
			return __awaiter7(this, void 0, void 0, function () {
				var _a, id_token, access_token;
				return __generator7(this, function (_b) {
					(_a = ((0, import_url.parse)(currentUrl).hash || "#")
						.substr(1)
						.split("&")
						.map(function (pairings) {
							return pairings.split("=");
						})
						.reduce(
							function (accum, _a2) {
								var _b2;
								var _c = __read12(_a2, 2),
									k = _c[0],
									v = _c[1];
								return __assign10(__assign10({}, accum), ((_b2 = {}), (_b2[k] = v), _b2));
							},
							{
								id_token: void 0,
								access_token: void 0,
							}
						)),
						(id_token = _a.id_token),
						(access_token = _a.access_token);
					dispatchAuthEvent("implicitFlow", {}, "Got tokens from " + currentUrl);
					logger11.debug("Retrieving implicit tokens from " + currentUrl + " with");
					return [
						2,
						{
							accessToken: access_token,
							idToken: id_token,
							refreshToken: null,
						},
					];
				});
			});
		};
		OAuth2.prototype.handleAuthResponse = function (currentUrl) {
			return __awaiter7(this, void 0, void 0, function () {
				var urlParams, error3, error_description, state, _a, _b, e_1;
				return __generator7(this, function (_c) {
					switch (_c.label) {
						case 0:
							_c.trys.push([0, 5, , 6]);
							urlParams = currentUrl
								? __assign10(
										__assign10(
											{},
											((0, import_url.parse)(currentUrl).hash || "#")
												.substr(1)
												.split("&")
												.map(function (entry) {
													return entry.split("=");
												})
												.reduce(function (acc, _a2) {
													var _b2 = __read12(_a2, 2),
														k = _b2[0],
														v = _b2[1];
													return (acc[k] = v), acc;
												}, {})
										),
										((0, import_url.parse)(currentUrl).query || "")
											.split("&")
											.map(function (entry) {
												return entry.split("=");
											})
											.reduce(function (acc, _a2) {
												var _b2 = __read12(_a2, 2),
													k = _b2[0],
													v = _b2[1];
												return (acc[k] = v), acc;
											}, {})
								  )
								: {};
							(error3 = urlParams.error), (error_description = urlParams.error_description);
							if (error3) {
								throw new Error(error_description);
							}
							state = this._validateState(urlParams);
							logger11.debug("Starting " + this._config.responseType + " flow with " + currentUrl);
							if (!(this._config.responseType === "code")) return [3, 2];
							_a = [{}];
							return [4, this._handleCodeFlow(currentUrl)];
						case 1:
							return [
								2,
								__assign10.apply(void 0, [
									__assign10.apply(void 0, _a.concat([_c.sent()])),
									{ state },
								]),
							];
						case 2:
							_b = [{}];
							return [4, this._handleImplicitFlow(currentUrl)];
						case 3:
							return [
								2,
								__assign10.apply(void 0, [
									__assign10.apply(void 0, _b.concat([_c.sent()])),
									{ state },
								]),
							];
						case 4:
							return [3, 6];
						case 5:
							e_1 = _c.sent();
							logger11.error("Error handling auth response.", e_1);
							throw e_1;
						case 6:
							return [2];
					}
				});
			});
		};
		OAuth2.prototype._validateState = function (urlParams) {
			if (!urlParams) {
				return;
			}
			var savedState = getState();
			var returnedState = urlParams.state;
			if (savedState && savedState !== returnedState) {
				throw new Error("Invalid state in OAuth flow");
			}
			return returnedState;
		};
		OAuth2.prototype.signOut = function () {
			return __awaiter7(this, void 0, void 0, function () {
				var oAuthLogoutEndpoint, client_id, signout_uri;
				return __generator7(this, function (_a) {
					oAuthLogoutEndpoint = "https://" + this._config.domain + "/logout?";
					client_id = isCognitoHostedOpts(this._config)
						? this._cognitoClientId
						: this._config.oauth.clientID;
					signout_uri = isCognitoHostedOpts(this._config)
						? this._config.redirectSignOut
						: this._config.returnTo;
					oAuthLogoutEndpoint += Object.entries({
						client_id,
						logout_uri: encodeURIComponent(signout_uri),
					})
						.map(function (_a2) {
							var _b = __read12(_a2, 2),
								k = _b[0],
								v = _b[1];
							return k + "=" + v;
						})
						.join("&");
					dispatchAuthEvent(
						"oAuthSignOut",
						{ oAuth: "signOut" },
						"Signing out from " + oAuthLogoutEndpoint
					);
					logger11.debug("Signing out from " + oAuthLogoutEndpoint);
					return [2, this._urlOpener(oAuthLogoutEndpoint, signout_uri)];
				});
			});
		};
		OAuth2.prototype._generateState = function (length) {
			var result = "";
			var i = length;
			var chars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
			for (; i > 0; --i) result += chars[Math.round(Math.random() * (chars.length - 1))];
			return result;
		};
		OAuth2.prototype._generateChallenge = function (code) {
			return this._base64URL((0, import_sha2562.default)(code));
		};
		OAuth2.prototype._base64URL = function (string) {
			return string
				.toString(import_enc_base642.default)
				.replace(/=/g, "")
				.replace(/\+/g, "-")
				.replace(/\//g, "_");
		};
		OAuth2.prototype._generateRandom = function (size) {
			var CHARSET = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~";
			var buffer = new Uint8Array(size);
			if (typeof window !== "undefined" && !!window.crypto) {
				window.crypto.getRandomValues(buffer);
			} else {
				for (var i = 0; i < size; i += 1) {
					buffer[i] = (Math.random() * CHARSET.length) | 0;
				}
			}
			return this._bufferToString(buffer);
		};
		OAuth2.prototype._bufferToString = function (buffer) {
			var CHARSET = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
			var state = [];
			for (var i = 0; i < buffer.byteLength; i += 1) {
				var index2 = buffer[i] % CHARSET.length;
				state.push(CHARSET[index2]);
			}
			return state.join("");
		};
		return OAuth2;
	})();
	var OAuth_default = OAuth;

	// ../../node_modules/@aws-amplify/auth/lib-esm/urlListener.js
	var urlListener_default = function (callback) {
		if (JS.browserOrNode().isBrowser && window.location) {
			var url = window.location.href;
			callback({ url });
		} else if (JS.browserOrNode().isNode) {
			(function () {});
		} else {
			throw new Error("Not supported");
		}
	};

	// ../../node_modules/@aws-amplify/auth/lib-esm/common/AuthErrorStrings.js
	var AuthErrorStrings;
	(function (AuthErrorStrings2) {
		AuthErrorStrings2["DEFAULT_MSG"] = "Authentication Error";
		AuthErrorStrings2["EMPTY_EMAIL"] = "Email cannot be empty";
		AuthErrorStrings2["EMPTY_PHONE"] = "Phone number cannot be empty";
		AuthErrorStrings2["EMPTY_USERNAME"] = "Username cannot be empty";
		AuthErrorStrings2["INVALID_USERNAME"] =
			"The username should either be a string or one of the sign in types";
		AuthErrorStrings2["EMPTY_PASSWORD"] = "Password cannot be empty";
		AuthErrorStrings2["EMPTY_CODE"] = "Confirmation code cannot be empty";
		AuthErrorStrings2["SIGN_UP_ERROR"] = "Error creating account";
		AuthErrorStrings2["NO_MFA"] = "No valid MFA method provided";
		AuthErrorStrings2["INVALID_MFA"] = "Invalid MFA type";
		AuthErrorStrings2["EMPTY_CHALLENGE"] = "Challenge response cannot be empty";
		AuthErrorStrings2["NO_USER_SESSION"] = "Failed to get the session because the user is empty";
		AuthErrorStrings2["NETWORK_ERROR"] = "Network Error";
		AuthErrorStrings2["DEVICE_CONFIG"] =
			"Device tracking has not been configured in this User Pool";
	})(AuthErrorStrings || (AuthErrorStrings = {}));

	// ../../node_modules/@aws-amplify/auth/lib-esm/Errors.js
	var __extends4 = (function () {
		var extendStatics = function (d, b) {
			extendStatics =
				Object.setPrototypeOf ||
				({ __proto__: [] } instanceof Array &&
					function (d2, b2) {
						d2.__proto__ = b2;
					}) ||
				function (d2, b2) {
					for (var p in b2) if (b2.hasOwnProperty(p)) d2[p] = b2[p];
				};
			return extendStatics(d, b);
		};
		return function (d, b) {
			extendStatics(d, b);
			function __() {
				this.constructor = d;
			}
			d.prototype = b === null ? Object.create(b) : ((__.prototype = b.prototype), new __());
		};
	})();
	var logger12 = new ConsoleLogger("AuthError");
	var AuthError = (function (_super) {
		__extends4(AuthError2, _super);
		function AuthError2(type) {
			var _this = this;
			var _a = authErrorMessages[type],
				message = _a.message,
				log2 = _a.log;
			_this = _super.call(this, message) || this;
			_this.constructor = AuthError2;
			Object.setPrototypeOf(_this, AuthError2.prototype);
			_this.name = "AuthError";
			_this.log = log2 || message;
			logger12.error(_this.log);
			return _this;
		}
		return AuthError2;
	})(Error);
	var NoUserPoolError = (function (_super) {
		__extends4(NoUserPoolError2, _super);
		function NoUserPoolError2(type) {
			var _this = _super.call(this, type) || this;
			_this.constructor = NoUserPoolError2;
			Object.setPrototypeOf(_this, NoUserPoolError2.prototype);
			_this.name = "NoUserPoolError";
			return _this;
		}
		return NoUserPoolError2;
	})(AuthError);
	var authErrorMessages = {
		noConfig: {
			message: AuthErrorStrings.DEFAULT_MSG,
			log: "\n            Error: Amplify has not been configured correctly.\n            This error is typically caused by one of the following scenarios:\n\n            1. Make sure you're passing the awsconfig object to Amplify.configure() in your app's entry point\n                See https://aws-amplify.github.io/docs/js/authentication#configure-your-app for more information\n            \n            2. There might be multiple conflicting versions of amplify packages in your node_modules.\n				Refer to our docs site for help upgrading Amplify packages (https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js)\n        ",
		},
		missingAuthConfig: {
			message: AuthErrorStrings.DEFAULT_MSG,
			log: "\n            Error: Amplify has not been configured correctly. \n            The configuration object is missing required auth properties.\n            This error is typically caused by one of the following scenarios:\n\n            1. Did you run `amplify push` after adding auth via `amplify add auth`?\n                See https://aws-amplify.github.io/docs/js/authentication#amplify-project-setup for more information\n\n            2. This could also be caused by multiple conflicting versions of amplify packages, see (https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js) for help upgrading Amplify packages.\n        ",
		},
		emptyUsername: {
			message: AuthErrorStrings.EMPTY_USERNAME,
		},
		invalidUsername: {
			message: AuthErrorStrings.INVALID_USERNAME,
		},
		emptyPassword: {
			message: AuthErrorStrings.EMPTY_PASSWORD,
		},
		emptyCode: {
			message: AuthErrorStrings.EMPTY_CODE,
		},
		signUpError: {
			message: AuthErrorStrings.SIGN_UP_ERROR,
			log: "The first parameter should either be non-null string or object",
		},
		noMFA: {
			message: AuthErrorStrings.NO_MFA,
		},
		invalidMFA: {
			message: AuthErrorStrings.INVALID_MFA,
		},
		emptyChallengeResponse: {
			message: AuthErrorStrings.EMPTY_CHALLENGE,
		},
		noUserSession: {
			message: AuthErrorStrings.NO_USER_SESSION,
		},
		deviceConfig: {
			message: AuthErrorStrings.DEVICE_CONFIG,
		},
		networkError: {
			message: AuthErrorStrings.NETWORK_ERROR,
		},
		default: {
			message: AuthErrorStrings.DEFAULT_MSG,
		},
	};

	// ../../node_modules/@aws-amplify/auth/lib-esm/Auth.js
	var __assign11 = function () {
		__assign11 =
			Object.assign ||
			function (t) {
				for (var s, i = 1, n = arguments.length; i < n; i++) {
					s = arguments[i];
					for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
				}
				return t;
			};
		return __assign11.apply(this, arguments);
	};
	var __awaiter8 = function (thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P
				? value
				: new P(function (resolve) {
						resolve(value);
				  });
		}
		return new (P || (P = Promise))(function (resolve, reject) {
			function fulfilled(value) {
				try {
					step(generator.next(value));
				} catch (e) {
					reject(e);
				}
			}
			function rejected(value) {
				try {
					step(generator["throw"](value));
				} catch (e) {
					reject(e);
				}
			}
			function step(result) {
				result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	var __generator8 = function (thisArg, body) {
		var _ = {
				label: 0,
				sent: function () {
					if (t[0] & 1) throw t[1];
					return t[1];
				},
				trys: [],
				ops: [],
			},
			f,
			y,
			t,
			g;
		return (
			(g = { next: verb(0), throw: verb(1), return: verb(2) }),
			typeof Symbol === "function" &&
				(g[Symbol.iterator] = function () {
					return this;
				}),
			g
		);
		function verb(n) {
			return function (v) {
				return step([n, v]);
			};
		}
		function step(op) {
			if (f) throw new TypeError("Generator is already executing.");
			while (_)
				try {
					if (
						((f = 1),
						y &&
							(t =
								op[0] & 2
									? y["return"]
									: op[0]
									? y["throw"] || ((t = y["return"]) && t.call(y), 0)
									: y.next) &&
							!(t = t.call(y, op[1])).done)
					)
						return t;
					if (((y = 0), t)) op = [op[0] & 2, t.value];
					switch (op[0]) {
						case 0:
						case 1:
							t = op;
							break;
						case 4:
							_.label++;
							return { value: op[1], done: false };
						case 5:
							_.label++;
							y = op[1];
							op = [0];
							continue;
						case 7:
							op = _.ops.pop();
							_.trys.pop();
							continue;
						default:
							if (
								!((t = _.trys), (t = t.length > 0 && t[t.length - 1])) &&
								(op[0] === 6 || op[0] === 2)
							) {
								_ = 0;
								continue;
							}
							if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
								_.label = op[1];
								break;
							}
							if (op[0] === 6 && _.label < t[1]) {
								_.label = t[1];
								t = op;
								break;
							}
							if (t && _.label < t[2]) {
								_.label = t[2];
								_.ops.push(op);
								break;
							}
							if (t[2]) _.ops.pop();
							_.trys.pop();
							continue;
					}
					op = body.call(thisArg, _);
				} catch (e) {
					op = [6, e];
					y = 0;
				} finally {
					f = t = 0;
				}
			if (op[0] & 5) throw op[1];
			return { value: op[0] ? op[1] : void 0, done: true };
		}
	};
	var __read13 = function (o, n) {
		var m = typeof Symbol === "function" && o[Symbol.iterator];
		if (!m) return o;
		var i = m.call(o),
			r,
			ar = [],
			e;
		try {
			while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
		} catch (error3) {
			e = { error: error3 };
		} finally {
			try {
				if (r && !r.done && (m = i["return"])) m.call(i);
			} finally {
				if (e) throw e.error;
			}
		}
		return ar;
	};
	var logger13 = new ConsoleLogger("AuthClass");
	var USER_ADMIN_SCOPE = "aws.cognito.signin.user.admin";
	var OAUTH_FLOW_MS_TIMEOUT = 10 * 1e3;
	var AMPLIFY_SYMBOL3 =
		typeof Symbol !== "undefined" && typeof Symbol.for === "function"
			? Symbol.for("amplify_default")
			: "@@amplify_default";
	var dispatchAuthEvent2 = function (event2, data, message) {
		Hub.dispatch("auth", { event: event2, data, message }, "Auth", AMPLIFY_SYMBOL3);
	};
	var MAX_DEVICES = 60;
	var AuthClass = (function () {
		function AuthClass2(config) {
			var _this = this;
			this.userPool = null;
			this.user = null;
			this.oAuthFlowInProgress = false;
			this.Credentials = Credentials2;
			this.wrapRefreshSessionCallback = function (callback) {
				var wrapped = function (error3, data) {
					if (data) {
						dispatchAuthEvent2("tokenRefresh", void 0, "New token retrieved");
					} else {
						dispatchAuthEvent2("tokenRefresh_failure", error3, "Failed to retrieve new token");
					}
					return callback(error3, data);
				};
				return wrapped;
			};
			this.configure(config);
			this.currentCredentials = this.currentCredentials.bind(this);
			this.currentUserCredentials = this.currentUserCredentials.bind(this);
			Hub.listen("auth", function (_a) {
				var payload = _a.payload;
				var event2 = payload.event;
				switch (event2) {
					case "signIn":
						_this._storage.setItem("amplify-signin-with-hostedUI", "false");
						break;
					case "signOut":
						_this._storage.removeItem("amplify-signin-with-hostedUI");
						break;
					case "cognitoHostedUI":
						_this._storage.setItem("amplify-signin-with-hostedUI", "true");
						break;
				}
			});
		}
		AuthClass2.prototype.getModuleName = function () {
			return "Auth";
		};
		AuthClass2.prototype.configure = function (config) {
			var _this = this;
			if (!config) return this._config || {};
			logger13.debug("configure Auth");
			var conf = Object.assign({}, this._config, Parser.parseMobilehubConfig(config).Auth, config);
			this._config = conf;
			var _a = this._config,
				userPoolId = _a.userPoolId,
				userPoolWebClientId = _a.userPoolWebClientId,
				cookieStorage = _a.cookieStorage,
				oauth = _a.oauth,
				region = _a.region,
				identityPoolId = _a.identityPoolId,
				mandatorySignIn = _a.mandatorySignIn,
				refreshHandlers = _a.refreshHandlers,
				identityPoolRegion = _a.identityPoolRegion,
				clientMetadata = _a.clientMetadata,
				endpoint = _a.endpoint;
			if (!this._config.storage) {
				if (cookieStorage) this._storage = new CookieStorage(cookieStorage);
				else {
					this._storage = config.ssr ? new UniversalStorage() : new StorageHelper().getStorage();
				}
			} else {
				if (!this._isValidAuthStorage(this._config.storage)) {
					logger13.error("The storage in the Auth config is not valid!");
					throw new Error("Empty storage object");
				}
				this._storage = this._config.storage;
			}
			this._storageSync = Promise.resolve();
			if (typeof this._storage["sync"] === "function") {
				this._storageSync = this._storage["sync"]();
			}
			if (userPoolId) {
				var userPoolData = {
					UserPoolId: userPoolId,
					ClientId: userPoolWebClientId,
					endpoint,
				};
				userPoolData.Storage = this._storage;
				this.userPool = new CognitoUserPool(userPoolData, this.wrapRefreshSessionCallback);
			}
			this.Credentials.configure({
				mandatorySignIn,
				region: identityPoolRegion || region,
				userPoolId,
				identityPoolId,
				refreshHandlers,
				storage: this._storage,
			});
			var cognitoHostedUIConfig = oauth
				? isCognitoHostedOpts(this._config.oauth)
					? oauth
					: oauth.awsCognito
				: void 0;
			if (cognitoHostedUIConfig) {
				var cognitoAuthParams = Object.assign(
					{
						cognitoClientId: userPoolWebClientId,
						UserPoolId: userPoolId,
						domain: cognitoHostedUIConfig["domain"],
						scopes: cognitoHostedUIConfig["scope"],
						redirectSignIn: cognitoHostedUIConfig["redirectSignIn"],
						redirectSignOut: cognitoHostedUIConfig["redirectSignOut"],
						responseType: cognitoHostedUIConfig["responseType"],
						Storage: this._storage,
						urlOpener: cognitoHostedUIConfig["urlOpener"],
						clientMetadata,
					},
					cognitoHostedUIConfig["options"]
				);
				this._oAuthHandler = new OAuth_default({
					scopes: cognitoAuthParams.scopes,
					config: cognitoAuthParams,
					cognitoClientId: cognitoAuthParams.cognitoClientId,
				});
				var usedResponseUrls_1 = {};
				urlListener_default(function (_a2) {
					var url = _a2.url;
					if (usedResponseUrls_1[url]) {
						return;
					}
					usedResponseUrls_1[url] = true;
					_this._handleAuthResponse(url);
				});
			}
			dispatchAuthEvent2("configured", null, "The Auth category has been configured successfully");
			return this._config;
		};
		AuthClass2.prototype.signUp = function (params) {
			var _this = this;
			var restOfAttrs = [];
			for (var _i = 1; _i < arguments.length; _i++) {
				restOfAttrs[_i - 1] = arguments[_i];
			}
			if (!this.userPool) {
				return this.rejectNoUserPool();
			}
			var username = null;
			var password = null;
			var attributes = [];
			var validationData = null;
			var clientMetadata;
			if (params && typeof params === "string") {
				username = params;
				password = restOfAttrs ? restOfAttrs[0] : null;
				var email = restOfAttrs ? restOfAttrs[1] : null;
				var phone_number = restOfAttrs ? restOfAttrs[2] : null;
				if (email) attributes.push(new CognitoUserAttribute({ Name: "email", Value: email }));
				if (phone_number)
					attributes.push(
						new CognitoUserAttribute({
							Name: "phone_number",
							Value: phone_number,
						})
					);
			} else if (params && typeof params === "object") {
				username = params["username"];
				password = params["password"];
				if (params && params.clientMetadata) {
					clientMetadata = params.clientMetadata;
				} else if (this._config.clientMetadata) {
					clientMetadata = this._config.clientMetadata;
				}
				var attrs_1 = params["attributes"];
				if (attrs_1) {
					Object.keys(attrs_1).map(function (key) {
						attributes.push(new CognitoUserAttribute({ Name: key, Value: attrs_1[key] }));
					});
				}
				var validationDataObject_1 = params["validationData"];
				if (validationDataObject_1) {
					validationData = [];
					Object.keys(validationDataObject_1).map(function (key) {
						validationData.push(
							new CognitoUserAttribute({
								Name: key,
								Value: validationDataObject_1[key],
							})
						);
					});
				}
			} else {
				return this.rejectAuthError(AuthErrorTypes.SignUpError);
			}
			if (!username) {
				return this.rejectAuthError(AuthErrorTypes.EmptyUsername);
			}
			if (!password) {
				return this.rejectAuthError(AuthErrorTypes.EmptyPassword);
			}
			logger13.debug("signUp attrs:", attributes);
			logger13.debug("signUp validation data:", validationData);
			return new Promise(function (resolve, reject) {
				_this.userPool.signUp(
					username,
					password,
					attributes,
					validationData,
					function (err, data) {
						if (err) {
							dispatchAuthEvent2("signUp_failure", err, username + " failed to signup");
							reject(err);
						} else {
							dispatchAuthEvent2("signUp", data, username + " has signed up successfully");
							resolve(data);
						}
					},
					clientMetadata
				);
			});
		};
		AuthClass2.prototype.confirmSignUp = function (username, code, options) {
			if (!this.userPool) {
				return this.rejectNoUserPool();
			}
			if (!username) {
				return this.rejectAuthError(AuthErrorTypes.EmptyUsername);
			}
			if (!code) {
				return this.rejectAuthError(AuthErrorTypes.EmptyCode);
			}
			var user = this.createCognitoUser(username);
			var forceAliasCreation =
				options && typeof options.forceAliasCreation === "boolean"
					? options.forceAliasCreation
					: true;
			var clientMetadata;
			if (options && options.clientMetadata) {
				clientMetadata = options.clientMetadata;
			} else if (this._config.clientMetadata) {
				clientMetadata = this._config.clientMetadata;
			}
			return new Promise(function (resolve, reject) {
				user.confirmRegistration(
					code,
					forceAliasCreation,
					function (err, data) {
						if (err) {
							reject(err);
						} else {
							resolve(data);
						}
					},
					clientMetadata
				);
			});
		};
		AuthClass2.prototype.resendSignUp = function (username, clientMetadata) {
			if (clientMetadata === void 0) {
				clientMetadata = this._config.clientMetadata;
			}
			if (!this.userPool) {
				return this.rejectNoUserPool();
			}
			if (!username) {
				return this.rejectAuthError(AuthErrorTypes.EmptyUsername);
			}
			var user = this.createCognitoUser(username);
			return new Promise(function (resolve, reject) {
				user.resendConfirmationCode(function (err, data) {
					if (err) {
						reject(err);
					} else {
						resolve(data);
					}
				}, clientMetadata);
			});
		};
		AuthClass2.prototype.signIn = function (usernameOrSignInOpts, pw, clientMetadata) {
			if (clientMetadata === void 0) {
				clientMetadata = this._config.clientMetadata;
			}
			if (!this.userPool) {
				return this.rejectNoUserPool();
			}
			var username = null;
			var password = null;
			var validationData = {};
			if (typeof usernameOrSignInOpts === "string") {
				username = usernameOrSignInOpts;
				password = pw;
			} else if (isUsernamePasswordOpts(usernameOrSignInOpts)) {
				if (typeof pw !== "undefined") {
					logger13.warn("The password should be defined under the first parameter object!");
				}
				username = usernameOrSignInOpts.username;
				password = usernameOrSignInOpts.password;
				validationData = usernameOrSignInOpts.validationData;
			} else {
				return this.rejectAuthError(AuthErrorTypes.InvalidUsername);
			}
			if (!username) {
				return this.rejectAuthError(AuthErrorTypes.EmptyUsername);
			}
			var authDetails = new AuthenticationDetails({
				Username: username,
				Password: password,
				ValidationData: validationData,
				ClientMetadata: clientMetadata,
			});
			if (password) {
				return this.signInWithPassword(authDetails);
			} else {
				return this.signInWithoutPassword(authDetails);
			}
		};
		AuthClass2.prototype.authCallbacks = function (user, resolve, reject) {
			var _this = this;
			var that = this;
			return {
				onSuccess: function (session) {
					return __awaiter8(_this, void 0, void 0, function () {
						var cred, e_1, currentUser, e_2;
						return __generator8(this, function (_a) {
							switch (_a.label) {
								case 0:
									logger13.debug(session);
									delete user["challengeName"];
									delete user["challengeParam"];
									_a.label = 1;
								case 1:
									_a.trys.push([1, 4, 5, 9]);
									return [4, this.Credentials.clear()];
								case 2:
									_a.sent();
									return [4, this.Credentials.set(session, "session")];
								case 3:
									cred = _a.sent();
									logger13.debug("succeed to get cognito credentials", cred);
									return [3, 9];
								case 4:
									e_1 = _a.sent();
									logger13.debug("cannot get cognito credentials", e_1);
									return [3, 9];
								case 5:
									_a.trys.push([5, 7, , 8]);
									return [4, this.currentUserPoolUser()];
								case 6:
									currentUser = _a.sent();
									that.user = currentUser;
									dispatchAuthEvent2(
										"signIn",
										currentUser,
										"A user " + user.getUsername() + " has been signed in"
									);
									resolve(currentUser);
									return [3, 8];
								case 7:
									e_2 = _a.sent();
									logger13.error("Failed to get the signed in user", e_2);
									reject(e_2);
									return [3, 8];
								case 8:
									return [7];
								case 9:
									return [2];
							}
						});
					});
				},
				onFailure: function (err) {
					logger13.debug("signIn failure", err);
					dispatchAuthEvent2("signIn_failure", err, user.getUsername() + " failed to signin");
					reject(err);
				},
				customChallenge: function (challengeParam) {
					logger13.debug("signIn custom challenge answer required");
					user["challengeName"] = "CUSTOM_CHALLENGE";
					user["challengeParam"] = challengeParam;
					resolve(user);
				},
				mfaRequired: function (challengeName, challengeParam) {
					logger13.debug("signIn MFA required");
					user["challengeName"] = challengeName;
					user["challengeParam"] = challengeParam;
					resolve(user);
				},
				mfaSetup: function (challengeName, challengeParam) {
					logger13.debug("signIn mfa setup", challengeName);
					user["challengeName"] = challengeName;
					user["challengeParam"] = challengeParam;
					resolve(user);
				},
				newPasswordRequired: function (userAttributes, requiredAttributes) {
					logger13.debug("signIn new password");
					user["challengeName"] = "NEW_PASSWORD_REQUIRED";
					user["challengeParam"] = {
						userAttributes,
						requiredAttributes,
					};
					resolve(user);
				},
				totpRequired: function (challengeName, challengeParam) {
					logger13.debug("signIn totpRequired");
					user["challengeName"] = challengeName;
					user["challengeParam"] = challengeParam;
					resolve(user);
				},
				selectMFAType: function (challengeName, challengeParam) {
					logger13.debug("signIn selectMFAType", challengeName);
					user["challengeName"] = challengeName;
					user["challengeParam"] = challengeParam;
					resolve(user);
				},
			};
		};
		AuthClass2.prototype.signInWithPassword = function (authDetails) {
			var _this = this;
			if (this.pendingSignIn) {
				throw new Error("Pending sign-in attempt already in progress");
			}
			var user = this.createCognitoUser(authDetails.getUsername());
			this.pendingSignIn = new Promise(function (resolve, reject) {
				user.authenticateUser(
					authDetails,
					_this.authCallbacks(
						user,
						function (value) {
							_this.pendingSignIn = null;
							resolve(value);
						},
						function (error3) {
							_this.pendingSignIn = null;
							reject(error3);
						}
					)
				);
			});
			return this.pendingSignIn;
		};
		AuthClass2.prototype.signInWithoutPassword = function (authDetails) {
			var _this = this;
			var user = this.createCognitoUser(authDetails.getUsername());
			user.setAuthenticationFlowType("CUSTOM_AUTH");
			return new Promise(function (resolve, reject) {
				user.initiateAuth(authDetails, _this.authCallbacks(user, resolve, reject));
			});
		};
		AuthClass2.prototype.getMFAOptions = function (user) {
			return new Promise(function (res, rej) {
				user.getMFAOptions(function (err, mfaOptions) {
					if (err) {
						logger13.debug("get MFA Options failed", err);
						rej(err);
						return;
					}
					logger13.debug("get MFA options success", mfaOptions);
					res(mfaOptions);
					return;
				});
			});
		};
		AuthClass2.prototype.getPreferredMFA = function (user, params) {
			var _this = this;
			var that = this;
			return new Promise(function (res, rej) {
				var clientMetadata = _this._config.clientMetadata;
				var bypassCache = params ? params.bypassCache : false;
				user.getUserData(
					function (err, data) {
						if (err) {
							logger13.debug("getting preferred mfa failed", err);
							rej(err);
							return;
						}
						var mfaType = that._getMfaTypeFromUserData(data);
						if (!mfaType) {
							rej("invalid MFA Type");
							return;
						} else {
							res(mfaType);
							return;
						}
					},
					{ bypassCache, clientMetadata }
				);
			});
		};
		AuthClass2.prototype._getMfaTypeFromUserData = function (data) {
			var ret = null;
			var preferredMFA = data.PreferredMfaSetting;
			if (preferredMFA) {
				ret = preferredMFA;
			} else {
				var mfaList = data.UserMFASettingList;
				if (!mfaList) {
					var MFAOptions = data.MFAOptions;
					if (MFAOptions) {
						ret = "SMS_MFA";
					} else {
						ret = "NOMFA";
					}
				} else if (mfaList.length === 0) {
					ret = "NOMFA";
				} else {
					logger13.debug("invalid case for getPreferredMFA", data);
				}
			}
			return ret;
		};
		AuthClass2.prototype._getUserData = function (user, params) {
			return new Promise(function (res, rej) {
				user.getUserData(function (err, data) {
					if (err) {
						logger13.debug("getting user data failed", err);
						rej(err);
						return;
					} else {
						res(data);
						return;
					}
				}, params);
			});
		};
		AuthClass2.prototype.setPreferredMFA = function (user, mfaMethod) {
			return __awaiter8(this, void 0, void 0, function () {
				var clientMetadata,
					userData,
					smsMfaSettings,
					totpMfaSettings,
					_a,
					mfaList,
					currentMFAType,
					that;
				return __generator8(this, function (_b) {
					switch (_b.label) {
						case 0:
							clientMetadata = this._config.clientMetadata;
							return [
								4,
								this._getUserData(user, {
									bypassCache: true,
									clientMetadata,
								}),
							];
						case 1:
							userData = _b.sent();
							smsMfaSettings = null;
							totpMfaSettings = null;
							_a = mfaMethod;
							switch (_a) {
								case "TOTP":
									return [3, 2];
								case "SMS":
									return [3, 3];
								case "NOMFA":
									return [3, 4];
							}
							return [3, 6];
						case 2:
							totpMfaSettings = {
								PreferredMfa: true,
								Enabled: true,
							};
							return [3, 7];
						case 3:
							smsMfaSettings = {
								PreferredMfa: true,
								Enabled: true,
							};
							return [3, 7];
						case 4:
							mfaList = userData["UserMFASettingList"];
							return [4, this._getMfaTypeFromUserData(userData)];
						case 5:
							currentMFAType = _b.sent();
							if (currentMFAType === "NOMFA") {
								return [2, Promise.resolve("No change for mfa type")];
							} else if (currentMFAType === "SMS_MFA") {
								smsMfaSettings = {
									PreferredMfa: false,
									Enabled: false,
								};
							} else if (currentMFAType === "SOFTWARE_TOKEN_MFA") {
								totpMfaSettings = {
									PreferredMfa: false,
									Enabled: false,
								};
							} else {
								return [2, this.rejectAuthError(AuthErrorTypes.InvalidMFA)];
							}
							if (mfaList && mfaList.length !== 0) {
								mfaList.forEach(function (mfaType) {
									if (mfaType === "SMS_MFA") {
										smsMfaSettings = {
											PreferredMfa: false,
											Enabled: false,
										};
									} else if (mfaType === "SOFTWARE_TOKEN_MFA") {
										totpMfaSettings = {
											PreferredMfa: false,
											Enabled: false,
										};
									}
								});
							}
							return [3, 7];
						case 6:
							logger13.debug("no validmfa method provided");
							return [2, this.rejectAuthError(AuthErrorTypes.NoMFA)];
						case 7:
							that = this;
							return [
								2,
								new Promise(function (res, rej) {
									user.setUserMfaPreference(
										smsMfaSettings,
										totpMfaSettings,
										function (err, result) {
											if (err) {
												logger13.debug("Set user mfa preference error", err);
												return rej(err);
											}
											logger13.debug("Set user mfa success", result);
											logger13.debug("Caching the latest user data into local");
											user.getUserData(
												function (err2, data) {
													if (err2) {
														logger13.debug("getting user data failed", err2);
														return rej(err2);
													} else {
														return res(result);
													}
												},
												{
													bypassCache: true,
													clientMetadata,
												}
											);
										}
									);
								}),
							];
					}
				});
			});
		};
		AuthClass2.prototype.disableSMS = function (user) {
			return new Promise(function (res, rej) {
				user.disableMFA(function (err, data) {
					if (err) {
						logger13.debug("disable mfa failed", err);
						rej(err);
						return;
					}
					logger13.debug("disable mfa succeed", data);
					res(data);
					return;
				});
			});
		};
		AuthClass2.prototype.enableSMS = function (user) {
			return new Promise(function (res, rej) {
				user.enableMFA(function (err, data) {
					if (err) {
						logger13.debug("enable mfa failed", err);
						rej(err);
						return;
					}
					logger13.debug("enable mfa succeed", data);
					res(data);
					return;
				});
			});
		};
		AuthClass2.prototype.setupTOTP = function (user) {
			return new Promise(function (res, rej) {
				user.associateSoftwareToken({
					onFailure: function (err) {
						logger13.debug("associateSoftwareToken failed", err);
						rej(err);
						return;
					},
					associateSecretCode: function (secretCode) {
						logger13.debug("associateSoftwareToken sucess", secretCode);
						res(secretCode);
						return;
					},
				});
			});
		};
		AuthClass2.prototype.verifyTotpToken = function (user, challengeAnswer) {
			logger13.debug("verification totp token", user, challengeAnswer);
			return new Promise(function (res, rej) {
				user.verifySoftwareToken(challengeAnswer, "My TOTP device", {
					onFailure: function (err) {
						logger13.debug("verifyTotpToken failed", err);
						rej(err);
						return;
					},
					onSuccess: function (data) {
						dispatchAuthEvent2(
							"signIn",
							user,
							"A user " + user.getUsername() + " has been signed in"
						);
						logger13.debug("verifyTotpToken success", data);
						res(data);
						return;
					},
				});
			});
		};
		AuthClass2.prototype.confirmSignIn = function (user, code, mfaType, clientMetadata) {
			var _this = this;
			if (clientMetadata === void 0) {
				clientMetadata = this._config.clientMetadata;
			}
			if (!code) {
				return this.rejectAuthError(AuthErrorTypes.EmptyCode);
			}
			var that = this;
			return new Promise(function (resolve, reject) {
				user.sendMFACode(
					code,
					{
						onSuccess: function (session) {
							return __awaiter8(_this, void 0, void 0, function () {
								var cred, e_3;
								return __generator8(this, function (_a) {
									switch (_a.label) {
										case 0:
											logger13.debug(session);
											_a.label = 1;
										case 1:
											_a.trys.push([1, 4, 5, 6]);
											return [4, this.Credentials.clear()];
										case 2:
											_a.sent();
											return [4, this.Credentials.set(session, "session")];
										case 3:
											cred = _a.sent();
											logger13.debug("succeed to get cognito credentials", cred);
											return [3, 6];
										case 4:
											e_3 = _a.sent();
											logger13.debug("cannot get cognito credentials", e_3);
											return [3, 6];
										case 5:
											that.user = user;
											dispatchAuthEvent2(
												"signIn",
												user,
												"A user " + user.getUsername() + " has been signed in"
											);
											resolve(user);
											return [7];
										case 6:
											return [2];
									}
								});
							});
						},
						onFailure: function (err) {
							logger13.debug("confirm signIn failure", err);
							reject(err);
						},
					},
					mfaType,
					clientMetadata
				);
			});
		};
		AuthClass2.prototype.completeNewPassword = function (
			user,
			password,
			requiredAttributes,
			clientMetadata
		) {
			var _this = this;
			if (requiredAttributes === void 0) {
				requiredAttributes = {};
			}
			if (clientMetadata === void 0) {
				clientMetadata = this._config.clientMetadata;
			}
			if (!password) {
				return this.rejectAuthError(AuthErrorTypes.EmptyPassword);
			}
			var that = this;
			return new Promise(function (resolve, reject) {
				user.completeNewPasswordChallenge(
					password,
					requiredAttributes,
					{
						onSuccess: function (session) {
							return __awaiter8(_this, void 0, void 0, function () {
								var cred, e_4;
								return __generator8(this, function (_a) {
									switch (_a.label) {
										case 0:
											logger13.debug(session);
											_a.label = 1;
										case 1:
											_a.trys.push([1, 4, 5, 6]);
											return [4, this.Credentials.clear()];
										case 2:
											_a.sent();
											return [4, this.Credentials.set(session, "session")];
										case 3:
											cred = _a.sent();
											logger13.debug("succeed to get cognito credentials", cred);
											return [3, 6];
										case 4:
											e_4 = _a.sent();
											logger13.debug("cannot get cognito credentials", e_4);
											return [3, 6];
										case 5:
											that.user = user;
											dispatchAuthEvent2(
												"signIn",
												user,
												"A user " + user.getUsername() + " has been signed in"
											);
											resolve(user);
											return [7];
										case 6:
											return [2];
									}
								});
							});
						},
						onFailure: function (err) {
							logger13.debug("completeNewPassword failure", err);
							dispatchAuthEvent2(
								"completeNewPassword_failure",
								err,
								_this.user + " failed to complete the new password flow"
							);
							reject(err);
						},
						mfaRequired: function (challengeName, challengeParam) {
							logger13.debug("signIn MFA required");
							user["challengeName"] = challengeName;
							user["challengeParam"] = challengeParam;
							resolve(user);
						},
						mfaSetup: function (challengeName, challengeParam) {
							logger13.debug("signIn mfa setup", challengeName);
							user["challengeName"] = challengeName;
							user["challengeParam"] = challengeParam;
							resolve(user);
						},
						totpRequired: function (challengeName, challengeParam) {
							logger13.debug("signIn mfa setup", challengeName);
							user["challengeName"] = challengeName;
							user["challengeParam"] = challengeParam;
							resolve(user);
						},
					},
					clientMetadata
				);
			});
		};
		AuthClass2.prototype.sendCustomChallengeAnswer = function (
			user,
			challengeResponses,
			clientMetadata
		) {
			var _this = this;
			if (clientMetadata === void 0) {
				clientMetadata = this._config.clientMetadata;
			}
			if (!this.userPool) {
				return this.rejectNoUserPool();
			}
			if (!challengeResponses) {
				return this.rejectAuthError(AuthErrorTypes.EmptyChallengeResponse);
			}
			var that = this;
			return new Promise(function (resolve, reject) {
				user.sendCustomChallengeAnswer(
					challengeResponses,
					_this.authCallbacks(user, resolve, reject),
					clientMetadata
				);
			});
		};
		AuthClass2.prototype.deleteUserAttributes = function (user, attributeNames) {
			var that = this;
			return new Promise(function (resolve, reject) {
				that.userSession(user).then(function (session) {
					user.deleteAttributes(attributeNames, function (err, result) {
						if (err) {
							return reject(err);
						} else {
							return resolve(result);
						}
					});
				});
			});
		};
		AuthClass2.prototype.updateUserAttributes = function (user, attributes, clientMetadata) {
			if (clientMetadata === void 0) {
				clientMetadata = this._config.clientMetadata;
			}
			var attributeList = [];
			var that = this;
			return new Promise(function (resolve, reject) {
				that.userSession(user).then(function (session) {
					for (var key in attributes) {
						if (key !== "sub" && key.indexOf("_verified") < 0) {
							var attr = {
								Name: key,
								Value: attributes[key],
							};
							attributeList.push(attr);
						}
					}
					user.updateAttributes(
						attributeList,
						function (err, result) {
							if (err) {
								return reject(err);
							} else {
								return resolve(result);
							}
						},
						clientMetadata
					);
				});
			});
		};
		AuthClass2.prototype.userAttributes = function (user) {
			var _this = this;
			return new Promise(function (resolve, reject) {
				_this.userSession(user).then(function (session) {
					user.getUserAttributes(function (err, attributes) {
						if (err) {
							reject(err);
						} else {
							resolve(attributes);
						}
					});
				});
			});
		};
		AuthClass2.prototype.verifiedContact = function (user) {
			var that = this;
			return this.userAttributes(user).then(function (attributes) {
				var attrs = that.attributesToObject(attributes);
				var unverified = {};
				var verified = {};
				if (attrs["email"]) {
					if (attrs["email_verified"]) {
						verified["email"] = attrs["email"];
					} else {
						unverified["email"] = attrs["email"];
					}
				}
				if (attrs["phone_number"]) {
					if (attrs["phone_number_verified"]) {
						verified["phone_number"] = attrs["phone_number"];
					} else {
						unverified["phone_number"] = attrs["phone_number"];
					}
				}
				return {
					verified,
					unverified,
				};
			});
		};
		AuthClass2.prototype.currentUserPoolUser = function (params) {
			var _this = this;
			if (!this.userPool) {
				return this.rejectNoUserPool();
			}
			return new Promise(function (res, rej) {
				_this._storageSync
					.then(function () {
						return __awaiter8(_this, void 0, void 0, function () {
							var user, clientMetadata;
							var _this2 = this;
							return __generator8(this, function (_a) {
								switch (_a.label) {
									case 0:
										if (!this.isOAuthInProgress()) return [3, 2];
										logger13.debug("OAuth signIn in progress, waiting for resolution...");
										return [
											4,
											new Promise(function (res2) {
												var timeoutId = setTimeout(function () {
													logger13.debug("OAuth signIn in progress timeout");
													Hub.remove("auth", hostedUISignCallback);
													res2();
												}, OAUTH_FLOW_MS_TIMEOUT);
												Hub.listen("auth", hostedUISignCallback);
												function hostedUISignCallback(_a2) {
													var payload = _a2.payload;
													var event2 = payload.event;
													if (
														event2 === "cognitoHostedUI" ||
														event2 === "cognitoHostedUI_failure"
													) {
														logger13.debug("OAuth signIn resolved: " + event2);
														clearTimeout(timeoutId);
														Hub.remove("auth", hostedUISignCallback);
														res2();
													}
												}
											}),
										];
									case 1:
										_a.sent();
										_a.label = 2;
									case 2:
										user = this.userPool.getCurrentUser();
										if (!user) {
											logger13.debug("Failed to get user from user pool");
											rej("No current user");
											return [2];
										}
										clientMetadata = this._config.clientMetadata;
										user.getSession(
											function (err, session) {
												return __awaiter8(_this2, void 0, void 0, function () {
													var bypassCache, clientMetadata2, _a2, scope;
													var _this3 = this;
													return __generator8(this, function (_b) {
														switch (_b.label) {
															case 0:
																if (err) {
																	logger13.debug("Failed to get the user session", err);
																	rej(err);
																	return [2];
																}
																bypassCache = params ? params.bypassCache : false;
																if (!bypassCache) return [3, 2];
																return [4, this.Credentials.clear()];
															case 1:
																_b.sent();
																_b.label = 2;
															case 2:
																clientMetadata2 = this._config.clientMetadata;
																(_a2 = session.getAccessToken().decodePayload().scope),
																	(scope = _a2 === void 0 ? "" : _a2);
																if (scope.split(" ").includes(USER_ADMIN_SCOPE)) {
																	user.getUserData(
																		function (err2, data) {
																			if (err2) {
																				logger13.debug("getting user data failed", err2);
																				if (
																					err2.message === "User is disabled." ||
																					err2.message === "User does not exist." ||
																					err2.message === "Access Token has been revoked"
																				) {
																					rej(err2);
																				} else {
																					res(user);
																				}
																				return;
																			}
																			var preferredMFA = data.PreferredMfaSetting || "NOMFA";
																			var attributeList = [];
																			for (var i = 0; i < data.UserAttributes.length; i++) {
																				var attribute = {
																					Name: data.UserAttributes[i].Name,
																					Value: data.UserAttributes[i].Value,
																				};
																				var userAttribute = new CognitoUserAttribute(attribute);
																				attributeList.push(userAttribute);
																			}
																			var attributes = _this3.attributesToObject(attributeList);
																			Object.assign(user, { attributes, preferredMFA });
																			return res(user);
																		},
																		{ bypassCache, clientMetadata: clientMetadata2 }
																	);
																} else {
																	logger13.debug(
																		"Unable to get the user data because the " +
																			USER_ADMIN_SCOPE +
																			" is not in the scopes of the access token"
																	);
																	return [2, res(user)];
																}
																return [2];
														}
													});
												});
											},
											{ clientMetadata }
										);
										return [2];
								}
							});
						});
					})
					.catch(function (e) {
						logger13.debug("Failed to sync cache info into memory", e);
						return rej(e);
					});
			});
		};
		AuthClass2.prototype.isOAuthInProgress = function () {
			return this.oAuthFlowInProgress;
		};
		AuthClass2.prototype.currentAuthenticatedUser = function (params) {
			return __awaiter8(this, void 0, void 0, function () {
				var federatedUser, e_5, federatedInfo, user, e_6;
				return __generator8(this, function (_a) {
					switch (_a.label) {
						case 0:
							logger13.debug("getting current authenticated user");
							federatedUser = null;
							_a.label = 1;
						case 1:
							_a.trys.push([1, 3, , 4]);
							return [4, this._storageSync];
						case 2:
							_a.sent();
							return [3, 4];
						case 3:
							e_5 = _a.sent();
							logger13.debug("Failed to sync cache info into memory", e_5);
							throw e_5;
						case 4:
							try {
								federatedInfo = JSON.parse(this._storage.getItem("aws-amplify-federatedInfo"));
								if (federatedInfo) {
									federatedUser = __assign11(__assign11({}, federatedInfo.user), {
										token: federatedInfo.token,
									});
								}
							} catch (e) {
								logger13.debug("cannot load federated user from auth storage");
							}
							if (!federatedUser) return [3, 5];
							this.user = federatedUser;
							logger13.debug("get current authenticated federated user", this.user);
							return [2, this.user];
						case 5:
							logger13.debug("get current authenticated userpool user");
							user = null;
							_a.label = 6;
						case 6:
							_a.trys.push([6, 8, , 9]);
							return [4, this.currentUserPoolUser(params)];
						case 7:
							user = _a.sent();
							return [3, 9];
						case 8:
							e_6 = _a.sent();
							if (e_6 === "No userPool") {
								logger13.error(
									"Cannot get the current user because the user pool is missing. Please make sure the Auth module is configured with a valid Cognito User Pool ID"
								);
							}
							logger13.debug("The user is not authenticated by the error", e_6);
							return [2, Promise.reject("The user is not authenticated")];
						case 9:
							this.user = user;
							return [2, this.user];
					}
				});
			});
		};
		AuthClass2.prototype.currentSession = function () {
			var that = this;
			logger13.debug("Getting current session");
			if (!this.userPool) {
				return Promise.reject();
			}
			return new Promise(function (res, rej) {
				that
					.currentUserPoolUser()
					.then(function (user) {
						that
							.userSession(user)
							.then(function (session) {
								res(session);
								return;
							})
							.catch(function (e) {
								logger13.debug("Failed to get the current session", e);
								rej(e);
								return;
							});
					})
					.catch(function (e) {
						logger13.debug("Failed to get the current user", e);
						rej(e);
						return;
					});
			});
		};
		AuthClass2.prototype.userSession = function (user) {
			if (!user) {
				logger13.debug("the user is null");
				return this.rejectAuthError(AuthErrorTypes.NoUserSession);
			}
			var clientMetadata = this._config.clientMetadata;
			return new Promise(function (resolve, reject) {
				logger13.debug("Getting the session from this user:", user);
				user.getSession(
					function (err, session) {
						if (err) {
							logger13.debug("Failed to get the session from user", user);
							reject(err);
							return;
						} else {
							logger13.debug("Succeed to get the user session", session);
							resolve(session);
							return;
						}
					},
					{ clientMetadata }
				);
			});
		};
		AuthClass2.prototype.currentUserCredentials = function () {
			return __awaiter8(this, void 0, void 0, function () {
				var e_7, federatedInfo;
				var _this = this;
				return __generator8(this, function (_a) {
					switch (_a.label) {
						case 0:
							logger13.debug("Getting current user credentials");
							_a.label = 1;
						case 1:
							_a.trys.push([1, 3, , 4]);
							return [4, this._storageSync];
						case 2:
							_a.sent();
							return [3, 4];
						case 3:
							e_7 = _a.sent();
							logger13.debug("Failed to sync cache info into memory", e_7);
							throw e_7;
						case 4:
							federatedInfo = null;
							try {
								federatedInfo = JSON.parse(this._storage.getItem("aws-amplify-federatedInfo"));
							} catch (e) {
								logger13.debug("failed to get or parse item aws-amplify-federatedInfo", e);
							}
							if (federatedInfo) {
								return [2, this.Credentials.refreshFederatedToken(federatedInfo)];
							} else {
								return [
									2,
									this.currentSession()
										.then(function (session) {
											logger13.debug("getting session success", session);
											return _this.Credentials.set(session, "session");
										})
										.catch(function (error3) {
											logger13.debug("getting session failed", error3);
											return _this.Credentials.set(null, "guest");
										}),
								];
							}
							return [2];
					}
				});
			});
		};
		AuthClass2.prototype.currentCredentials = function () {
			logger13.debug("getting current credentials");
			return this.Credentials.get();
		};
		AuthClass2.prototype.verifyUserAttribute = function (user, attr, clientMetadata) {
			if (clientMetadata === void 0) {
				clientMetadata = this._config.clientMetadata;
			}
			return new Promise(function (resolve, reject) {
				user.getAttributeVerificationCode(
					attr,
					{
						onSuccess: function () {
							return resolve();
						},
						onFailure: function (err) {
							return reject(err);
						},
					},
					clientMetadata
				);
			});
		};
		AuthClass2.prototype.verifyUserAttributeSubmit = function (user, attr, code) {
			if (!code) {
				return this.rejectAuthError(AuthErrorTypes.EmptyCode);
			}
			return new Promise(function (resolve, reject) {
				user.verifyAttribute(attr, code, {
					onSuccess: function (data) {
						resolve(data);
						return;
					},
					onFailure: function (err) {
						reject(err);
						return;
					},
				});
			});
		};
		AuthClass2.prototype.verifyCurrentUserAttribute = function (attr) {
			var that = this;
			return that.currentUserPoolUser().then(function (user) {
				return that.verifyUserAttribute(user, attr);
			});
		};
		AuthClass2.prototype.verifyCurrentUserAttributeSubmit = function (attr, code) {
			var that = this;
			return that.currentUserPoolUser().then(function (user) {
				return that.verifyUserAttributeSubmit(user, attr, code);
			});
		};
		AuthClass2.prototype.cognitoIdentitySignOut = function (opts, user) {
			return __awaiter8(this, void 0, void 0, function () {
				var e_8, isSignedInHostedUI;
				var _this = this;
				return __generator8(this, function (_a) {
					switch (_a.label) {
						case 0:
							_a.trys.push([0, 2, , 3]);
							return [4, this._storageSync];
						case 1:
							_a.sent();
							return [3, 3];
						case 2:
							e_8 = _a.sent();
							logger13.debug("Failed to sync cache info into memory", e_8);
							throw e_8;
						case 3:
							isSignedInHostedUI =
								this._oAuthHandler &&
								this._storage.getItem("amplify-signin-with-hostedUI") === "true";
							return [
								2,
								new Promise(function (res, rej) {
									if (opts && opts.global) {
										logger13.debug("user global sign out", user);
										var clientMetadata = _this._config.clientMetadata;
										user.getSession(
											function (err, result) {
												if (err) {
													logger13.debug("failed to get the user session", err);
													return rej(err);
												}
												user.globalSignOut({
													onSuccess: function (data) {
														logger13.debug("global sign out success");
														if (isSignedInHostedUI) {
															_this.oAuthSignOutRedirect(res, rej);
														} else {
															return res();
														}
													},
													onFailure: function (err2) {
														logger13.debug("global sign out failed", err2);
														return rej(err2);
													},
												});
											},
											{ clientMetadata }
										);
									} else {
										logger13.debug("user sign out", user);
										user.signOut(function () {
											if (isSignedInHostedUI) {
												_this.oAuthSignOutRedirect(res, rej);
											} else {
												return res();
											}
										});
									}
								}),
							];
					}
				});
			});
		};
		AuthClass2.prototype.oAuthSignOutRedirect = function (resolve, reject) {
			var isBrowser3 = JS.browserOrNode().isBrowser;
			if (isBrowser3) {
				this.oAuthSignOutRedirectOrReject(reject);
			} else {
				this.oAuthSignOutAndResolve(resolve);
			}
		};
		AuthClass2.prototype.oAuthSignOutAndResolve = function (resolve) {
			this._oAuthHandler.signOut();
			resolve();
		};
		AuthClass2.prototype.oAuthSignOutRedirectOrReject = function (reject) {
			this._oAuthHandler.signOut();
			setTimeout(function () {
				return reject("Signout timeout fail");
			}, 3e3);
		};
		AuthClass2.prototype.signOut = function (opts) {
			return __awaiter8(this, void 0, void 0, function () {
				var e_9, user;
				return __generator8(this, function (_a) {
					switch (_a.label) {
						case 0:
							_a.trys.push([0, 2, , 3]);
							return [4, this.cleanCachedItems()];
						case 1:
							_a.sent();
							return [3, 3];
						case 2:
							e_9 = _a.sent();
							logger13.debug("failed to clear cached items");
							return [3, 3];
						case 3:
							if (!this.userPool) return [3, 7];
							user = this.userPool.getCurrentUser();
							if (!user) return [3, 5];
							return [4, this.cognitoIdentitySignOut(opts, user)];
						case 4:
							_a.sent();
							return [3, 6];
						case 5:
							logger13.debug("no current Cognito user");
							_a.label = 6;
						case 6:
							return [3, 8];
						case 7:
							logger13.debug("no Congito User pool");
							_a.label = 8;
						case 8:
							dispatchAuthEvent2("signOut", this.user, "A user has been signed out");
							this.user = null;
							return [2];
					}
				});
			});
		};
		AuthClass2.prototype.cleanCachedItems = function () {
			return __awaiter8(this, void 0, void 0, function () {
				return __generator8(this, function (_a) {
					switch (_a.label) {
						case 0:
							return [4, this.Credentials.clear()];
						case 1:
							_a.sent();
							return [2];
					}
				});
			});
		};
		AuthClass2.prototype.changePassword = function (
			user,
			oldPassword,
			newPassword,
			clientMetadata
		) {
			var _this = this;
			if (clientMetadata === void 0) {
				clientMetadata = this._config.clientMetadata;
			}
			return new Promise(function (resolve, reject) {
				_this.userSession(user).then(function (session) {
					user.changePassword(
						oldPassword,
						newPassword,
						function (err, data) {
							if (err) {
								logger13.debug("change password failure", err);
								return reject(err);
							} else {
								return resolve(data);
							}
						},
						clientMetadata
					);
				});
			});
		};
		AuthClass2.prototype.forgotPassword = function (username, clientMetadata) {
			if (clientMetadata === void 0) {
				clientMetadata = this._config.clientMetadata;
			}
			if (!this.userPool) {
				return this.rejectNoUserPool();
			}
			if (!username) {
				return this.rejectAuthError(AuthErrorTypes.EmptyUsername);
			}
			var user = this.createCognitoUser(username);
			return new Promise(function (resolve, reject) {
				user.forgotPassword(
					{
						onSuccess: function () {
							resolve();
							return;
						},
						onFailure: function (err) {
							logger13.debug("forgot password failure", err);
							dispatchAuthEvent2(
								"forgotPassword_failure",
								err,
								username + " forgotPassword failed"
							);
							reject(err);
							return;
						},
						inputVerificationCode: function (data) {
							dispatchAuthEvent2(
								"forgotPassword",
								user,
								username + " has initiated forgot password flow"
							);
							resolve(data);
							return;
						},
					},
					clientMetadata
				);
			});
		};
		AuthClass2.prototype.forgotPasswordSubmit = function (
			username,
			code,
			password,
			clientMetadata
		) {
			if (clientMetadata === void 0) {
				clientMetadata = this._config.clientMetadata;
			}
			if (!this.userPool) {
				return this.rejectNoUserPool();
			}
			if (!username) {
				return this.rejectAuthError(AuthErrorTypes.EmptyUsername);
			}
			if (!code) {
				return this.rejectAuthError(AuthErrorTypes.EmptyCode);
			}
			if (!password) {
				return this.rejectAuthError(AuthErrorTypes.EmptyPassword);
			}
			var user = this.createCognitoUser(username);
			return new Promise(function (resolve, reject) {
				user.confirmPassword(
					code,
					password,
					{
						onSuccess: function () {
							dispatchAuthEvent2(
								"forgotPasswordSubmit",
								user,
								username + " forgotPasswordSubmit successful"
							);
							resolve();
							return;
						},
						onFailure: function (err) {
							dispatchAuthEvent2(
								"forgotPasswordSubmit_failure",
								err,
								username + " forgotPasswordSubmit failed"
							);
							reject(err);
							return;
						},
					},
					clientMetadata
				);
			});
		};
		AuthClass2.prototype.currentUserInfo = function () {
			return __awaiter8(this, void 0, void 0, function () {
				var source, user, attributes, userAttrs, credentials, e_10, info, err_1, user;
				return __generator8(this, function (_a) {
					switch (_a.label) {
						case 0:
							source = this.Credentials.getCredSource();
							if (!(!source || source === "aws" || source === "userPool")) return [3, 9];
							return [
								4,
								this.currentUserPoolUser().catch(function (err) {
									return logger13.debug(err);
								}),
							];
						case 1:
							user = _a.sent();
							if (!user) {
								return [2, null];
							}
							_a.label = 2;
						case 2:
							_a.trys.push([2, 8, , 9]);
							return [4, this.userAttributes(user)];
						case 3:
							attributes = _a.sent();
							userAttrs = this.attributesToObject(attributes);
							credentials = null;
							_a.label = 4;
						case 4:
							_a.trys.push([4, 6, , 7]);
							return [4, this.currentCredentials()];
						case 5:
							credentials = _a.sent();
							return [3, 7];
						case 6:
							e_10 = _a.sent();
							logger13.debug(
								"Failed to retrieve credentials while getting current user info",
								e_10
							);
							return [3, 7];
						case 7:
							info = {
								id: credentials ? credentials.identityId : void 0,
								username: user.getUsername(),
								attributes: userAttrs,
							};
							return [2, info];
						case 8:
							err_1 = _a.sent();
							logger13.debug("currentUserInfo error", err_1);
							return [2, {}];
						case 9:
							if (source === "federated") {
								user = this.user;
								return [2, user ? user : {}];
							}
							return [2];
					}
				});
			});
		};
		AuthClass2.prototype.federatedSignIn = function (providerOrOptions, response, user) {
			return __awaiter8(this, void 0, void 0, function () {
				var options,
					provider,
					customState,
					client_id,
					redirect_uri,
					provider,
					loggedInUser,
					token,
					identity_id,
					expires_at,
					credentials,
					currentUser;
				return __generator8(this, function (_a) {
					switch (_a.label) {
						case 0:
							if (!this._config.identityPoolId && !this._config.userPoolId) {
								throw new Error(
									"Federation requires either a User Pool or Identity Pool in config"
								);
							}
							if (typeof providerOrOptions === "undefined") {
								if (this._config.identityPoolId && !this._config.userPoolId) {
									throw new Error(
										"Federation with Identity Pools requires tokens passed as arguments"
									);
								}
							}
							if (
								!(
									isFederatedSignInOptions(providerOrOptions) ||
									isFederatedSignInOptionsCustom(providerOrOptions) ||
									hasCustomState(providerOrOptions) ||
									typeof providerOrOptions === "undefined"
								)
							)
								return [3, 1];
							options = providerOrOptions || {
								provider: CognitoHostedUIIdentityProvider.Cognito,
							};
							provider = isFederatedSignInOptions(options)
								? options.provider
								: options.customProvider;
							customState = isFederatedSignInOptions(options)
								? options.customState
								: options.customState;
							if (this._config.userPoolId) {
								client_id = isCognitoHostedOpts(this._config.oauth)
									? this._config.userPoolWebClientId
									: this._config.oauth.clientID;
								redirect_uri = isCognitoHostedOpts(this._config.oauth)
									? this._config.oauth.redirectSignIn
									: this._config.oauth.redirectUri;
								this._oAuthHandler.oauthSignIn(
									this._config.oauth.responseType,
									this._config.oauth.domain,
									redirect_uri,
									client_id,
									provider,
									customState
								);
							}
							return [3, 4];
						case 1:
							provider = providerOrOptions;
							try {
								loggedInUser = JSON.stringify(
									JSON.parse(this._storage.getItem("aws-amplify-federatedInfo")).user
								);
								if (loggedInUser) {
									logger13.warn(
										"There is already a signed in user: " +
											loggedInUser +
											" in your app.\n																	You should not call Auth.federatedSignIn method again as it may cause unexpected behavior."
									);
								}
							} catch (e) {}
							(token = response.token),
								(identity_id = response.identity_id),
								(expires_at = response.expires_at);
							return [
								4,
								this.Credentials.set(
									{ provider, token, identity_id, user, expires_at },
									"federation"
								),
							];
						case 2:
							credentials = _a.sent();
							return [4, this.currentAuthenticatedUser()];
						case 3:
							currentUser = _a.sent();
							dispatchAuthEvent2(
								"signIn",
								currentUser,
								"A user " + currentUser.username + " has been signed in"
							);
							logger13.debug("federated sign in credentials", credentials);
							return [2, credentials];
						case 4:
							return [2];
					}
				});
			});
		};
		AuthClass2.prototype._handleAuthResponse = function (URL2) {
			return __awaiter8(this, void 0, void 0, function () {
				var currentUrl,
					hasCodeOrError,
					hasTokenOrError,
					_a,
					accessToken,
					idToken,
					refreshToken,
					state,
					session,
					credentials,
					isCustomStateIncluded,
					currentUser,
					customState,
					err_2;
				return __generator8(this, function (_b) {
					switch (_b.label) {
						case 0:
							if (this.oAuthFlowInProgress) {
								logger13.debug("Skipping URL " + URL2 + " current flow in progress");
								return [2];
							}
							_b.label = 1;
						case 1:
							_b.trys.push([1, , 8, 9]);
							this.oAuthFlowInProgress = true;
							if (!this._config.userPoolId) {
								throw new Error("OAuth responses require a User Pool defined in config");
							}
							dispatchAuthEvent2(
								"parsingCallbackUrl",
								{ url: URL2 },
								"The callback url is being parsed"
							);
							currentUrl = URL2 || (JS.browserOrNode().isBrowser ? window.location.href : "");
							hasCodeOrError = !!((0, import_url2.parse)(currentUrl).query || "")
								.split("&")
								.map(function (entry) {
									return entry.split("=");
								})
								.find(function (_a2) {
									var _b2 = __read13(_a2, 1),
										k = _b2[0];
									return k === "code" || k === "error";
								});
							hasTokenOrError = !!((0, import_url2.parse)(currentUrl).hash || "#")
								.substr(1)
								.split("&")
								.map(function (entry) {
									return entry.split("=");
								})
								.find(function (_a2) {
									var _b2 = __read13(_a2, 1),
										k = _b2[0];
									return k === "access_token" || k === "error";
								});
							if (!(hasCodeOrError || hasTokenOrError)) return [3, 7];
							this._storage.setItem("amplify-redirected-from-hosted-ui", "true");
							_b.label = 2;
						case 2:
							_b.trys.push([2, 6, , 7]);
							return [4, this._oAuthHandler.handleAuthResponse(currentUrl)];
						case 3:
							(_a = _b.sent()),
								(accessToken = _a.accessToken),
								(idToken = _a.idToken),
								(refreshToken = _a.refreshToken),
								(state = _a.state);
							session = new CognitoUserSession({
								IdToken: new CognitoIdToken({ IdToken: idToken }),
								RefreshToken: new CognitoRefreshToken({
									RefreshToken: refreshToken,
								}),
								AccessToken: new CognitoAccessToken({
									AccessToken: accessToken,
								}),
							});
							credentials = void 0;
							if (!this._config.identityPoolId) return [3, 5];
							return [4, this.Credentials.set(session, "session")];
						case 4:
							credentials = _b.sent();
							logger13.debug("AWS credentials", credentials);
							_b.label = 5;
						case 5:
							isCustomStateIncluded = /-/.test(state);
							currentUser = this.createCognitoUser(
								session.getIdToken().decodePayload()["cognito:username"]
							);
							currentUser.setSignInUserSession(session);
							if (window && typeof window.history !== "undefined") {
								window.history.replaceState({}, null, this._config.oauth.redirectSignIn);
							}
							dispatchAuthEvent2(
								"signIn",
								currentUser,
								"A user " + currentUser.getUsername() + " has been signed in"
							);
							dispatchAuthEvent2(
								"cognitoHostedUI",
								currentUser,
								"A user " + currentUser.getUsername() + " has been signed in via Cognito Hosted UI"
							);
							if (isCustomStateIncluded) {
								customState = state.split("-").splice(1).join("-");
								dispatchAuthEvent2(
									"customOAuthState",
									urlSafeDecode(customState),
									"State for user " + currentUser.getUsername()
								);
							}
							return [2, credentials];
						case 6:
							err_2 = _b.sent();
							logger13.debug("Error in cognito hosted auth response", err_2);
							if (window && typeof window.history !== "undefined") {
								window.history.replaceState({}, null, this._config.oauth.redirectSignIn);
							}
							dispatchAuthEvent2("signIn_failure", err_2, "The OAuth response flow failed");
							dispatchAuthEvent2(
								"cognitoHostedUI_failure",
								err_2,
								"A failure occurred when returning to the Cognito Hosted UI"
							);
							dispatchAuthEvent2(
								"customState_failure",
								err_2,
								"A failure occurred when returning state"
							);
							return [3, 7];
						case 7:
							return [3, 9];
						case 8:
							this.oAuthFlowInProgress = false;
							return [7];
						case 9:
							return [2];
					}
				});
			});
		};
		AuthClass2.prototype.essentialCredentials = function (credentials) {
			return {
				accessKeyId: credentials.accessKeyId,
				sessionToken: credentials.sessionToken,
				secretAccessKey: credentials.secretAccessKey,
				identityId: credentials.identityId,
				authenticated: credentials.authenticated,
			};
		};
		AuthClass2.prototype.attributesToObject = function (attributes) {
			var _this = this;
			var obj = {};
			if (attributes) {
				attributes.map(function (attribute) {
					if (attribute.Name === "email_verified" || attribute.Name === "phone_number_verified") {
						obj[attribute.Name] = _this.isTruthyString(attribute.Value) || attribute.Value === true;
					} else {
						obj[attribute.Name] = attribute.Value;
					}
				});
			}
			return obj;
		};
		AuthClass2.prototype.isTruthyString = function (value) {
			return typeof value.toLowerCase === "function" && value.toLowerCase() === "true";
		};
		AuthClass2.prototype.createCognitoUser = function (username) {
			var userData = {
				Username: username,
				Pool: this.userPool,
			};
			userData.Storage = this._storage;
			var authenticationFlowType = this._config.authenticationFlowType;
			var user = new CognitoUser(userData);
			if (authenticationFlowType) {
				user.setAuthenticationFlowType(authenticationFlowType);
			}
			return user;
		};
		AuthClass2.prototype._isValidAuthStorage = function (obj) {
			return (
				!!obj &&
				typeof obj.getItem === "function" &&
				typeof obj.setItem === "function" &&
				typeof obj.removeItem === "function" &&
				typeof obj.clear === "function"
			);
		};
		AuthClass2.prototype.noUserPoolErrorHandler = function (config) {
			if (config) {
				if (!config.userPoolId || !config.identityPoolId) {
					return AuthErrorTypes.MissingAuthConfig;
				}
			}
			return AuthErrorTypes.NoConfig;
		};
		AuthClass2.prototype.rejectAuthError = function (type) {
			return Promise.reject(new AuthError(type));
		};
		AuthClass2.prototype.rejectNoUserPool = function () {
			var type = this.noUserPoolErrorHandler(this._config);
			return Promise.reject(new NoUserPoolError(type));
		};
		AuthClass2.prototype.rememberDevice = function () {
			return __awaiter8(this, void 0, void 0, function () {
				var currUser, error_1;
				return __generator8(this, function (_a) {
					switch (_a.label) {
						case 0:
							_a.trys.push([0, 2, , 3]);
							return [4, this.currentUserPoolUser()];
						case 1:
							currUser = _a.sent();
							return [3, 3];
						case 2:
							error_1 = _a.sent();
							logger13.debug("The user is not authenticated by the error", error_1);
							return [2, Promise.reject("The user is not authenticated")];
						case 3:
							currUser.getCachedDeviceKeyAndPassword();
							return [
								2,
								new Promise(function (res, rej) {
									currUser.setDeviceStatusRemembered({
										onSuccess: function (data) {
											res(data);
										},
										onFailure: function (err) {
											if (err.code === "InvalidParameterException") {
												rej(new AuthError(AuthErrorTypes.DeviceConfig));
											} else if (err.code === "NetworkError") {
												rej(new AuthError(AuthErrorTypes.NetworkError));
											} else {
												rej(err);
											}
										},
									});
								}),
							];
					}
				});
			});
		};
		AuthClass2.prototype.forgetDevice = function () {
			return __awaiter8(this, void 0, void 0, function () {
				var currUser, error_2;
				return __generator8(this, function (_a) {
					switch (_a.label) {
						case 0:
							_a.trys.push([0, 2, , 3]);
							return [4, this.currentUserPoolUser()];
						case 1:
							currUser = _a.sent();
							return [3, 3];
						case 2:
							error_2 = _a.sent();
							logger13.debug("The user is not authenticated by the error", error_2);
							return [2, Promise.reject("The user is not authenticated")];
						case 3:
							currUser.getCachedDeviceKeyAndPassword();
							return [
								2,
								new Promise(function (res, rej) {
									currUser.forgetDevice({
										onSuccess: function (data) {
											res(data);
										},
										onFailure: function (err) {
											if (err.code === "InvalidParameterException") {
												rej(new AuthError(AuthErrorTypes.DeviceConfig));
											} else if (err.code === "NetworkError") {
												rej(new AuthError(AuthErrorTypes.NetworkError));
											} else {
												rej(err);
											}
										},
									});
								}),
							];
					}
				});
			});
		};
		AuthClass2.prototype.fetchDevices = function () {
			return __awaiter8(this, void 0, void 0, function () {
				var currUser, error_3;
				return __generator8(this, function (_a) {
					switch (_a.label) {
						case 0:
							_a.trys.push([0, 2, , 3]);
							return [4, this.currentUserPoolUser()];
						case 1:
							currUser = _a.sent();
							return [3, 3];
						case 2:
							error_3 = _a.sent();
							logger13.debug("The user is not authenticated by the error", error_3);
							throw new Error("The user is not authenticated");
						case 3:
							currUser.getCachedDeviceKeyAndPassword();
							return [
								2,
								new Promise(function (res, rej) {
									var cb = {
										onSuccess: function (data) {
											var deviceList = data.Devices.map(function (device) {
												var deviceName =
													device.DeviceAttributes.find(function (_a2) {
														var Name = _a2.Name;
														return Name === "device_name";
													}) || {};
												var deviceInfo = {
													id: device.DeviceKey,
													name: deviceName.Value,
												};
												return deviceInfo;
											});
											res(deviceList);
										},
										onFailure: function (err) {
											if (err.code === "InvalidParameterException") {
												rej(new AuthError(AuthErrorTypes.DeviceConfig));
											} else if (err.code === "NetworkError") {
												rej(new AuthError(AuthErrorTypes.NetworkError));
											} else {
												rej(err);
											}
										},
									};
									currUser.listDevices(MAX_DEVICES, null, cb);
								}),
							];
					}
				});
			});
		};
		return AuthClass2;
	})();
	var Auth = new AuthClass(null);
	Amplify.register(Auth);

	// src/test-app/ConfigInjector.tsx
	var import_react42 = __toModule(require_react());

	// src/test-app/stages/callback-implementations.ts
	var checkSessionCb = () => Auth.currentSession();
	var validateOtpUsernameCb = (username) => Auth.signIn(username);
	var validateOtpCb = (user, password) => Auth.sendCustomChallengeAnswer(user, password);
	var validateUsernameAndPasswordCb = async (username, password) => {
		const user = await Auth.signIn(username, password);
		if (user.challengeName === "NEW_PASSWORD_REQUIRED") {
			return ["NEW_PASSWORD_REQUIRED", user];
		} else {
			return user;
		}
	};
	var validateForceChangePasswordCb = (user, password) => Auth.completeNewPassword(user, password);
	var requestNewPasswordCb = (username) => Auth.forgotPassword(username);
	var submitNewPasswordCb = (username, code, newPassword) =>
		Auth.forgotPasswordSubmit(username, code, newPassword);
	var changePasswordCb = async (oldPassword, newPassword) => {
		const user = await Auth.currentAuthenticatedUser();
		return await Auth.changePassword(user, oldPassword, newPassword);
	};
	var PIN_KEY = "auth_test_app_pin";
	var checkForExistingPinCb = () => {
		const pin = window.localStorage.getItem(PIN_KEY);
		return pin === null ? Promise.resolve() : Promise.reject();
	};
	var validatePinCb = (pin) => {
		const existingPin = window.localStorage.getItem(PIN_KEY);
		return pin === existingPin ? Promise.resolve() : Promise.reject();
	};
	var setNewPinCb = (pin) => {
		window.localStorage.setItem(PIN_KEY, pin);
		return Promise.resolve();
	};
	var resetPinCb = async () => {
		window.localStorage.removeItem(PIN_KEY);
		return await Auth.signOut();
	};
	var logoutCb = async () => {
		return await Auth.signOut();
	};

	// src/test-app/ConfigInjector.tsx
	var CONFIG_STORAGE_KEY;
	(function (CONFIG_STORAGE_KEY3) {
		CONFIG_STORAGE_KEY3["DEVICE_SECURITY_TYPE"] = "auth_test_app_device_security_type";
		CONFIG_STORAGE_KEY3["LOGIN_FLOW_TYPE"] = "auth_test_app_login_flow_type";
		CONFIG_STORAGE_KEY3["DEV_TOOLS_STATUS"] = "auth_test_app_dev_tools_status";
	})(CONFIG_STORAGE_KEY || (CONFIG_STORAGE_KEY = {}));
	var updateCoreConfig = async (configLabel, configKey, configSetting) => {
		const ok = globalThis?.confirm(
			`Are you sure you want to change the "${configLabel}" setting to "${configSetting}"?`
		);
		if (ok) {
			globalThis?.localStorage?.setItem(configKey, configSetting);
			await resetPinCb();
			globalThis?.location?.reload();
		}
		return void 0;
	};
	var nukeStorage = () => {
		const ok = globalThis?.confirm(
			"Are you really sure you want to completely nuke local storage?"
		);
		if (ok) {
			globalThis?.localStorage?.clear();
			globalThis?.location?.reload();
		}
		return void 0;
	};
	var ConfigStateContext = import_react42.default.createContext(null);
	var ConfigUpdateContext = import_react42.default.createContext(null);
	var ConfigInjector = ({
		awsCustomFlowClientConfig: awsCustomFlowClientConfig2,
		awsUsernamePasswordClientConfig: awsUsernamePasswordClientConfig2,
		initialDeviceSecurityType = "NONE",
		initialLoginFlowType = "OTP",
		initialUiLayout = "MOUNT_WHEN_ACTIVE",
		initialDevToolsStatus = "DEV_TOOLS_INACTIVE",
		isInTestMode = false,
		children: children2,
	}) => {
		if (!isInTestMode && (!awsCustomFlowClientConfig2 || !awsUsernamePasswordClientConfig2)) {
			throw new Error("The app is not in test mode: the AWS configs MUST be defined");
		}
		const [deviceSecurityType, setDeviceSecurityType] =
			import_react42.default.useState(initialDeviceSecurityType);
		const [loginFlowType, setLoginFlowType] = import_react42.default.useState(initialLoginFlowType);
		const [devToolsStatus, setDevToolsStatus] = import_react42.default.useState(
			isInTestMode ? "DEV_TOOLS_INACTIVE" : initialDevToolsStatus
		);
		const [uiLayout, setUiLayout] = import_react42.default.useState(
			isInTestMode ? "MOUNT_WHEN_ACTIVE" : initialUiLayout
		);
		const [ready, setReady] = import_react42.default.useState(isInTestMode);
		import_react42.default.useEffect(() => {
			if (!isInTestMode) {
				setReady(false);
				if (globalThis?.localStorage) {
					const storedDeviceSecurityType = globalThis.localStorage.getItem(
						CONFIG_STORAGE_KEY.DEVICE_SECURITY_TYPE
					);
					if (storedDeviceSecurityType == null) {
						localStorage.setItem(CONFIG_STORAGE_KEY.DEVICE_SECURITY_TYPE, deviceSecurityType);
					} else {
						setDeviceSecurityType(storedDeviceSecurityType);
					}
					const storedLoginFlowType = globalThis.localStorage.getItem(
						CONFIG_STORAGE_KEY.LOGIN_FLOW_TYPE
					);
					if (storedLoginFlowType == null) {
						localStorage.setItem(CONFIG_STORAGE_KEY.LOGIN_FLOW_TYPE, loginFlowType);
					} else {
						setLoginFlowType(storedLoginFlowType);
					}
					const storedDevToolsStatus = globalThis.localStorage.getItem(
						CONFIG_STORAGE_KEY.DEV_TOOLS_STATUS
					);
					if (storedDevToolsStatus == null) {
						localStorage.setItem(CONFIG_STORAGE_KEY.DEV_TOOLS_STATUS, devToolsStatus);
					} else {
						setDevToolsStatus(storedDevToolsStatus);
					}
				}
				setReady(true);
			}
		}, [deviceSecurityType, loginFlowType, devToolsStatus, isInTestMode]);
		import_react42.default.useEffect(() => {
			if (!isInTestMode) {
				switch (loginFlowType) {
					case "OTP":
						Auth.configure(awsCustomFlowClientConfig2);
						break;
					case "USERNAME_PASSWORD":
						Auth.configure(awsUsernamePasswordClientConfig2);
						break;
				}
			}
		}, [loginFlowType]);
		return ready
			? /* @__PURE__ */ import_react42.default.createElement(
					ConfigUpdateContext.Provider,
					{
						value: { nukeStorage, updateCoreConfig, setUiLayout },
					},
					/* @__PURE__ */ import_react42.default.createElement(
						ConfigStateContext.Provider,
						{
							value: { loginFlowType, deviceSecurityType, uiLayout, devToolsStatus, isInTestMode },
						},
						children2
					)
			  )
			: null;
	};
	function useConfigState() {
		const configs = import_react42.default.useContext(ConfigStateContext);
		if (!configs)
			throw new Error("useConfigState must be below the ConfigInjector in the component tree");
		return configs;
	}
	function useConfigUpdate() {
		const configSwitchers = import_react42.default.useContext(ConfigUpdateContext);
		if (!configSwitchers)
			throw new Error(
				"useConfigSwitcher must be below the FlowSwitchProvider in the component tree"
			);
		return configSwitchers;
	}

	// src/test-app/ConfigToolbar.tsx
	var import_react43 = __toModule(require_react());
	var import_classnames = __toModule(require_classnames());
	var ConfigToolbar = ({ children: children2, toolbarOpen }) =>
		/* @__PURE__ */ import_react43.default.createElement(
			"section",
			{
				className: (0, import_classnames.default)("config-toolbar__wrapper", {
					"config-toolbar__wrapper--expanded": toolbarOpen,
				}),
			},
			children2
		);
	var ConfigToolbarMenu = ({ active, children: children2 }) =>
		/* @__PURE__ */ import_react43.default.createElement(
			"div",
			{
				className: "config-toolbar__frame",
			},
			/* @__PURE__ */ import_react43.default.createElement(
				"menu",
				{
					className: "config-toolbar",
					id: "configToolbar",
					role: "toolbar",
					hidden: !active,
				},
				children2
			)
		);
	var ConfigToolbarMenuControl = ({ setToolbarOpen, toolbarOpen }) =>
		/* @__PURE__ */ import_react43.default.createElement(
			"button",
			{
				className: (0, import_classnames.default)("config-toolbar__control", {
					"config-toolbar__control--expanded": toolbarOpen,
				}),
				type: "button",
				"aria-controls": "configToolbar",
				"aria-expanded": toolbarOpen,
				"aria-labelledby": "configToolbarControlLabel",
				onClick: () => setToolbarOpen(!toolbarOpen),
			},
			/* @__PURE__ */ import_react43.default.createElement(
				"span",
				{
					className: "config-toolbar__control__icon",
					role: "presentation",
				},
				toolbarOpen ? "\u2715" : "\u2630"
			),
			/* @__PURE__ */ import_react43.default.createElement(
				"span",
				{
					id: "configToolbarControlLabel",
					className: "config-toolbar__control__label",
				},
				toolbarOpen ? "Close" : "Config"
			)
		);
	var ConfigToolbarMenuItem = ({ children: children2, description: description21, label }) =>
		/* @__PURE__ */ import_react43.default.createElement(
			"li",
			{
				className: "config-toolbar__item",
			},
			/* @__PURE__ */ import_react43.default.createElement(
				"h2",
				{
					className: "config-toolbar__item__title",
				},
				label
			),
			/* @__PURE__ */ import_react43.default.createElement(
				"p",
				{
					className: "config-toolbar__item__description",
				},
				description21
			),
			children2
		);
	function ConfigToolbarStateSwitchInput({ label, options, value, callback }) {
		return /* @__PURE__ */ import_react43.default.createElement(
			"fieldset",
			{
				className: "radio-input-group",
			},
			options.map((option) =>
				/* @__PURE__ */ import_react43.default.createElement(
					"label",
					{
						className: (0, import_classnames.default)("radio-input", {
							"radio-input--active": option === value,
						}),
						key: option,
					},
					/* @__PURE__ */ import_react43.default.createElement("input", {
						type: "radio",
						className: "radio-input__control",
						name: label,
						value: option,
						checked: option === value,
						onChange: (e) => {
							const ok = window.confirm(
								`Are you sure you want to change the "${label}" setting to "${option}"?`
							);
							return ok ? callback(e.target.value) : void 0;
						},
					}),
					/* @__PURE__ */ import_react43.default.createElement(
						"span",
						{
							className: "radio-input__label",
						},
						option
					)
				)
			)
		);
	}
	function ConfigToolbarCoreConfigSwitchInput({ label, options, storageKey, value }) {
		const { updateCoreConfig: updateCoreConfig2 } = useConfigUpdate();
		return /* @__PURE__ */ import_react43.default.createElement(
			"fieldset",
			{
				className: "radio-input-group",
			},
			options.map((option) =>
				/* @__PURE__ */ import_react43.default.createElement(
					"label",
					{
						className: (0, import_classnames.default)("radio-input", {
							"radio-input--active": option === value,
						}),
						key: option,
					},
					/* @__PURE__ */ import_react43.default.createElement("input", {
						type: "radio",
						className: "radio-input__control",
						name: label,
						value: option,
						checked: option === value,
						onChange: (e) => {
							updateCoreConfig2(label, storageKey, e.target.value);
						},
					}),
					/* @__PURE__ */ import_react43.default.createElement(
						"span",
						{
							className: "radio-input__label",
						},
						option
					)
				)
			)
		);
	}
	function ConfigToolbarCoreConfigToggleInput({ label, storageKey, on, off, value }) {
		const { updateCoreConfig: updateCoreConfig2 } = useConfigUpdate();
		return /* @__PURE__ */ import_react43.default.createElement(
			"fieldset",
			{
				className: "toggle-input-group",
			},
			/* @__PURE__ */ import_react43.default.createElement(
				"label",
				{
					className: "toggle-input",
				},
				/* @__PURE__ */ import_react43.default.createElement("input", {
					type: "checkbox",
					className: "toggle-input__control",
					name: label,
					checked: value === on,
					onChange: (_) => {
						updateCoreConfig2(label, storageKey, value === on ? off : on);
					},
				}),
				/* @__PURE__ */ import_react43.default.createElement(
					"span",
					{
						className: "toggle-input__label",
					},
					label
				)
			)
		);
	}
	var ConfigToolbarButtonAction = ({ label, action, actionArgs = [] }) =>
		/* @__PURE__ */ import_react43.default.createElement(
			"div",
			{
				className: "button-action-input-group",
			},
			/* @__PURE__ */ import_react43.default.createElement(
				"button",
				{
					className: "button button--primary",
					type: "button",
					onClick: () => action(...actionArgs),
				},
				label
			)
		);
	ConfigToolbar.Menu = ConfigToolbarMenu;
	ConfigToolbar.MenuItem = ConfigToolbarMenuItem;
	ConfigToolbar.MenuControl = ConfigToolbarMenuControl;
	ConfigToolbar.CoreConfigSwitchInput = ConfigToolbarCoreConfigSwitchInput;
	ConfigToolbar.StateSwitchInput = ConfigToolbarStateSwitchInput;
	ConfigToolbar.CoreConfigToggleInput = ConfigToolbarCoreConfigToggleInput;
	ConfigToolbar.ButtonAction = ConfigToolbarButtonAction;

	// src/test-app/stages/Authenticated.tsx
	var import_react45 = __toModule(require_react());
	var import_compress_tag = __toModule(require_dist2());

	// src/test-app/Components.tsx
	var import_classnames2 = __toModule(require_classnames());
	var import_react44 = __toModule(require_react());
	var AuthStageSection = ({ isActive, children: children2 }) =>
		/* @__PURE__ */ import_react44.default.createElement(
			"section",
			{
				className: (0, import_classnames2.default)("auth-stage", {
					"auth-stage--inactive": !isActive,
				}),
			},
			children2
		);
	var AuthStageSectionOverview = ({
		description: description21,
		errorMsg = "",
		isLoading,
		stageId,
	}) =>
		/* @__PURE__ */ import_react44.default.createElement(
			"header",
			{
				className: "auth-stage__header",
				"aria-labelledby": `stage${stageId}`,
				"aria-describedby": `stage${stageId}Desc`,
			},
			/* @__PURE__ */ import_react44.default.createElement(
				"h1",
				{
					className: "auth-stage__header__title",
					id: `stage${stageId}`,
				},
				"State: ",
				stageId
			),
			/* @__PURE__ */ import_react44.default.createElement(
				"dl",
				{
					className: "auth-stage__header__meta metalist",
				},
				/* @__PURE__ */ import_react44.default.createElement(
					"div",
					{
						className: "metalist__property",
					},
					/* @__PURE__ */ import_react44.default.createElement(
						"dt",
						{
							className: "metalist__property-key",
						},
						"Loading?"
					),
					/* @__PURE__ */ import_react44.default.createElement(
						"dd",
						{
							className: "metalist__property-value",
						},
						isLoading.toString()
					)
				),
				/* @__PURE__ */ import_react44.default.createElement(
					"div",
					{
						className: "metalist__property",
					},
					/* @__PURE__ */ import_react44.default.createElement(
						"dt",
						{
							className: "metalist__property-key",
						},
						"Error?"
					),
					/* @__PURE__ */ import_react44.default.createElement(
						"dd",
						{
							className: "metalist__property-value",
						},
						errorMsg || "n/a"
					)
				)
			),
			/* @__PURE__ */ import_react44.default.createElement(
				"p",
				{
					className: "auth-stage__header__description",
					id: `stage${stageId}Desc`,
				},
				description21
			)
		);
	AuthStageSection.Overview = AuthStageSectionOverview;
	var FormElements = ({ children: children2, disabled, error: error3 }) =>
		/* @__PURE__ */ import_react44.default.createElement(
			"fieldset",
			{
				className: (0, import_classnames2.default)("form-elements", {
					"form-elements--error": !!error3,
				}),
				disabled,
			},
			children2
		);
	var FormControls = ({ children: children2 }) =>
		/* @__PURE__ */ import_react44.default.createElement(
			"div",
			{
				className: "form-controls",
			},
			children2
		);
	var FormSubmit = ({ label }) =>
		/* @__PURE__ */ import_react44.default.createElement(
			"button",
			{
				className: "button button--primary",
				type: "submit",
			},
			label
		);
	var FormSecondaryAction = ({ actionCallback, label }) =>
		/* @__PURE__ */ import_react44.default.createElement(
			"button",
			{
				className: "button button--secondary",
				type: "button",
				onClick: () => actionCallback(),
			},
			label
		);
	var InputGroup = ({
		id,
		inputType,
		isActive,
		label,
		validationErrors = [],
		value,
		valueSetter,
	}) =>
		/* @__PURE__ */ import_react44.default.createElement(
			"div",
			{
				className: "input-group",
			},
			/* @__PURE__ */ import_react44.default.createElement(
				"label",
				{
					className: "input-group__label",
					htmlFor: id,
				},
				label
			),
			/* @__PURE__ */ import_react44.default.createElement("input", {
				className: (0, import_classnames2.default)("input-group__input", {
					"input-group__input--error": validationErrors.length > 0 && isActive,
				}),
				id,
				name: id,
				type: inputType,
				value,
				onChange: (e) => valueSetter(e.target.value),
				required: true,
			}),
			/* @__PURE__ */ import_react44.default.createElement(
				"ul",
				null,
				validationErrors.map((err) =>
					/* @__PURE__ */ import_react44.default.createElement(
						"li",
						{
							key: err,
							className: "input-group__validation-error",
						},
						err
					)
				)
			)
		);
	var FormError = ({ error: error3 }) =>
		/* @__PURE__ */ import_react44.default.createElement(
			"p",
			{
				className: "form__error",
			},
			error3
		);
	var Form = ({ children: children2, submitCb, cbParams }) =>
		/* @__PURE__ */ import_react44.default.createElement(
			"form",
			{
				className: "form",
				onSubmit: (e) => {
					e.preventDefault();
					cbParams ? submitCb(...cbParams) : submitCb();
				},
			},
			children2
		);
	Form.Elements = FormElements;
	Form.Error = FormError;
	Form.Controls = FormControls;
	Form.Submit = FormSubmit;
	Form.SecondaryAction = FormSecondaryAction;
	Form.InputGroup = InputGroup;

	// src/test-app/stages/Authenticated.tsx
	var description2 = import_compress_tag.c`
The user is now authenticated. They have navigated login and a token is
stored locally. They have set up/input a PIN (if that is a requirement).
\n\n
From this state, they can log out, change their password (if the login
flow is USERNAME_PASSWORD) and change their PIN (if PIN is a requirement).
`;
	var Authenticated = () => {
		const { isActive, requestLogOut, requestPinChange } = useAuthenticated();
		const { uiLayout, deviceSecurityType } = useConfigState();
		if (uiLayout === "MOUNT_WHEN_ACTIVE" && !isActive) return null;
		return /* @__PURE__ */ import_react45.default.createElement(
			AuthStageSection,
			{
				isActive,
			},
			/* @__PURE__ */ import_react45.default.createElement(AuthStageSection.Overview, {
				stageId: AuthStateId.Authenticated,
				description: description2,
				isLoading: false,
				errorMsg: "n/a",
			}),
			/* @__PURE__ */ import_react45.default.createElement(
				Form,
				{
					submitCb: requestLogOut,
				},
				/* @__PURE__ */ import_react45.default.createElement(
					Form.Elements,
					{
						disabled: !isActive,
					},
					/* @__PURE__ */ import_react45.default.createElement(
						Form.Controls,
						null,
						/* @__PURE__ */ import_react45.default.createElement(Form.Submit, {
							label: "I want to log out!",
						})
					)
				)
			),
			deviceSecurityType === "PIN" &&
				/* @__PURE__ */ import_react45.default.createElement(
					Form,
					{
						submitCb: requestPinChange,
					},
					/* @__PURE__ */ import_react45.default.createElement(
						Form.Elements,
						{
							disabled: !isActive,
						},
						/* @__PURE__ */ import_react45.default.createElement(
							Form.Controls,
							null,
							/* @__PURE__ */ import_react45.default.createElement(Form.Submit, {
								label: "I want to change my PIN!",
							})
						)
					)
				)
		);
	};

	// src/test-app/stages/AuthenticatedChangingPin.tsx
	var import_react47 = __toModule(require_react());
	var import_compress_tag2 = __toModule(require_dist2());
	var description3 = import_compress_tag2.c`
The user is already authenticated, is using PIN security, has requested
that they wish to change their PIN, and they have confirmed their current PIN.
They can now enter a new PIN. Note that they may still cancel the change
request at this point.
`;
	var AuthenticatedChangingPin = () => {
		const {
			error: error3,
			isActive,
			isLoading,
			changePin,
			cancelChangePin,
			validationErrors,
		} = useAuthenticatedChangingPin(setNewPinCb);
		const { uiLayout } = useConfigState();
		const [pin, setPin] = (0, import_react47.useState)("");
		if (uiLayout === "MOUNT_WHEN_ACTIVE" && !isActive) return null;
		return /* @__PURE__ */ import_react47.default.createElement(
			AuthStageSection,
			{
				isActive,
			},
			/* @__PURE__ */ import_react47.default.createElement(AuthStageSection.Overview, {
				stageId: AuthStateId.SubmittingCurrentPin,
				isLoading,
				description: description3,
				errorMsg: error3,
			}),
			/* @__PURE__ */ import_react47.default.createElement(
				Form,
				{
					submitCb: changePin,
					cbParams: [pin],
				},
				/* @__PURE__ */ import_react47.default.createElement(
					Form.Elements,
					{
						disabled: !isActive || isLoading,
						error: error3,
					},
					/* @__PURE__ */ import_react47.default.createElement(Form.InputGroup, {
						id: "otp",
						inputType: "text",
						isActive,
						label: "Enter your PIN",
						validationErrors: validationErrors.newPin,
						value: pin,
						valueSetter: setPin,
					}),
					/* @__PURE__ */ import_react47.default.createElement(
						Form.Controls,
						null,
						/* @__PURE__ */ import_react47.default.createElement(Form.Submit, {
							label: "Submit your new PIN",
						}),
						/* @__PURE__ */ import_react47.default.createElement(Form.SecondaryAction, {
							label: "Cancel PIN change",
							actionCallback: cancelChangePin,
						})
					)
				)
			)
		);
	};

	// src/test-app/stages/AuthenticatedLoggingOut.tsx
	var import_react49 = __toModule(require_react());
	var import_compress_tag3 = __toModule(require_dist2());
	var description4 = import_compress_tag3.c`
This stage describes a situation where the user is authenticated but wishes
to log out. It's split into a separate state to make it easier to handle
cancellation. So from "Authenticated", they indicate they wish to log out. Then
they move to this state, where they can either confirm log out or cancel.
\n\n
In an actual app, this can likely be best implemented via a popup modal.
`;
	var AuthenticatedLoggingOut = () => {
		const {
			error: error3,
			isActive,
			isLoading,
			logOut,
			cancelLogOut,
		} = useAuthenticatedLoggingOut(logoutCb);
		const { uiLayout } = useConfigState();
		if (uiLayout === "MOUNT_WHEN_ACTIVE" && !isActive) return null;
		return /* @__PURE__ */ import_react49.default.createElement(
			AuthStageSection,
			{
				isActive,
			},
			/* @__PURE__ */ import_react49.default.createElement(AuthStageSection.Overview, {
				stageId: AuthStateId.Authenticated,
				isLoading,
				description: description4,
				errorMsg: error3,
			}),
			/* @__PURE__ */ import_react49.default.createElement(
				Form,
				{
					submitCb: logOut,
				},
				/* @__PURE__ */ import_react49.default.createElement(
					Form.Elements,
					{
						disabled: !isActive,
					},
					/* @__PURE__ */ import_react49.default.createElement(
						Form.Controls,
						null,
						/* @__PURE__ */ import_react49.default.createElement(Form.Submit, {
							label: "Log me out!",
						}),
						/* @__PURE__ */ import_react49.default.createElement(Form.SecondaryAction, {
							label: "Cancel log out",
							actionCallback: cancelLogOut,
						})
					)
				)
			)
		);
	};

	// src/test-app/stages/AuthenticatedPasswordChangeSuccess.tsx
	var import_react51 = __toModule(require_react());
	var import_compress_tag4 = __toModule(require_dist2());
	var description5 = import_compress_tag4.c`
The user is authenticated using USERNAME_PASSWORD flow and has successfully
changed their password.
\n\n
This state exists to make it easier to communicate this information to the user,
and to make it easier [from a navigation structure point of view] for the
user to return to the place in the app from where they started the password
change process. In an actual app, this could simply be a popup or flash,
either timed or with a confirm button.
`;
	var AuthenticatedPasswordChangeSuccess = () => {
		const { isActive, confirmPasswordChange } = useAuthenticatedPasswordChangeSuccess();
		const { uiLayout } = useConfigState();
		if (uiLayout === "MOUNT_WHEN_ACTIVE" && !isActive) return null;
		return /* @__PURE__ */ import_react51.default.createElement(
			AuthStageSection,
			{
				isActive,
			},
			/* @__PURE__ */ import_react51.default.createElement(AuthStageSection.Overview, {
				stageId: AuthStateId.AuthenticatedPasswordChangeSuccess,
				isLoading: false,
				description: description5,
				errorMsg: "n/a",
			}),
			/* @__PURE__ */ import_react51.default.createElement(
				Form,
				{
					submitCb: confirmPasswordChange,
				},
				/* @__PURE__ */ import_react51.default.createElement(
					Form.Elements,
					{
						disabled: !isActive,
					},
					/* @__PURE__ */ import_react51.default.createElement(
						Form.Controls,
						null,
						/* @__PURE__ */ import_react51.default.createElement(Form.Submit, {
							label: "Confirm",
						})
					)
				)
			)
		);
	};

	// src/test-app/stages/AuthenticatedPinChangeSuccess.tsx
	var import_react53 = __toModule(require_react());
	var import_compress_tag5 = __toModule(require_dist2());
	var description6 = import_compress_tag5.c`
The user is authenticated using PIN device security and has successfully
changed their PIN.
\n\n
This state exists to make it easier to communicate this information to the user,
and to make it easier [from a navigation structure point of view] for the
user to return to the place in the app from where they started the password
change process. In an actual app, this could simply be a popup or flash,
either timed or with a confirm button.
`;
	var AuthenticatedPinChangeSuccess = () => {
		const { isActive, confirmPinChange } = useAuthenticatedPinChangeSuccess();
		const { uiLayout } = useConfigState();
		if (uiLayout === "MOUNT_WHEN_ACTIVE" && !isActive) return null;
		return /* @__PURE__ */ import_react53.default.createElement(
			AuthStageSection,
			{
				isActive,
			},
			/* @__PURE__ */ import_react53.default.createElement(AuthStageSection.Overview, {
				stageId: AuthStateId.AuthenticatedPasswordChangeSuccess,
				isLoading: false,
				description: description6,
				errorMsg: "n/a",
			}),
			/* @__PURE__ */ import_react53.default.createElement(
				Form,
				{
					submitCb: confirmPinChange,
				},
				/* @__PURE__ */ import_react53.default.createElement(
					Form.Elements,
					{
						disabled: !isActive,
					},
					/* @__PURE__ */ import_react53.default.createElement(
						Form.Controls,
						null,
						/* @__PURE__ */ import_react53.default.createElement(Form.Submit, {
							label: "Confirm",
						})
					)
				)
			)
		);
	};

	// src/test-app/stages/AuthenticatedValidatingPin.tsx
	var import_react55 = __toModule(require_react());
	var import_compress_tag6 = __toModule(require_dist2());
	var description7 = import_compress_tag6.c`
The user is already authenticated, is using PIN security, and has requested
that they wish to change their PIN. The user needs to validate their
current PIN before setting a new one. Note that they may cancel this request
at this point.
`;
	var AuthenticatedValidatingPin = () => {
		const {
			error: error3,
			isActive,
			isLoading,
			validatePin,
			cancelChangePin,
			validationErrors,
		} = useAuthenticatedValidatingPin(validatePinCb);
		const { uiLayout } = useConfigState();
		const [pin, setPin] = (0, import_react55.useState)("");
		if (uiLayout === "MOUNT_WHEN_ACTIVE" && !isActive) return null;
		return /* @__PURE__ */ import_react55.default.createElement(
			AuthStageSection,
			{
				isActive,
			},
			/* @__PURE__ */ import_react55.default.createElement(AuthStageSection.Overview, {
				stageId: AuthStateId.SubmittingCurrentPin,
				isLoading,
				description: description7,
				errorMsg: error3,
			}),
			/* @__PURE__ */ import_react55.default.createElement(
				Form,
				{
					submitCb: validatePin,
					cbParams: [pin],
				},
				/* @__PURE__ */ import_react55.default.createElement(
					Form.Elements,
					{
						disabled: !isActive || isLoading,
						error: error3,
					},
					/* @__PURE__ */ import_react55.default.createElement(Form.InputGroup, {
						id: "otp",
						inputType: "text",
						isActive,
						label: "Enter your PIN",
						validationErrors: validationErrors.pin,
						value: pin,
						valueSetter: setPin,
					}),
					/* @__PURE__ */ import_react55.default.createElement(
						Form.Controls,
						null,
						/* @__PURE__ */ import_react55.default.createElement(Form.Submit, {
							label: "Submit your PIN",
						}),
						/* @__PURE__ */ import_react55.default.createElement(Form.SecondaryAction, {
							label: "Cancel change PIN",
							actionCallback: cancelChangePin,
						})
					)
				)
			)
		);
	};

	// src/test-app/stages/CheckingForPin.tsx
	var import_react57 = __toModule(require_react());
	var import_compress_tag7 = __toModule(require_dist2());
	var description8 = import_compress_tag7.c`
First stage of device security. The application using the
authentication system has to check to see if there is a stored
PIN. If there isn't, they'll have to set a new one. If there is,
they can move on to device security (if that is active).
\n\n
In a real app, this stage should occur automatically and be hidden
from the user.
`;
	var CheckingForPin = () => {
		const {
			isActive,
			isLoading,
			checkForExistingPin,
			error: error3,
		} = useCheckingForPin(checkForExistingPinCb);
		const { uiLayout } = useConfigState();
		if (uiLayout === "MOUNT_WHEN_ACTIVE" && !isActive) return null;
		return /* @__PURE__ */ import_react57.default.createElement(
			AuthStageSection,
			{
				isActive,
			},
			/* @__PURE__ */ import_react57.default.createElement(AuthStageSection.Overview, {
				stageId: AuthStateId.CheckingForPin,
				isLoading,
				description: description8,
				errorMsg: error3,
			}),
			/* @__PURE__ */ import_react57.default.createElement(
				Form,
				{
					submitCb: checkForExistingPin,
				},
				/* @__PURE__ */ import_react57.default.createElement(
					Form.Elements,
					{
						disabled: !isActive || isLoading,
					},
					/* @__PURE__ */ import_react57.default.createElement(
						Form.Controls,
						null,
						/* @__PURE__ */ import_react57.default.createElement(Form.Submit, {
							label: "Check for existing PIN",
						})
					)
				)
			)
		);
	};

	// src/test-app/stages/CheckingForSession.tsx
	var import_react59 = __toModule(require_react());
	var import_compress_tag8 = __toModule(require_dist2());
	var description9 = import_compress_tag8.c`
Always the first stage of authentication. The application using the
authentication system has to check to see if there is a stored
token that indicates the user is already authenticated. If there
isn't, they'll have to log in. If there is, they can move on to
device security (if that is active).
\n\n
In a real app, this stage should occur automatically and be hidden
from the user.
`;
	var CheckingForSession = () => {
		const {
			isActive,
			isLoading,
			checkSession,
			error: error3,
		} = useCheckingForSession(checkSessionCb);
		const { uiLayout } = useConfigState();
		if (uiLayout === "MOUNT_WHEN_ACTIVE" && !isActive) return null;
		return /* @__PURE__ */ import_react59.default.createElement(
			AuthStageSection,
			{
				isActive,
			},
			/* @__PURE__ */ import_react59.default.createElement(AuthStageSection.Overview, {
				stageId: AuthStateId.CheckingForSession,
				isLoading,
				description: description9,
				errorMsg: error3,
			}),
			/* @__PURE__ */ import_react59.default.createElement(
				Form,
				{
					submitCb: checkSession,
				},
				/* @__PURE__ */ import_react59.default.createElement(
					Form.Elements,
					{
						disabled: !isActive || isLoading,
					},
					/* @__PURE__ */ import_react59.default.createElement(
						Form.Controls,
						null,
						/* @__PURE__ */ import_react59.default.createElement(Form.Submit, {
							label: "Check Session",
						})
					)
				)
			)
		);
	};

	// src/test-app/stages/SubmittingCurrentPin.tsx
	var import_react61 = __toModule(require_react());
	var import_compress_tag9 = __toModule(require_dist2());
	var description10 = import_compress_tag9.c`
If PIN device security is active, if the user is already authenticated,
i.e. they have a valid authentication token already present, then they
are taken directly to this stage. If they have forgotten their PIN, they
may request a reset, but otherwise they will be fully authenticated and
allowed access to the app on successful submission.
`;
	var SubmittingCurrentPin = () => {
		const {
			error: error3,
			isActive,
			isLoading,
			validatePin,
			requestPinReset,
			validationErrors,
		} = useSubmittingCurrentPin(validatePinCb);
		const { uiLayout } = useConfigState();
		const [pin, setPin] = (0, import_react61.useState)("");
		if (uiLayout === "MOUNT_WHEN_ACTIVE" && !isActive) return null;
		return /* @__PURE__ */ import_react61.default.createElement(
			AuthStageSection,
			{
				isActive,
			},
			/* @__PURE__ */ import_react61.default.createElement(AuthStageSection.Overview, {
				stageId: AuthStateId.SubmittingCurrentPin,
				isLoading,
				description: description10,
				errorMsg: error3,
			}),
			/* @__PURE__ */ import_react61.default.createElement(
				Form,
				{
					submitCb: validatePin,
					cbParams: [pin],
				},
				/* @__PURE__ */ import_react61.default.createElement(
					Form.Elements,
					{
						disabled: !isActive || isLoading,
						error: error3,
					},
					/* @__PURE__ */ import_react61.default.createElement(Form.InputGroup, {
						id: "otp",
						inputType: "text",
						isActive,
						label: "Enter your PIN",
						validationErrors: validationErrors.pin,
						value: pin,
						valueSetter: setPin,
					}),
					/* @__PURE__ */ import_react61.default.createElement(
						Form.Controls,
						null,
						/* @__PURE__ */ import_react61.default.createElement(Form.Submit, {
							label: "Submit your PIN",
						}),
						/* @__PURE__ */ import_react61.default.createElement(Form.SecondaryAction, {
							label: "Forgotten PIN",
							actionCallback: requestPinReset,
						})
					)
				)
			)
		);
	};

	// src/test-app/stages/SubmittingForceChangePassword.tsx
	var import_react63 = __toModule(require_react());
	var import_compress_tag10 = __toModule(require_dist2());
	var description11 = import_compress_tag10.c`
The user is authenticated on USERNAME_PASSWORD flow, has successfully submitted
their username and password, but this is either the first time they have
authenticated against their account, or their password has been reset by an admin.
In this case, the password they currently have is temporary (it will have been
sent to them in plaintext), so they must change it. Once it has been changeded,
they are fully authenticated.
\n\n
In an actual app, it may be provident to double up on the new password input
("enter your new password"/"confirm your new password") to ensure that the user
has correctly entered the password they wanted.
`;
	var SubmittingForceChangePassword = () => {
		const {
			error: error3,
			isLoading,
			isActive,
			validationErrors,
			validateNewPassword,
		} = useSubmittingForceChangePassword(validateForceChangePasswordCb);
		const { uiLayout } = useConfigState();
		const [password, setPassword] = import_react63.default.useState("");
		if (uiLayout === "MOUNT_WHEN_ACTIVE" && !isActive) return null;
		return /* @__PURE__ */ import_react63.default.createElement(
			AuthStageSection,
			{
				isActive,
			},
			/* @__PURE__ */ import_react63.default.createElement(AuthStageSection.Overview, {
				stageId: AuthStateId.SubmittingOtpUsername,
				isLoading,
				description: description11,
				errorMsg: error3,
			}),
			/* @__PURE__ */ import_react63.default.createElement(
				Form,
				{
					submitCb: validateNewPassword,
					cbParams: [password],
				},
				/* @__PURE__ */ import_react63.default.createElement(
					Form.Elements,
					{
						disabled: isActive,
					},
					/* @__PURE__ */ import_react63.default.createElement(Form.InputGroup, {
						id: "password",
						inputType: "text",
						isActive,
						label: "Enter your password",
						validationErrors: validationErrors["password"],
						value: password,
						valueSetter: setPassword,
					}),
					/* @__PURE__ */ import_react63.default.createElement(
						Form.Controls,
						null,
						/* @__PURE__ */ import_react63.default.createElement(Form.Submit, {
							label: "Submit new password",
						})
					)
				)
			)
		);
	};

	// src/test-app/stages/SubmittingNewPin.tsx
	var import_react65 = __toModule(require_react());
	var import_compress_tag11 = __toModule(require_dist2());
	var description12 = import_compress_tag11.c`
If PIN device security is active, when the user logs in they have to set a
new PIN. The PIN is wiped every time the user logs out, so this stage is
reached every time they go through the login flow.
\n\n
In the actual app, it may be provident to double up on the new PIN input
("enter your new PIN"/"confirm your new PIN") to ensure that the user
has correctly entered the PIN they wanted.
`;
	var SubmittingNewPin = () => {
		const {
			error: error3,
			isActive,
			isLoading,
			setNewPin,
			validationErrors,
		} = useSubmittingNewPin(setNewPinCb);
		const { uiLayout } = useConfigState();
		const [pin, setPin] = (0, import_react65.useState)("");
		if (uiLayout === "MOUNT_WHEN_ACTIVE" && !isActive) return null;
		return /* @__PURE__ */ import_react65.default.createElement(
			AuthStageSection,
			{
				isActive,
			},
			/* @__PURE__ */ import_react65.default.createElement(AuthStageSection.Overview, {
				stageId: AuthStateId.SubmittingNewPin,
				isLoading,
				description: description12,
				errorMsg: error3,
			}),
			/* @__PURE__ */ import_react65.default.createElement(
				Form,
				{
					submitCb: setNewPin,
					cbParams: [pin],
				},
				/* @__PURE__ */ import_react65.default.createElement(
					Form.Elements,
					{
						disabled: !isActive || isLoading,
						error: error3,
					},
					/* @__PURE__ */ import_react65.default.createElement(Form.InputGroup, {
						id: "otp",
						inputType: "text",
						isActive,
						label: "Enter your new PIN",
						validationErrors: validationErrors.pin,
						value: pin,
						valueSetter: setPin,
					}),
					/* @__PURE__ */ import_react65.default.createElement(
						Form.Controls,
						null,
						/* @__PURE__ */ import_react65.default.createElement(Form.Submit, {
							label: "Submit new PIN",
						})
					)
				)
			)
		);
	};

	// src/test-app/stages/SubmittingOtpUsername.tsx
	var import_react67 = __toModule(require_react());
	var import_compress_tag12 = __toModule(require_dist2());
	var description13 = import_compress_tag12.c`
OTP authentication flow requires that the user submit their username
foirst, in the form of an email address, which triggers the backend
to send them a one-time password (submission of which is the next stage).
`;
	var SubmittingOtpUsername = () => {
		const {
			error: error3,
			isActive,
			isLoading,
			validateUsername,
			validationErrors,
		} = useSubmittingOtpUsername(validateOtpUsernameCb);
		const { uiLayout } = useConfigState();
		const [username, setUsername] = import_react67.default.useState("");
		if (uiLayout === "MOUNT_WHEN_ACTIVE" && !isActive) return null;
		return /* @__PURE__ */ import_react67.default.createElement(
			AuthStageSection,
			{
				isActive,
			},
			/* @__PURE__ */ import_react67.default.createElement(AuthStageSection.Overview, {
				stageId: AuthStateId.SubmittingOtpUsername,
				isLoading,
				description: description13,
				errorMsg: error3,
			}),
			/* @__PURE__ */ import_react67.default.createElement(
				Form,
				{
					submitCb: validateUsername,
					cbParams: [username],
				},
				/* @__PURE__ */ import_react67.default.createElement(
					Form.Elements,
					{
						disabled: !isActive || isLoading,
						error: error3,
					},
					/* @__PURE__ */ import_react67.default.createElement(Form.InputGroup, {
						id: "otpUsername",
						inputType: "email",
						isActive,
						label: "Enter an email address",
						validationErrors: validationErrors.username,
						value: username,
						valueSetter: setUsername,
					}),
					/* @__PURE__ */ import_react67.default.createElement(
						Form.Controls,
						null,
						/* @__PURE__ */ import_react67.default.createElement(Form.Submit, {
							label: "Submit username",
						})
					)
				)
			)
		);
	};

	// src/test-app/stages/SubmittingOtp.tsx
	var import_react69 = __toModule(require_react());
	var import_compress_tag13 = __toModule(require_dist2());
	var description14 = import_compress_tag13.c`
A user on OTP login flow has submitted their username, and have been sent
a one-time password. From this stage, submitting that code successfully will
result in them being authenticated. They may also move back to the username
input stage should they have mis-entered something (or just wish to resend
the code).
`;
	var SubmittingOtp = () => {
		const {
			error: error3,
			isActive,
			isLoading,
			validateOtp,
			goBack,
			validationErrors,
		} = useSubmittingOtp(validateOtpCb);
		const { uiLayout } = useConfigState();
		const [otp, setOtp] = (0, import_react69.useState)("");
		if (uiLayout === "MOUNT_WHEN_ACTIVE" && !isActive) return null;
		return /* @__PURE__ */ import_react69.default.createElement(
			AuthStageSection,
			{
				isActive,
			},
			/* @__PURE__ */ import_react69.default.createElement(AuthStageSection.Overview, {
				stageId: AuthStateId.SubmittingOtp,
				isLoading,
				description: description14,
				errorMsg: error3,
			}),
			/* @__PURE__ */ import_react69.default.createElement(
				Form,
				{
					submitCb: validateOtp,
					cbParams: [otp],
				},
				/* @__PURE__ */ import_react69.default.createElement(
					Form.Elements,
					{
						disabled: !isActive || isLoading,
						error: error3,
					},
					/* @__PURE__ */ import_react69.default.createElement(Form.InputGroup, {
						id: "otp",
						inputType: "text",
						isActive,
						label: "Enter the password you were sent",
						validationErrors: validationErrors.password,
						value: otp,
						valueSetter: setOtp,
					}),
					/* @__PURE__ */ import_react69.default.createElement(
						Form.Controls,
						null,
						/* @__PURE__ */ import_react69.default.createElement(Form.Submit, {
							label: "Submit OTP",
						}),
						/* @__PURE__ */ import_react69.default.createElement(Form.SecondaryAction, {
							label: "Re-enter username",
							actionCallback: goBack,
						})
					)
				)
			)
		);
	};

	// src/test-app/stages/SubmittingUsernameAndPassword.tsx
	var import_react71 = __toModule(require_react());
	var import_compress_tag14 = __toModule(require_dist2());
	var description15 = import_compress_tag14.c`
USERNAME_PASSWORD authentication flow requires that the user submit
their username and their password. If they have forgotten the password,
they also have the option to request a reset. If this is the first time
they have logged into the account (or an admin has reset their password),
the next stage is to change the temporary password they have been assigned,
but otherwise they are authenticated if this stage is passed successfully.
`;
	var SubmittingUsernameAndPassword = () => {
		const {
			error: error3,
			isActive,
			isLoading,
			validateUsernameAndPassword,
			forgottenPassword,
			validationErrors,
		} = useSubmittingUsernameAndPassword(validateUsernameAndPasswordCb);
		const { uiLayout } = useConfigState();
		const [username, setUsername] = import_react71.default.useState("");
		const [password, setPassword] = import_react71.default.useState("");
		if (uiLayout === "MOUNT_WHEN_ACTIVE" && !isActive) return null;
		return /* @__PURE__ */ import_react71.default.createElement(
			AuthStageSection,
			{
				isActive,
			},
			/* @__PURE__ */ import_react71.default.createElement(AuthStageSection.Overview, {
				stageId: AuthStateId.SubmittingUsernameAndPassword,
				isLoading,
				description: description15,
				errorMsg: error3,
			}),
			/* @__PURE__ */ import_react71.default.createElement(
				Form,
				{
					submitCb: validateUsernameAndPassword,
					cbParams: [username],
				},
				/* @__PURE__ */ import_react71.default.createElement(
					Form.Elements,
					{
						disabled: !isActive || isLoading,
						error: error3,
					},
					/* @__PURE__ */ import_react71.default.createElement(Form.InputGroup, {
						id: "username",
						inputType: "email",
						isActive,
						label: "Enter an email address",
						validationErrors: validationErrors.username,
						value: username,
						valueSetter: setUsername,
					}),
					/* @__PURE__ */ import_react71.default.createElement(Form.InputGroup, {
						id: "password",
						inputType: "password",
						isActive,
						label: "Enter password",
						validationErrors: validationErrors.password,
						value: password,
						valueSetter: setPassword,
					}),
					/* @__PURE__ */ import_react71.default.createElement(
						Form.Controls,
						null,
						/* @__PURE__ */ import_react71.default.createElement(Form.SecondaryAction, {
							label: "Forgotten Password",
							actionCallback: forgottenPassword,
						}),
						/* @__PURE__ */ import_react71.default.createElement(Form.Submit, {
							label: "Log in",
						})
					)
				)
			)
		);
	};

	// src/test-app/stages/AuthenticatedChangingPassword.tsx
	var import_react73 = __toModule(require_react());
	var import_compress_tag15 = __toModule(require_dist2());
	var description16 = import_compress_tag15.c`
The user is already authenticated on USERNAME_PASSWORD flow and has requested
that they wish to change their password.
\n\n
They may cancel this request at this point, but if they continue, the method
provided by the state hook accepts the current password and the new password.
In the actual app, it may be provident to double up on the new password input
("enter your new password"/"confirm your new password") to ensure that the user
has correctly entered the password they wanted.
`;
	var AuthenticatedChangingPassword = () => {
		const {
			error: error3,
			isActive,
			isLoading,
			submitNewPassword,
			cancelChangePassword,
			validationErrors,
		} = useAuthenticatedChangingPassword(changePasswordCb);
		const { uiLayout } = useConfigState();
		const [oldPassword, setOldPassword] = import_react73.default.useState("");
		const [newPassword, setNewPassword] = import_react73.default.useState("");
		if (uiLayout === "MOUNT_WHEN_ACTIVE" && !isActive) return null;
		return /* @__PURE__ */ import_react73.default.createElement(
			AuthStageSection,
			{
				isActive,
			},
			/* @__PURE__ */ import_react73.default.createElement(AuthStageSection.Overview, {
				stageId: AuthStateId.AuthenticatedChangingPassword,
				isLoading,
				description: description16,
				errorMsg: error3,
			}),
			/* @__PURE__ */ import_react73.default.createElement(
				Form,
				{
					submitCb: submitNewPassword,
					cbParams: [oldPassword],
				},
				/* @__PURE__ */ import_react73.default.createElement(
					Form.Elements,
					{
						disabled: !isActive,
					},
					/* @__PURE__ */ import_react73.default.createElement(Form.InputGroup, {
						id: "oldPassword",
						inputType: "text",
						isActive,
						label: "Enter your current password",
						validationErrors: validationErrors["oldPassword"],
						value: oldPassword,
						valueSetter: setOldPassword,
					}),
					/* @__PURE__ */ import_react73.default.createElement(Form.InputGroup, {
						id: "newPassword",
						inputType: "text",
						isActive,
						label: "Enter your new password",
						validationErrors: validationErrors["newPassword"],
						value: newPassword,
						valueSetter: setNewPassword,
					}),
					/* @__PURE__ */ import_react73.default.createElement(
						Form.Controls,
						null,
						/* @__PURE__ */ import_react73.default.createElement(Form.Submit, {
							label: "Change your password",
						}),
						/* @__PURE__ */ import_react73.default.createElement(Form.SecondaryAction, {
							label: "Cancel password change",
							actionCallback: cancelChangePassword,
						})
					)
				)
			)
		);
	};

	// src/test-app/stages/ForgottenPasswordRequestingReset.tsx
	var import_react75 = __toModule(require_react());
	var import_compress_tag16 = __toModule(require_dist2());
	var description17 = import_compress_tag16.c`
If an unauthenticated user on USERNAME_PASSWORD flow has forgotten their
password, they can request a reset. The reset process is split into three
stages -- request, submit and success. If they continue by submitting their
username (i.e. their email address), then a code will be sent to them that
will allow them to pass the next stage (submission). Once the user has submitted
their email, they cannot back out -- the password will have been reset on the
system, so this stage also allows them a chance to cancel.
`;
	var ForgottenPasswordRequestingReset = () => {
		const {
			error: error3,
			isActive,
			isLoading,
			cancelResetPasswordRequest,
			requestNewPassword,
			validationErrors,
		} = useForgottenPasswordRequestingReset(requestNewPasswordCb);
		const { uiLayout } = useConfigState();
		const [username, setUsername] = import_react75.default.useState("");
		if (uiLayout === "MOUNT_WHEN_ACTIVE" && !isActive) return null;
		return /* @__PURE__ */ import_react75.default.createElement(
			AuthStageSection,
			{
				isActive,
			},
			/* @__PURE__ */ import_react75.default.createElement(AuthStageSection.Overview, {
				stageId: AuthStateId.ForgottenPasswordRequestingReset,
				isLoading,
				description: description17,
				errorMsg: error3,
			}),
			/* @__PURE__ */ import_react75.default.createElement(
				Form,
				{
					submitCb: requestNewPassword,
					cbParams: [username],
				},
				/* @__PURE__ */ import_react75.default.createElement(
					Form.Elements,
					{
						disabled: !isActive || isLoading,
						error: error3,
					},
					/* @__PURE__ */ import_react75.default.createElement(Form.InputGroup, {
						id: "username",
						inputType: "email",
						isActive,
						label: "Enter an email address",
						validationErrors: validationErrors.username,
						value: username,
						valueSetter: setUsername,
					}),
					/* @__PURE__ */ import_react75.default.createElement(
						Form.Controls,
						null,
						/* @__PURE__ */ import_react75.default.createElement(Form.SecondaryAction, {
							label: "Cancel",
							actionCallback: cancelResetPasswordRequest,
						}),
						/* @__PURE__ */ import_react75.default.createElement(Form.Submit, {
							label: "Submit",
						})
					)
				)
			)
		);
	};

	// src/test-app/stages/ForgottenPasswordSubmittingReset.tsx
	var import_react77 = __toModule(require_react());
	var import_compress_tag17 = __toModule(require_dist2());
	var description18 = import_compress_tag17.c`
An unauthenticated user on USERNAME_PASSWORD flow has forgotten their
password and have requested a reset. A code has been sent to them that
will allow them to pass this stage. So they need to enter the code plus
the new password. Note  that unfortunately, due to the way the AWS
libraries that interface with Cognito work, the code input and the new
password input cannot be split across stages -- the UI for this stage
must handle both.
\n\n
In the actual app, it may be provident to double up on the new password input
("enter your new password"/"confirm your new password") to ensure that the user
has correctly entered the password they wanted.
`;
	var ForgottenPasswordSubmittingReset = () => {
		const {
			error: error3,
			isActive,
			isLoading,
			validationErrors,
			submitNewPassword,
			cancelPasswordReset,
		} = useForgottenPasswordSubmittingReset(submitNewPasswordCb);
		const { uiLayout } = useConfigState();
		const [code, setCode] = import_react77.default.useState("");
		const [newPassword, setNewPassword] = import_react77.default.useState("");
		if (uiLayout === "MOUNT_WHEN_ACTIVE" && !isActive) return null;
		return /* @__PURE__ */ import_react77.default.createElement(
			AuthStageSection,
			{
				isActive,
			},
			/* @__PURE__ */ import_react77.default.createElement(AuthStageSection.Overview, {
				stageId: AuthStateId.ForgottenPasswordSubmittingReset,
				isLoading,
				description: description18,
				errorMsg: error3,
			}),
			/* @__PURE__ */ import_react77.default.createElement(
				Form,
				{
					submitCb: submitNewPassword,
					cbParams: [code, newPassword],
				},
				/* @__PURE__ */ import_react77.default.createElement(
					Form.Elements,
					{
						disabled: !isActive || isLoading,
						error: error3,
					},
					/* @__PURE__ */ import_react77.default.createElement(Form.InputGroup, {
						id: "resetCode",
						inputType: "text",
						isActive,
						label: "Enter the reset code you have been sent",
						validationErrors: validationErrors["code"],
						value: code,
						valueSetter: setCode,
					}),
					/* @__PURE__ */ import_react77.default.createElement(Form.InputGroup, {
						id: "newPassword",
						inputType: "text",
						isActive,
						label: "Enter your new password",
						validationErrors: validationErrors["newPassword"],
						value: newPassword,
						valueSetter: setNewPassword,
					}),
					/* @__PURE__ */ import_react77.default.createElement(
						Form.Controls,
						null,
						/* @__PURE__ */ import_react77.default.createElement(Form.Submit, {
							label: "Submit reset code and new password",
						}),
						/* @__PURE__ */ import_react77.default.createElement(Form.SecondaryAction, {
							label: "Resend code",
							actionCallback: cancelPasswordReset,
						})
					)
				)
			)
		);
	};

	// src/test-app/stages/ForgottenPasswordResetSuccess.tsx
	var import_react79 = __toModule(require_react());
	var import_compress_tag18 = __toModule(require_dist2());
	var description19 = import_compress_tag18.c`
The user is unauthenticated using USERNAME_PASSWORD flow and has successfully
changed their password after indicating that they had forgotten their existing
password.
\n\n
This state exists to make it easier to communicate this information to the user.
In an actual app, this could simply be a popup or flash, either timed or
with a confirm button.
`;
	var ForgottenPasswordResetSuccess = () => {
		const { isActive, confirmPasswordReset } = useForgottenPasswordResetSuccess();
		const { uiLayout } = useConfigState();
		if (uiLayout === "MOUNT_WHEN_ACTIVE" && !isActive) return null;
		return /* @__PURE__ */ import_react79.default.createElement(
			AuthStageSection,
			{
				isActive,
			},
			/* @__PURE__ */ import_react79.default.createElement(AuthStageSection.Overview, {
				stageId: AuthStateId.ForgottenPasswordResetSuccess,
				isLoading: false,
				description: description19,
				errorMsg: "n/a",
			}),
			/* @__PURE__ */ import_react79.default.createElement(
				Form,
				{
					submitCb: confirmPasswordReset,
				},
				/* @__PURE__ */ import_react79.default.createElement(
					Form.Elements,
					{
						disabled: !isActive,
					},
					/* @__PURE__ */ import_react79.default.createElement(
						Form.Controls,
						null,
						/* @__PURE__ */ import_react79.default.createElement(Form.Submit, {
							label: "Confirm",
						})
					)
				)
			)
		);
	};

	// src/test-app/stages/ForgottenPinRequestingReset.tsx
	var import_react81 = __toModule(require_react());
	var import_compress_tag19 = __toModule(require_dist2());
	var description20 = import_compress_tag19.c`
If an unauthenticated user using PIN security has forgotten their PIN,
they can request a reset. If they choose to continue, then the existing
PIN is cleared. However, for security, they are also logged out, so
the auth flow moves back to the start and they must reauthenticate in full.
Once the user has agreed to reset, they cannot back out, so this stage also
allows them a chance to cancel.
`;
	var ForgottenPinRequestingReset = () => {
		const {
			error: error3,
			isActive,
			isLoading,
			resetPin,
			cancelResetPin,
		} = useForgottenPinRequestingReset(resetPinCb);
		const { uiLayout } = useConfigState();
		if (uiLayout === "MOUNT_WHEN_ACTIVE" && !isActive) return null;
		return /* @__PURE__ */ import_react81.default.createElement(
			AuthStageSection,
			{
				isActive,
			},
			/* @__PURE__ */ import_react81.default.createElement(AuthStageSection.Overview, {
				stageId: AuthStateId.ForgottenPinRequestingReset,
				isLoading,
				description: description20,
				errorMsg: error3,
			}),
			/* @__PURE__ */ import_react81.default.createElement(
				Form,
				{
					submitCb: resetPin,
				},
				/* @__PURE__ */ import_react81.default.createElement(
					Form.Elements,
					{
						disabled: !isActive || isLoading,
						error: error3,
					},
					/* @__PURE__ */ import_react81.default.createElement(
						Form.Controls,
						null,
						/* @__PURE__ */ import_react81.default.createElement(Form.SecondaryAction, {
							label: "Cancel reset",
							actionCallback: cancelResetPin,
						}),
						/* @__PURE__ */ import_react81.default.createElement(Form.Submit, {
							label: "Reset PIN",
						})
					)
				)
			)
		);
	};

	// src/test-app/App.tsx
	var awsCustomFlowClientConfig = {
		region: "eu-west-1",
		userPoolId: "eu-west-1_ALKzWpcBv",
		userPoolWebClientId: "141rcrvnpc2vktj9mbjrmok0l4",
		authenticationFlowType: "CUSTOM_AUTH",
	};
	var awsUsernamePasswordClientConfig = {
		region: "eu-west-1",
		userPoolId: "eu-west-1_ALKzWpcBv",
		userPoolWebClientId: "6puatgps30nq9rf1f3aqoo84t5",
		authenticationFlowType: "USER_PASSWORD_AUTH",
	};
	var AuthenticationConfig = () => {
		const { loginFlowType, deviceSecurityType, uiLayout, devToolsStatus } = useConfigState();
		const { setUiLayout, nukeStorage: nukeStorage2 } = useConfigUpdate();
		const [toolbarOpen, setToolbarOpen] = import_react83.default.useState(false);
		return /* @__PURE__ */ import_react83.default.createElement(
			ConfigToolbar,
			{
				toolbarOpen,
			},
			/* @__PURE__ */ import_react83.default.createElement(ConfigToolbar.MenuControl, {
				toolbarOpen,
				setToolbarOpen,
			}),
			/* @__PURE__ */ import_react83.default.createElement(
				ConfigToolbar.Menu,
				{
					active: toolbarOpen,
				},
				/* @__PURE__ */ import_react83.default.createElement(
					ConfigToolbar.MenuItem,
					{
						label: "Set login flow",
						description: "Do you want to demo OTP login flow or username and password flow?",
					},
					/* @__PURE__ */ import_react83.default.createElement(
						ConfigToolbar.CoreConfigSwitchInput,
						{
							label: "Set login flow",
							storageKey: CONFIG_STORAGE_KEY.LOGIN_FLOW_TYPE,
							options: ["OTP", "USERNAME_PASSWORD"],
							value: loginFlowType,
						}
					)
				),
				/* @__PURE__ */ import_react83.default.createElement(
					ConfigToolbar.MenuItem,
					{
						label: "Set device security type",
						description: "Do you want to demo PIN security or turn off device security (NONE)?",
					},
					/* @__PURE__ */ import_react83.default.createElement(
						ConfigToolbar.CoreConfigSwitchInput,
						{
							label: "Device security",
							storageKey: CONFIG_STORAGE_KEY.DEVICE_SECURITY_TYPE,
							options: ["NONE", "PIN"],
							value: deviceSecurityType,
						}
					)
				),
				/* @__PURE__ */ import_react83.default.createElement(
					ConfigToolbar.MenuItem,
					{
						label: "UI Layout",
						description:
							"You can view the demo with either all stages visible on-screen, or you can make it closer to real-life usage by having each stage unmount when inactive.",
					},
					/* @__PURE__ */ import_react83.default.createElement(ConfigToolbar.StateSwitchInput, {
						label: "UI Layout",
						options: ["SHOW_ALL_STAGES", "MOUNT_WHEN_ACTIVE"],
						value: uiLayout,
						callback: setUiLayout,
					})
				),
				/* @__PURE__ */ import_react83.default.createElement(
					ConfigToolbar.MenuItem,
					{
						label: "Use dev tools",
						description: "Turn the XState inspector on or off.",
					},
					/* @__PURE__ */ import_react83.default.createElement(
						ConfigToolbar.CoreConfigToggleInput,
						{
							label: "Use dev tools",
							storageKey: CONFIG_STORAGE_KEY.DEV_TOOLS_STATUS,
							on: "DEV_TOOLS_ACTIVE",
							off: "DEV_TOOLS_INACTIVE",
							value: devToolsStatus,
						}
					)
				),
				/* @__PURE__ */ import_react83.default.createElement(
					ConfigToolbar.MenuItem,
					{
						label: "Nuke local storage",
						description: "Do you want to nuke local storage and reload the app?",
					},
					/* @__PURE__ */ import_react83.default.createElement(ConfigToolbar.ButtonAction, {
						label: "nuke",
						action: nukeStorage2,
					})
				)
			)
		);
	};
	var AuthenticationOverview = () => {
		const { deviceSecurityType, loginFlowType, uiLayout, isInTestMode } = useConfigState();
		const { currentState } = useAuthProvider();
		return /* @__PURE__ */ import_react83.default.createElement(
			"header",
			{
				role: "banner",
				"aria-labelledby": "bannerTitle",
				"aria-describedby": "bannerMeta",
				className: "auth-app__header",
			},
			/* @__PURE__ */ import_react83.default.createElement(
				"h1",
				{
					id: "bannerTitle",
					className: "auth-app__header__title",
				},
				"Authentication"
			),
			/* @__PURE__ */ import_react83.default.createElement(
				"dl",
				{
					id: "bannerMeta",
					className: "auth-app__header__meta metalist",
				},
				/* @__PURE__ */ import_react83.default.createElement(
					"div",
					{
						className: "metalist__property",
					},
					/* @__PURE__ */ import_react83.default.createElement(
						"dt",
						{
							className: "metalist__property-key",
						},
						"Current state ID:"
					),
					/* @__PURE__ */ import_react83.default.createElement(
						"dd",
						{
							className: "metalist__property-value",
						},
						currentState
					)
				),
				/* @__PURE__ */ import_react83.default.createElement(
					"div",
					{
						className: "metalist__property",
					},
					/* @__PURE__ */ import_react83.default.createElement(
						"dt",
						{
							className: "metalist__property-key",
						},
						"Login flow type:"
					),
					/* @__PURE__ */ import_react83.default.createElement(
						"dd",
						{
							className: "metalist__property-value",
						},
						loginFlowType
					)
				),
				/* @__PURE__ */ import_react83.default.createElement(
					"div",
					{
						className: "metalist__property",
					},
					/* @__PURE__ */ import_react83.default.createElement(
						"dt",
						{
							className: "metalist__property-key",
						},
						"Device Security Type:"
					),
					/* @__PURE__ */ import_react83.default.createElement(
						"dd",
						{
							className: "metalist__property-value",
						},
						deviceSecurityType
					)
				),
				/* @__PURE__ */ import_react83.default.createElement(
					"div",
					{
						className: "metalist__property",
					},
					/* @__PURE__ */ import_react83.default.createElement(
						"dt",
						{
							className: "metalist__property-key",
						},
						"Display preferences:"
					),
					/* @__PURE__ */ import_react83.default.createElement(
						"dd",
						{
							className: "metalist__property-value",
						},
						uiLayout
					)
				)
			),
			!isInTestMode &&
				/* @__PURE__ */ import_react83.default.createElement(AuthenticationConfig, null)
		);
	};
	var Authentication = () => {
		const { loginFlowType, deviceSecurityType, uiLayout, devToolsStatus } = useConfigState();
		return /* @__PURE__ */ import_react83.default.createElement(
			AuthProvider,
			{
				loginFlowType,
				deviceSecurityType,
				useDevTools: devToolsStatus === "DEV_TOOLS_ACTIVE",
			},
			/* @__PURE__ */ import_react83.default.createElement(
				"div",
				{
					className: (0, import_classnames3.default)("auth-app", {
						"auth-app--all-stages-layout": uiLayout === "SHOW_ALL_STAGES",
						"auth-app--single-stage-layout": uiLayout === "MOUNT_WHEN_ACTIVE",
					}),
				},
				/* @__PURE__ */ import_react83.default.createElement(AuthenticationOverview, null),
				/* @__PURE__ */ import_react83.default.createElement(
					"main",
					{
						className: "auth-stages",
					},
					/* @__PURE__ */ import_react83.default.createElement(CheckingForSession, null),
					/* @__PURE__ */ import_react83.default.createElement(SubmittingOtpUsername, null),
					/* @__PURE__ */ import_react83.default.createElement(SubmittingOtp, null),
					/* @__PURE__ */ import_react83.default.createElement(SubmittingUsernameAndPassword, null),
					/* @__PURE__ */ import_react83.default.createElement(SubmittingForceChangePassword, null),
					/* @__PURE__ */ import_react83.default.createElement(
						ForgottenPasswordRequestingReset,
						null
					),
					/* @__PURE__ */ import_react83.default.createElement(
						ForgottenPasswordSubmittingReset,
						null
					),
					/* @__PURE__ */ import_react83.default.createElement(ForgottenPasswordResetSuccess, null),
					/* @__PURE__ */ import_react83.default.createElement(CheckingForPin, null),
					/* @__PURE__ */ import_react83.default.createElement(SubmittingCurrentPin, null),
					/* @__PURE__ */ import_react83.default.createElement(SubmittingNewPin, null),
					/* @__PURE__ */ import_react83.default.createElement(ForgottenPinRequestingReset, null),
					/* @__PURE__ */ import_react83.default.createElement(Authenticated, null),
					/* @__PURE__ */ import_react83.default.createElement(AuthenticatedChangingPassword, null),
					/* @__PURE__ */ import_react83.default.createElement(
						AuthenticatedPasswordChangeSuccess,
						null
					),
					/* @__PURE__ */ import_react83.default.createElement(AuthenticatedValidatingPin, null),
					/* @__PURE__ */ import_react83.default.createElement(AuthenticatedChangingPin, null),
					/* @__PURE__ */ import_react83.default.createElement(AuthenticatedPinChangeSuccess, null),
					/* @__PURE__ */ import_react83.default.createElement(AuthenticatedLoggingOut, null)
				)
			)
		);
	};
	var App = () =>
		/* @__PURE__ */ import_react83.default.createElement(
			ConfigInjector,
			{
				awsCustomFlowClientConfig,
				awsUsernamePasswordClientConfig,
			},
			/* @__PURE__ */ import_react83.default.createElement(Authentication, null)
		);

	// src/test-app/index.tsx
	var appRoot = document.getElementById("root");
	inspect({
		url: "https://statecharts.io/inspect",
		iframe: false,
	});
	import_react_dom.default.render(
		/* @__PURE__ */ import_react84.default.createElement(
			import_react84.default.StrictMode,
			null,
			/* @__PURE__ */ import_react84.default.createElement(App, null)
		),
		appRoot
	);
})();
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/*!
  Copyright (c) 2018 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/*!
 * Copyright 2016 Amazon.com,
 * Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Amazon Software License (the "License").
 * You may not use this file except in compliance with the
 * License. A copy of the License is located at
 *
 *     http://aws.amazon.com/asl/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, express or implied. See the License
 * for the specific language governing permissions and
 * limitations under the License.
 */
/*!
 * JavaScript Cookie v2.2.1
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/*!
 * cookie
 * Copyright(c) 2012-2014 Roman Shtylman
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/*! https://mths.be/punycode v1.3.2 by @mathias */
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
/**
 * @file **compress-tag** | Template literal tag to remove excess
 * whitespace and newlines from strings.
 * @author Ian Sanders
 * @copyright 2019 Ian Sanders
 * @license MIT
 */
/**
 * @file **unraw - errors.ts** | Error messages used by `unraw`.
 * @author Ian Sanders
 * @copyright 2019 Ian Sanders
 * @license MIT
 */
/**
 * @file **unraw** | Convert raw escape sequences to their respective characters
 * (undo `String.raw`).
 * @author Ian Sanders
 * @copyright 2019 Ian Sanders
 * @license MIT
 */
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
/** @license React v0.20.2
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v0.20.2
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
//# sourceMappingURL=index.js.map
