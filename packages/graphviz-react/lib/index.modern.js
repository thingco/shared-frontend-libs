import{steppedXAxisValues as e,xAxisAnnotations as t,steppedYAxisValues as n,yAxisAnnotations as i,xAxis as s,xAxisSteps as o,yAxis as r,yAxisSteps as a,linePoints as x,verticalLineBarPoints as l,horizontalLineBarPoints as y,dotPoints as c,px as p,py as u,verticalGridlines as $,horizontalGridLines as d,verticalLineFullHeight as A,horizontalLineFullWidth as g,createGraph as m}from"@thingco/graphviz";import f from"react";function b(){return(b=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e}).apply(this,arguments)}const k=f.createContext(null);function v(){const e=f.useContext(k);if(!k)throw new Error("Graph values can only be accessed from within a graph context provider.");if(!e)throw new Error("Graph provider value is null: cannot access anything from it, please configure it correctly.");return e}const S={fontSize:3,fontFamily:"sans-serif",fontWeight:"bold",textAnchor:"middle"},z={fill:"none",stroke:"black",strokeLinecap:"round",strokeWidth:1},M={fill:"none",stroke:"black",strokeLinecap:"round",strokeWidth:1},w={fill:"black",stroke:"white",strokeWidth:1},V={stroke:"none",fill:"grey",opacity:.2},O={stroke:"grey",vectorEffect:"non-scaling-stroke",opacity:"0.5"},P={appearance:"none",background:"transparent",opacity:0,display:"block",width:"100%",height:"100%"},C=b({},P,{WebkitAppearance:"slider-vertical"}),D={fill:"none",stroke:"black",strokeWidth:2},L=({children:e,xAxisSize:t,xAxisScale:n,xAxisMax:i,xAxisMin:s,xAxisStep:o,xAxisValues:r,yAxisSize:a,yAxisScale:x,yAxisMax:l,yAxisMin:y,yAxisStep:c,yAxisValues:p})=>{const u=m({xAxisSize:t,xAxisScale:n,xAxisMax:i,xAxisMin:s,xAxisStep:o,xAxisValues:r,yAxisSize:a,yAxisScale:x,yAxisMax:l,yAxisMin:y,yAxisStep:c,yAxisValues:p});return h(k.Provider,{value:u},e)};L.Canvas=({children:e,padding:t=10,preserveAspectRatio:n="xMidYMid",style:i={}})=>{const s=v(),o=0-("number"==typeof t?t:t.left),r=0-("number"==typeof t?t:t.top),a=s.xAxisSize+("number"==typeof t?2*t:t.right+t.left),x=s.yAxisSize+("number"==typeof t?2*t:t.top+t.bottom);return console.log("padding: ",JSON.stringify(t),"vbHeight: ",x),h("svg",{style:i,viewBox:`${o} ${r} ${a} ${x}`,preserveAspectRatio:n},e)},L.XAxisAnnotations=({style:n={},annotations:i,offsetY:s=4,position:o="bottom"})=>{var r;n=b({},S,n);const a=v();return i=null!=(r=i)?r:e(a),h("g",{style:n,"data-componentid":"x-axis-annotations"},t(a,o).map(({x:e,y:t},n)=>h("text",{key:`${e}${t}${n}`,x:e,y:t-s,"data-componentid":`x-axis-annotation-${e}${t}${n}`},i&&i[n])))},L.YAxisAnnotations=({style:e={},offsetX:t=2,offsetY:s=0,annotations:o})=>{var r;e=b({},S,e);const a=v();return o=null!=(r=o)?r:n(a),h("g",{"data-componentid":"y-axis-annotations"},i(a).map(({x:n,y:i},r)=>h("text",{key:`${n}${i}${r}`,x:n+t,y:i,dy:s,style:b({},e,{textAnchor:"end"}),"data-componentid":`y-axis-annotation-${n}${i}${r}`},o&&o[r])))},L.DataLine=({style:e={}})=>{e=b({},M,e);const t=v();return h("polyline",{style:e,points:x(t)})},L.DataDots=({style:e={},r:t=2})=>{e=b({},w,e);const n=v(),i=c(n).map(({x:e,y:n},i)=>h("circle",{key:`${e}${n}${i}`,cx:e,cy:n,r:t}));return h("g",{style:e},i)},L.VerticalLineBars=({style:e={}})=>{e=b({},M,e);const t=v(),n=l(t).map(({x1:e,x2:t,y1:n,y2:i},s)=>h("line",{key:`${e}${t}${n}${i}${s}`,x1:e,x2:t,y1:n,y2:i}));return h("g",{style:e},n)},L.HorizontalLineBars=({style:e={}})=>{e=b({},M,e);const t=v(),n=y(t).map(({x1:e,x2:t,y1:n,y2:i},s)=>h("line",{key:`${e}${t}${n}${i}${s}`,x1:e,x2:t,y1:n,y2:i}));return h("g",{style:e},n)},L.AreaFillXAxis=({style:e={},coordinateOverride:t})=>{e=b({},V,e);let n=v();t&&(n=b({},n,{yAxisValues:t}));const i=`${p(n,0)},${u(n,0)} ${x(n)} ${p(n,n.xAxisMax)},${u(n,0)}`;return h("polygon",{style:e,points:i})},L.AreaFillYAxis=({style:e={},coordinateOverride:t})=>{e=b({},V,e);let n=v();t&&(n=b({},n,{xAxisValues:t}));const i=`${p(n,0)},${u(n,0)} ${x(n)} ${p(n,0)},${u(n,n.yAxisMax)}`;return h("polygon",{style:e,points:i})},L.XAxis=({style:e=z,showSteps:t=!0,position:n="bottom"})=>{const i=v(),{x1:r,x2:a,y1:x,y2:l}=s(i,n),y=t?o(i,n):null;return h("g",{"data-componentid":"x-axis"},h("line",{style:e,x1:r,x2:a,y1:x,y2:l}),null==y?void 0:y.map(({x1:t,x2:n,y1:i,y2:s},o)=>h("line",{key:`${t}${n}${i}${s}${o}`,style:e,x1:t,x2:n,y1:i,y2:s})))},L.XAxisGridLines=({style:e={}})=>{e=b({},O,e);const t=v();return h("g",{"data-componentid":"x-axis-gridlines"},$(t).map(({x1:t,x2:n,y1:i,y2:s},o)=>h("line",{key:`${t}${n}${i}${s}${o}`,x1:t,x2:n,y1:i,y2:s,style:e,"data-componentid":`x-axis-gridline-${t}${n}${i}${s}${o}`})))},L.YAxis=({style:e=z,showSteps:t=!0})=>{const n=v(),{x1:i,x2:s,y1:o,y2:x}=r(n),l=t?a(n):null;return h("g",{"data-componentid":"y-axis"},h("line",{style:e,x1:i,x2:s,y1:o,y2:x}),null==l?void 0:l.map(({x1:t,x2:n,y1:i,y2:s},o)=>h("line",{key:`${t}${n}${i}${s}${o}`,style:e,x1:t,x2:n,y1:i,y2:s})))},L.YAxisGridLines=({style:e={}})=>{e=b({},O,e);const t=v();return h("g",{"data-componentid":"y-axis-gridlines"},d(t).map(({x1:t,x2:n,y1:i,y2:s},o)=>h("line",{key:`${t}${n}${i}${s}${o}`,x1:t,x2:n,y1:i,y2:s,style:e,"data-componentid":`y-axis-gridline-${t}${n}${i}${s}${o}`})))},L.ScrubberHorizontal=({thumbStyle:e={},currentDataPointIndex:t,setCurrentDataPointIndex:n,startPosition:i="zero"})=>{e=b({},D,e);const s=v();let o;switch(i){case"left":o=s.xAxisMin;break;case"zero":o=0;break;case"right":o=s.xAxisMax}const{x1:r,x2:a,y1:x,y2:l}=A(s,o);return h(f.Fragment,null,h("g",{transform:`translate(${p(s,s.xAxisValues[t])})`},h("line",{style:e,x1:r,x2:a,y1:x,y2:l})),h("foreignObject",{x:0,y:0,width:s.xAxisSize,height:s.yAxisSize,"data-componentid":"scrubbercontrol"},h("input",{onChange:e=>n(+e.target.value),type:"range",min:0,max:s.xAxisValues.length-1,step:1,style:P,value:t})))},L.ScrubberVertical=({thumbStyle:e={},currentDataPointIndex:t,setCurrentDataPointIndex:n,startPosition:i="zero"})=>{e=b({},D,e);const s=v();let o;switch(i){case"top":o=s.yAxisMax;break;case"zero":o=0;break;case"bottom":o=s.xAxisMin}const{x1:r,x2:a,y1:x,y2:l}=g(s,o),y=f.useRef(null);return f.useEffect(()=>{null!=y&&null!=y.current&&y.current.setAttribute("orient","vertical")},[]),h(f.Fragment,null,h("g",{transform:`translate(0 ${u(s,s.yAxisValues[t])})`},h("line",{style:e,x1:r,x2:a,y1:x,y2:l})),h("foreignObject",{x:0,y:0,width:s.xAxisSize,height:s.yAxisSize,"data-componentid":"scrubbercontrol"},h("input",{ref:y,onChange:e=>n(+e.target.value),type:"range",min:0,max:s.yAxisValues.length-1,step:1,style:C,value:t})))};export{L as Graph,v as useGraph};
//# sourceMappingURL=index.modern.js.map
